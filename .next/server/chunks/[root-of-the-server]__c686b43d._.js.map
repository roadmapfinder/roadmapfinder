{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/api/generate-project/geminiService.js"],"sourcesContent":["// lib/services/geminiService.js\n\n/**\n * Gemini AI Service\n * Handles all Gemini API interactions for project generation,\n * prompt creation, and response processing\n */\n\n// Generate the comprehensive prompt for Gemini AI\nexport function generateProjectPrompt(projectIdea) {\n  return `\nYou are an expert full-stack software architect, AI consultant, and technical project planner.\nA user has described their project idea in natural language:\n\n\"${projectIdea}\"\n\nYour task is to deeply analyze this idea — whether it's a simple utility, a full SaaS platform, an AI-driven application, a blockchain dApp, or a UI/UX design system.\nProvide a comprehensive, language-agnostic project breakdown in structured JSON format.\n\n⚠️ You must:\n\nSupport all popular tech stacks: JavaScript/TypeScript, Python, Java, Dart/Flutter, Swift, Solidity, R, Rust, Go, etc.\n\nInclude recommendations for AI/ML, data analytics, blockchain, and design-oriented projects where relevant\n\nRecommend only modern, well-maintained, and production-ready tools and libraries (2024–2025)\n\nEnsure every step is practical, structured, and developer-actionable\n\n**ENHANCED ROADMAP REQUIREMENTS:**\n- Each phase should include detailed terminal commands for package installation\n- Provide actual code snippets for setup and configuration\n- Include file structure examples\n- Add estimated time duration for each phase\n- Include prerequisites and dependencies\n- Provide troubleshooting tips for common issues\n- Add testing commands and validation steps\n\nReturn ONLY a valid JSON object (no extra text), using the following format:\n\n{\n  \"mindMap\": {\n    \"name\": \"Project Name\",\n    \"children\": [\n      {\n        \"name\": \"Major Component 1\",\n        \"children\": [\n          { \"name\": \"Sub-component 1.1\" },\n          { \"name\": \"Sub-component 1.2\" }\n        ]\n      }\n    ]\n  },\n  \"roadmap\": [\n    {\n      \"phase\": \"Phase 1: Project Setup & Environment\",\n      \"description\": \"Set up the development environment and project structure\",\n      \"duration\": \"2-4 hours\",\n      \"difficulty\": \"Beginner\",\n      \"prerequisites\": [\"Node.js v18+\", \"Git\", \"VS Code\"],\n      \"steps\": [\n        {\n          \"title\": \"Initialize Project\",\n          \"description\": \"Create project directory and initialize package.json\",\n          \"type\": \"terminal\",\n          \"commands\": [\n            \"mkdir my-project && cd my-project\",\n            \"npm init -y\",\n            \"git init\"\n          ]\n        },\n        {\n          \"title\": \"Install Dependencies\",\n          \"description\": \"Install core packages and development tools\",\n          \"type\": \"terminal\",\n          \"commands\": [\n            \"npm install next react react-dom\",\n            \"npm install -D tailwindcss postcss autoprefixer\"\n          ]\n        }\n      ],\n      \"troubleshooting\": [\n        \"If Node.js version errors occur, use nvm to switch versions\"\n      ],\n      \"validation\": [\n        \"Project starts without errors\",\n        \"localhost:3000 loads successfully\"\n      ]\n    }\n  ],\n  \"techStack\": {\n    \"frontend\": [\"React\", \"Next.js\", \"Tailwind CSS\"],\n    \"backend\": [\"Node.js\", \"Express\"],\n    \"database\": [\"PostgreSQL\"],\n    \"devops\": [\"Docker\", \"GitHub Actions\"],\n    \"deployment\": [\"Vercel\", \"Railway\"]\n  },\n  \"packages\": {\n    \"npm\": [\"next\", \"react\", \"axios\", \"tailwindcss\"],\n    \"python\": [],\n    \"tools\": [\"VS Code\", \"Postman\", \"Figma\", \"Git\"]\n  },\n  \"documentation\": [\n    {\n      \"title\": \"Next.js Documentation\",\n      \"url\": \"https://nextjs.org/docs\",\n      \"description\": \"Official Next.js guide and API docs\"\n    }\n  ],\n  \"quickStart\": {\n    \"description\": \"Get started with this project in under 5 minutes\",\n    \"commands\": [\n      \"git clone <repository-url>\",\n      \"npm install\",\n      \"npm run dev\"\n    ],\n    \"notes\": [\n      \"Make sure to update environment variables\",\n      \"Visit http://localhost:3000 to see your project\"\n    ]\n  }\n}`;\n}\n\n// Configure Gemini API request body\nexport function createGeminiRequestBody(prompt) {\n  return {\n    contents: [{\n      parts: [{\n        text: prompt\n      }]\n    }],\n    generationConfig: {\n      temperature: 0.7,\n      topK: 40,\n      topP: 0.95,\n      maxOutputTokens: 8192,\n      responseMimeType: \"text/plain\"\n    },\n    safetySettings: [\n      {\n        category: \"HARM_CATEGORY_HARASSMENT\",\n        threshold: \"BLOCK_MEDIUM_AND_ABOVE\"\n      },\n      {\n        category: \"HARM_CATEGORY_HATE_SPEECH\",\n        threshold: \"BLOCK_MEDIUM_AND_ABOVE\"\n      },\n      {\n        category: \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\n        threshold: \"BLOCK_MEDIUM_AND_ABOVE\"\n      },\n      {\n        category: \"HARM_CATEGORY_DANGEROUS_CONTENT\",\n        threshold: \"BLOCK_MEDIUM_AND_ABOVE\"\n      }\n    ]\n  };\n}\n\n// Make request to Gemini API\nexport async function callGeminiAPI(requestBody) {\n  if (!process.env.GEMINI_API_KEY) {\n    throw new Error('GEMINI_API_KEY is not set');\n  }\n\n  console.log('Making request to Gemini API for project generation...');\n\n  const response = await fetch(\n    `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent?key=${process.env.GEMINI_API_KEY}`,\n    {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(requestBody),\n    }\n  );\n\n  if (!response.ok) {\n    const errorData = await response.json().catch(() => null);\n    console.error('Gemini API error:', response.status, errorData);\n\n    if (response.status === 401) {\n      throw new Error('Invalid API key configuration');\n    } else if (response.status === 429) {\n      throw new Error('API rate limit exceeded. Please try again in a few minutes.');\n    } else if (response.status === 403) {\n      throw new Error('API quota exceeded or access denied.');\n    }\n\n    throw new Error('Failed to connect to Gemini API');\n  }\n\n  return response.json();\n}\n\n// Process and validate Gemini API response\nexport function processGeminiResponse(data) {\n  console.log('Gemini API response received');\n\n  if (!data.candidates || data.candidates.length === 0) {\n    throw new Error('No response from AI model');\n  }\n\n  const content = data.candidates[0].content.parts[0].text;\n\n  // Enhanced JSON extraction\n  let jsonMatch = content.match(/\\{[\\s\\S]*\\}/);\n  if (!jsonMatch) {\n    const codeBlockMatch = content.match(/```(?:json)?\\s*(\\{[\\s\\S]*\\})\\s*```/);\n    if (codeBlockMatch) {\n      jsonMatch = [codeBlockMatch[1]];\n    }\n  }\n\n  if (!jsonMatch) {\n    console.error('No JSON found in AI response');\n    throw new Error('Invalid response format from AI service');\n  }\n\n  let projectData;\n  try {\n    projectData = JSON.parse(jsonMatch[0]);\n  } catch (parseError) {\n    console.error('JSON parsing error:', parseError);\n    throw new Error('Failed to parse AI response');\n  }\n\n  // Validate and fill required fields\n  return validateAndFillProjectData(projectData, data);\n}\n\n// Validate project data and fill missing fields with defaults\nexport function validateAndFillProjectData(projectData, geminiResponseData) {\n  const requiredFields = ['mindMap', 'roadmap', 'techStack', 'packages', 'documentation'];\n\n  for (const field of requiredFields) {\n    if (!projectData[field]) {\n      projectData[field] = getDefaultValue(field);\n    }\n  }\n\n  // Add metadata\n  projectData.metadata = {\n    model: 'gemini-2.0-flash-exp',\n    timestamp: new Date().toISOString(),\n    tokens_used: geminiResponseData.usageMetadata?.totalTokenCount || 'N/A'\n  };\n\n  return projectData;\n}\n\n// Helper function for default values\nexport function getDefaultValue(field) {\n  const defaults = {\n    mindMap: { name: \"Project\", children: [] },\n    roadmap: [],\n    techStack: {},\n    packages: { npm: [], tools: [] },\n    documentation: [],\n    youtubeResources: [],\n    quickStart: {\n      description: \"Quick setup commands\",\n      commands: [\"npm install\", \"npm run dev\"],\n      notes: [\"Check the documentation for detailed setup\"]\n    }\n  };\n  return defaults[field] || null;\n}\n\n// Main function to generate project using Gemini AI\nexport async function generateProjectWithGemini(projectIdea) {\n  // Generate the prompt\n  const prompt = generateProjectPrompt(projectIdea);\n\n  // Create request body\n  const requestBody = createGeminiRequestBody(prompt);\n\n  // Make API call\n  const geminiResponse = await callGeminiAPI(requestBody);\n\n  // Process and validate response\n  const projectData = processGeminiResponse(geminiResponse);\n\n  return projectData;\n}\n\n// Error handler for Gemini-specific errors\nexport function handleGeminiError(error) {\n  console.error('Gemini service error:', error);\n\n  if (error.name === 'AbortError') {\n    return { error: 'Request timeout. Please try again.', status: 500 };\n  }\n\n  if (error.message.includes('API key')) {\n    return { error: 'Invalid API key configuration', status: 500 };\n  }\n\n  if (error.message.includes('rate limit')) {\n    return { error: 'API rate limit exceeded. Please try again in a few minutes.', status: 500 };\n  }\n\n  if (error.message.includes('quota')) {\n    return { error: 'API quota exceeded or access denied.', status: 500 };\n  }\n\n  return {\n    error: 'Failed to generate project guide',\n    details: process.env.NODE_ENV === 'development' ? error.message : 'Please try again later',\n    status: 500\n  };\n}"],"names":[],"mappings":"AAAA,gCAAgC;AAEhC;;;;CAIC,GAED,kDAAkD;;;;;;;;;;;AAC3C,SAAS,sBAAsB,WAAW;IAC/C,OAAO,CAAC;;;;CAIT,EAAE,YAAY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA2Gd,CAAC;AACF;AAGO,SAAS,wBAAwB,MAAM;IAC5C,OAAO;QACL,UAAU;YAAC;gBACT,OAAO;oBAAC;wBACN,MAAM;oBACR;iBAAE;YACJ;SAAE;QACF,kBAAkB;YAChB,aAAa;YACb,MAAM;YACN,MAAM;YACN,iBAAiB;YACjB,kBAAkB;QACpB;QACA,gBAAgB;YACd;gBACE,UAAU;gBACV,WAAW;YACb;YACA;gBACE,UAAU;gBACV,WAAW;YACb;YACA;gBACE,UAAU;gBACV,WAAW;YACb;YACA;gBACE,UAAU;gBACV,WAAW;YACb;SACD;IACH;AACF;AAGO,eAAe,cAAc,WAAW;IAC7C,IAAI,CAAC,QAAQ,GAAG,CAAC,cAAc,EAAE;QAC/B,MAAM,IAAI,MAAM;IAClB;IAEA,QAAQ,GAAG,CAAC;IAEZ,MAAM,WAAW,MAAM,MACrB,CAAC,iGAAiG,EAAE,QAAQ,GAAG,CAAC,cAAc,EAAE,EAChI;QACE,QAAQ;QACR,SAAS;YACP,gBAAgB;QAClB;QACA,MAAM,KAAK,SAAS,CAAC;IACvB;IAGF,IAAI,CAAC,SAAS,EAAE,EAAE;QAChB,MAAM,YAAY,MAAM,SAAS,IAAI,GAAG,KAAK,CAAC,IAAM;QACpD,QAAQ,KAAK,CAAC,qBAAqB,SAAS,MAAM,EAAE;QAEpD,IAAI,SAAS,MAAM,KAAK,KAAK;YAC3B,MAAM,IAAI,MAAM;QAClB,OAAO,IAAI,SAAS,MAAM,KAAK,KAAK;YAClC,MAAM,IAAI,MAAM;QAClB,OAAO,IAAI,SAAS,MAAM,KAAK,KAAK;YAClC,MAAM,IAAI,MAAM;QAClB;QAEA,MAAM,IAAI,MAAM;IAClB;IAEA,OAAO,SAAS,IAAI;AACtB;AAGO,SAAS,sBAAsB,IAAI;IACxC,QAAQ,GAAG,CAAC;IAEZ,IAAI,CAAC,KAAK,UAAU,IAAI,KAAK,UAAU,CAAC,MAAM,KAAK,GAAG;QACpD,MAAM,IAAI,MAAM;IAClB;IAEA,MAAM,UAAU,KAAK,UAAU,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI;IAExD,2BAA2B;IAC3B,IAAI,YAAY,QAAQ,KAAK,CAAC;IAC9B,IAAI,CAAC,WAAW;QACd,MAAM,iBAAiB,QAAQ,KAAK,CAAC;QACrC,IAAI,gBAAgB;YAClB,YAAY;gBAAC,cAAc,CAAC,EAAE;aAAC;QACjC;IACF;IAEA,IAAI,CAAC,WAAW;QACd,QAAQ,KAAK,CAAC;QACd,MAAM,IAAI,MAAM;IAClB;IAEA,IAAI;IACJ,IAAI;QACF,cAAc,KAAK,KAAK,CAAC,SAAS,CAAC,EAAE;IACvC,EAAE,OAAO,YAAY;QACnB,QAAQ,KAAK,CAAC,uBAAuB;QACrC,MAAM,IAAI,MAAM;IAClB;IAEA,oCAAoC;IACpC,OAAO,2BAA2B,aAAa;AACjD;AAGO,SAAS,2BAA2B,WAAW,EAAE,kBAAkB;IACxE,MAAM,iBAAiB;QAAC;QAAW;QAAW;QAAa;QAAY;KAAgB;IAEvF,KAAK,MAAM,SAAS,eAAgB;QAClC,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE;YACvB,WAAW,CAAC,MAAM,GAAG,gBAAgB;QACvC;IACF;IAEA,eAAe;IACf,YAAY,QAAQ,GAAG;QACrB,OAAO;QACP,WAAW,IAAI,OAAO,WAAW;QACjC,aAAa,mBAAmB,aAAa,EAAE,mBAAmB;IACpE;IAEA,OAAO;AACT;AAGO,SAAS,gBAAgB,KAAK;IACnC,MAAM,WAAW;QACf,SAAS;YAAE,MAAM;YAAW,UAAU,EAAE;QAAC;QACzC,SAAS,EAAE;QACX,WAAW,CAAC;QACZ,UAAU;YAAE,KAAK,EAAE;YAAE,OAAO,EAAE;QAAC;QAC/B,eAAe,EAAE;QACjB,kBAAkB,EAAE;QACpB,YAAY;YACV,aAAa;YACb,UAAU;gBAAC;gBAAe;aAAc;YACxC,OAAO;gBAAC;aAA6C;QACvD;IACF;IACA,OAAO,QAAQ,CAAC,MAAM,IAAI;AAC5B;AAGO,eAAe,0BAA0B,WAAW;IACzD,sBAAsB;IACtB,MAAM,SAAS,sBAAsB;IAErC,sBAAsB;IACtB,MAAM,cAAc,wBAAwB;IAE5C,gBAAgB;IAChB,MAAM,iBAAiB,MAAM,cAAc;IAE3C,gCAAgC;IAChC,MAAM,cAAc,sBAAsB;IAE1C,OAAO;AACT;AAGO,SAAS,kBAAkB,KAAK;IACrC,QAAQ,KAAK,CAAC,yBAAyB;IAEvC,IAAI,MAAM,IAAI,KAAK,cAAc;QAC/B,OAAO;YAAE,OAAO;YAAsC,QAAQ;QAAI;IACpE;IAEA,IAAI,MAAM,OAAO,CAAC,QAAQ,CAAC,YAAY;QACrC,OAAO;YAAE,OAAO;YAAiC,QAAQ;QAAI;IAC/D;IAEA,IAAI,MAAM,OAAO,CAAC,QAAQ,CAAC,eAAe;QACxC,OAAO;YAAE,OAAO;YAA+D,QAAQ;QAAI;IAC7F;IAEA,IAAI,MAAM,OAAO,CAAC,QAAQ,CAAC,UAAU;QACnC,OAAO;YAAE,OAAO;YAAwC,QAAQ;QAAI;IACtE;IAEA,OAAO;QACL,OAAO;QACP,SAAS,uCAAyC,MAAM,OAAO;QAC/D,QAAQ;IACV;AACF","debugId":null}},
    {"offset": {"line": 380, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 386, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/api/generate-project/route.js"],"sourcesContent":["// app/api/generate-project/route.js\nimport { NextResponse } from 'next/server';\nimport { \n  generateProjectWithGemini, \n  handleGeminiError,\n  analyzeProject \n} from './geminiService.js';\nimport { \n  getProjectVideosWithFallback \n} from './youtubeService.js';\n\n/**\n * POST /api/generate-project\n * Main API endpoint for generating comprehensive project guides\n * Combines Gemini AI project generation with intelligent YouTube video recommendations\n */\nexport async function POST(request) {\n  try {\n    // Parse and validate request\n    const { projectIdea } = await request.json();\n\n    if (!projectIdea || projectIdea.trim().length === 0) {\n      return NextResponse.json(\n        { error: 'Project idea is required' }, \n        { status: 400 }\n      );\n    }\n\n    console.log('Processing project idea:', projectIdea);\n\n    // Step 1: Generate project structure using Gemini AI\n    let projectData;\n    try {\n      projectData = await generateProjectWithGemini(projectIdea);\n      console.log('Project data generated successfully');\n    } catch (geminiError) {\n      const errorResponse = handleGeminiError(geminiError);\n      return NextResponse.json(\n        { error: errorResponse.error, details: errorResponse.details },\n        { status: errorResponse.status }\n      );\n    }\n\n    // Step 2: Fetch relevant YouTube videos\n    let youtubeResources = [];\n    try {\n      youtubeResources = await getProjectVideosWithFallback(projectData, projectIdea);\n      console.log(`YouTube resources fetched: ${youtubeResources.length} items`);\n    } catch (youtubeError) {\n      console.error('YouTube service error:', youtubeError);\n      // Continue without YouTube resources rather than failing the entire request\n      youtubeResources = [];\n    }\n\n    // Step 3: Enhanced metadata and analysis\n    const projectAnalysis = analyzeProject(\n      projectIdea, \n      Object.values(projectData.techStack || {}).flat()\n    );\n\n    // Step 4: Combine everything into final response\n    const enhancedResponse = {\n      ...projectData,\n      youtubeResources,\n      metadata: {\n        ...projectData.metadata,\n        youtube_videos_found: youtubeResources.filter(v => !v.isSearchLink).length,\n        search_queries_generated: youtubeResources.length > 0 ? 6 : 0, // Based on generateIntelligentSearchQueries limit\n        project_analysis: projectAnalysis,\n        processing_time: Date.now() - new Date(projectData.metadata.timestamp).getTime()\n      }\n    };\n\n    console.log('Enhanced project response prepared successfully');\n    return NextResponse.json(enhancedResponse);\n\n  } catch (error) {\n    console.error('Project generation API error:', error);\n\n    // Generic error handling for unexpected errors\n    return NextResponse.json({\n      error: 'Failed to generate project guide',\n      details: process.env.NODE_ENV === 'development' ? error.message : 'Please try again later',\n      timestamp: new Date().toISOString()\n    }, { status: 500 });\n  }\n}\n\n/**\n * GET /api/generate-project\n * Health check endpoint to verify API status\n */\nexport async function GET() {\n  const apiStatus = {\n    status: 'healthy',\n    timestamp: new Date().toISOString(),\n    services: {\n      gemini: process.env.GEMINI_API_KEY ? 'configured' : 'missing_key',\n      youtube: process.env.YOUTUBE_API_KEY ? 'configured' : 'missing_key'\n    },\n    version: '2.0.0'\n  };\n\n  return NextResponse.json(apiStatus);\n}\n\n"],"names":[],"mappings":"AAAA,oCAAoC;;;;;AACpC;AACA;AAKA;;;;AASO,eAAe,KAAK,OAAO;IAChC,IAAI;QACF,6BAA6B;QAC7B,MAAM,EAAE,WAAW,EAAE,GAAG,MAAM,QAAQ,IAAI;QAE1C,IAAI,CAAC,eAAe,YAAY,IAAI,GAAG,MAAM,KAAK,GAAG;YACnD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA2B,GACpC;gBAAE,QAAQ;YAAI;QAElB;QAEA,QAAQ,GAAG,CAAC,4BAA4B;QAExC,qDAAqD;QACrD,IAAI;QACJ,IAAI;YACF,cAAc,MAAM,CAAA,GAAA,oJAAA,CAAA,4BAAyB,AAAD,EAAE;YAC9C,QAAQ,GAAG,CAAC;QACd,EAAE,OAAO,aAAa;YACpB,MAAM,gBAAgB,CAAA,GAAA,oJAAA,CAAA,oBAAiB,AAAD,EAAE;YACxC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO,cAAc,KAAK;gBAAE,SAAS,cAAc,OAAO;YAAC,GAC7D;gBAAE,QAAQ,cAAc,MAAM;YAAC;QAEnC;QAEA,wCAAwC;QACxC,IAAI,mBAAmB,EAAE;QACzB,IAAI;YACF,mBAAmB,MAAM,CAAA,GAAA,qJAAA,CAAA,+BAA4B,AAAD,EAAE,aAAa;YACnE,QAAQ,GAAG,CAAC,CAAC,2BAA2B,EAAE,iBAAiB,MAAM,CAAC,MAAM,CAAC;QAC3E,EAAE,OAAO,cAAc;YACrB,QAAQ,KAAK,CAAC,0BAA0B;YACxC,4EAA4E;YAC5E,mBAAmB,EAAE;QACvB;QAEA,yCAAyC;QACzC,MAAM,kBAAkB,CAAA,GAAA,oJAAA,CAAA,iBAAc,AAAD,EACnC,aACA,OAAO,MAAM,CAAC,YAAY,SAAS,IAAI,CAAC,GAAG,IAAI;QAGjD,iDAAiD;QACjD,MAAM,mBAAmB;YACvB,GAAG,WAAW;YACd;YACA,UAAU;gBACR,GAAG,YAAY,QAAQ;gBACvB,sBAAsB,iBAAiB,MAAM,CAAC,CAAA,IAAK,CAAC,EAAE,YAAY,EAAE,MAAM;gBAC1E,0BAA0B,iBAAiB,MAAM,GAAG,IAAI,IAAI;gBAC5D,kBAAkB;gBAClB,iBAAiB,KAAK,GAAG,KAAK,IAAI,KAAK,YAAY,QAAQ,CAAC,SAAS,EAAE,OAAO;YAChF;QACF;QAEA,QAAQ,GAAG,CAAC;QACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAE3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iCAAiC;QAE/C,+CAA+C;QAC/C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,OAAO;YACP,SAAS,uCAAyC,MAAM,OAAO;YAC/D,WAAW,IAAI,OAAO,WAAW;QACnC,GAAG;YAAE,QAAQ;QAAI;IACnB;AACF;AAMO,eAAe;IACpB,MAAM,YAAY;QAChB,QAAQ;QACR,WAAW,IAAI,OAAO,WAAW;QACjC,UAAU;YACR,QAAQ,QAAQ,GAAG,CAAC,cAAc,GAAG,eAAe;YACpD,SAAS,QAAQ,GAAG,CAAC,eAAe,GAAG,eAAe;QACxD;QACA,SAAS;IACX;IAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;AAC3B","debugId":null}}]
}