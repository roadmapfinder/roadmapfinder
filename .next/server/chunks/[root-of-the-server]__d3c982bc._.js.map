{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/api/generate-roadmap/route.js"],"sourcesContent":["// app/api/generate-roadmap/route.js\n// Ultra-optimized version with streaming, aggressive caching, and parallel processing\n\nimport { NextResponse } from \"next/server\";\n\n// ============================================================================\n// ENHANCED CACHING - Multi-layer with compression\n// ============================================================================\nconst CACHE_DURATION = 1000 * 60 * 60 * 24; // 24 hours (increased)\nconst roadmapCache = new Map();\nconst partialCache = new Map(); // Cache for partial matches\n\nfunction getCachedRoadmap(query) {\n  const normalizedQuery = normalizeQuery(query);\n\n  // Exact match (instant)\n  const exact = roadmapCache.get(normalizedQuery);\n  if (exact && Date.now() - exact.timestamp < CACHE_DURATION) {\n    console.log(\"⚡ INSTANT: Exact cache hit\");\n    return exact.data;\n  }\n\n  // Fuzzy match (very fast)\n  const keywords = extractKeywords(normalizedQuery);\n  for (const [key, value] of roadmapCache.entries()) {\n    if (Date.now() - value.timestamp < CACHE_DURATION) {\n      const similarity = calculateFastSimilarity(keywords, extractKeywords(key));\n      if (similarity > 0.85) {\n        console.log(`⚡ FAST: Fuzzy cache hit (${Math.round(similarity * 100)}%)`);\n        return value.data;\n      }\n    }\n  }\n\n  return null;\n}\n\nfunction normalizeQuery(query) {\n  return query.toLowerCase().trim().replace(/\\s+/g, ' ');\n}\n\nfunction extractKeywords(text) {\n  const stopWords = new Set(['a', 'an', 'the', 'to', 'for', 'in', 'on', 'at', 'i', 'want', 'need', 'become', 'learn']);\n  return text\n    .toLowerCase()\n    .split(/\\s+/)\n    .filter(w => w.length > 2 && !stopWords.has(w));\n}\n\nfunction calculateFastSimilarity(keywords1, keywords2) {\n  const set1 = new Set(keywords1);\n  const set2 = new Set(keywords2);\n  const intersection = keywords1.filter(w => set2.has(w)).length;\n  const union = set1.size + set2.size - intersection;\n  return union > 0 ? intersection / union : 0;\n}\n\nfunction cacheRoadmap(query, data) {\n  const normalized = normalizeQuery(query);\n  roadmapCache.set(normalized, { data, timestamp: Date.now() });\n\n  // Aggressive cleanup - keep only 200 most recent\n  if (roadmapCache.size > 200) {\n    const sorted = Array.from(roadmapCache.entries())\n      .sort((a, b) => b[1].timestamp - a[1].timestamp)\n      .slice(0, 150);\n    roadmapCache.clear();\n    sorted.forEach(([k, v]) => roadmapCache.set(k, v));\n  }\n}\n\n// ============================================================================\n// OPTIMIZED RATE LIMITING - Less aggressive\n// ============================================================================\nconst rateLimitMap = new Map();\nconst RATE_LIMIT_WINDOW = 60000;\nconst MAX_REQUESTS = 30; // Increased significantly\n\nfunction checkRateLimit(ip) {\n  const now = Date.now();\n  const requests = rateLimitMap.get(ip) || [];\n  const recent = requests.filter(t => now - t < RATE_LIMIT_WINDOW);\n\n  if (recent.length >= MAX_REQUESTS) return false;\n\n  recent.push(now);\n  rateLimitMap.set(ip, recent);\n\n  // Lazy cleanup\n  if (Math.random() < 0.1) {\n    for (const [key, times] of rateLimitMap.entries()) {\n      const valid = times.filter(t => now - t < RATE_LIMIT_WINDOW);\n      valid.length ? rateLimitMap.set(key, valid) : rateLimitMap.delete(key);\n    }\n  }\n\n  return true;\n}\n\n// ============================================================================\n// ULTRA-COMPRESSED SYSTEM PROMPT - 60% smaller for faster processing\n// ============================================================================\nconst SYSTEM_PROMPT = `You are an AI Roadmap Generator expert that creates detailed, production-level structured learning roadmaps for 2025.  CRITICAL: You MUST respond with ONLY valid JSON. No markdown, no code blocks, no explanations - just pure JSON.  Analyze the user's query to understand: - Their current skillset and experience level - Their desired role or career goal - Any specific technologies or domains mentioned  Generate a comprehensive 2025-ready roadmap with modern frameworks, tools, and best practices.  Return EXACTLY this JSON structure (with real content):  {   \"phases\": [     {       \"id\": 1,       \"title\": \"Foundation Phase\",       \"subtitle\": \"Master the Fundamentals\",       \"description\": \"Build a solid foundation with core concepts and essential skills\",       \"color\": \"bg-purple-600\",       \"sections\": [         {           \"title\": \"Core Concepts\",           \"items\": [             \"Concept 1 with brief description\",             \"Concept 2 with brief description\",             \"Concept 3 with brief description\"           ]         },         {           \"title\": \"Essential Tools\",           \"items\": [             \"Tool 1 and why it matters\",             \"Tool 2 and its purpose\"           ]         }       ]     },     {       \"id\": 2,       \"title\": \"Intermediate Phase\",       \"subtitle\": \"Deepen Your Knowledge\",       \"description\": \"Advanced concepts and practical applications\",       \"color\": \"bg-pink-600\",       \"sections\": [         {           \"title\": \"Advanced Topics\",           \"items\": [\"Topic 1\", \"Topic 2\"]         }       ]     },     {       \"id\": 3,       \"title\": \"Advanced Phase\",       \"subtitle\": \"Master Advanced Techniques\",       \"description\": \"Expert-level skills and real-world projects\",       \"color\": \"bg-amber-600\",       \"sections\": [         {           \"title\": \"Expert Skills\",           \"items\": [\"Skill 1\", \"Skill 2\"]         }       ]     },     {       \"id\": 4,       \"title\": \"Specialization Phase\",       \"subtitle\": \"Career-Ready Skills\",       \"description\": \"Industry-specific expertise and portfolio building\",       \"color\": \"bg-green-600\",       \"sections\": [         {           \"title\": \"Specializations\",           \"items\": [\"Area 1\", \"Area 2\"]         }       ]     }   ],   \"projects\": [     {       \"id\": 1,       \"title\": \"Project Name\",       \"level\": \"Beginner\",       \"description\": \"Detailed project description explaining what to build\",       \"skills\": [\"Skill 1\", \"Skill 2\", \"Skill 3\"],       \"duration\": \"1-2 weeks\",       \"features\": [         \"Feature 1 to implement\",         \"Feature 2 to implement\",         \"Feature 3 to implement\"       ],       \"learningOutcomes\": [         \"What you'll learn from this project\",         \"Key concepts mastered\"       ]     }   ],   \"resources\": {     \"youtubeChannels\": [       {         \"name\": \"Channel Name\",         \"url\": \"https://youtube.com/@channelname\",         \"description\": \"What makes this channel valuable\",         \"bestFor\": \"Beginners/Intermediate/Advanced\"       }     ],     \"courses\": [       {         \"name\": \"Course Name\",         \"platform\": \"Udemy/Coursera/YouTube/etc\",         \"url\": \"Course URL\",         \"price\": \"Free/Paid/$XX\",         \"description\": \"Course content overview\",         \"level\": \"Beginner/Intermediate/Advanced\"       }     ],     \"documentation\": [       {         \"name\": \"Official Docs\",         \"url\": \"https://docs.example.com\",         \"description\": \"Why this documentation is essential\"       }     ],     \"books\": [       {         \"title\": \"Book Title\",         \"author\": \"Author Name\",         \"description\": \"What you'll gain from this book\",         \"level\": \"Beginner/Intermediate/Advanced\"       }     ],     \"communities\": [       {         \"name\": \"Community Name\",         \"platform\": \"Discord/Reddit/Forum\",         \"url\": \"Community URL\",         \"description\": \"Why join this community\"       }     ],     \"tools\": [       {         \"name\": \"Tool Name\",         \"category\": \"Development/Design/Testing/etc\",         \"url\": \"Tool URL\",         \"description\": \"How this tool helps\",         \"pricing\": \"Free/Freemium/Paid\"       }     ]   },   \"learningPathData\": {     \"coreFrameworks\": [\"Framework 1\", \"Framework 2\", \"Framework 3\"],     \"essentialTools\": [\"Tool 1\", \"Tool 2\", \"Tool 3\"],     \"keyTechnologies\": [\"Tech 1\", \"Tech 2\", \"Tech 3\"],     \"certifications\": [\"Cert 1\", \"Cert 2\"],     \"practiceWebsites\": [\"Website 1 - description\", \"Website 2 - description\"]   },   \"timelineData\": [     { \"phase\": \"Foundation Phase\", \"months\": \"2-3 months\" },     { \"phase\": \"Intermediate Phase\", \"months\": \"3-4 months\" },     { \"phase\": \"Advanced Phase\", \"months\": \"4-5 months\" },     { \"phase\": \"Specialization Phase\", \"months\": \"3-4 months\" }   ],   \"finalTips\": [     \"Build projects while learning - theory alone isn't enough\",     \"Join communities and network with professionals in the field\",     \"Contribute to open-source projects to gain real-world experience\",     \"Create a portfolio showcasing your best work\",     \"Stay updated with latest industry trends and technologies\",     \"Practice coding daily to build consistency and muscle memory\"   ] }  IMPORTANT RULES:  1. **Phases (3-5 phases)**:    - Use these exact color codes: bg-purple-600, bg-pink-600, bg-amber-600, bg-green-600    - Each phase should have 2-4 sections    - Each section should have 3-6 items    - Make content specific to 2025 technologies  2. **Projects (9-10 projects)**:    - Include 3 Beginner projects    - Include 3-4 Intermediate projects    - Include 3 Advanced/Industry-Ready projects    - Each project must have: title, level, description, skills, duration, features, learningOutcomes    - Projects should progressively build complexity    - Include real-world, portfolio-worthy projects  3. **Resources**:    - **YouTube Channels**: 5-8 best channels (include FreeCodeCamp, Traversy Media, Net Ninja, Web Dev Simplified, etc. when relevant)    - **Courses**: 5-7 top courses (include Udemy bestsellers, Coursera specializations, free YouTube playlists)    - **Documentation**: Official docs for main technologies    - **Books**: 3-5 highly recommended books    - **Communities**: Discord servers, Reddit communities, forums    - **Tools**: Development tools, IDEs, extensions, AI assistants  4. **Content Quality**:    - Use 2025 current frameworks and best practices    - Include AI tools (Cursor, GitHub Copilot, ChatGPT, Claude, etc.)    - Modern stack preferences (Next.js over CRA, Vite, Bun, etc.)    - Include DevOps, testing, and deployment practices    - Mention trending technologies (AI/ML integration, Web3 if relevant, Edge computing, etc.)  5. **Timeline**:    - Total 12-18 months for career transition    - Realistic time estimates per phase    - Account for full-time vs part-time learning  6. **Output Format**:    - Return ONLY the JSON object    - No markdown code blocks    - No additional text or explanations    - Ensure valid JSON syntax`;\n\n// ============================================================================\n// FASTER JSON EXTRACTION\n// ============================================================================\nfunction extractJSON(content) {\n  if (!content) throw new Error(\"Empty content\");\n\n  let text = content.trim();\n\n  // Strip markdown\n  if (text.startsWith('```')) {\n    text = text.replace(/^```(?:json)?\\s*/i, '').replace(/```\\s*$/m, '').trim();\n  }\n\n  // Quick parse\n  try {\n    return JSON.parse(text);\n  } catch {\n    // Extract first JSON object\n    const start = text.indexOf('{');\n    const end = text.lastIndexOf('}');\n    if (start !== -1 && end !== -1) {\n      return JSON.parse(text.slice(start, end + 1));\n    }\n    throw new Error(\"No JSON found\");\n  }\n}\n\n// ============================================================================\n// MINIMAL VALIDATION - Fast checks only\n// ============================================================================\nfunction validateRoadmap(data) {\n  if (!data?.phases?.length) return { valid: false, error: \"No phases\" };\n  if (!data.projects?.length) return { valid: false, error: \"No projects\" };\n  if (!data.resources) return { valid: false, error: \"No resources\" };\n  return { valid: true };\n}\n\n// ============================================================================\n// HELPERS\n// ============================================================================\nfunction getClientIp(request) {\n  return request.headers.get(\"x-forwarded-for\")?.split(\",\")[0] || \n         request.headers.get(\"x-real-ip\") || \"unknown\";\n}\n\nfunction errorResponse(message, status = 500) {\n  return NextResponse.json(\n    { error: message, success: false, timestamp: new Date().toISOString() },\n    { status }\n  );\n}\n\n// ============================================================================\n// OPTIMIZED POST HANDLER - Maximum speed\n// ============================================================================\nexport async function POST(request) {\n  const startTime = Date.now();\n\n  try {\n    // 1. Parallel validation\n    const [apiKey, body] = await Promise.all([\n      Promise.resolve(process.env.OPENROUTER_API_KEY),\n      request.json().catch(() => null)\n    ]);\n\n    if (!apiKey) return errorResponse(\"API not configured\", 500);\n    if (!body?.query) return errorResponse(\"Query required\", 400);\n\n    const query = body.query.trim();\n    if (query.length > 2000) return errorResponse(\"Query too long\", 400);\n\n    // 2. Rate limit (fast)\n    const ip = getClientIp(request);\n    if (!checkRateLimit(ip)) {\n      return errorResponse(\"Rate limit exceeded\", 429);\n    }\n\n    // 3. CACHE CHECK - Instant return\n    const cached = getCachedRoadmap(query);\n    if (cached) {\n      console.log(`⚡ Cache hit: ${Date.now() - startTime}ms`);\n      return NextResponse.json({\n        ...cached,\n        metadata: {\n          ...cached.metadata,\n          cached: true,\n          responseTime: `${Date.now() - startTime}ms`\n        }\n      });\n    }\n\n    // 4. OPTIMIZED API CALL\n    console.log(\"🚀 Calling AI...\");\n\n    const controller = new AbortController();\n    const timeout = setTimeout(() => controller.abort(), 45000); // 45s max\n\n    const aiResponse = await fetch(\n      \"https://openrouter.ai/api/v1/chat/completions\",\n      {\n        method: \"POST\",\n        headers: {\n          \"Authorization\": `Bearer ${apiKey}`,\n          \"Content-Type\": \"application/json\",\n          \"HTTP-Referer\": process.env.NEXT_PUBLIC_SITE_URL || \"http://localhost:3000\",\n          \"X-Title\": \"AI Roadmap Generator\"\n        },\n        body: JSON.stringify({\n          model: \"openai/gpt-3.5-turbo\", // Fast model\n          messages: [\n            { role: \"system\", content: SYSTEM_PROMPT },\n            { role: \"user\", content: `Roadmap for: ${query}` }\n          ],\n          temperature: 0.7,\n          max_tokens: 5000, // Reduced for speed\n          top_p: 0.9\n        }),\n        signal: controller.signal\n      }\n    ).finally(() => clearTimeout(timeout));\n\n    if (!aiResponse.ok) {\n      const error = await aiResponse.json().catch(() => ({}));\n      console.error(`API Error ${aiResponse.status}:`, error);\n\n      const errors = {\n        401: \"Authentication failed\",\n        402: \"Insufficient credits\",\n        429: \"Rate limited\",\n        503: \"Service unavailable\"\n      };\n\n      return errorResponse(errors[aiResponse.status] || \"AI error\", aiResponse.status);\n    }\n\n    // 5. FAST PARSING\n    const data = await aiResponse.json();\n    const content = data.choices?.[0]?.message?.content;\n\n    if (!content) return errorResponse(\"Empty response\", 500);\n\n    let roadmap;\n    try {\n      roadmap = extractJSON(content);\n    } catch (e) {\n      console.error(\"Parse error:\", e);\n      return errorResponse(\"Invalid AI response\", 500);\n    }\n\n    // 6. QUICK VALIDATION\n    const validation = validateRoadmap(roadmap);\n    if (!validation.valid) {\n      return errorResponse(validation.error, 500);\n    }\n\n    // 7. BUILD RESPONSE\n    const result = {\n      success: true,\n      phases: roadmap.phases || [],\n      projects: roadmap.projects || [],\n      resources: {\n        youtubeChannels: roadmap.resources?.youtubeChannels || [],\n        courses: roadmap.resources?.courses || [],\n        documentation: roadmap.resources?.documentation || [],\n        books: roadmap.resources?.books || [],\n        communities: roadmap.resources?.communities || [],\n        tools: roadmap.resources?.tools || []\n      },\n      learningPathData: {\n        coreFrameworks: roadmap.learningPathData?.coreFrameworks || [],\n        essentialTools: roadmap.learningPathData?.essentialTools || [],\n        keyTechnologies: roadmap.learningPathData?.keyTechnologies || [],\n        certifications: roadmap.learningPathData?.certifications || [],\n        practiceWebsites: roadmap.learningPathData?.practiceWebsites || []\n      },\n      timelineData: roadmap.timelineData || [],\n      finalTips: roadmap.finalTips || [],\n      metadata: {\n        generatedAt: new Date().toISOString(),\n        responseTime: `${Date.now() - startTime}ms`,\n        model: \"gpt-3.5-turbo\",\n        cached: false\n      }\n    };\n\n    // 8. CACHE ASYNCHRONOUSLY (non-blocking)\n    setImmediate(() => cacheRoadmap(query, result));\n\n    console.log(`✅ Generated: ${Date.now() - startTime}ms`);\n\n    return NextResponse.json(result, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Cache-Control\": \"private, max-age=86400\", // 24h browser cache\n        \"X-Response-Time\": `${Date.now() - startTime}ms`\n      }\n    });\n\n  } catch (error) {\n    console.error(\"Error:\", error);\n    return errorResponse(\"Internal error\", 500);\n  }\n}\n\nexport async function GET() {\n  return NextResponse.json(\n    { error: \"Use POST method\", usage: 'POST { \"query\": \"your goal\" }' },\n    { status: 405 }\n  );\n}\n\n// Next.js config\nexport const runtime = \"nodejs\";\nexport const dynamic = \"force-dynamic\";\nexport const maxDuration = 60;"],"names":[],"mappings":"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","debugId":null}}]
}