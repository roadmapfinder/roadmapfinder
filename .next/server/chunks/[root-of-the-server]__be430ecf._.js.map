{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/api/fetched-resources/route.js"],"sourcesContent":["// app/api/search-resources/route.js\nimport { NextResponse } from 'next/server';\nimport { GoogleGenerativeAI } from '@google/generative-ai';\n\nconst genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);\nconst YOUTUBE_API_KEY = process.env.YOUTUBE_API_KEY;\nconst YOUTUBE_SEARCH_URL = 'https://www.googleapis.com/youtube/v3/search';\nconst YOUTUBE_VIDEOS_URL = 'https://www.googleapis.com/youtube/v3/videos';\n\n/**\n * Enhance search query using AI for better accuracy\n */\nasync function enhanceSearchQuery(query, language) {\n  try {\n    const model = genAI.getGenerativeModel({ \n      model: 'gemini-1.5-flash',\n      generationConfig: {\n        maxOutputTokens: 100,\n        temperature: 0.3,\n      }\n    });\n\n    const prompt = `Extract the core learning topic from this query: \"${query}\"\n\nReturn ONLY the essential search keywords (2-5 words) optimized for finding educational YouTube videos.\nExamples:\n- \"I want to learn react js\" → \"react js tutorial\"\n- \"teach me python basics\" → \"python basics course\"\n- \"how to machine learning\" → \"machine learning tutorial\"\n\nQuery: \"${query}\"\nKeywords:`;\n\n    const result = await model.generateContent(prompt);\n    const enhanced = result.response.text().trim().replace(/['\"]/g, '');\n    return enhanced || query;\n  } catch (error) {\n    console.error('Error enhancing query:', error);\n    return query;\n  }\n}\n\n/**\n * Calculate comprehensive video quality score\n */\nfunction calculateVideoScore(video, query) {\n  const views = parseInt(video.viewCount || 0);\n  const likes = parseInt(video.likeCount || 0);\n  const duration = parseDuration(video.duration);\n  const title = video.title.toLowerCase();\n  const description = video.description.toLowerCase();\n  const queryLower = query.toLowerCase();\n\n  // Relevance scoring\n  const queryWords = queryLower.split(' ').filter(w => w.length > 2);\n  let relevanceScore = 0;\n\n  queryWords.forEach(word => {\n    if (title.includes(word)) relevanceScore += 3;\n    if (description.includes(word)) relevanceScore += 1;\n  });\n\n  // Check for course indicators\n  const courseKeywords = ['complete', 'full', 'course', 'tutorial', 'beginner', 'guide', 'learn'];\n  const hasCourseKeywords = courseKeywords.some(kw => title.includes(kw));\n  const courseBonus = hasCourseKeywords ? 5 : 0;\n\n  // Engagement metrics\n  const engagementRate = views > 0 ? likes / views : 0;\n  const viewScore = Math.log10(views + 1) * 2;\n  const engagementScore = engagementRate * 10000;\n\n  // Duration preference (20min-3hr optimal for courses)\n  let durationScore = 0;\n  if (duration >= 20 && duration <= 180) durationScore = 10;\n  else if (duration >= 10 && duration <= 240) durationScore = 5;\n  else if (duration >= 5 && duration <= 360) durationScore = 2;\n\n  // Recency bonus\n  const publishDate = new Date(video.publishedAt);\n  const monthsOld = (Date.now() - publishDate.getTime()) / (1000 * 60 * 60 * 24 * 30);\n  const recencyScore = monthsOld < 6 ? 8 : monthsOld < 12 ? 5 : monthsOld < 24 ? 3 : 1;\n\n  // Total score calculation\n  const totalScore = \n    (relevanceScore * 0.35) + \n    (viewScore * 0.20) + \n    (engagementScore * 0.15) + \n    (durationScore * 0.15) + \n    (recencyScore * 0.10) + \n    (courseBonus * 0.05);\n\n  return {\n    score: totalScore,\n    breakdown: {\n      relevance: relevanceScore,\n      views: viewScore,\n      engagement: engagementScore,\n      duration: durationScore,\n      recency: recencyScore,\n      courseBonus\n    }\n  };\n}\n\n/**\n * Parse ISO 8601 duration to minutes\n */\nfunction parseDuration(duration) {\n  const match = duration.match(/PT(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)S)?/);\n  if (!match) return 0;\n  const hours = parseInt(match[1] || 0);\n  const minutes = parseInt(match[2] || 0);\n  const seconds = parseInt(match[3] || 0);\n  return hours * 60 + minutes + seconds / 60;\n}\n\n/**\n * Search YouTube for the SINGLE best matching video\n */\nasync function searchBestYouTubeVideo(query, language, preferLatest) {\n  try {\n    // Enhance query for better accuracy\n    const enhancedQuery = await enhanceSearchQuery(query, language);\n    console.log(`🔍 Original: \"${query}\" → Enhanced: \"${enhancedQuery}\"`);\n\n    // Build precise search query\n    let searchQuery = enhancedQuery;\n\n    // Add language specificity\n    if (language === 'hindi') {\n      searchQuery += ' hindi';\n    }\n\n    // Add course/tutorial keywords\n    searchQuery += ' complete tutorial';\n\n    // Search parameters\n    const searchParams = new URLSearchParams({\n      part: 'snippet',\n      q: searchQuery,\n      type: 'video',\n      maxResults: 15, // Fetch more to find best match\n      order: preferLatest ? 'date' : 'relevance',\n      videoDuration: 'medium', // Changed from 'long' to include more options\n      videoDefinition: 'high',\n      relevanceLanguage: language === 'hindi' ? 'hi' : 'en',\n      key: YOUTUBE_API_KEY,\n    });\n\n    const searchResponse = await fetch(`${YOUTUBE_SEARCH_URL}?${searchParams}`, {\n      signal: AbortSignal.timeout(8000)\n    });\n\n    if (!searchResponse.ok) {\n      throw new Error('YouTube search failed');\n    }\n\n    const searchData = await searchResponse.json();\n\n    if (!searchData.items || searchData.items.length === 0) {\n      return null;\n    }\n\n    // Get detailed video information\n    const videoIds = searchData.items.map(item => item.id.videoId).join(',');\n    const videoParams = new URLSearchParams({\n      part: 'snippet,contentDetails,statistics',\n      id: videoIds,\n      key: YOUTUBE_API_KEY,\n    });\n\n    const videoResponse = await fetch(`${YOUTUBE_VIDEOS_URL}?${videoParams}`, {\n      signal: AbortSignal.timeout(8000)\n    });\n\n    if (!videoResponse.ok) {\n      throw new Error('Failed to fetch video details');\n    }\n\n    const videoData = await videoResponse.json();\n\n    // Score and rank all videos\n    const rankedVideos = videoData.items\n      .map(video => {\n        const scoreData = calculateVideoScore({\n          title: video.snippet.title,\n          description: video.snippet.description,\n          viewCount: video.statistics.viewCount,\n          likeCount: video.statistics.likeCount,\n          duration: video.contentDetails.duration,\n          publishedAt: video.snippet.publishedAt\n        }, query);\n\n        return {\n          id: video.id,\n          title: video.snippet.title,\n          description: video.snippet.description,\n          thumbnail: video.snippet.thumbnails.high.url,\n          channelTitle: video.snippet.channelTitle,\n          publishedAt: video.snippet.publishedAt,\n          duration: video.contentDetails.duration,\n          viewCount: parseInt(video.statistics.viewCount || 0),\n          likeCount: parseInt(video.statistics.likeCount || 0),\n          commentCount: parseInt(video.statistics.commentCount || 0),\n          url: `https://www.youtube.com/watch?v=${video.id}`,\n          qualityScore: scoreData.score,\n          scoreBreakdown: scoreData.breakdown\n        };\n      })\n      .filter(video => {\n        const duration = parseDuration(video.duration);\n        // More lenient filtering\n        return video.viewCount > 500 && \n               duration >= 5 && \n               video.qualityScore > 1;\n      })\n      .sort((a, b) => b.qualityScore - a.qualityScore);\n\n    console.log(`📊 Top 3 scores:`, rankedVideos.slice(0, 3).map(v => ({\n      title: v.title.substring(0, 50),\n      score: v.qualityScore.toFixed(2)\n    })));\n\n    return {\n      video: rankedVideos[0] || null,\n      enhancedQuery\n    };\n\n  } catch (error) {\n    console.error('Error searching YouTube:', error);\n    throw error;\n  }\n}\n\n/**\n * Extract course content/outline from video\n */\nasync function extractCourseContent(video, language) {\n  try {\n    const model = genAI.getGenerativeModel({ \n      model: 'gemini-1.5-pro',\n      generationConfig: {\n        maxOutputTokens: 1500,\n        temperature: 0.4,\n      }\n    });\n\n    const prompt = `Analyze this YouTube course and extract its content structure:\n\nTitle: \"${video.title}\"\nChannel: ${video.channelTitle}\nDescription: ${video.description}\n\nCreate a detailed course content breakdown in ${language === 'hindi' ? 'Hinglish (Hindi + English mix)' : 'English'}:\n\n1. **Course Overview** (2-3 sentences about what this course teaches)\n\n2. **What You'll Learn** (5-7 key learning outcomes as bullet points)\n\n3. **Course Topics** (Extract 8-12 main topics/modules from the description, formatted as numbered list with brief descriptions)\n\n4. **Prerequisites** (What students should know before starting, if any)\n\n5. **Best For** (Who is this course ideal for - beginners/intermediate/advanced)\n\nFormat professionally with clear sections. Base everything on the actual video description.`;\n\n    const result = await model.generateContent(prompt);\n    return result.response.text();\n  } catch (error) {\n    console.error('Error extracting course content:', error);\n    return null;\n  }\n}\n\n/**\n * Generate AI summary about the found resource\n */\nasync function generateAISummary(query, video, language) {\n  try {\n    const model = genAI.getGenerativeModel({ \n      model: 'gemini-1.5-flash',\n      generationConfig: {\n        maxOutputTokens: 300,\n        temperature: 0.7,\n      }\n    });\n\n    const duration = Math.round(parseDuration(video.duration));\n\n    const prompt = `You found this course for query \"${query}\":\n\nTitle: ${video.title}\nChannel: ${video.channelTitle}\nDuration: ${duration} minutes\nViews: ${video.viewCount.toLocaleString()}\n\nWrite a brief, enthusiastic summary in ${language === 'hindi' ? 'Hinglish' : 'English'} (3-4 sentences):\n1. Why this is a great match for their query\n2. What makes this course valuable\n3. Quick encouragement to start learning\n\nKeep it conversational and motivating!`;\n\n    const result = await model.generateContent(prompt);\n    return result.response.text();\n  } catch (error) {\n    console.error('Error generating summary:', error);\n    return null;\n  }\n}\n\n/**\n * Main POST handler - Returns single best resource\n */\nexport async function POST(request) {\n  const startTime = Date.now();\n\n  try {\n    const body = await request.json();\n    const { query, language = 'english', preferLatest = false } = body;\n\n    if (!query?.trim()) {\n      return NextResponse.json(\n        { error: 'Please provide a search query' },\n        { status: 400 }\n      );\n    }\n\n    if (!YOUTUBE_API_KEY || !process.env.GEMINI_API_KEY) {\n      return NextResponse.json(\n        { error: 'API keys not configured' },\n        { status: 500 }\n      );\n    }\n\n    console.log(`🔍 Searching for: \"${query}\" (${language})`);\n\n    // Find the single best matching video\n    const result = await searchBestYouTubeVideo(query, language, preferLatest);\n\n    if (!result || !result.video) {\n      return NextResponse.json({\n        video: null,\n        aiSummary: `Sorry, couldn't find a suitable course for \"${query}\". Try rephrasing your search with more specific keywords.`,\n        enhancedQuery: result?.enhancedQuery || query,\n        responseTime: `${Date.now() - startTime}ms`\n      });\n    }\n\n    const video = result.video;\n    console.log(`✅ Best match: \"${video.title}\" (score: ${video.qualityScore.toFixed(2)})`);\n\n    // Generate course content and AI summary in parallel\n    const [courseContent, aiSummary] = await Promise.all([\n      extractCourseContent(video, language),\n      generateAISummary(query, video, language)\n    ]);\n\n    const responseTime = Date.now() - startTime;\n    console.log(`⚡ Total time: ${responseTime}ms`);\n\n    return NextResponse.json({\n      query,\n      enhancedQuery: result.enhancedQuery,\n      language,\n      video: {\n        ...video,\n        courseContent\n      },\n      aiSummary,\n      responseTime: `${responseTime}ms`\n    });\n\n  } catch (error) {\n    console.error('❌ API Error:', error);\n    return NextResponse.json(\n      { error: error.message || 'Search failed. Please try again.' },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * PUT handler - Generate detailed documentation\n */\nexport async function PUT(request) {\n  try {\n    const body = await request.json();\n    const { videoId, title, description, channelTitle, language } = body;\n\n    const model = genAI.getGenerativeModel({ \n      model: 'gemini-1.5-pro',\n      generationConfig: {\n        maxOutputTokens: 3000,\n        temperature: 0.4,\n      }\n    });\n\n    const prompt = `Create comprehensive course documentation for:\n\nTitle: \"${title}\"\nChannel: ${channelTitle}\nDescription: ${description}\n\nGenerate detailed documentation in ${language === 'hindi' ? 'Hinglish (Hindi + English)' : 'English'} with this structure:\n\n## Course Overview\n[2-3 detailed paragraphs about the course]\n\n## Learning Objectives\n[8-10 specific things students will learn]\n\n## Course Curriculum\n[10-15 lessons/modules with:\n- Module name\n- 3-4 subtopics per module]\n\n## Prerequisites & Requirements\n[What students need to know]\n\n## Target Audience\n[Who should take this course]\n\n## Key Takeaways\n[5-7 main benefits]\n\n## Meta Information\n**Instructor:** ${channelTitle}\n**Level:** [Beginner/Intermediate/Advanced]\n**Duration:** [Estimate based on description]\n\nUse proper markdown formatting. Be thorough and educational.`;\n\n    const result = await model.generateContent(prompt);\n    return NextResponse.json({\n      documentation: result.response.text()\n    });\n\n  } catch (error) {\n    console.error('Documentation error:', error);\n    return NextResponse.json(\n      { error: 'Failed to generate documentation' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function GET() {\n  return NextResponse.json({\n    status: 'ok',\n    message: 'AI Resource Finder API',\n    version: '3.0-accurate',\n    endpoints: {\n      search: 'POST /api/search-resources',\n      documentation: 'PUT /api/search-resources'\n    }\n  });\n}"],"names":[],"mappings":"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","debugId":null}}]
}