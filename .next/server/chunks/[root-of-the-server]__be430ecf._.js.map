{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/api/fetched-resources/route.js"],"sourcesContent":["// app/api/search-resources/route.js\nimport { NextResponse } from 'next/server';\nimport { GoogleGenerativeAI } from '@google/generative-ai';\n\nconst genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);\nconst YOUTUBE_API_KEY = process.env.YOUTUBE_API_KEY;\nconst YOUTUBE_SEARCH_URL = 'https://www.googleapis.com/youtube/v3/search';\nconst YOUTUBE_VIDEOS_URL = 'https://www.googleapis.com/youtube/v3/videos';\n\n/**\n * Enhance user query using AI to get better search terms\n */\nasync function enhanceQuery(userQuery, language) {\n  try {\n    const model = genAI.getGenerativeModel({ \n      model: 'gemini-1.5-flash',\n      generationConfig: {\n        maxOutputTokens: 100,\n        temperature: 0.3,\n      }\n    });\n\n    const prompt = `User wants to learn: \"${userQuery}\"\n\nExtract the core topic and return ONLY the best YouTube search query (3-6 words) that would find a comprehensive tutorial/course.\nFocus on: main topic + \"complete course\" or \"full tutorial\"\nLanguage preference: ${language}\n\nReturn only the search query, nothing else.`;\n\n    const result = await model.generateContent(prompt);\n    const response = await result.response;\n    const enhancedQuery = response.text().trim().replace(/['\"]/g, '');\n\n    console.log(`üìù Enhanced query: \"${userQuery}\" ‚Üí \"${enhancedQuery}\"`);\n    return enhancedQuery;\n  } catch (error) {\n    console.error('Query enhancement failed:', error);\n    return userQuery; // Fallback to original\n  }\n}\n\n/**\n * Calculate video quality score\n */\nfunction calculateVideoScore(video) {\n  const views = parseInt(video.viewCount || 0);\n  const likes = parseInt(video.likeCount || 0);\n  const duration = parseDuration(video.duration);\n\n  const engagementRate = views > 0 ? likes / views : 0;\n  const viewScore = Math.log10(views + 1);\n  const engagementScore = engagementRate * 8000;\n\n  // Prefer comprehensive courses (30min-4hr)\n  const durationScore = duration >= 30 && duration <= 240 ? 2 : \n                       duration >= 10 && duration <= 360 ? 1 : 0.3;\n\n  // Recency preference\n  const publishDate = new Date(video.publishedAt);\n  const monthsOld = (Date.now() - publishDate.getTime()) / (1000 * 60 * 60 * 24 * 30);\n  const recencyScore = monthsOld < 12 ? 1.5 : monthsOld < 24 ? 1 : 0.5;\n\n  return (viewScore * 0.25) + (engagementScore * 0.35) + (durationScore * 0.25) + (recencyScore * 0.15);\n}\n\n/**\n * Parse ISO 8601 duration to minutes\n */\nfunction parseDuration(duration) {\n  const match = duration.match(/PT(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)S)?/);\n  if (!match) return 0;\n  const hours = parseInt(match[1] || 0);\n  const minutes = parseInt(match[2] || 0);\n  const seconds = parseInt(match[3] || 0);\n  return hours * 60 + minutes + seconds / 60;\n}\n\n/**\n * Search for THE BEST YouTube video\n */\nasync function searchBestVideo(query, language, preferLatest) {\n  try {\n    let searchQuery = query;\n\n    if (language === 'hindi') {\n      searchQuery += ' hindi';\n    }\n    searchQuery += ' complete course tutorial full';\n\n    const searchParams = new URLSearchParams({\n      part: 'snippet',\n      q: searchQuery,\n      type: 'video',\n      maxResults: 15, // Get more to find the absolute best\n      order: preferLatest ? 'date' : 'relevance',\n      videoDuration: 'long',\n      videoDefinition: 'high',\n      relevanceLanguage: language === 'hindi' ? 'hi' : 'en',\n      key: YOUTUBE_API_KEY,\n    });\n\n    const searchResponse = await fetch(`${YOUTUBE_SEARCH_URL}?${searchParams}`, {\n      signal: AbortSignal.timeout(5000)\n    });\n\n    if (!searchResponse.ok) {\n      throw new Error('YouTube search failed');\n    }\n\n    const searchData = await searchResponse.json();\n\n    if (!searchData.items || searchData.items.length === 0) {\n      return null;\n    }\n\n    const videoIds = searchData.items.map(item => item.id.videoId).join(',');\n\n    const videoParams = new URLSearchParams({\n      part: 'snippet,contentDetails,statistics',\n      id: videoIds,\n      key: YOUTUBE_API_KEY,\n    });\n\n    const videoResponse = await fetch(`${YOUTUBE_VIDEOS_URL}?${videoParams}`, {\n      signal: AbortSignal.timeout(5000)\n    });\n\n    if (!videoResponse.ok) {\n      throw new Error('Failed to fetch video details');\n    }\n\n    const videoData = await videoResponse.json();\n\n    // Process and find the BEST video\n    const videos = videoData.items\n      .map(video => ({\n        id: video.id,\n        title: video.snippet.title,\n        description: video.snippet.description,\n        thumbnail: video.snippet.thumbnails.high.url,\n        channelTitle: video.snippet.channelTitle,\n        publishedAt: video.snippet.publishedAt,\n        duration: video.contentDetails.duration,\n        viewCount: parseInt(video.statistics.viewCount || 0),\n        likeCount: parseInt(video.statistics.likeCount || 0),\n        commentCount: parseInt(video.statistics.commentCount || 0),\n        url: `https://www.youtube.com/watch?v=${video.id}`,\n        qualityScore: calculateVideoScore({\n          viewCount: video.statistics.viewCount,\n          likeCount: video.statistics.likeCount,\n          commentCount: video.statistics.commentCount,\n          duration: video.contentDetails.duration,\n          publishedAt: video.snippet.publishedAt\n        })\n      }))\n      .filter(video => {\n        const duration = parseDuration(video.duration);\n        return video.viewCount > 5000 && duration >= 10 && video.qualityScore > 0.5;\n      })\n      .sort((a, b) => b.qualityScore - a.qualityScore);\n\n    return videos[0] || null; // Return ONLY the best one\n  } catch (error) {\n    console.error('Error searching YouTube:', error);\n    throw error;\n  }\n}\n\n/**\n * Generate AI summary for single video\n */\nasync function generateAISummary(query, video, language) {\n  try {\n    const model = genAI.getGenerativeModel({ \n      model: 'gemini-1.5-flash',\n      generationConfig: {\n        maxOutputTokens: 400,\n        temperature: 0.7,\n      }\n    });\n\n    const prompt = `Analyze this YouTube course for \"${query}\":\n\nTitle: \"${video.title}\"\nChannel: ${video.channelTitle}\nViews: ${video.viewCount.toLocaleString()}\nDuration: ${Math.round(parseDuration(video.duration))} minutes\n\nProvide in ${language === 'hindi' ? 'Hinglish (mix of Hindi and English)' : 'English'}:\n1. Course overview (2-3 sentences)\n2. What you'll learn (3-4 key points)\n3. Who should take this (1 sentence)\n\nKeep it concise and encouraging.`;\n\n    const result = await model.generateContent(prompt);\n    const response = await result.response;\n    return response.text();\n  } catch (error) {\n    console.error('Error generating AI summary:', error);\n    return null;\n  }\n}\n\n/**\n * Main search endpoint - returns ONE best resource\n */\nexport async function POST(request) {\n  const startTime = Date.now();\n\n  try {\n    const body = await request.json();\n    const { query, language, preferLatest } = body;\n\n    if (!query?.trim()) {\n      return NextResponse.json(\n        { error: 'Query is required' },\n        { status: 400 }\n      );\n    }\n\n    if (!YOUTUBE_API_KEY || !process.env.GEMINI_API_KEY) {\n      return NextResponse.json(\n        { error: 'API keys not configured' },\n        { status: 500 }\n      );\n    }\n\n    console.log(`üîç Searching for: \"${query}\" (${language})`);\n\n    // Enhance query for better results\n    const enhancedQuery = await enhanceQuery(query, language);\n\n    // Find the BEST video\n    const bestVideo = await searchBestVideo(enhancedQuery, language, preferLatest);\n\n    if (!bestVideo) {\n      return NextResponse.json({\n        video: null,\n        aiSummary: `No suitable course found for \"${query}\". Try refining your search.`,\n        responseTime: `${Date.now() - startTime}ms`\n      });\n    }\n\n    console.log(`‚úÖ Found best video in ${Date.now() - startTime}ms`);\n\n    // Generate AI summary\n    const aiSummary = await generateAISummary(query, bestVideo, language);\n\n    const responseTime = Date.now() - startTime;\n    console.log(`‚ö° Total response time: ${responseTime}ms`);\n\n    return NextResponse.json({\n      query,\n      enhancedQuery,\n      language,\n      video: bestVideo,\n      aiSummary,\n      responseTime: `${responseTime}ms`\n    });\n\n  } catch (error) {\n    console.error('‚ùå API Error:', error);\n    return NextResponse.json(\n      { error: error.message || 'Unexpected error occurred' },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * Generate documentation endpoint (on-demand)\n */\nexport async function PUT(request) {\n  try {\n    const body = await request.json();\n    const { videoId, title, description, channelTitle, language } = body;\n\n    if (!videoId) {\n      return NextResponse.json(\n        { error: 'Video ID required' },\n        { status: 400 }\n      );\n    }\n\n    const model = genAI.getGenerativeModel({ \n      model: 'gemini-1.5-pro',\n      generationConfig: {\n        maxOutputTokens: 3000,\n        temperature: 0.4,\n      }\n    });\n\n    const prompt = `Create comprehensive course documentation for: \"${title}\" by ${channelTitle}\n\nVideo Description: ${description}\n\nCreate detailed, well-structured documentation in ${language === 'hindi' ? 'Hinglish (mix of Hindi and English)' : 'English'} with this EXACT structure:\n\n## Course Overview\n[2-3 paragraphs explaining what the course covers and who it's for]\n\n## Course Structure\n[Analyze the description and create 6-10 main modules/lessons with:\n- Module number and title\n- 3-5 subtopics as bullet points]\n\n## Key Learning Outcomes\n[5-7 specific things students will learn]\n\n## Prerequisites\n[What knowledge/tools are needed before starting]\n\n## Course Information\n- **Instructor**: ${channelTitle}\n- **Platform**: YouTube\n- **Language**: ${language === 'hindi' ? 'Hindi/Hinglish' : 'English'}\n- **Level**: [Beginner/Intermediate/Advanced based on content]\n\nUse proper markdown formatting. Be specific and educational.`;\n\n    const result = await model.generateContent(prompt);\n    const response = await result.response;\n    const documentation = response.text();\n\n    return NextResponse.json({\n      videoId,\n      documentation,\n      generated: new Date().toISOString()\n    });\n\n  } catch (error) {\n    console.error('‚ùå Documentation Error:', error);\n    return NextResponse.json(\n      { error: 'Failed to generate documentation' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function GET() {\n  return NextResponse.json({\n    status: 'ok',\n    message: 'AI Resource Finder API v3.0',\n    endpoints: {\n      search: 'POST /api/search-resources',\n      documentation: 'PUT /api/search-resources'\n    }\n  });\n}"],"names":[],"mappings":"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","debugId":null}}]
}