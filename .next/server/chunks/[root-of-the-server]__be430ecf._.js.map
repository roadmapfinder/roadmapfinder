{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/api/fetched-resources/route.js"],"sourcesContent":["// app/api/search-resources/route.js\nimport { NextResponse } from 'next/server';\nimport { GoogleGenerativeAI } from '@google/generative-ai';\n\n// Initialize Gemini AI\nconst genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);\n\n// YouTube API configuration\nconst YOUTUBE_API_KEY = process.env.YOUTUBE_API_KEY;\nconst YOUTUBE_SEARCH_URL = 'https://www.googleapis.com/youtube/v3/search';\nconst YOUTUBE_VIDEOS_URL = 'https://www.googleapis.com/youtube/v3/videos';\n\n/**\n * Calculate video quality score with stricter criteria\n */\nfunction calculateVideoScore(video) {\n  const views = parseInt(video.viewCount || 0);\n  const likes = parseInt(video.likeCount || 0);\n  const comments = parseInt(video.commentCount || 0);\n  const duration = parseDuration(video.duration);\n\n  // Engagement metrics\n  const engagementRate = views > 0 ? (likes + comments) / views : 0;\n  const viewScore = Math.log10(views + 1);\n  const engagementScore = engagementRate * 10000;\n\n  // Duration score - prefer comprehensive courses (45min-3hr for full courses)\n  let durationScore = 0;\n  if (duration >= 45 && duration <= 180) {\n    durationScore = 2.0; // Sweet spot for full courses\n  } else if (duration >= 30 && duration <= 240) {\n    durationScore = 1.5;\n  } else if (duration >= 20 && duration <= 300) {\n    durationScore = 1.0;\n  } else {\n    durationScore = 0.5;\n  }\n\n  // Recency score - prefer recent content\n  const publishDate = new Date(video.publishedAt);\n  const monthsOld = (Date.now() - publishDate.getTime()) / (1000 * 60 * 60 * 24 * 30);\n  let recencyScore = 1.0;\n  if (monthsOld < 6) recencyScore = 2.0;\n  else if (monthsOld < 12) recencyScore = 1.7;\n  else if (monthsOld < 24) recencyScore = 1.3;\n  else if (monthsOld < 36) recencyScore = 0.8;\n  else recencyScore = 0.5;\n\n  // Weighted final score\n  return (viewScore * 0.2) + (engagementScore * 0.3) + (durationScore * 0.3) + (recencyScore * 0.2);\n}\n\n/**\n * Parse ISO 8601 duration to minutes\n */\nfunction parseDuration(duration) {\n  const match = duration.match(/PT(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)S)?/);\n  if (!match) return 0;\n  const hours = parseInt(match[1] || 0);\n  const minutes = parseInt(match[2] || 0);\n  const seconds = parseInt(match[3] || 0);\n  return hours * 60 + minutes + seconds / 60;\n}\n\n/**\n * Search YouTube videos with enhanced filtering for single best result\n */\nasync function searchYouTubeVideos(query, language, formats) {\n  try {\n    // Build precise search query\n    let searchQuery = query;\n\n    // Add language specificity\n    if (language === 'hindi') {\n      searchQuery += ' hindi tutorial';\n    } else {\n      searchQuery += ' tutorial';\n    }\n\n    // Add course-specific keywords\n    searchQuery += ' complete course full';\n\n    // Search parameters - fetch more to find the best one\n    const searchParams = new URLSearchParams({\n      part: 'snippet',\n      q: searchQuery,\n      type: 'video',\n      maxResults: 15, // Fetch more to select the best one\n      order: formats.latestVideo ? 'date' : 'relevance',\n      videoDuration: 'long',\n      videoDefinition: 'high',\n      relevanceLanguage: language === 'hindi' ? 'hi' : 'en',\n      key: YOUTUBE_API_KEY,\n    });\n\n    const searchResponse = await fetch(`${YOUTUBE_SEARCH_URL}?${searchParams}`, {\n      signal: AbortSignal.timeout(8000)\n    });\n\n    if (!searchResponse.ok) {\n      const errorData = await searchResponse.json();\n      throw new Error(`YouTube API Error: ${errorData.error?.message || 'Unknown error'}`);\n    }\n\n    const searchData = await searchResponse.json();\n\n    if (!searchData.items || searchData.items.length === 0) {\n      return [];\n    }\n\n    // Get video IDs\n    const videoIds = searchData.items.map(item => item.id.videoId).join(',');\n\n    // Fetch detailed video info\n    const videoParams = new URLSearchParams({\n      part: 'snippet,contentDetails,statistics',\n      id: videoIds,\n      key: YOUTUBE_API_KEY,\n    });\n\n    const videoResponse = await fetch(`${YOUTUBE_VIDEOS_URL}?${videoParams}`, {\n      signal: AbortSignal.timeout(8000)\n    });\n\n    if (!videoResponse.ok) {\n      throw new Error('Failed to fetch video details');\n    }\n\n    const videoData = await videoResponse.json();\n\n    // Format and score all videos\n    const videos = videoData.items\n      .map(video => ({\n        id: video.id,\n        title: video.snippet.title,\n        description: video.snippet.description,\n        thumbnail: video.snippet.thumbnails.high.url,\n        channelTitle: video.snippet.channelTitle,\n        publishedAt: video.snippet.publishedAt,\n        duration: video.contentDetails.duration,\n        viewCount: parseInt(video.statistics.viewCount || 0),\n        likeCount: parseInt(video.statistics.likeCount || 0),\n        commentCount: parseInt(video.statistics.commentCount || 0),\n        url: `https://www.youtube.com/watch?v=${video.id}`,\n        qualityScore: calculateVideoScore({\n          viewCount: video.statistics.viewCount,\n          likeCount: video.statistics.likeCount,\n          commentCount: video.statistics.commentCount,\n          duration: video.contentDetails.duration,\n          publishedAt: video.snippet.publishedAt\n        })\n      }))\n      // Apply strict quality filters\n      .filter(video => {\n        const duration = parseDuration(video.duration);\n        return video.viewCount > 5000 &&\n               duration >= 20 &&\n               video.qualityScore > 1.0;\n      })\n      // Sort by quality score and return only the best one\n      .sort((a, b) => b.qualityScore - a.qualityScore)\n      .slice(0, 1); // Return only the BEST video\n\n    return videos;\n  } catch (error) {\n    console.error('Error searching YouTube:', error);\n    throw error;\n  }\n}\n\n/**\n * Generate comprehensive course documentation with detailed content\n */\nasync function generateDetailedDocumentation(video, language) {\n  try {\n    const model = genAI.getGenerativeModel({ \n      model: 'gemini-1.5-pro',\n      generationConfig: {\n        maxOutputTokens: 4000,\n        temperature: 0.3,\n      }\n    });\n\n    const prompt = `You are an expert course analyst. Analyze this YouTube course and create comprehensive, detailed documentation.\n\n**Video Title:** ${video.title}\n**Channel:** ${video.channelTitle}\n**Description:** ${video.description}\n**Duration:** ${Math.round(parseDuration(video.duration))} minutes\n\nCreate detailed course documentation in ${language === 'hindi' ? 'Hinglish (mix of Hindi and English, natural style)' : 'English'} with this EXACT structure:\n\n## Course Overview\nWrite 3-4 paragraphs explaining:\n- What this course teaches\n- Who should take this course (beginners, intermediate, advanced)\n- What prerequisites are needed (if any)\n- What students will be able to do after completing it\n\n## Complete Course Content & Syllabus\nBased on the video description and title, break down the course into detailed lessons/modules.\nCreate 8-15 lessons with this format:\n\n### Lesson 1: [Lesson Title]\n- [Subtopic 1 - be specific]\n- [Subtopic 2 - be specific]\n- [Subtopic 3 - be specific]\n- [Subtopic 4 - be specific]\n\n(Continue for all lessons)\n\n## What You'll Learn\nList 8-10 specific, actionable learning outcomes:\n- [Specific skill or concept]\n- [Specific skill or concept]\n...\n\n## Course Benefits\nList 5-7 key benefits of taking this course:\n- [Benefit]\n- [Benefit]\n...\n\n## Who This Course Is For\nList 4-5 types of people who would benefit:\n- [Target audience type]\n- [Target audience type]\n...\n\n## Requirements\nList any prerequisites or requirements:\n- [Requirement]\n- [Requirement]\n...\n\n## Course Details\n- **Instructor:** ${video.channelTitle}\n- **Duration:** ${Math.round(parseDuration(video.duration))} minutes (${Math.floor(parseDuration(video.duration) / 60)} hours ${Math.round(parseDuration(video.duration) % 60)} minutes)\n- **Language:** ${language === 'hindi' ? 'Hindi/Hinglish' : 'English'}\n- **Level:** [Analyze and mention: Beginner/Intermediate/Advanced]\n- **Published:** ${new Date(video.publishedAt).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}\n\nIMPORTANT INSTRUCTIONS:\n1. Make the content detailed and specific - avoid generic statements\n2. Base the syllabus on actual content hints from the video description\n3. Be realistic about what the course covers\n4. Use proper markdown formatting with ## for main headers and ### for subheaders\n5. Make each lesson meaningful with 4-6 specific subtopics\n6. Ensure the ${language === 'hindi' ? 'Hinglish is natural and conversational' : 'English is clear and professional'}`;\n\n    const result = await model.generateContent(prompt);\n    const response = await result.response;\n    return response.text();\n  } catch (error) {\n    console.error('Error generating documentation:', error);\n    return null;\n  }\n}\n\n/**\n * Generate AI summary for the course\n */\nasync function generateAISummary(query, video, language) {\n  try {\n    const model = genAI.getGenerativeModel({ \n      model: 'gemini-1.5-flash',\n      generationConfig: {\n        maxOutputTokens: 500,\n        temperature: 0.7,\n      }\n    });\n\n    const prompt = `You found the best YouTube course for \"${query}\".\n\n**Course:** \"${video.title}\" by ${video.channelTitle}\n**Stats:** ${video.viewCount.toLocaleString()} views | ${Math.round(parseDuration(video.duration))} minutes\n\nProvide in ${language === 'hindi' ? 'Hinglish (natural mix of Hindi and English)' : 'English'}:\n\n1. **Why This Course:** Explain in 2-3 sentences why this is the best match for their query\n2. **What Makes It Great:** List 3-4 key strengths of this course\n3. **Quick Start Tip:** One actionable tip to get the most from this course\n\nBe enthusiastic and helpful. Keep it conversational.`;\n\n    const result = await model.generateContent(prompt);\n    const response = await result.response;\n    return response.text();\n  } catch (error) {\n    console.error('Error generating AI summary:', error);\n    return null;\n  }\n}\n\n/**\n * Main API handler\n */\nexport async function POST(request) {\n  const startTime = Date.now();\n\n  try {\n    const body = await request.json();\n    const { query, language, formats } = body;\n\n    // Validation\n    if (!query?.trim()) {\n      return NextResponse.json(\n        { error: 'Query is required' },\n        { status: 400 }\n      );\n    }\n\n    // Validate API keys\n    if (!YOUTUBE_API_KEY || !process.env.GEMINI_API_KEY) {\n      return NextResponse.json(\n        { error: 'API keys not configured' },\n        { status: 500 }\n      );\n    }\n\n    console.log(`🔍 Searching for BEST course: \"${query}\" (${language})`);\n\n    // Search YouTube for the single best video\n    const videos = await searchYouTubeVideos(query, language, formats);\n\n    if (videos.length === 0) {\n      return NextResponse.json({\n        videos: [],\n        aiSummary: `Sorry, couldn't find a quality course for \"${query}\". Try different keywords or check the spelling.`,\n        responseTime: `${Date.now() - startTime}ms`\n      });\n    }\n\n    const bestVideo = videos[0];\n    console.log(`✅ Found best video: \"${bestVideo.title}\" (Score: ${bestVideo.qualityScore.toFixed(2)})`);\n\n    // Always generate documentation for the course content\n    console.log('📚 Generating detailed course documentation...');\n    const documentation = await generateDetailedDocumentation(bestVideo, language);\n\n    // Generate AI summary\n    const aiSummary = await generateAISummary(query, bestVideo, language);\n\n    // Combine data\n    const videoWithDocumentation = {\n      ...bestVideo,\n      documentation\n    };\n\n    const responseTime = Date.now() - startTime;\n    console.log(`⚡ Total response time: ${responseTime}ms`);\n\n    return NextResponse.json({\n      query,\n      language,\n      videos: [videoWithDocumentation],\n      aiSummary,\n      hasDocumentation: true,\n      totalResults: 1,\n      responseTime: `${responseTime}ms`\n    });\n\n  } catch (error) {\n    console.error('❌ API Error:', error);\n\n    if (error.message.includes('YouTube API')) {\n      return NextResponse.json(\n        { error: 'YouTube API error. Check your API key and quota.' },\n        { status: 500 }\n      );\n    }\n\n    return NextResponse.json(\n      { error: error.message || 'Unexpected error occurred' },\n      { status: 500 }\n    );\n  }\n}\n\n// Health check endpoint\nexport async function GET() {\n  return NextResponse.json({\n    status: 'ok',\n    message: 'YouTube Course Finder API - Single Best Resource',\n    version: '3.0-single-resource',\n    endpoints: {\n      search: 'POST /api/search-resources'\n    }\n  });\n}"],"names":[],"mappings":"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","debugId":null}}]
}