{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/api/search-resources/route.js"],"sourcesContent":["// app/api/search-resources/route.js\nimport { NextResponse } from 'next/server';\nimport { GoogleGenerativeAI } from '@google/generative-ai';\n\n// ==================== CONFIGURATION ====================\nconst CONFIG = {\n  GEMINI_MODEL: 'gemini-2.0-flash-exp',\n  MAX_SEARCH_RESULTS: 30,\n  MIN_VIDEO_DURATION: 5, // minutes\n  SEARCH_TIMEOUT: 15000, // ms\n  AI_TIMEOUT: 10000, // ms\n  CACHE_TTL: 3600, // seconds\n};\n\nconst TECH_DOMAINS = {\n  programming: ['javascript', 'python', 'java', 'c++', 'c#', 'go', 'rust', 'typescript', 'php', 'ruby', 'swift', 'kotlin'],\n  webDev: ['react', 'vue', 'angular', 'next.js', 'node.js', 'express', 'nestjs', 'html', 'css', 'tailwind', 'bootstrap'],\n  mobile: ['react native', 'flutter', 'android', 'ios', 'swift', 'kotlin', 'xamarin'],\n  backend: ['django', 'flask', 'spring boot', 'laravel', 'fastapi', 'graphql', 'rest api', 'microservices'],\n  database: ['mongodb', 'postgresql', 'mysql', 'redis', 'firebase', 'supabase', 'sql', 'nosql'],\n  devops: ['docker', 'kubernetes', 'aws', 'azure', 'gcp', 'ci/cd', 'jenkins', 'terraform'],\n  design: ['figma', 'adobe xd', 'ui/ux', 'user experience', 'user interface', 'design system', 'prototyping'],\n  dataScience: ['machine learning', 'deep learning', 'tensorflow', 'pytorch', 'pandas', 'numpy', 'data analysis'],\n  other: ['git', 'github', 'testing', 'agile', 'algorithms', 'data structures', 'system design']\n};\n\n// Initialize AI\nconst genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);\nconst YOUTUBE_API_KEY = process.env.YOUTUBE_API_KEY;\nconst YOUTUBE_SEARCH_URL = 'https://www.googleapis.com/youtube/v3/search';\nconst YOUTUBE_VIDEOS_URL = 'https://www.googleapis.com/youtube/v3/videos';\n\n// ==================== UTILITY FUNCTIONS ====================\n\n/**\n * Validates environment variables\n */\nfunction validateEnvironment() {\n  if (!YOUTUBE_API_KEY || !process.env.GEMINI_API_KEY) {\n    throw new Error('Missing required API keys: YOUTUBE_API_KEY or GEMINI_API_KEY');\n  }\n}\n\n/**\n * Creates a timeout promise for API calls\n */\nfunction withTimeout(promise, timeoutMs, errorMessage = 'Operation timed out') {\n  return Promise.race([\n    promise,\n    new Promise((_, reject) => \n      setTimeout(() => reject(new Error(errorMessage)), timeoutMs)\n    )\n  ]);\n}\n\n/**\n * Retry logic with exponential backoff\n */\nasync function retryWithBackoff(fn, maxRetries = 3, baseDelay = 1000) {\n  for (let i = 0; i < maxRetries; i++) {\n    try {\n      return await fn();\n    } catch (error) {\n      if (i === maxRetries - 1) throw error;\n      const delay = baseDelay * Math.pow(2, i);\n      console.log(`⚠️ Retry ${i + 1}/${maxRetries} after ${delay}ms:`, error.message);\n      await new Promise(resolve => setTimeout(resolve, delay));\n    }\n  }\n}\n\n/**\n * Parse ISO 8601 duration to minutes\n */\nfunction parseDuration(duration) {\n  const match = duration.match(/PT(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)S)?/);\n  if (!match) return 0;\n  const hours = parseInt(match[1] || 0);\n  const minutes = parseInt(match[2] || 0);\n  const seconds = parseInt(match[3] || 0);\n  return hours * 60 + minutes + seconds / 60;\n}\n\n/**\n * Format duration for display\n */\nfunction formatDuration(minutes) {\n  const hours = Math.floor(minutes / 60);\n  const mins = Math.round(minutes % 60);\n  if (hours > 0) return `${hours}h ${mins}m`;\n  return `${mins}m`;\n}\n\n/**\n * Sanitize user input\n */\nfunction sanitizeQuery(query) {\n  return query\n    .trim()\n    .replace(/[<>{}]/g, '') // Remove potentially harmful characters\n    .substring(0, 200); // Limit length\n}\n\n/**\n * Detect tech domain from query\n */\nfunction detectTechDomain(query) {\n  const lowerQuery = query.toLowerCase();\n\n  for (const [domain, keywords] of Object.entries(TECH_DOMAINS)) {\n    if (keywords.some(keyword => lowerQuery.includes(keyword))) {\n      return domain;\n    }\n  }\n\n  return 'general';\n}\n\n// ==================== AI ANALYSIS ====================\n\n/**\n * Deep query analysis with expert tech understanding\n */\nasync function analyzeQueryIntent(query, language, preferLatest) {\n  try {\n    const model = genAI.getGenerativeModel({ \n      model: CONFIG.GEMINI_MODEL,\n      generationConfig: {\n        maxOutputTokens: 300,\n        temperature: 0.2, // Lower for more focused analysis\n      }\n    });\n\n    const techDomain = detectTechDomain(query);\n    const relevantTech = TECH_DOMAINS[techDomain]?.join(', ') || 'general technology';\n\n    const prompt = `You are an expert tech educator and course curator specializing in programming, software development, UI/UX design, and all tech domains.\n\nINPUTS (these variables are provided):\n- query: the raw user query string (e.g. \"react 18 full stack course in hindi latest\")\n- language: \"hindi\" or \"english\"\n- preferLatest: boolean (true if user prefers 2023-2025 resources)\n- techDomain: detected domain (e.g. \"Web Development\", \"Data Science\")\n- relevantTech: comma-separated list of related technologies (may be empty)\n\nTASK:\nParse the user's raw 'query' and produce a compact, precise learning-intent analysis in the exact output format shown below.\n\nParsing rules & heuristics (mandatory):\n1. Normalize and extract exact technology names (match common variants: e.g., \"react\", \"reactjs\" → \"React\"; \"next\", \"nextjs\" → \"Next.js\"). If a version appears (digits with dot or integer, e.g., 18, 14, 3.12), capture it as VERSION. If no version given, set VERSION to \"latest\".\n2. If preferLatest is true or the query contains words like \"latest\", \"2024\", \"2025\", include the year (2024 or 2025 as appropriate) in PRIMARY search query.\n3. Detect language preference: if language == \"hindi\" or query contains \"hindi\"/\"हिंदी\", include \"hindi\" in all generated YouTube search queries.\n4. Determine LEVEL:\n   - If query contains \"beginner\", \"for beginners\", \"zero to hero\", \"100 days\", \"basics\" → Beginner\n   - If includes \"intermediate\", \"deep dive\", \"advanced concepts\", \"build\", \"projects\" → Intermediate\n   - If includes \"advanced\", \"masterclass\", \"architecture\", \"scaling\", \"performance\" → Advanced\n   - Else default → Beginner\n5. Determine FORMAT:\n   - If query contains \"course\", \"complete course\", \"full course\", \"bootcamp\" → Full Course\n   - If contains \"series\", \"part 1\", \"part 2\", \"playlist\" → Tutorial Series\n   - If contains \"crash\", \"quick\", \"short\" → Crash Course\n   - If contains \"build\", \"project\", \"project-based\", \"app\" → Project-Based\n   - If mentions a single concept (e.g., \"hooks\", \"routing\", \"state management\") → Specific Topic\n   - If ambiguous choose Full Course.\n6. TECH_STACK context:\n   - Infer from techDomain and relevantTech. Map to one of: frontend/backend/fullstack/mobile/design/devops/data/other.\n   - List immediate related technologies the learner will likely need (e.g., for Next.js → React, Node.js, Vercel).\n7. LEARNER CONTEXT inference:\n   - If query mentions \"job\", \"interview\", \"resume\", \"placement\" → interview/career switch\n   - If mentions \"college\", \"semester\", \"exam\" → academic\n   - If mentions \"portfolio\", \"build\", \"project\" → project/freelance\n   - Else give a best guess (career/project/hobby). Prefer career if unclear.\n8. Generate three YouTube search queries (PRIMARY, SECONDARY, FALLBACK) following these constraints:\n   - PRIMARY: Most specific. Include technology name, \"complete course\" or \"full tutorial\" for languages, include year (2024/2025) if preferLatest==true or query asked for \"latest\". Include \"hindi\" for Hindi preference. Add words like \"zero to hero\", \"bootcamp\", or \"masterclass\" only if they match inferred LEVEL/FORMAT.\n   - SECONDARY: Broader but still focused; no year.\n   - FALLBACK: Minimal safe query (guaranteed results), general tutorial + tech name. Include \"hindi\" if required.\n9. All output must follow EXACT format below (no extra text, no commentary, no markdown — only the lines specified). Use precise names (e.g., \"React\", \"Next.js\", \"Python\", not \"javascript\" as a replacement when the user asked React).\n\nOUTPUT FORMAT (produce exactly these lines):\nTOPIC: [exact technology/skill name]\nLEVEL: [beginner/intermediate/advanced]\nFORMAT: [full course/tutorial series/crash course/project-based/specific topic]\nTECH_STACK: [frontend/backend/fullstack/mobile/design/devops/data/other]\nVERSION: [specific version if any, else \"latest\"]\nCONTEXT: [career/academic/project/hobby/interview]\nPRIMARY: [most specific search query]\nSECONDARY: [broader search query]\nFALLBACK: [safest search query]\n\nEnd.\n`;\n\n    const result = await withTimeout(\n      model.generateContent(prompt),\n      CONFIG.AI_TIMEOUT,\n      'Query analysis timed out'\n    );\n\n    const response = await result.response;\n    const analysisText = response.text().trim();\n\n    // Parse structured response\n    const analysis = {\n      topic: analysisText.match(/TOPIC:\\s*(.+)/i)?.[1]?.trim() || query,\n      level: analysisText.match(/LEVEL:\\s*(.+)/i)?.[1]?.trim()?.toLowerCase() || 'beginner',\n      format: analysisText.match(/FORMAT:\\s*(.+)/i)?.[1]?.trim() || 'full course',\n      techStack: analysisText.match(/TECH_STACK:\\s*(.+)/i)?.[1]?.trim() || 'general',\n      version: analysisText.match(/VERSION:\\s*(.+)/i)?.[1]?.trim() || 'latest',\n      context: analysisText.match(/CONTEXT:\\s*(.+)/i)?.[1]?.trim() || 'learning',\n      primaryQuery: analysisText.match(/PRIMARY:\\s*(.+)/i)?.[1]?.trim(),\n      secondaryQuery: analysisText.match(/SECONDARY:\\s*(.+)/i)?.[1]?.trim(),\n      fallbackQuery: analysisText.match(/FALLBACK:\\s*(.+)/i)?.[1]?.trim()\n    };\n\n    console.log(`🧠 AI Analysis:`);\n    console.log(`   Topic: ${analysis.topic}`);\n    console.log(`   Level: ${analysis.level}`);\n    console.log(`   Format: ${analysis.format}`);\n    console.log(`   Stack: ${analysis.techStack}`);\n    console.log(`   Version: ${analysis.version}`);\n\n    return analysis;\n\n  } catch (error) {\n    console.error('⚠️ AI analysis failed:', error.message);\n\n    // Intelligent fallback with tech-aware defaults\n    const cleanQuery = query.toLowerCase().trim();\n    const domain = detectTechDomain(query);\n    const yearSuffix = preferLatest ? '2024' : '';\n    const langSuffix = language === 'hindi' ? 'hindi' : '';\n\n    return {\n      topic: query,\n      level: 'beginner',\n      format: 'full course',\n      techStack: domain,\n      version: 'latest',\n      context: 'learning',\n      primaryQuery: `${cleanQuery} complete course tutorial ${yearSuffix} ${langSuffix}`.trim(),\n      secondaryQuery: `${cleanQuery} full tutorial ${langSuffix}`.trim(),\n      fallbackQuery: `${cleanQuery} ${langSuffix}`.trim()\n    };\n  }\n}\n\n// ==================== YOUTUBE SEARCH ====================\n\n/**\n * Execute YouTube search with optimized parameters\n */\nasync function executeYouTubeSearch(searchQuery, language, preferLatest, videoDuration = 'medium') {\n  try {\n    console.log(`   🔍 Searching: \"${searchQuery}\"`);\n\n    const searchParams = new URLSearchParams({\n      part: 'snippet',\n      q: searchQuery,\n      type: 'video',\n      maxResults: CONFIG.MAX_SEARCH_RESULTS,\n      order: preferLatest ? 'date' : 'relevance',\n      videoDuration: videoDuration,\n      videoDefinition: 'any',\n      videoCategoryId: '27', // Education category\n      relevanceLanguage: language === 'hindi' ? 'hi' : 'en',\n      safeSearch: 'strict',\n      key: YOUTUBE_API_KEY,\n    });\n\n    const searchResponse = await fetch(`${YOUTUBE_SEARCH_URL}?${searchParams}`, {\n      signal: AbortSignal.timeout(CONFIG.SEARCH_TIMEOUT),\n      headers: {\n        'Accept': 'application/json',\n      }\n    });\n\n    if (!searchResponse.ok) {\n      const errorData = await searchResponse.json().catch(() => ({}));\n      console.error('❌ YouTube API Error:', errorData);\n\n      if (searchResponse.status === 403) {\n        throw new Error('YouTube API quota exceeded or invalid API key');\n      }\n\n      return null;\n    }\n\n    const searchData = await searchResponse.json();\n\n    if (!searchData.items?.length) {\n      console.log('   ⚠️ No results found');\n      return null;\n    }\n\n    console.log(`   ✓ Found ${searchData.items.length} videos`);\n\n    // Fetch detailed video information\n    const videoIds = searchData.items.map(item => item.id.videoId).join(',');\n    const videoParams = new URLSearchParams({\n      part: 'snippet,contentDetails,statistics',\n      id: videoIds,\n      key: YOUTUBE_API_KEY,\n    });\n\n    const videoResponse = await fetch(`${YOUTUBE_VIDEOS_URL}?${videoParams}`, {\n      signal: AbortSignal.timeout(CONFIG.SEARCH_TIMEOUT),\n      headers: {\n        'Accept': 'application/json',\n      }\n    });\n\n    if (!videoResponse.ok) {\n      console.error('❌ Failed to fetch video details');\n      return null;\n    }\n\n    const videoData = await videoResponse.json();\n    console.log(`   ✓ Retrieved details for ${videoData.items?.length || 0} videos`);\n\n    return videoData.items || null;\n\n  } catch (error) {\n    if (error.name === 'AbortError') {\n      console.error('⚠️ Search timeout exceeded');\n    } else {\n      console.error('⚠️ Search error:', error.message);\n    }\n    return null;\n  }\n}\n\n/**\n * Multi-strategy search with intelligent fallback\n */\nasync function searchYouTubeCourse(query, language, preferLatest) {\n  console.log('\\n🎯 Starting Multi-Strategy Search...');\n\n  // Get AI analysis\n  const analysis = await analyzeQueryIntent(query, language, preferLatest);\n\n  const strategies = [\n    { name: 'Primary (AI-Optimized)', query: analysis.primaryQuery, duration: 'medium' },\n    { name: 'Secondary (Broad)', query: analysis.secondaryQuery, duration: 'medium' },\n    { name: 'Fallback (Safe)', query: analysis.fallbackQuery, duration: 'any' },\n    { name: 'Basic Topic', query: `${analysis.topic} ${language === 'hindi' ? 'hindi' : ''}`.trim(), duration: 'any' }\n  ];\n\n  let allResults = [];\n\n  for (const [index, strategy] of strategies.entries()) {\n    console.log(`\\n📍 Strategy ${index + 1}/4: ${strategy.name}`);\n\n    const results = await executeYouTubeSearch(\n      strategy.query,\n      language,\n      preferLatest,\n      strategy.duration\n    );\n\n    if (results?.length) {\n      allResults = [...allResults, ...results];\n      console.log(`   ✓ Accumulated ${allResults.length} total videos`);\n\n      // If we have enough quality results, stop searching\n      if (allResults.length >= 20) {\n        console.log('   ℹ️ Sufficient results collected, stopping search');\n        break;\n      }\n    }\n  }\n\n  if (!allResults.length) {\n    console.log('\\n❌ No results from any strategy');\n    return null;\n  }\n\n  // Remove duplicates\n  const uniqueResults = Array.from(\n    new Map(allResults.map(item => [item.id, item])).values()\n  );\n\n  console.log(`\\n📊 Processing ${uniqueResults.length} unique videos...`);\n\n  // Process and rank\n  const rankedVideos = await processAndRankVideos(\n    uniqueResults,\n    query,\n    analysis,\n    language,\n    preferLatest\n  );\n\n  if (!rankedVideos?.length) {\n    console.log('❌ No valid videos after processing');\n    return null;\n  }\n\n  const topVideo = rankedVideos[0];\n\n  console.log(`\\n✅ BEST MATCH SELECTED:`);\n  console.log(`   Title: \"${topVideo.title.substring(0, 80)}...\"`);\n  console.log(`   Channel: ${topVideo.channelTitle}`);\n  console.log(`   Duration: ${formatDuration(parseDuration(topVideo.duration))}`);\n  console.log(`   Overall Score: ${topVideo.finalScore.toFixed(2)}/10`);\n  console.log(`   Relevance: ${topVideo.relevanceScore.toFixed(1)} | Teaching: ${topVideo.teachingScore.toFixed(1)} | Quality: ${topVideo.qualityScore.toFixed(1)}`);\n\n  return topVideo;\n}\n\n// ==================== VIDEO PROCESSING & RANKING ====================\n\n/**\n * Process and rank videos with comprehensive scoring\n */\nasync function processAndRankVideos(videoItems, originalQuery, analysis, language, preferLatest) {\n  // Format videos with complete data\n  const videos = videoItems.map(video => ({\n    id: video.id,\n    title: video.snippet.title,\n    description: video.snippet.description,\n    thumbnail: video.snippet.thumbnails.high?.url || video.snippet.thumbnails.medium?.url,\n    channelTitle: video.snippet.channelTitle,\n    publishedAt: video.snippet.publishedAt,\n    duration: video.contentDetails.duration,\n    viewCount: parseInt(video.statistics.viewCount || 0),\n    likeCount: parseInt(video.statistics.likeCount || 0),\n    commentCount: parseInt(video.statistics.commentCount || 0),\n    url: `https://www.youtube.com/watch?v=${video.id}`,\n  }));\n\n  // Apply quality filters\n  let filteredVideos = videos.filter(video => {\n    const duration = parseDuration(video.duration);\n    const hasMinViews = video.viewCount >= 100;\n    const hasEngagement = video.likeCount > 0;\n    const meetsMinDuration = duration >= CONFIG.MIN_VIDEO_DURATION;\n    const notTooLong = duration <= 1200; // Max 20 hours\n\n    return hasMinViews && hasEngagement && meetsMinDuration && notTooLong;\n  });\n\n  console.log(`   After filters: ${filteredVideos.length}/${videos.length} videos`);\n\n  if (!filteredVideos.length) {\n    // Relaxed fallback\n    filteredVideos = videos\n      .filter(v => parseDuration(v.duration) >= 3)\n      .sort((a, b) => b.viewCount - a.viewCount)\n      .slice(0, 15);\n    console.log(`   Using relaxed criteria: ${filteredVideos.length} videos`);\n  }\n\n  // Score videos in parallel batches to avoid rate limits\n  const BATCH_SIZE = 5;\n  const scoredVideos = [];\n\n  for (let i = 0; i < filteredVideos.length; i += BATCH_SIZE) {\n    const batch = filteredVideos.slice(i, i + BATCH_SIZE);\n\n    const batchResults = await Promise.all(\n      batch.map(async (video) => {\n        try {\n          const [relevanceScore, teachingScore] = await Promise.all([\n            calculateRelevanceScore(video, originalQuery, analysis, language),\n            calculateTeachingScore(video, analysis)\n          ]);\n\n          const qualityScore = calculateQualityScore(video, preferLatest);\n          const engagementScore = calculateEngagementScore(video);\n\n          // Weighted final score\n          const finalScore = (\n            relevanceScore * 0.40 +    // Most critical\n            teachingScore * 0.30 +     // Teaching quality\n            qualityScore * 0.20 +      // Video quality\n            engagementScore * 0.10     // Community validation\n          );\n\n          return {\n            ...video,\n            finalScore,\n            relevanceScore,\n            teachingScore,\n            qualityScore,\n            engagementScore\n          };\n        } catch (error) {\n          console.error(`⚠️ Error scoring video \"${video.title}\":`, error.message);\n          return null;\n        }\n      })\n    );\n\n    scoredVideos.push(...batchResults.filter(Boolean));\n\n    // Small delay between batches\n    if (i + BATCH_SIZE < filteredVideos.length) {\n      await new Promise(resolve => setTimeout(resolve, 100));\n    }\n  }\n\n  // Sort by final score\n  const rankedVideos = scoredVideos.sort((a, b) => b.finalScore - a.finalScore);\n\n  console.log(`\\n   📊 Top 5 Ranked Results:`);\n  rankedVideos.slice(0, 5).forEach((v, i) => {\n    console.log(`   ${i + 1}. Score: ${v.finalScore.toFixed(2)} | \"${v.title.substring(0, 60)}...\"`);\n  });\n\n  return rankedVideos;\n}\n\n/**\n * AI-powered relevance scoring\n */\nasync function calculateRelevanceScore(video, originalQuery, analysis, language) {\n  try {\n    const model = genAI.getGenerativeModel({ \n      model: CONFIG.GEMINI_MODEL,\n      generationConfig: {\n        maxOutputTokens: 50,\n        temperature: 0.1,\n      }\n    });\n\n    const duration = parseDuration(video.duration);\n\n    const prompt = `Rate video relevance for tech learning (0-10 scale):\n\nTARGET: \"${originalQuery}\"\n- Topic: ${analysis.topic}\n- Level: ${analysis.level}\n- Format: ${analysis.format}\n- Tech Stack: ${analysis.techStack}\n- Version: ${analysis.version}\n\nVIDEO:\n- Title: \"${video.title}\"\n- Channel: \"${video.channelTitle}\"\n- Duration: ${formatDuration(duration)}\n- Description: \"${video.description.substring(0, 300)}\"\n\nSCORING:\n10: Perfect - exact topic, right level, comprehensive\n8-9: Excellent - covers topic well, appropriate depth\n6-7: Good - relevant, minor gaps\n4-5: Moderate - related but not ideal\n0-3: Poor - wrong topic/level/format\n\nPRIORITY FACTORS:\n1. Title explicitly mentions exact technology/framework\n2. Duration suggests comprehensive coverage (30min-10hrs ideal)\n3. Professional educational channel\n4. Clear course/tutorial structure indicators\n5. Matches skill level\n6. Language appropriate (${language === 'hindi' ? 'Hindi/Hinglish' : 'English'})\n\nReturn ONLY a number 0-10 (decimals ok).`;\n\n    const result = await withTimeout(\n      model.generateContent(prompt),\n      CONFIG.AI_TIMEOUT,\n      'Relevance scoring timed out'\n    );\n\n    const response = await result.response;\n    const score = parseFloat(response.text().trim());\n\n    return isNaN(score) ? 5 : Math.max(0, Math.min(10, score));\n\n  } catch (error) {\n    // Smart fallback\n    const titleLower = video.title.toLowerCase();\n    const descLower = video.description.toLowerCase();\n    const topicLower = analysis.topic.toLowerCase();\n    const queryLower = originalQuery.toLowerCase();\n\n    let score = 0;\n\n    // Exact topic match\n    if (titleLower.includes(topicLower)) score += 4;\n    if (descLower.includes(topicLower)) score += 1;\n\n    // Query words\n    const queryWords = queryLower.split(' ').filter(w => w.length > 3);\n    queryWords.forEach(word => {\n      if (titleLower.includes(word)) score += 1;\n    });\n\n    // Course indicators\n    const courseKeywords = ['complete', 'full', 'course', 'tutorial', 'bootcamp', 'masterclass'];\n    if (courseKeywords.some(kw => titleLower.includes(kw))) score += 2;\n\n    // Level match\n    if (titleLower.includes(analysis.level)) score += 1;\n\n    return Math.min(10, score);\n  }\n}\n\n/**\n * Teaching quality score\n */\nasync function calculateTeachingScore(video, analysis) {\n  try {\n    const model = genAI.getGenerativeModel({ \n      model: CONFIG.GEMINI_MODEL,\n      generationConfig: {\n        maxOutputTokens: 50,\n        temperature: 0.1,\n      }\n    });\n\n    const duration = parseDuration(video.duration);\n\n    const prompt = `Rate teaching quality potential (0-10):\n\nTitle: \"${video.title}\"\nChannel: \"${video.channelTitle}\"\nDuration: ${formatDuration(duration)}\nViews: ${video.viewCount.toLocaleString()}\nLikes: ${video.likeCount.toLocaleString()}\nTarget Level: ${analysis.level}\n\nEvaluate:\n1. Professional title clarity\n2. Duration appropriateness (30min-10hrs ideal for courses)\n3. Channel credibility (educational brands)\n4. High engagement (like ratio, comment count)\n5. Comprehensive vs superficial\n\n10: Excellent professional course\n7-9: Good quality tutorial\n4-6: Basic/moderate quality\n0-3: Poor indicators\n\nReturn ONLY a number 0-10.`;\n\n    const result = await withTimeout(\n      model.generateContent(prompt),\n      CONFIG.AI_TIMEOUT,\n      'Teaching scoring timed out'\n    );\n\n    const response = await result.response;\n    const score = parseFloat(response.text().trim());\n\n    return isNaN(score) ? 5 : Math.max(0, Math.min(10, score));\n\n  } catch (error) {\n    // Fallback heuristic\n    const duration = parseDuration(video.duration);\n    let score = 5;\n\n    // Duration sweet spot\n    if (duration >= 30 && duration <= 600) score += 2;\n    else if (duration >= 15) score += 1;\n\n    // Channel credibility\n    const channelLower = video.channelTitle.toLowerCase();\n    const professionalKeywords = ['academy', 'university', 'tutorial', 'tech', 'code', 'dev'];\n    if (professionalKeywords.some(kw => channelLower.includes(kw))) score += 2;\n\n    // Engagement\n    const likeRatio = video.viewCount > 0 ? video.likeCount / video.viewCount : 0;\n    if (likeRatio > 0.03) score += 1;\n\n    return Math.min(10, Math.max(0, score));\n  }\n}\n\n/**\n * Video quality metrics score\n */\nfunction calculateQualityScore(video, preferLatest) {\n  const views = video.viewCount;\n  const likes = video.likeCount;\n  const duration = parseDuration(video.duration);\n\n  // Logarithmic view score\n  const viewScore = Math.min(10, Math.log10(views + 1) * 1.5);\n\n  // Engagement rate\n  const likeRatio = views > 0 ? likes / views : 0;\n  const engagementScore = Math.min(10, likeRatio * 200);\n\n  // Duration score\n  let durationScore;\n  if (duration >= 30 && duration <= 600) durationScore = 10;\n  else if (duration >= 15) durationScore = 7;\n  else if (duration >= 10) durationScore = 5;\n  else durationScore = 3;\n\n  // Recency score\n  const publishDate = new Date(video.publishedAt);\n  const monthsOld = (Date.now() - publishDate.getTime()) / (1000 * 60 * 60 * 24 * 30);\n\n  let recencyScore;\n  if (preferLatest) {\n    if (monthsOld < 6) recencyScore = 10;\n    else if (monthsOld < 12) recencyScore = 7;\n    else if (monthsOld < 24) recencyScore = 4;\n    else recencyScore = 2;\n  } else {\n    if (monthsOld < 12) recencyScore = 8;\n    else if (monthsOld < 36) recencyScore = 6;\n    else recencyScore = 4;\n  }\n\n  return preferLatest\n    ? viewScore * 0.2 + engagementScore * 0.2 + durationScore * 0.3 + recencyScore * 0.3\n    : viewScore * 0.3 + engagementScore * 0.3 + durationScore * 0.3 + recencyScore * 0.1;\n}\n\n/**\n * Engagement score\n */\nfunction calculateEngagementScore(video) {\n  const { viewCount, likeCount, commentCount } = video;\n\n  if (viewCount === 0) return 0;\n\n  const likeRatio = likeCount / viewCount;\n  const commentRatio = commentCount / viewCount;\n\n  const likeScore = Math.min(10, likeRatio * 200);\n  const commentScore = Math.min(10, commentRatio * 500);\n\n  return likeScore * 0.7 + commentScore * 0.3;\n}\n\n// ==================== CONTENT GENERATION ====================\n\n/**\n * Generate course content outline\n */\nasync function generateCourseContent(video, language, analysis) {\n  try {\n    const model = genAI.getGenerativeModel({ \n      model: CONFIG.GEMINI_MODEL,\n      generationConfig: {\n        maxOutputTokens: 1500,\n        temperature: 0.6,\n      }\n    });\n\n    const duration = parseDuration(video.duration);\n\n    const prompt = `Create a comprehensive course outline for tech learners.\n\nCOURSE INFO:\nTitle: \"${video.title}\"\nChannel: \"${video.channelTitle}\"\nDuration: ${formatDuration(duration)}\nDescription: ${video.description.substring(0, 500)}\n\nUSER CONTEXT:\nTopic: ${analysis.topic}\nLevel: ${analysis.level}\nTech Stack: ${analysis.techStack}\nVersion: ${analysis.version}\n\nCreate 12-20 specific learning modules in ${language === 'hindi' ? 'Hinglish (Hindi + English mix)' : 'English'}.\n\nREQUIREMENTS:\n1. Progress from fundamentals → intermediate → advanced\n2. Each module: 1-2 sentences explaining WHAT will be learned\n3. Be tech-specific and actionable (not vague)\n4. Use action verbs: Master, Build, Implement, Design, Optimize, Deploy\n5. Include hands-on projects and real-world applications\n6. Cover best practices and industry standards\n7. Make it feel like a complete professional curriculum\n\nGOOD EXAMPLES:\n✓ \"Master ${analysis.topic} fundamentals including syntax, data structures, and core concepts with practical examples\"\n✓ \"Build production-ready applications using modern best practices, design patterns, and scalable architecture\"\n✓ \"Implement advanced features like authentication, state management, and API integration for real-world projects\"\n\nBAD EXAMPLES:\n✗ \"Introduction\" (too vague)\n✗ \"Basics\" (not specific)\n✗ \"Overview\" (not actionable)\n\nFormat: Return ONLY bullet points starting with \"-\", no numbering, no extra text.`;\n\n    const result = await withTimeout(\n      model.generateContent(prompt),\n      CONFIG.AI_TIMEOUT,\n      'Content generation timed out'\n    );\n\n    const content = (await result.response).text();\n\n    const points = content\n      .split('\\n')\n      .map(line => line.trim())\n      .filter(line => line.length > 0)\n      .map(line => line.replace(/^[-*•]\\s*|\\d+\\.\\s*/g, '').trim())\n      .filter(line => line.length > 30 && line.length < 350)\n      .slice(0, 20);\n\n    if (points.length >= 8) return points;\n\n    // Fallback content\n    return [\n      `Master the fundamentals of ${analysis.topic} with comprehensive coverage from basics to advanced concepts`,\n      `Understand core principles, syntax, and essential features with clear, practical explanations`,\n      `Learn industry-standard best practices and coding conventions used by professional developers`,\n      `Build real-world projects to apply your knowledge and develop practical problem-solving skills`,\n      `Implement advanced features and techniques to create production-ready applications`,\n      `Explore ecosystem tools, libraries, and frameworks that enhance ${analysis.topic} development`,\n      `Debug and optimize code for better performance, maintainability, and scalability`,\n      `Deploy applications using modern DevOps practices and cloud platforms`,\n      `Work with databases, APIs, and external services to build full-stack solutions`,\n      `Master testing strategies including unit tests, integration tests, and end-to-end testing`,\n      `Understand design patterns and architectural principles for writing clean, maintainable code`,\n      `Learn version control with Git and collaborative development workflows on GitHub`\n    ];\n\n  } catch (error) {\n    console.error('⚠️ Content generation error:', error.message);\n\n    // Robust fallback\n    return [\n      `Learn ${analysis.topic} from beginner to professional level with comprehensive coverage`,\n      `Master fundamental concepts, syntax, and core principles with hands-on practice`,\n      `Build real-world projects to develop practical skills and portfolio-worthy applications`,\n      `Understand best practices, design patterns, and industry-standard development workflows`,\n      `Implement advanced features and optimize code for production environments`,\n      `Work with modern tools, libraries, and frameworks in the ${analysis.techStack} ecosystem`,\n      `Deploy and maintain applications using cloud platforms and DevOps practices`,\n      `Develop problem-solving abilities through coding challenges and real-world scenarios`\n    ];\n  }\n}\n\n/**\n * Generate course analysis/recommendation\n */\nasync function generateCourseAnalysis(query, video, language, analysis) {\n  try {\n    const model = genAI.getGenerativeModel({ \n      model: CONFIG.GEMINI_MODEL,\n      generationConfig: {\n        maxOutputTokens: 600,\n        temperature: 0.7,\n      }\n    });\n\n    const duration = parseDuration(video.duration);\n    const durationText = formatDuration(duration);\n\n    const prompt = `Write a compelling, personalized course recommendation for a tech learner.\n\nUSER QUERY: \"${query}\"\n\nCOURSE DETAILS:\n- Title: ${video.title}\n- Instructor: ${video.channelTitle}\n- Duration: ${durationText}\n- Views: ${video.viewCount.toLocaleString()}\n- Likes: ${video.likeCount.toLocaleString()}\n- Comments: ${video.commentCount.toLocaleString()}\n- Published: ${new Date(video.publishedAt).toLocaleDateString('en-US', { month: 'short', year: 'numeric' })}\n\nAI ANALYSIS:\n- Topic: ${analysis.topic}\n- Level: ${analysis.level}\n- Tech Stack: ${analysis.techStack}\n- Version: ${analysis.version}\n- Context: ${analysis.context}\n\nWrite in ${language === 'hindi' ? 'Hinglish (natural Hindi-English mix like \"Ye course bahut comprehensive hai with hands-on projects\")' : 'professional but friendly English'}.\n\nCreate a 5-6 sentence recommendation that:\n1. Opens with why THIS specific course perfectly matches their learning goal\n2. Highlights unique strengths (instructor credibility, comprehensiveness, teaching style, recency)\n3. Uses social proof naturally (views/engagement show it's trusted)\n4. Addresses their skill level and what they'll achieve\n5. Mentions practical aspects (projects, hands-on learning, real-world skills)\n6. Ends with an encouraging call-to-action\n\nTONE: Confident, enthusiastic friend who's a tech expert. Be specific, not generic.\n\nDON'T:\n- Use clichés like \"great course\" without context\n- Over-promise or exaggerate\n- Be overly salesy with excessive exclamations\n- Make vague claims\n\nDO:\n- Be specific about what they'll learn\n- Connect directly to their goal/career\n- Mention concrete numbers (duration, views, engagement)\n- Sound genuinely enthusiastic but authentic\n- Reference the technology stack and practical skills\n\nExample style (English): \"This comprehensive ${durationText} course is exactly what you need to master ${analysis.topic}. ${video.channelTitle} breaks down complex concepts into digestible lessons, and with ${video.viewCount.toLocaleString()} views and ${video.likeCount.toLocaleString()} likes, it's a proven resource trusted by thousands of learners...\"\n\nExample style (Hinglish): \"Agar aap ${analysis.topic} seriously seekhna chahte ho, toh ye ${durationText} ka course perfect hai aapke liye. ${video.channelTitle} ne har concept ko bahut clearly explain kiya hai, aur ${video.viewCount.toLocaleString()} views aur ${video.likeCount.toLocaleString()} likes dekh kar pata chalta hai ki ye trusted resource hai...\"\n\nWrite the complete recommendation now:`;\n\n    const result = await withTimeout(\n      model.generateContent(prompt),\n      CONFIG.AI_TIMEOUT,\n      'Analysis generation timed out'\n    );\n\n    const analysisText = (await result.response).text().trim();\n\n    return analysisText || generateFallbackAnalysis(video, analysis, language, durationText);\n\n  } catch (error) {\n    console.error('⚠️ Analysis generation error:', error.message);\n    return generateFallbackAnalysis(video, analysis, language, formatDuration(parseDuration(video.duration)));\n  }\n}\n\n/**\n * Fallback analysis generator\n */\nfunction generateFallbackAnalysis(video, analysis, language, durationText) {\n  if (language === 'hindi') {\n    return `Agar aap ${analysis.topic} master karna chahte ho, toh ye ${durationText} ka comprehensive course aapke liye perfect hai! ${video.channelTitle} ne is course mein ${analysis.level} level ke learners ko dhyan mein rakhte hue har concept ko detail se cover kiya hai. ${video.viewCount.toLocaleString()} views aur ${video.likeCount.toLocaleString()} likes clearly show karte hain ki ye ek trusted aur high-quality resource hai. Course mein theoretical knowledge ke saath-saath practical projects bhi include hain jo aapko real-world skills develop karne mein help karenge. ${analysis.techStack} ecosystem ke best practices aur industry standards bhi cover kiye gaye hain. Toh wait mat karo, aaj hi apni learning journey start karo aur apne career goals achieve karo!`;\n  }\n\n  return `If you're serious about mastering ${analysis.topic}, this ${durationText} comprehensive course is exactly what you need. ${video.channelTitle} has expertly designed this content for ${analysis.level} learners, covering everything from fundamentals to advanced concepts. With ${video.viewCount.toLocaleString()} views and ${video.likeCount.toLocaleString()} likes, it's clearly a trusted resource that delivers results. The course includes hands-on projects and real-world applications that will help you build practical skills employers are looking for. You'll also learn industry best practices and modern ${analysis.techStack} development workflows. Don't wait—start your learning journey today and take your skills to the next level!`;\n}\n\n// ==================== API HANDLERS ====================\n\n/**\n * Main POST handler\n */\nexport async function POST(request) {\n  const startTime = Date.now();\n  const requestId = `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n  try {\n    // Validate environment\n    validateEnvironment();\n\n    // Parse and validate request\n    const body = await request.json();\n    const { query, language = 'english', preferLatest = false } = body;\n\n    // Validate input\n    if (!query?.trim()) {\n      return NextResponse.json(\n        { success: false, error: 'Query parameter is required and cannot be empty' },\n        { status: 400 }\n      );\n    }\n\n    if (!['english', 'hindi'].includes(language.toLowerCase())) {\n      return NextResponse.json(\n        { success: false, error: 'Language must be either \"english\" or \"hindi\"' },\n        { status: 400 }\n      );\n    }\n\n    const sanitizedQuery = sanitizeQuery(query);\n\n    if (sanitizedQuery.length < 2) {\n      return NextResponse.json(\n        { success: false, error: 'Query is too short. Please provide a meaningful search term.' },\n        { status: 400 }\n      );\n    }\n\n    console.log(`\\n${'='.repeat(60)}`);\n    console.log(`🚀 NEW REQUEST [${requestId}]`);\n    console.log(`${'='.repeat(60)}`);\n    console.log(`📝 Query: \"${sanitizedQuery}\"`);\n    console.log(`🌐 Language: ${language}`);\n    console.log(`📅 Prefer Latest: ${preferLatest}`);\n    console.log(`⏰ Timestamp: ${new Date().toISOString()}`);\n    console.log(`${'='.repeat(60)}\\n`);\n\n    // Execute search with retry logic\n    const video = await retryWithBackoff(\n      () => searchYouTubeCourse(sanitizedQuery, language, preferLatest),\n      2, // Max 2 retries\n      2000 // 2 second base delay\n    );\n\n    // Handle no results\n    if (!video) {\n      console.log(`\\n❌ NO RESULTS FOUND [${requestId}]`);\n\n      const noResultsMessage = language === 'hindi'\n        ? `\"${sanitizedQuery}\" ke liye koi suitable course nahi mila. Kripya different keywords try karein, spelling check karein, ya thoda general search term use karein. Tech courses ke liye specific technology ka naam use karein (jaise \"React\", \"Python\", \"Figma\").`\n        : `No suitable courses found for \"${sanitizedQuery}\". Please try different keywords, check spelling, or use more general search terms. For tech courses, use specific technology names (e.g., \"React\", \"Python\", \"Figma\").`;\n\n      return NextResponse.json({\n        success: false,\n        video: null,\n        courseAnalysis: noResultsMessage,\n        courseContent: [],\n        metadata: {\n          requestId,\n          query: sanitizedQuery,\n          language,\n          preferLatest,\n          responseTime: `${Date.now() - startTime}ms`,\n          timestamp: new Date().toISOString()\n        },\n        suggestions: language === 'hindi'\n          ? [\n              'Keywords ko simplify karein (e.g., \"React complete course\" → \"React tutorial\")',\n              'Specific technology ka exact naam use karein',\n              'English terms try karein for better results',\n              'General terms se start karein (e.g., \"web development\" → \"HTML CSS\")'\n            ]\n          : [\n              'Try simplifying your keywords (e.g., \"React complete course\" → \"React tutorial\")',\n              'Use exact technology names',\n              'Try broader search terms',\n              'Check for typos or alternative spellings',\n              'Search for fundamental topics first'\n            ]\n      });\n    }\n\n    // Analyze query for content generation\n    const analysis = await analyzeQueryIntent(sanitizedQuery, language, preferLatest);\n\n    // Generate analysis and content in parallel\n    const [courseAnalysis, courseContent] = await Promise.all([\n      generateCourseAnalysis(sanitizedQuery, video, language, analysis),\n      generateCourseContent(video, language, analysis)\n    ]);\n\n    const responseTime = Date.now() - startTime;\n\n    console.log(`\\n${'='.repeat(60)}`);\n    console.log(`✅ REQUEST COMPLETED [${requestId}]`);\n    console.log(`${'='.repeat(60)}`);\n    console.log(`⏱️  Response Time: ${responseTime}ms`);\n    console.log(`🎥 Selected: \"${video.title.substring(0, 60)}...\"`);\n    console.log(`👤 Channel: ${video.channelTitle}`);\n    console.log(`⏳ Duration: ${formatDuration(parseDuration(video.duration))}`);\n    console.log(`📊 Score: ${video.finalScore.toFixed(2)}/10`);\n    console.log(`   - Relevance: ${video.relevanceScore.toFixed(1)}`);\n    console.log(`   - Teaching: ${video.teachingScore.toFixed(1)}`);\n    console.log(`   - Quality: ${video.qualityScore.toFixed(1)}`);\n    console.log(`   - Engagement: ${video.engagementScore.toFixed(1)}`);\n    console.log(`${'='.repeat(60)}\\n`);\n\n    // Return success response\n    return NextResponse.json({\n      success: true,\n      query: sanitizedQuery,\n      language,\n      preferLatest,\n      video: {\n        id: video.id,\n        title: video.title,\n        description: video.description,\n        thumbnail: video.thumbnail,\n        channelTitle: video.channelTitle,\n        publishedAt: video.publishedAt,\n        duration: video.duration,\n        durationFormatted: formatDuration(parseDuration(video.duration)),\n        viewCount: video.viewCount,\n        likeCount: video.likeCount,\n        commentCount: video.commentCount,\n        url: video.url,\n        embedUrl: `https://www.youtube.com/embed/${video.id}`,\n        scores: {\n          overall: parseFloat(video.finalScore.toFixed(2)),\n          relevance: parseFloat(video.relevanceScore.toFixed(2)),\n          teaching: parseFloat(video.teachingScore.toFixed(2)),\n          quality: parseFloat(video.qualityScore.toFixed(2)),\n          engagement: parseFloat(video.engagementScore.toFixed(2))\n        }\n      },\n      courseAnalysis,\n      courseContent,\n      metadata: {\n        requestId,\n        analyzedTopic: analysis.topic,\n        detectedLevel: analysis.level,\n        preferredFormat: analysis.format,\n        techStack: analysis.techStack,\n        version: analysis.version,\n        responseTime: `${responseTime}ms`,\n        timestamp: new Date().toISOString(),\n        apiVersion: '7.0.0'\n      }\n    }, {\n      headers: {\n        'Cache-Control': `public, s-maxage=${CONFIG.CACHE_TTL}, stale-while-revalidate`,\n        'X-Request-ID': requestId,\n      }\n    });\n\n  } catch (error) {\n    console.error(`\\n${'='.repeat(60)}`);\n    console.error(`❌ API ERROR [${requestId}]`);\n    console.error(`${'='.repeat(60)}`);\n    console.error('Error Name:', error.name);\n    console.error('Error Message:', error.message);\n    console.error('Stack Trace:', error.stack);\n    console.error(`${'='.repeat(60)}\\n`);\n\n    // Determine appropriate status code\n    let statusCode = 500;\n    let errorMessage = 'An unexpected error occurred while processing your request';\n\n    if (error.message.includes('API key') || error.message.includes('quota')) {\n      statusCode = 503;\n      errorMessage = 'Service temporarily unavailable. Please try again later.';\n    } else if (error.message.includes('timeout')) {\n      statusCode = 504;\n      errorMessage = 'Request timed out. Please try again.';\n    } else if (error.name === 'AbortError') {\n      statusCode = 504;\n      errorMessage = 'Request took too long and was cancelled.';\n    }\n\n    return NextResponse.json(\n      { \n        success: false,\n        error: errorMessage,\n        details: process.env.NODE_ENV === 'development' ? {\n          message: error.message,\n          stack: error.stack,\n          name: error.name\n        } : undefined,\n        metadata: {\n          requestId,\n          timestamp: new Date().toISOString(),\n          responseTime: `${Date.now() - startTime}ms`\n        }\n      },\n      { \n        status: statusCode,\n        headers: {\n          'X-Request-ID': requestId,\n        }\n      }\n    );\n  }\n}\n\n/**\n * GET handler - Health check and API info\n */\nexport async function GET() {\n  try {\n    validateEnvironment();\n\n    return NextResponse.json({\n      status: 'operational',\n      service: 'AI-Powered Tech Course Finder API',\n      version: '7.0.0',\n      environment: process.env.NODE_ENV || 'production',\n      timestamp: new Date().toISOString(),\n      uptime: process.uptime ? `${Math.floor(process.uptime())}s` : 'N/A',\n      features: [\n        '🧠 Advanced AI Query Analysis',\n        '🎯 Multi-Dimensional Relevance Scoring',\n        '👨‍🏫 Teaching Quality Evaluation',\n        '📊 Comprehensive Video Ranking',\n        '🔄 Intelligent Multi-Strategy Search',\n        '🎓 Context-Aware Content Generation',\n        '🌐 Bilingual Support (English/Hindi)',\n        '⚡ Production-Grade Error Handling',\n        '🔒 Input Validation & Sanitization',\n        '♻️ Retry Logic with Exponential Backoff',\n        '⏱️ Request Timeout Protection',\n        '📈 Performance Monitoring'\n      ],\n      endpoints: {\n        POST: {\n          path: '/api/search-resources',\n          description: 'Search for tech courses',\n          parameters: {\n            query: 'string (required) - Learning topic or technology',\n            language: 'string (optional) - \"english\" or \"hindi\" (default: \"english\")',\n            preferLatest: 'boolean (optional) - Prioritize recent content (default: false)'\n          },\n          example: {\n            query: 'React 18 complete course',\n            language: 'english',\n            preferLatest: true\n          }\n        },\n        GET: {\n          path: '/api/search-resources',\n          description: 'API health check and documentation'\n        }\n      },\n      techSupport: {\n        programming: TECH_DOMAINS.programming.slice(0, 10).join(', '),\n        webDev: TECH_DOMAINS.webDev.slice(0, 10).join(', '),\n        design: TECH_DOMAINS.design.join(', '),\n        moreCategories: 'Mobile, Backend, Database, DevOps, Data Science, and more'\n      },\n      scoring: {\n        relevance: '40% - How well video matches user intent and topic',\n        teaching: '30% - Teaching quality and comprehensiveness',\n        quality: '20% - Video metrics, production quality, engagement',\n        engagement: '10% - Community validation and feedback'\n      },\n      limits: {\n        maxQueryLength: 200,\n        searchTimeout: `${CONFIG.SEARCH_TIMEOUT}ms`,\n        aiTimeout: `${CONFIG.AI_TIMEOUT}ms`,\n        maxRetries: 3\n      }\n    }, {\n      headers: {\n        'Cache-Control': 'public, max-age=3600',\n      }\n    });\n\n  } catch (error) {\n    return NextResponse.json(\n      {\n        status: 'error',\n        error: 'Service configuration error',\n        timestamp: new Date().toISOString()\n      },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}