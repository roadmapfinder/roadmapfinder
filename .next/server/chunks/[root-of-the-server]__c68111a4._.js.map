{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/api/search-resources/route.js"],"sourcesContent":["// app/api/search-resources/route.js\nimport { NextResponse } from 'next/server';\nimport { GoogleGenerativeAI } from '@google/generative-ai';\n\nconst genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);\nconst YOUTUBE_API_KEY = process.env.YOUTUBE_API_KEY;\nconst YOUTUBE_SEARCH_URL = 'https://www.googleapis.com/youtube/v3/search';\nconst YOUTUBE_VIDEOS_URL = 'https://www.googleapis.com/youtube/v3/videos';\n\n/**\n * Deep query analysis to understand user intent\n */\nasync function analyzeQueryIntent(query, language, preferLatest) {\n  try {\n    const model = genAI.getGenerativeModel({ \n      model: 'gemini-2.0-flash-exp',\n      generationConfig: {\n        maxOutputTokens: 250,\n        temperature: 0.3,\n      }\n    });\n\n    const prompt = `Analyze this learning query deeply and extract key information:\n\nUser Query: \"${query}\"\nLanguage: ${language === 'hindi' ? 'Hindi/Hinglish' : 'English'}\nLatest Preference: ${preferLatest ? 'Yes - Recent content (2023-2025)' : 'No - Best quality regardless of date'}\n\nExtract:\n1. Core Topic/Skill: What exactly they want to learn (programming language, software, concept, skill)\n2. Level: Beginner/Intermediate/Advanced (infer from query or assume beginner if unclear)\n3. Format Preference: Full course, tutorial series, crash course, or specific topic\n4. Key Technologies/Tools: Any specific versions, frameworks, or tools mentioned\n5. Context Clues: Any hints about their goal (job, project, exam, hobby)\n\nThen create 3 optimized YouTube search queries:\n- Primary: Most specific and comprehensive search\n- Secondary: Broader but still focused search\n- Fallback: General search with educational keywords\n\nFormat your response as:\nTOPIC: [core topic]\nLEVEL: [level]\nFORMAT: [preferred format]\nTECH: [specific tech/version if any]\nPRIMARY: [best search query]\nSECONDARY: [broader search query]\nFALLBACK: [general search query]\n\nMake queries natural and effective for YouTube search algorithm.`;\n\n    const result = await model.generateContent(prompt);\n    const response = await result.response;\n    const analysisText = response.text().trim();\n\n    // Parse the structured response\n    const analysis = {\n      topic: analysisText.match(/TOPIC:\\s*(.+)/i)?.[1]?.trim() || query,\n      level: analysisText.match(/LEVEL:\\s*(.+)/i)?.[1]?.trim() || 'beginner',\n      format: analysisText.match(/FORMAT:\\s*(.+)/i)?.[1]?.trim() || 'full course',\n      tech: analysisText.match(/TECH:\\s*(.+)/i)?.[1]?.trim() || 'general',\n      primaryQuery: analysisText.match(/PRIMARY:\\s*(.+)/i)?.[1]?.trim(),\n      secondaryQuery: analysisText.match(/SECONDARY:\\s*(.+)/i)?.[1]?.trim(),\n      fallbackQuery: analysisText.match(/FALLBACK:\\s*(.+)/i)?.[1]?.trim()\n    };\n\n    console.log(`🧠 Query Analysis:\n   Topic: ${analysis.topic}\n   Level: ${analysis.level}\n   Format: ${analysis.format}\n   Tech: ${analysis.tech}`);\n\n    return analysis;\n\n  } catch (error) {\n    console.error('⚠️ Intent analysis failed:', error.message);\n    // Smart fallback with better defaults\n    const cleanQuery = query.toLowerCase().trim();\n    return {\n      topic: query,\n      level: 'beginner',\n      format: 'full course',\n      tech: 'general',\n      primaryQuery: `${cleanQuery} complete course tutorial ${language === 'hindi' ? 'hindi' : ''} ${preferLatest ? '2024' : ''}`.trim(),\n      secondaryQuery: `${cleanQuery} full tutorial ${language === 'hindi' ? 'hindi' : ''}`.trim(),\n      fallbackQuery: `${cleanQuery} ${language === 'hindi' ? 'hindi' : ''}`.trim()\n    };\n  }\n}\n\n/**\n * Enhanced multi-strategy search with intelligent fallback\n */\nasync function searchYouTubeCourse(query, language, preferLatest) {\n  try {\n    // Deep analysis first\n    const analysis = await analyzeQueryIntent(query, language, preferLatest);\n\n    // Strategy 1: Use AI-analyzed primary query (most specific)\n    console.log(`🔍 Strategy 1: Primary search - \"${analysis.primaryQuery}\"`);\n    let results = await executeYouTubeSearch(analysis.primaryQuery, language, preferLatest, 'medium');\n\n    // Strategy 2: Secondary query (broader)\n    if (!results || results.length === 0) {\n      console.log(`🔍 Strategy 2: Secondary search - \"${analysis.secondaryQuery}\"`);\n      results = await executeYouTubeSearch(analysis.secondaryQuery, language, preferLatest, 'medium');\n    }\n\n    // Strategy 3: Fallback query (general)\n    if (!results || results.length === 0) {\n      console.log(`🔍 Strategy 3: Fallback search - \"${analysis.fallbackQuery}\"`);\n      results = await executeYouTubeSearch(analysis.fallbackQuery, language, preferLatest, 'any');\n    }\n\n    // Strategy 4: Last resort - simple topic search\n    if (!results || results.length === 0) {\n      console.log(`🔍 Strategy 4: Basic topic search`);\n      const basicQuery = `${analysis.topic} ${language === 'hindi' ? 'hindi' : ''}`.trim();\n      results = await executeYouTubeSearch(basicQuery, language, preferLatest, 'any');\n    }\n\n    if (!results || results.length === 0) {\n      console.log('❌ All search strategies exhausted');\n      return null;\n    }\n\n    // Process with context-aware ranking\n    const processedVideos = await processAndRankVideos(results, query, analysis, language, preferLatest);\n\n    if (!processedVideos || processedVideos.length === 0) {\n      console.log('❌ No valid videos after processing');\n      return null;\n    }\n\n    const topVideo = processedVideos[0];\n    console.log(`✅ Selected: \"${topVideo.title}\"`);\n    console.log(`   Quality Score: ${topVideo.qualityScore.toFixed(2)}`);\n    console.log(`   Teaching Score: ${topVideo.teachingScore.toFixed(2)}`);\n    console.log(`   Relevance Score: ${topVideo.relevanceScore.toFixed(2)}`);\n\n    return topVideo;\n\n  } catch (error) {\n    console.error('❌ Search error:', error);\n    throw error;\n  }\n}\n\n/**\n * Execute YouTube search with optimized parameters\n */\nasync function executeYouTubeSearch(searchQuery, language, preferLatest, videoDuration = 'medium') {\n  try {\n    console.log(`   Searching: \"${searchQuery}\"`);\n\n    const searchParams = new URLSearchParams({\n      part: 'snippet',\n      q: searchQuery,\n      type: 'video',\n      maxResults: 30, // Increased for better selection\n      order: preferLatest ? 'date' : 'relevance',\n      videoDuration: videoDuration,\n      videoDefinition: 'any',\n      relevanceLanguage: language === 'hindi' ? 'hi' : 'en',\n      key: YOUTUBE_API_KEY,\n    });\n\n    const searchResponse = await fetch(`${YOUTUBE_SEARCH_URL}?${searchParams}`, {\n      signal: AbortSignal.timeout(12000)\n    });\n\n    if (!searchResponse.ok) {\n      const errorData = await searchResponse.json();\n      console.error('❌ YouTube Search Error:', errorData);\n      return null;\n    }\n\n    const searchData = await searchResponse.json();\n    console.log(`   Found ${searchData.items?.length || 0} videos`);\n\n    if (!searchData.items || searchData.items.length === 0) {\n      return null;\n    }\n\n    // Get detailed video information\n    const videoIds = searchData.items.map(item => item.id.videoId).join(',');\n    const videoParams = new URLSearchParams({\n      part: 'snippet,contentDetails,statistics',\n      id: videoIds,\n      key: YOUTUBE_API_KEY,\n    });\n\n    const videoResponse = await fetch(`${YOUTUBE_VIDEOS_URL}?${videoParams}`, {\n      signal: AbortSignal.timeout(12000)\n    });\n\n    if (!videoResponse.ok) {\n      console.error('❌ Video details fetch failed');\n      return null;\n    }\n\n    const videoData = await videoResponse.json();\n    console.log(`   Retrieved details for ${videoData.items?.length || 0} videos`);\n\n    return videoData.items;\n\n  } catch (error) {\n    console.error('⚠️ Search execution error:', error.message);\n    return null;\n  }\n}\n\n/**\n * Advanced video processing with comprehensive scoring\n */\nasync function processAndRankVideos(videoItems, originalQuery, analysis, language, preferLatest) {\n  // Format videos with complete data\n  const videos = videoItems.map(video => ({\n    id: video.id,\n    title: video.snippet.title,\n    description: video.snippet.description,\n    thumbnail: video.snippet.thumbnails.high?.url || video.snippet.thumbnails.medium?.url,\n    channelTitle: video.snippet.channelTitle,\n    publishedAt: video.snippet.publishedAt,\n    duration: video.contentDetails.duration,\n    viewCount: parseInt(video.statistics.viewCount || 0),\n    likeCount: parseInt(video.statistics.likeCount || 0),\n    commentCount: parseInt(video.statistics.commentCount || 0),\n    url: `https://www.youtube.com/watch?v=${video.id}`,\n  }));\n\n  // Apply quality filters (lenient but effective)\n  let filteredVideos = videos.filter(video => {\n    const duration = parseDuration(video.duration);\n    const hasViews = video.viewCount > 100; // Minimum engagement\n    const hasLikes = video.likeCount > 0;\n    const isReasonableLength = duration >= 5; // At least 5 minutes\n\n    return hasViews && hasLikes && isReasonableLength;\n  });\n\n  console.log(`📊 After quality filter: ${filteredVideos.length}/${videos.length} videos`);\n\n  if (filteredVideos.length === 0) {\n    console.log('⚠️ Filters too strict, using top videos by views');\n    filteredVideos = videos\n      .filter(v => parseDuration(v.duration) >= 3)\n      .sort((a, b) => b.viewCount - a.viewCount)\n      .slice(0, 15);\n  }\n\n  // Comprehensive scoring with parallel AI analysis\n  const scoredVideos = await Promise.all(\n    filteredVideos.map(async (video) => {\n      // Calculate all score dimensions\n      const [relevanceScore, teachingScore] = await Promise.all([\n        calculateRelevanceScore(video, originalQuery, analysis, language),\n        calculateTeachingQualityScore(video, analysis.level, language)\n      ]);\n\n      const qualityScore = calculateVideoQualityScore(video, preferLatest);\n      const engagementScore = calculateEngagementScore(video);\n\n      // Weighted final score\n      const finalScore = (\n        relevanceScore * 0.35 +      // Most important: matches user intent\n        teachingScore * 0.30 +        // Teaching quality\n        qualityScore * 0.20 +         // Video quality metrics\n        engagementScore * 0.15        // Community engagement\n      );\n\n      return {\n        ...video,\n        qualityScore: finalScore,\n        relevanceScore,\n        teachingScore,\n        videoQualityScore: qualityScore,\n        engagementScore\n      };\n    })\n  );\n\n  // Sort by final score\n  const rankedVideos = scoredVideos.sort((a, b) => b.qualityScore - a.qualityScore);\n\n  console.log(`📊 Top 5 videos by comprehensive score:`);\n  rankedVideos.slice(0, 5).forEach((v, i) => {\n    console.log(`   ${i + 1}. \"${v.title.substring(0, 60)}...\"`);\n    console.log(`      Overall: ${v.qualityScore.toFixed(2)} | Rel: ${v.relevanceScore.toFixed(1)} | Teach: ${v.teachingScore.toFixed(1)} | Qual: ${v.videoQualityScore.toFixed(1)}`);\n  });\n\n  return rankedVideos;\n}\n\n/**\n * AI-powered relevance scoring with deep matching\n */\nasync function calculateRelevanceScore(video, originalQuery, analysis, language) {\n  try {\n    const model = genAI.getGenerativeModel({ \n      model: 'gemini-2.0-flash-exp',\n      generationConfig: {\n        maxOutputTokens: 100,\n        temperature: 0.1,\n      }\n    });\n\n    const prompt = `Rate how well this video matches the learning goal (0-10 scale):\n\nUSER WANTS TO LEARN: \"${originalQuery}\"\nExtracted Topic: ${analysis.topic}\nDesired Level: ${analysis.level}\nPreferred Format: ${analysis.format}\nSpecific Tech: ${analysis.tech}\n\nVIDEO DETAILS:\nTitle: \"${video.title}\"\nChannel: \"${video.channelTitle}\"\nDescription (first 300 chars): \"${video.description.substring(0, 300)}\"\nDuration: ${formatDuration(parseDuration(video.duration))}\nLanguage Context: ${language === 'hindi' ? 'Hindi/Hinglish' : 'English'}\n\nSCORING CRITERIA (0-10):\n- 10: Perfect match - exactly what user needs (comprehensive course on exact topic)\n- 8-9: Excellent match - covers topic thoroughly with right approach\n- 6-7: Good match - relevant but may miss some aspects\n- 4-5: Moderate match - related but not ideal\n- 2-3: Weak match - loosely related\n- 0-1: Poor match - wrong topic or format\n\nConsider:\n1. Does title/description clearly indicate it teaches the exact topic?\n2. Is it comprehensive enough (right duration/depth)?\n3. Does it match the user's implied skill level?\n4. Is the language appropriate?\n5. Does it appear to be a structured course/tutorial vs random video?\n\nReturn ONLY a number between 0-10 (can use decimals like 8.5).`;\n\n    const result = await model.generateContent(prompt);\n    const response = await result.response;\n    const scoreText = response.text().trim();\n    const score = parseFloat(scoreText);\n\n    return isNaN(score) ? 5 : Math.min(10, Math.max(0, score));\n\n  } catch (error) {\n    // Enhanced fallback with semantic matching\n    const titleLower = video.title.toLowerCase();\n    const descLower = video.description.toLowerCase();\n    const queryLower = originalQuery.toLowerCase();\n    const topicLower = analysis.topic.toLowerCase();\n\n    let matchScore = 0;\n\n    // Exact topic match\n    if (titleLower.includes(topicLower)) matchScore += 3;\n    if (descLower.includes(topicLower)) matchScore += 1;\n\n    // Query word matching\n    const queryWords = queryLower.split(' ').filter(w => w.length > 3);\n    queryWords.forEach(word => {\n      if (titleLower.includes(word)) matchScore += 1.5;\n      if (descLower.includes(word)) matchScore += 0.5;\n    });\n\n    // Format indicators\n    const formatWords = ['course', 'tutorial', 'complete', 'full', 'comprehensive', 'masterclass', 'bootcamp'];\n    formatWords.forEach(word => {\n      if (titleLower.includes(word)) matchScore += 1;\n    });\n\n    // Level indicators\n    if (analysis.level === 'beginner' && (titleLower.includes('beginner') || titleLower.includes('basics'))) matchScore += 1;\n    if (analysis.level === 'advanced' && titleLower.includes('advanced')) matchScore += 1;\n\n    return Math.min(10, matchScore);\n  }\n}\n\n/**\n * Evaluate teaching quality and comprehensiveness\n */\nasync function calculateTeachingQualityScore(video, level, language) {\n  try {\n    const model = genAI.getGenerativeModel({ \n      model: 'gemini-2.0-flash-exp',\n      generationConfig: {\n        maxOutputTokens: 80,\n        temperature: 0.1,\n      }\n    });\n\n    const duration = parseDuration(video.duration);\n    const durationText = formatDuration(duration);\n\n    const prompt = `Rate the teaching quality potential of this video (0-10):\n\nTitle: \"${video.title}\"\nChannel: \"${video.channelTitle}\"\nDuration: ${durationText}\nTarget Level: ${level}\nViews: ${video.viewCount.toLocaleString()}\nEngagement: ${video.likeCount.toLocaleString()} likes, ${video.commentCount.toLocaleString()} comments\n\nEvaluate:\n1. Title clarity and professionalism\n2. Duration appropriateness (too short = superficial, too long = may be unfocused)\n3. Channel credibility (professional educational names vs random)\n4. Engagement metrics (high likes/comments = good teaching)\n5. Does it seem comprehensive or just a quick tip?\n\nScoring:\n- 9-10: Excellent teaching quality indicators (professional, comprehensive, highly engaged)\n- 7-8: Good teaching quality (clear, adequate depth, decent engagement)\n- 5-6: Moderate quality (basic but functional)\n- 3-4: Below average (unclear, too brief, low engagement)\n- 0-2: Poor quality indicators\n\nReturn ONLY a number 0-10.`;\n\n    const result = await model.generateContent(prompt);\n    const response = await result.response;\n    const score = parseFloat(response.text().trim());\n\n    return isNaN(score) ? 5 : Math.min(10, Math.max(0, score));\n\n  } catch (error) {\n    // Heuristic-based fallback\n    const duration = parseDuration(video.duration);\n    let score = 5;\n\n    // Duration quality for courses\n    if (duration >= 60 && duration <= 600) score += 2; // 1-10 hours ideal\n    else if (duration >= 30) score += 1.5; // 30min+ good\n    else if (duration >= 15) score += 1; // 15min+ acceptable\n    else if (duration < 10) score -= 1; // Too short\n\n    // Channel credibility signals\n    const channelLower = video.channelTitle.toLowerCase();\n    const professionalWords = ['academy', 'tutorial', 'university', 'institute', 'learning', 'education', 'tech', 'code'];\n    if (professionalWords.some(word => channelLower.includes(word))) score += 1;\n\n    // Title quality\n    const titleLower = video.title.toLowerCase();\n    const qualityWords = ['complete', 'comprehensive', 'full', 'master', 'ultimate', 'definitive'];\n    if (qualityWords.some(word => titleLower.includes(word))) score += 1;\n\n    // Engagement\n    const engagementRate = video.viewCount > 0 ? video.likeCount / video.viewCount : 0;\n    if (engagementRate > 0.03) score += 1; // 3%+ like rate is good\n    if (video.commentCount > 100) score += 0.5; // Active community\n\n    return Math.min(10, Math.max(0, score));\n  }\n}\n\n/**\n * Calculate video quality score based on metrics\n */\nfunction calculateVideoQualityScore(video, preferLatest) {\n  const views = parseInt(video.viewCount || 0);\n  const likes = parseInt(video.likeCount || 0);\n  const duration = parseDuration(video.duration);\n\n  // View score (logarithmic to prevent mega-viral videos from dominating)\n  const viewScore = Math.min(10, Math.log10(views + 1) * 1.5);\n\n  // Engagement rate\n  const engagementRate = views > 0 ? likes / views : 0;\n  const engagementScore = Math.min(10, engagementRate * 200); // 5% = full score\n\n  // Duration appropriateness for courses\n  let durationScore;\n  if (duration >= 60 && duration <= 600) durationScore = 10; // 1-10 hours ideal\n  else if (duration >= 30) durationScore = 8; // 30min+ good\n  else if (duration >= 15) durationScore = 6; // 15min+ okay\n  else if (duration >= 10) durationScore = 4; // 10min+ minimal\n  else durationScore = 2; // Too short\n\n  // Recency score\n  const publishDate = new Date(video.publishedAt);\n  const monthsOld = (Date.now() - publishDate.getTime()) / (1000 * 60 * 60 * 24 * 30);\n\n  let recencyScore;\n  if (preferLatest) {\n    // Strong preference for latest\n    if (monthsOld < 3) recencyScore = 10;\n    else if (monthsOld < 6) recencyScore = 8;\n    else if (monthsOld < 12) recencyScore = 6;\n    else if (monthsOld < 24) recencyScore = 4;\n    else recencyScore = 2;\n  } else {\n    // Moderate preference for recent, but quality matters more\n    if (monthsOld < 12) recencyScore = 8;\n    else if (monthsOld < 24) recencyScore = 7;\n    else if (monthsOld < 36) recencyScore = 6;\n    else recencyScore = 5;\n  }\n\n  // Weighted combination\n  if (preferLatest) {\n    return (viewScore * 0.2 + engagementScore * 0.2 + durationScore * 0.3 + recencyScore * 0.3);\n  } else {\n    return (viewScore * 0.3 + engagementScore * 0.3 + durationScore * 0.3 + recencyScore * 0.1);\n  }\n}\n\n/**\n * Calculate engagement score\n */\nfunction calculateEngagementScore(video) {\n  const views = parseInt(video.viewCount || 0);\n  const likes = parseInt(video.likeCount || 0);\n  const comments = parseInt(video.commentCount || 0);\n\n  if (views === 0) return 0;\n\n  const likeRate = likes / views;\n  const commentRate = comments / views;\n\n  // Normalize engagement metrics\n  const likeScore = Math.min(10, likeRate * 200); // 5% like rate = full score\n  const commentScore = Math.min(10, commentRate * 500); // 2% comment rate = full score\n\n  return (likeScore * 0.7 + commentScore * 0.3);\n}\n\n/**\n * Parse ISO 8601 duration to minutes\n */\nfunction parseDuration(duration) {\n  const match = duration.match(/PT(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)S)?/);\n  if (!match) return 0;\n  const hours = parseInt(match[1] || 0);\n  const minutes = parseInt(match[2] || 0);\n  const seconds = parseInt(match[3] || 0);\n  return hours * 60 + minutes + seconds / 60;\n}\n\n/**\n * Format duration\n */\nfunction formatDuration(minutes) {\n  const hours = Math.floor(minutes / 60);\n  const mins = Math.round(minutes % 60);\n  return hours > 0 ? `${hours}h ${mins}m` : `${mins}m`;\n}\n\n/**\n * Generate comprehensive course content outline\n */\nasync function generateCourseContent(video, language, analysis) {\n  try {\n    const model = genAI.getGenerativeModel({ \n      model: 'gemini-2.0-flash-exp',\n      generationConfig: {\n        maxOutputTokens: 1200,\n        temperature: 0.6,\n      }\n    });\n\n    const prompt = `Create a detailed, structured learning outline for this course.\n\nCourse Information:\n- Title: \"${video.title}\"\n- Channel: \"${video.channelTitle}\"\n- Duration: ${formatDuration(parseDuration(video.duration))}\n- Description: ${video.description.substring(0, 700)}\n\nUser Context:\n- Learning Goal: ${analysis.topic}\n- Skill Level: ${analysis.level}\n\nCreate 12-18 specific learning modules/topics in ${language === 'hindi' ? 'Hinglish (natural mix of Hindi & English)' : 'English'}.\n\nRequirements:\n1. Start with fundamentals/basics, progress to advanced\n2. Each module should be 1-2 sentences explaining WHAT will be learned\n3. Be specific and actionable (not vague like \"Introduction\")\n4. Use engaging action verbs: Learn, Master, Build, Understand, Create, Implement, Design, etc.\n5. Make it feel like a structured curriculum\n6. Include practical applications and real-world examples where relevant\n7. Coverage should feel comprehensive and complete\n\nGood examples:\n✓ \"Master the fundamental syntax and data types including strings, numbers, lists, and dictionaries\"\n✓ \"Build your first interactive web application using modern frameworks and best practices\"\n✓ \"Understand advanced concepts like closures, promises, and async/await for efficient code\"\n\nBad examples:\n✗ \"Introduction\" (too vague)\n✗ \"Basics\" (not specific)\n✗ \"Learn programming\" (not actionable)\n\nFormat: Use bullet points with \"-\", no numbering. Each point should feel substantial.`;\n\n    const result = await model.generateContent(prompt);\n    const content = (await result.response).text();\n\n    const points = content\n      .split('\\n')\n      .map(line => line.trim())\n      .filter(line => line.length > 0)\n      .map(line => line.replace(/^[-*•]\\s*|\\d+\\.\\s*/g, '').trim())\n      .filter(line => line.length > 30 && line.length < 300) // Ensure substantial points\n      .slice(0, 18);\n\n    return points.length >= 8 ? points : [\n      `Master the fundamentals of ${analysis.topic} from ground up`,\n      `Understand core concepts and principles with clear explanations`,\n      `Learn essential techniques and best practices used by professionals`,\n      `Practice with hands-on examples and real-world scenarios`,\n      `Build practical projects to solidify your understanding`,\n      `Explore advanced features and optimization strategies`,\n      `Develop problem-solving skills specific to ${analysis.topic}`,\n      `Apply your knowledge to create professional-grade solutions`\n    ];\n\n  } catch (error) {\n    console.error('⚠️ Content generation error:', error.message);\n    return [\n      `Learn ${analysis.topic} from beginner to advanced level`,\n      `Master fundamental concepts and core principles`,\n      `Practice with real-world examples and exercises`,\n      `Build practical projects to reinforce learning`,\n      `Understand best practices and industry standards`,\n      `Develop professional-level skills`\n    ];\n  }\n}\n\n/**\n * Generate intelligent, personalized course analysis\n */\nasync function generateCourseAnalysis(query, video, language, analysis) {\n  try {\n    const model = genAI.getGenerativeModel({ \n      model: 'gemini-2.0-flash-exp',\n      generationConfig: {\n        maxOutputTokens: 500,\n        temperature: 0.7,\n      }\n    });\n\n    const duration = Math.round(parseDuration(video.duration));\n    const hours = Math.floor(duration / 60);\n    const minutes = duration % 60;\n    const durationText = hours > 0 ? `${hours}h ${minutes}m` : `${minutes}m`;\n\n    const prompt = `Write a compelling, personalized course recommendation for someone wanting to learn \"${query}\".\n\nCourse Details:\n- Title: ${video.title}\n- Instructor/Channel: ${video.channelTitle}\n- Duration: ${durationText}\n- Views: ${video.viewCount.toLocaleString()}\n- Engagement: ${video.likeCount.toLocaleString()} likes, ${video.commentCount.toLocaleString()} comments\n- Published: ${new Date(video.publishedAt).toLocaleDateString()}\n\nUser Context:\n- What they want: ${analysis.topic}\n- Skill level: ${analysis.level}\n- Preferred format: ${analysis.format}\n\nWrite in ${language === 'hindi' ? 'Hinglish (natural, conversational mix of Hindi and English)' : 'English'}.\n\nCreate a 5-6 sentence recommendation that:\n1. Opens with why this course is perfect for their specific goal (be specific, not generic)\n2. Highlights the course's strongest qualities (credibility, comprehensiveness, teaching style)\n3. Mentions what makes it stand out (views, engagement, instructor reputation, etc.)\n4. Addresses their skill level appropriately\n5. Ends with an encouraging, motivating call-to-action\n\nTone: Friendly, encouraging, confident but not overselling. Sound like a helpful friend recommending a great resource.\n\nDO NOT:\n- Use generic phrases like \"great course\" without context\n- Just list features without explaining value\n- Be overly salesy or use excessive exclamations\n- Make unsupported claims\n\nDO:\n- Be specific about what they'll learn\n- Connect the course directly to their goal\n- Use social proof naturally (views/likes/comments)\n- Sound genuinely enthusiastic but authentic`;\n\n    const result = await model.generateContent(prompt);\n    const analysisText = (await result.response).text().trim();\n\n    return analysisText || `This comprehensive ${durationText} course by ${video.channelTitle} is perfect for mastering ${analysis.topic}. With ${video.viewCount.toLocaleString()} views and ${video.likeCount.toLocaleString()} likes, it's a proven resource that covers everything from basics to advanced concepts. The structured approach makes it ideal for ${analysis.level} learners. Start your learning journey today!`;\n\n  } catch (error) {\n    console.error('⚠️ Analysis error:', error.message);\n    const durationText = formatDuration(parseDuration(video.duration));\n    return language === 'hindi' \n      ? `Ye ${durationText} ka course ${analysis.topic} seekhne ke liye perfect hai! ${video.channelTitle} ne isko bahut achhe se explain kiya hai aur ${video.viewCount.toLocaleString()} views aur ${video.likeCount.toLocaleString()} likes dikhaate hain ki ye ek trusted resource hai. ${analysis.level} level ke liye ideal. Aaj hi shuru karein!`\n      : `This ${durationText} course is perfect for learning ${analysis.topic}. ${video.channelTitle} explains everything clearly, and with ${video.viewCount.toLocaleString()} views and ${video.likeCount.toLocaleString()} likes, it's a trusted resource. Ideal for ${analysis.level} level learners. Start today!`;\n  }\n}\n\n/**\n * Main API handler\n */\nexport async function POST(request) {\n  const startTime = Date.now();\n\n  try {\n    const body = await request.json();\n    const { query, language = 'english', preferLatest = false } = body;\n\n    if (!query?.trim()) {\n      return NextResponse.json({ error: 'Query is required' }, { status: 400 });\n    }\n\n    if (!YOUTUBE_API_KEY || !process.env.GEMINI_API_KEY) {\n      return NextResponse.json({ error: 'API keys not configured' }, { status: 500 });\n    }\n\n    console.log(`\\n🎯 === NEW REQUEST ===`);\n    console.log(`Query: \"${query}\"`);\n    console.log(`Language: ${language}`);\n    console.log(`Latest Preference: ${preferLatest}`);\n    console.log(`======================\\n`);\n\n    const video = await searchYouTubeCourse(query, language, preferLatest);\n\n    if (!video) {\n      console.log('❌ No course found after exhaustive search');\n      return NextResponse.json({\n        success: false,\n        video: null,\n        courseAnalysis: language === 'hindi' \n          ? `\"${query}\" ke liye koi suitable course nahi mila. Kripya alag keywords try karein, spelling check karein, ya thoda general search term use karein.`\n          : `No suitable courses found for \"${query}\". Please try different keywords, check spelling, or use more general search terms.`,\n        courseContent: [],\n        responseTime: `${Date.now() - startTime}ms`,\n        suggestions: language === 'hindi'\n          ? [\n              'Keywords ko simplify karein (jaise \"learn python basics\" ki jagah \"python tutorial\")',\n              'English terms try karein agar Hindi mein results nahi mil rahe',\n              'General terms use karein (jaise \"web development\" ki jagah \"html css\")'\n            ]\n          : [\n              'Try simplifying your keywords',\n              'Use more general terms',\n              'Check spelling and try alternative phrasings',\n              'Search for broader topics first'\n            ]\n      });\n    }\n\n    // Analyze the query deeply first\n    const analysis = await analyzeQueryIntent(query, language, preferLatest);\n\n    // Generate analysis and content in parallel with context\n    const [courseAnalysis, courseContent] = await Promise.all([\n      generateCourseAnalysis(query, video, language, analysis),\n      generateCourseContent(video, language, analysis)\n    ]);\n\n    const responseTime = Date.now() - startTime;\n    console.log(`\\n⚡ === REQUEST COMPLETED ===`);\n    console.log(`Time: ${responseTime}ms`);\n    console.log(`Selected: \"${video.title}\"`);\n    console.log(`Channel: ${video.channelTitle}`);\n    console.log(`Quality Score: ${video.qualityScore.toFixed(2)}/10`);\n    console.log(`===========================\\n`);\n\n    return NextResponse.json({\n      success: true,\n      query,\n      language,\n      preferLatest,\n      video: {\n        id: video.id,\n        title: video.title,\n        description: video.description,\n        thumbnail: video.thumbnail,\n        channelTitle: video.channelTitle,\n        publishedAt: video.publishedAt,\n        duration: video.duration,\n        durationFormatted: formatDuration(parseDuration(video.duration)),\n        viewCount: video.viewCount,\n        likeCount: video.likeCount,\n        commentCount: video.commentCount,\n        url: video.url,\n        // Quality metrics for transparency\n        scores: {\n          overall: parseFloat(video.qualityScore.toFixed(2)),\n          relevance: parseFloat(video.relevanceScore.toFixed(2)),\n          teaching: parseFloat(video.teachingScore.toFixed(2)),\n          quality: parseFloat(video.videoQualityScore.toFixed(2)),\n          engagement: parseFloat(video.engagementScore.toFixed(2))\n        }\n      },\n      courseAnalysis,\n      courseContent,\n      metadata: {\n        analyzedTopic: analysis.topic,\n        detectedLevel: analysis.level,\n        preferredFormat: analysis.format,\n        responseTime: `${responseTime}ms`,\n        searchStrategiesUsed: video.searchStrategy || 'multi-strategy',\n        totalVideosAnalyzed: video.totalAnalyzed || 'N/A'\n      }\n    });\n\n  } catch (error) {\n    console.error('❌ === API ERROR ===');\n    console.error('Error:', error);\n    console.error('Stack:', error.stack);\n    console.error('===================\\n');\n\n    return NextResponse.json(\n      { \n        success: false,\n        error: error.message || 'Internal server error',\n        details: process.env.NODE_ENV === 'development' ? error.stack : undefined,\n        timestamp: new Date().toISOString()\n      },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * Health check endpoint\n */\nexport async function GET() {\n  return NextResponse.json({\n    status: 'operational',\n    service: 'YouTube Course Finder API',\n    version: '6.0.0',\n    timestamp: new Date().toISOString(),\n    features: [\n      '🧠 Deep query intent analysis',\n      '🎯 Multi-dimensional relevance scoring',\n      '👨‍🏫 Teaching quality evaluation',\n      '📊 Comprehensive video ranking',\n      '🔄 Intelligent multi-strategy search',\n      '🎓 Context-aware content generation',\n      '🌐 Bilingual support (English/Hindi)',\n      '⚡ Optimized performance'\n    ],\n    endpoints: {\n      POST: '/api/search-resources - Search for courses',\n      GET: '/api/search-resources - API status'\n    },\n    scoring: {\n      relevance: '35% - How well video matches user intent',\n      teaching: '30% - Quality and comprehensiveness of teaching',\n      quality: '20% - Video metrics and production quality',\n      engagement: '15% - Community engagement and feedback'\n    }\n  });\n}"],"names":[],"mappings":"AAAA,oCAAoC;;;;;AACpC;AACA;;;AAEA,MAAM,QAAQ,IAAI,gKAAA,CAAA,qBAAkB,CAAC,QAAQ,GAAG,CAAC,cAAc;AAC/D,MAAM,kBAAkB,QAAQ,GAAG,CAAC,eAAe;AACnD,MAAM,qBAAqB;AAC3B,MAAM,qBAAqB;AAE3B;;CAEC,GACD,eAAe,mBAAmB,KAAK,EAAE,QAAQ,EAAE,YAAY;IAC7D,IAAI;QACF,MAAM,QAAQ,MAAM,kBAAkB,CAAC;YACrC,OAAO;YACP,kBAAkB;gBAChB,iBAAiB;gBACjB,aAAa;YACf;QACF;QAEA,MAAM,SAAS,CAAC;;aAEP,EAAE,MAAM;UACX,EAAE,aAAa,UAAU,mBAAmB,UAAU;mBAC7C,EAAE,eAAe,qCAAqC,uCAAuC;;;;;;;;;;;;;;;;;;;;;;;gEAuBhD,CAAC;QAE7D,MAAM,SAAS,MAAM,MAAM,eAAe,CAAC;QAC3C,MAAM,WAAW,MAAM,OAAO,QAAQ;QACtC,MAAM,eAAe,SAAS,IAAI,GAAG,IAAI;QAEzC,gCAAgC;QAChC,MAAM,WAAW;YACf,OAAO,aAAa,KAAK,CAAC,mBAAmB,CAAC,EAAE,EAAE,UAAU;YAC5D,OAAO,aAAa,KAAK,CAAC,mBAAmB,CAAC,EAAE,EAAE,UAAU;YAC5D,QAAQ,aAAa,KAAK,CAAC,oBAAoB,CAAC,EAAE,EAAE,UAAU;YAC9D,MAAM,aAAa,KAAK,CAAC,kBAAkB,CAAC,EAAE,EAAE,UAAU;YAC1D,cAAc,aAAa,KAAK,CAAC,qBAAqB,CAAC,EAAE,EAAE;YAC3D,gBAAgB,aAAa,KAAK,CAAC,uBAAuB,CAAC,EAAE,EAAE;YAC/D,eAAe,aAAa,KAAK,CAAC,sBAAsB,CAAC,EAAE,EAAE;QAC/D;QAEA,QAAQ,GAAG,CAAC,CAAC;UACP,EAAE,SAAS,KAAK,CAAC;UACjB,EAAE,SAAS,KAAK,CAAC;WAChB,EAAE,SAAS,MAAM,CAAC;SACpB,EAAE,SAAS,IAAI,EAAE;QAEtB,OAAO;IAET,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B,MAAM,OAAO;QACzD,sCAAsC;QACtC,MAAM,aAAa,MAAM,WAAW,GAAG,IAAI;QAC3C,OAAO;YACL,OAAO;YACP,OAAO;YACP,QAAQ;YACR,MAAM;YACN,cAAc,GAAG,WAAW,0BAA0B,EAAE,aAAa,UAAU,UAAU,GAAG,CAAC,EAAE,eAAe,SAAS,IAAI,CAAC,IAAI;YAChI,gBAAgB,GAAG,WAAW,eAAe,EAAE,aAAa,UAAU,UAAU,IAAI,CAAC,IAAI;YACzF,eAAe,GAAG,WAAW,CAAC,EAAE,aAAa,UAAU,UAAU,IAAI,CAAC,IAAI;QAC5E;IACF;AACF;AAEA;;CAEC,GACD,eAAe,oBAAoB,KAAK,EAAE,QAAQ,EAAE,YAAY;IAC9D,IAAI;QACF,sBAAsB;QACtB,MAAM,WAAW,MAAM,mBAAmB,OAAO,UAAU;QAE3D,4DAA4D;QAC5D,QAAQ,GAAG,CAAC,CAAC,iCAAiC,EAAE,SAAS,YAAY,CAAC,CAAC,CAAC;QACxE,IAAI,UAAU,MAAM,qBAAqB,SAAS,YAAY,EAAE,UAAU,cAAc;QAExF,wCAAwC;QACxC,IAAI,CAAC,WAAW,QAAQ,MAAM,KAAK,GAAG;YACpC,QAAQ,GAAG,CAAC,CAAC,mCAAmC,EAAE,SAAS,cAAc,CAAC,CAAC,CAAC;YAC5E,UAAU,MAAM,qBAAqB,SAAS,cAAc,EAAE,UAAU,cAAc;QACxF;QAEA,uCAAuC;QACvC,IAAI,CAAC,WAAW,QAAQ,MAAM,KAAK,GAAG;YACpC,QAAQ,GAAG,CAAC,CAAC,kCAAkC,EAAE,SAAS,aAAa,CAAC,CAAC,CAAC;YAC1E,UAAU,MAAM,qBAAqB,SAAS,aAAa,EAAE,UAAU,cAAc;QACvF;QAEA,gDAAgD;QAChD,IAAI,CAAC,WAAW,QAAQ,MAAM,KAAK,GAAG;YACpC,QAAQ,GAAG,CAAC,CAAC,iCAAiC,CAAC;YAC/C,MAAM,aAAa,GAAG,SAAS,KAAK,CAAC,CAAC,EAAE,aAAa,UAAU,UAAU,IAAI,CAAC,IAAI;YAClF,UAAU,MAAM,qBAAqB,YAAY,UAAU,cAAc;QAC3E;QAEA,IAAI,CAAC,WAAW,QAAQ,MAAM,KAAK,GAAG;YACpC,QAAQ,GAAG,CAAC;YACZ,OAAO;QACT;QAEA,qCAAqC;QACrC,MAAM,kBAAkB,MAAM,qBAAqB,SAAS,OAAO,UAAU,UAAU;QAEvF,IAAI,CAAC,mBAAmB,gBAAgB,MAAM,KAAK,GAAG;YACpD,QAAQ,GAAG,CAAC;YACZ,OAAO;QACT;QAEA,MAAM,WAAW,eAAe,CAAC,EAAE;QACnC,QAAQ,GAAG,CAAC,CAAC,aAAa,EAAE,SAAS,KAAK,CAAC,CAAC,CAAC;QAC7C,QAAQ,GAAG,CAAC,CAAC,kBAAkB,EAAE,SAAS,YAAY,CAAC,OAAO,CAAC,IAAI;QACnE,QAAQ,GAAG,CAAC,CAAC,mBAAmB,EAAE,SAAS,aAAa,CAAC,OAAO,CAAC,IAAI;QACrE,QAAQ,GAAG,CAAC,CAAC,oBAAoB,EAAE,SAAS,cAAc,CAAC,OAAO,CAAC,IAAI;QAEvE,OAAO;IAET,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mBAAmB;QACjC,MAAM;IACR;AACF;AAEA;;CAEC,GACD,eAAe,qBAAqB,WAAW,EAAE,QAAQ,EAAE,YAAY,EAAE,gBAAgB,QAAQ;IAC/F,IAAI;QACF,QAAQ,GAAG,CAAC,CAAC,eAAe,EAAE,YAAY,CAAC,CAAC;QAE5C,MAAM,eAAe,IAAI,gBAAgB;YACvC,MAAM;YACN,GAAG;YACH,MAAM;YACN,YAAY;YACZ,OAAO,eAAe,SAAS;YAC/B,eAAe;YACf,iBAAiB;YACjB,mBAAmB,aAAa,UAAU,OAAO;YACjD,KAAK;QACP;QAEA,MAAM,iBAAiB,MAAM,MAAM,GAAG,mBAAmB,CAAC,EAAE,cAAc,EAAE;YAC1E,QAAQ,YAAY,OAAO,CAAC;QAC9B;QAEA,IAAI,CAAC,eAAe,EAAE,EAAE;YACtB,MAAM,YAAY,MAAM,eAAe,IAAI;YAC3C,QAAQ,KAAK,CAAC,2BAA2B;YACzC,OAAO;QACT;QAEA,MAAM,aAAa,MAAM,eAAe,IAAI;QAC5C,QAAQ,GAAG,CAAC,CAAC,SAAS,EAAE,WAAW,KAAK,EAAE,UAAU,EAAE,OAAO,CAAC;QAE9D,IAAI,CAAC,WAAW,KAAK,IAAI,WAAW,KAAK,CAAC,MAAM,KAAK,GAAG;YACtD,OAAO;QACT;QAEA,iCAAiC;QACjC,MAAM,WAAW,WAAW,KAAK,CAAC,GAAG,CAAC,CAAA,OAAQ,KAAK,EAAE,CAAC,OAAO,EAAE,IAAI,CAAC;QACpE,MAAM,cAAc,IAAI,gBAAgB;YACtC,MAAM;YACN,IAAI;YACJ,KAAK;QACP;QAEA,MAAM,gBAAgB,MAAM,MAAM,GAAG,mBAAmB,CAAC,EAAE,aAAa,EAAE;YACxE,QAAQ,YAAY,OAAO,CAAC;QAC9B;QAEA,IAAI,CAAC,cAAc,EAAE,EAAE;YACrB,QAAQ,KAAK,CAAC;YACd,OAAO;QACT;QAEA,MAAM,YAAY,MAAM,cAAc,IAAI;QAC1C,QAAQ,GAAG,CAAC,CAAC,yBAAyB,EAAE,UAAU,KAAK,EAAE,UAAU,EAAE,OAAO,CAAC;QAE7E,OAAO,UAAU,KAAK;IAExB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B,MAAM,OAAO;QACzD,OAAO;IACT;AACF;AAEA;;CAEC,GACD,eAAe,qBAAqB,UAAU,EAAE,aAAa,EAAE,QAAQ,EAAE,QAAQ,EAAE,YAAY;IAC7F,mCAAmC;IACnC,MAAM,SAAS,WAAW,GAAG,CAAC,CAAA,QAAS,CAAC;YACtC,IAAI,MAAM,EAAE;YACZ,OAAO,MAAM,OAAO,CAAC,KAAK;YAC1B,aAAa,MAAM,OAAO,CAAC,WAAW;YACtC,WAAW,MAAM,OAAO,CAAC,UAAU,CAAC,IAAI,EAAE,OAAO,MAAM,OAAO,CAAC,UAAU,CAAC,MAAM,EAAE;YAClF,cAAc,MAAM,OAAO,CAAC,YAAY;YACxC,aAAa,MAAM,OAAO,CAAC,WAAW;YACtC,UAAU,MAAM,cAAc,CAAC,QAAQ;YACvC,WAAW,SAAS,MAAM,UAAU,CAAC,SAAS,IAAI;YAClD,WAAW,SAAS,MAAM,UAAU,CAAC,SAAS,IAAI;YAClD,cAAc,SAAS,MAAM,UAAU,CAAC,YAAY,IAAI;YACxD,KAAK,CAAC,gCAAgC,EAAE,MAAM,EAAE,EAAE;QACpD,CAAC;IAED,gDAAgD;IAChD,IAAI,iBAAiB,OAAO,MAAM,CAAC,CAAA;QACjC,MAAM,WAAW,cAAc,MAAM,QAAQ;QAC7C,MAAM,WAAW,MAAM,SAAS,GAAG,KAAK,qBAAqB;QAC7D,MAAM,WAAW,MAAM,SAAS,GAAG;QACnC,MAAM,qBAAqB,YAAY,GAAG,qBAAqB;QAE/D,OAAO,YAAY,YAAY;IACjC;IAEA,QAAQ,GAAG,CAAC,CAAC,yBAAyB,EAAE,eAAe,MAAM,CAAC,CAAC,EAAE,OAAO,MAAM,CAAC,OAAO,CAAC;IAEvF,IAAI,eAAe,MAAM,KAAK,GAAG;QAC/B,QAAQ,GAAG,CAAC;QACZ,iBAAiB,OACd,MAAM,CAAC,CAAA,IAAK,cAAc,EAAE,QAAQ,KAAK,GACzC,IAAI,CAAC,CAAC,GAAG,IAAM,EAAE,SAAS,GAAG,EAAE,SAAS,EACxC,KAAK,CAAC,GAAG;IACd;IAEA,kDAAkD;IAClD,MAAM,eAAe,MAAM,QAAQ,GAAG,CACpC,eAAe,GAAG,CAAC,OAAO;QACxB,iCAAiC;QACjC,MAAM,CAAC,gBAAgB,cAAc,GAAG,MAAM,QAAQ,GAAG,CAAC;YACxD,wBAAwB,OAAO,eAAe,UAAU;YACxD,8BAA8B,OAAO,SAAS,KAAK,EAAE;SACtD;QAED,MAAM,eAAe,2BAA2B,OAAO;QACvD,MAAM,kBAAkB,yBAAyB;QAEjD,uBAAuB;QACvB,MAAM,aACJ,iBAAiB,OAAY,sCAAsC;QACnE,gBAAgB,OAAc,mBAAmB;QACjD,eAAe,OAAe,wBAAwB;QACtD,kBAAkB,KAAY,uBAAuB;;QAGvD,OAAO;YACL,GAAG,KAAK;YACR,cAAc;YACd;YACA;YACA,mBAAmB;YACnB;QACF;IACF;IAGF,sBAAsB;IACtB,MAAM,eAAe,aAAa,IAAI,CAAC,CAAC,GAAG,IAAM,EAAE,YAAY,GAAG,EAAE,YAAY;IAEhF,QAAQ,GAAG,CAAC,CAAC,uCAAuC,CAAC;IACrD,aAAa,KAAK,CAAC,GAAG,GAAG,OAAO,CAAC,CAAC,GAAG;QACnC,QAAQ,GAAG,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,EAAE,KAAK,CAAC,SAAS,CAAC,GAAG,IAAI,IAAI,CAAC;QAC3D,QAAQ,GAAG,CAAC,CAAC,eAAe,EAAE,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,QAAQ,EAAE,EAAE,cAAc,CAAC,OAAO,CAAC,GAAG,UAAU,EAAE,EAAE,aAAa,CAAC,OAAO,CAAC,GAAG,SAAS,EAAE,EAAE,iBAAiB,CAAC,OAAO,CAAC,IAAI;IAClL;IAEA,OAAO;AACT;AAEA;;CAEC,GACD,eAAe,wBAAwB,KAAK,EAAE,aAAa,EAAE,QAAQ,EAAE,QAAQ;IAC7E,IAAI;QACF,MAAM,QAAQ,MAAM,kBAAkB,CAAC;YACrC,OAAO;YACP,kBAAkB;gBAChB,iBAAiB;gBACjB,aAAa;YACf;QACF;QAEA,MAAM,SAAS,CAAC;;sBAEE,EAAE,cAAc;iBACrB,EAAE,SAAS,KAAK,CAAC;eACnB,EAAE,SAAS,KAAK,CAAC;kBACd,EAAE,SAAS,MAAM,CAAC;eACrB,EAAE,SAAS,IAAI,CAAC;;;QAGvB,EAAE,MAAM,KAAK,CAAC;UACZ,EAAE,MAAM,YAAY,CAAC;gCACC,EAAE,MAAM,WAAW,CAAC,SAAS,CAAC,GAAG,KAAK;UAC5D,EAAE,eAAe,cAAc,MAAM,QAAQ,GAAG;kBACxC,EAAE,aAAa,UAAU,mBAAmB,UAAU;;;;;;;;;;;;;;;;;8DAiBV,CAAC;QAE3D,MAAM,SAAS,MAAM,MAAM,eAAe,CAAC;QAC3C,MAAM,WAAW,MAAM,OAAO,QAAQ;QACtC,MAAM,YAAY,SAAS,IAAI,GAAG,IAAI;QACtC,MAAM,QAAQ,WAAW;QAEzB,OAAO,MAAM,SAAS,IAAI,KAAK,GAAG,CAAC,IAAI,KAAK,GAAG,CAAC,GAAG;IAErD,EAAE,OAAO,OAAO;QACd,2CAA2C;QAC3C,MAAM,aAAa,MAAM,KAAK,CAAC,WAAW;QAC1C,MAAM,YAAY,MAAM,WAAW,CAAC,WAAW;QAC/C,MAAM,aAAa,cAAc,WAAW;QAC5C,MAAM,aAAa,SAAS,KAAK,CAAC,WAAW;QAE7C,IAAI,aAAa;QAEjB,oBAAoB;QACpB,IAAI,WAAW,QAAQ,CAAC,aAAa,cAAc;QACnD,IAAI,UAAU,QAAQ,CAAC,aAAa,cAAc;QAElD,sBAAsB;QACtB,MAAM,aAAa,WAAW,KAAK,CAAC,KAAK,MAAM,CAAC,CAAA,IAAK,EAAE,MAAM,GAAG;QAChE,WAAW,OAAO,CAAC,CAAA;YACjB,IAAI,WAAW,QAAQ,CAAC,OAAO,cAAc;YAC7C,IAAI,UAAU,QAAQ,CAAC,OAAO,cAAc;QAC9C;QAEA,oBAAoB;QACpB,MAAM,cAAc;YAAC;YAAU;YAAY;YAAY;YAAQ;YAAiB;YAAe;SAAW;QAC1G,YAAY,OAAO,CAAC,CAAA;YAClB,IAAI,WAAW,QAAQ,CAAC,OAAO,cAAc;QAC/C;QAEA,mBAAmB;QACnB,IAAI,SAAS,KAAK,KAAK,cAAc,CAAC,WAAW,QAAQ,CAAC,eAAe,WAAW,QAAQ,CAAC,SAAS,GAAG,cAAc;QACvH,IAAI,SAAS,KAAK,KAAK,cAAc,WAAW,QAAQ,CAAC,aAAa,cAAc;QAEpF,OAAO,KAAK,GAAG,CAAC,IAAI;IACtB;AACF;AAEA;;CAEC,GACD,eAAe,8BAA8B,KAAK,EAAE,KAAK,EAAE,QAAQ;IACjE,IAAI;QACF,MAAM,QAAQ,MAAM,kBAAkB,CAAC;YACrC,OAAO;YACP,kBAAkB;gBAChB,iBAAiB;gBACjB,aAAa;YACf;QACF;QAEA,MAAM,WAAW,cAAc,MAAM,QAAQ;QAC7C,MAAM,eAAe,eAAe;QAEpC,MAAM,SAAS,CAAC;;QAEZ,EAAE,MAAM,KAAK,CAAC;UACZ,EAAE,MAAM,YAAY,CAAC;UACrB,EAAE,aAAa;cACX,EAAE,MAAM;OACf,EAAE,MAAM,SAAS,CAAC,cAAc,GAAG;YAC9B,EAAE,MAAM,SAAS,CAAC,cAAc,GAAG,QAAQ,EAAE,MAAM,YAAY,CAAC,cAAc,GAAG;;;;;;;;;;;;;;;;0BAgBnE,CAAC;QAEvB,MAAM,SAAS,MAAM,MAAM,eAAe,CAAC;QAC3C,MAAM,WAAW,MAAM,OAAO,QAAQ;QACtC,MAAM,QAAQ,WAAW,SAAS,IAAI,GAAG,IAAI;QAE7C,OAAO,MAAM,SAAS,IAAI,KAAK,GAAG,CAAC,IAAI,KAAK,GAAG,CAAC,GAAG;IAErD,EAAE,OAAO,OAAO;QACd,2BAA2B;QAC3B,MAAM,WAAW,cAAc,MAAM,QAAQ;QAC7C,IAAI,QAAQ;QAEZ,+BAA+B;QAC/B,IAAI,YAAY,MAAM,YAAY,KAAK,SAAS,GAAG,mBAAmB;aACjE,IAAI,YAAY,IAAI,SAAS,KAAK,cAAc;aAChD,IAAI,YAAY,IAAI,SAAS,GAAG,oBAAoB;aACpD,IAAI,WAAW,IAAI,SAAS,GAAG,YAAY;QAEhD,8BAA8B;QAC9B,MAAM,eAAe,MAAM,YAAY,CAAC,WAAW;QACnD,MAAM,oBAAoB;YAAC;YAAW;YAAY;YAAc;YAAa;YAAY;YAAa;YAAQ;SAAO;QACrH,IAAI,kBAAkB,IAAI,CAAC,CAAA,OAAQ,aAAa,QAAQ,CAAC,QAAQ,SAAS;QAE1E,gBAAgB;QAChB,MAAM,aAAa,MAAM,KAAK,CAAC,WAAW;QAC1C,MAAM,eAAe;YAAC;YAAY;YAAiB;YAAQ;YAAU;YAAY;SAAa;QAC9F,IAAI,aAAa,IAAI,CAAC,CAAA,OAAQ,WAAW,QAAQ,CAAC,QAAQ,SAAS;QAEnE,aAAa;QACb,MAAM,iBAAiB,MAAM,SAAS,GAAG,IAAI,MAAM,SAAS,GAAG,MAAM,SAAS,GAAG;QACjF,IAAI,iBAAiB,MAAM,SAAS,GAAG,wBAAwB;QAC/D,IAAI,MAAM,YAAY,GAAG,KAAK,SAAS,KAAK,mBAAmB;QAE/D,OAAO,KAAK,GAAG,CAAC,IAAI,KAAK,GAAG,CAAC,GAAG;IAClC;AACF;AAEA;;CAEC,GACD,SAAS,2BAA2B,KAAK,EAAE,YAAY;IACrD,MAAM,QAAQ,SAAS,MAAM,SAAS,IAAI;IAC1C,MAAM,QAAQ,SAAS,MAAM,SAAS,IAAI;IAC1C,MAAM,WAAW,cAAc,MAAM,QAAQ;IAE7C,wEAAwE;IACxE,MAAM,YAAY,KAAK,GAAG,CAAC,IAAI,KAAK,KAAK,CAAC,QAAQ,KAAK;IAEvD,kBAAkB;IAClB,MAAM,iBAAiB,QAAQ,IAAI,QAAQ,QAAQ;IACnD,MAAM,kBAAkB,KAAK,GAAG,CAAC,IAAI,iBAAiB,MAAM,kBAAkB;IAE9E,uCAAuC;IACvC,IAAI;IACJ,IAAI,YAAY,MAAM,YAAY,KAAK,gBAAgB,IAAI,mBAAmB;SACzE,IAAI,YAAY,IAAI,gBAAgB,GAAG,cAAc;SACrD,IAAI,YAAY,IAAI,gBAAgB,GAAG,cAAc;SACrD,IAAI,YAAY,IAAI,gBAAgB,GAAG,iBAAiB;SACxD,gBAAgB,GAAG,YAAY;IAEpC,gBAAgB;IAChB,MAAM,cAAc,IAAI,KAAK,MAAM,WAAW;IAC9C,MAAM,YAAY,CAAC,KAAK,GAAG,KAAK,YAAY,OAAO,EAAE,IAAI,CAAC,OAAO,KAAK,KAAK,KAAK,EAAE;IAElF,IAAI;IACJ,IAAI,cAAc;QAChB,+BAA+B;QAC/B,IAAI,YAAY,GAAG,eAAe;aAC7B,IAAI,YAAY,GAAG,eAAe;aAClC,IAAI,YAAY,IAAI,eAAe;aACnC,IAAI,YAAY,IAAI,eAAe;aACnC,eAAe;IACtB,OAAO;QACL,2DAA2D;QAC3D,IAAI,YAAY,IAAI,eAAe;aAC9B,IAAI,YAAY,IAAI,eAAe;aACnC,IAAI,YAAY,IAAI,eAAe;aACnC,eAAe;IACtB;IAEA,uBAAuB;IACvB,IAAI,cAAc;QAChB,OAAQ,YAAY,MAAM,kBAAkB,MAAM,gBAAgB,MAAM,eAAe;IACzF,OAAO;QACL,OAAQ,YAAY,MAAM,kBAAkB,MAAM,gBAAgB,MAAM,eAAe;IACzF;AACF;AAEA;;CAEC,GACD,SAAS,yBAAyB,KAAK;IACrC,MAAM,QAAQ,SAAS,MAAM,SAAS,IAAI;IAC1C,MAAM,QAAQ,SAAS,MAAM,SAAS,IAAI;IAC1C,MAAM,WAAW,SAAS,MAAM,YAAY,IAAI;IAEhD,IAAI,UAAU,GAAG,OAAO;IAExB,MAAM,WAAW,QAAQ;IACzB,MAAM,cAAc,WAAW;IAE/B,+BAA+B;IAC/B,MAAM,YAAY,KAAK,GAAG,CAAC,IAAI,WAAW,MAAM,4BAA4B;IAC5E,MAAM,eAAe,KAAK,GAAG,CAAC,IAAI,cAAc,MAAM,+BAA+B;IAErF,OAAQ,YAAY,MAAM,eAAe;AAC3C;AAEA;;CAEC,GACD,SAAS,cAAc,QAAQ;IAC7B,MAAM,QAAQ,SAAS,KAAK,CAAC;IAC7B,IAAI,CAAC,OAAO,OAAO;IACnB,MAAM,QAAQ,SAAS,KAAK,CAAC,EAAE,IAAI;IACnC,MAAM,UAAU,SAAS,KAAK,CAAC,EAAE,IAAI;IACrC,MAAM,UAAU,SAAS,KAAK,CAAC,EAAE,IAAI;IACrC,OAAO,QAAQ,KAAK,UAAU,UAAU;AAC1C;AAEA;;CAEC,GACD,SAAS,eAAe,OAAO;IAC7B,MAAM,QAAQ,KAAK,KAAK,CAAC,UAAU;IACnC,MAAM,OAAO,KAAK,KAAK,CAAC,UAAU;IAClC,OAAO,QAAQ,IAAI,GAAG,MAAM,EAAE,EAAE,KAAK,CAAC,CAAC,GAAG,GAAG,KAAK,CAAC,CAAC;AACtD;AAEA;;CAEC,GACD,eAAe,sBAAsB,KAAK,EAAE,QAAQ,EAAE,QAAQ;IAC5D,IAAI;QACF,MAAM,QAAQ,MAAM,kBAAkB,CAAC;YACrC,OAAO;YACP,kBAAkB;gBAChB,iBAAiB;gBACjB,aAAa;YACf;QACF;QAEA,MAAM,SAAS,CAAC;;;UAGV,EAAE,MAAM,KAAK,CAAC;YACZ,EAAE,MAAM,YAAY,CAAC;YACrB,EAAE,eAAe,cAAc,MAAM,QAAQ,GAAG;eAC7C,EAAE,MAAM,WAAW,CAAC,SAAS,CAAC,GAAG,KAAK;;;iBAGpC,EAAE,SAAS,KAAK,CAAC;eACnB,EAAE,SAAS,KAAK,CAAC;;iDAEiB,EAAE,aAAa,UAAU,8CAA8C,UAAU;;;;;;;;;;;;;;;;;;;;;qFAqB7C,CAAC;QAElF,MAAM,SAAS,MAAM,MAAM,eAAe,CAAC;QAC3C,MAAM,UAAU,CAAC,MAAM,OAAO,QAAQ,EAAE,IAAI;QAE5C,MAAM,SAAS,QACZ,KAAK,CAAC,MACN,GAAG,CAAC,CAAA,OAAQ,KAAK,IAAI,IACrB,MAAM,CAAC,CAAA,OAAQ,KAAK,MAAM,GAAG,GAC7B,GAAG,CAAC,CAAA,OAAQ,KAAK,OAAO,CAAC,uBAAuB,IAAI,IAAI,IACxD,MAAM,CAAC,CAAA,OAAQ,KAAK,MAAM,GAAG,MAAM,KAAK,MAAM,GAAG,KAAK,4BAA4B;SAClF,KAAK,CAAC,GAAG;QAEZ,OAAO,OAAO,MAAM,IAAI,IAAI,SAAS;YACnC,CAAC,2BAA2B,EAAE,SAAS,KAAK,CAAC,eAAe,CAAC;YAC7D,CAAC,+DAA+D,CAAC;YACjE,CAAC,mEAAmE,CAAC;YACrE,CAAC,wDAAwD,CAAC;YAC1D,CAAC,uDAAuD,CAAC;YACzD,CAAC,qDAAqD,CAAC;YACvD,CAAC,2CAA2C,EAAE,SAAS,KAAK,EAAE;YAC9D,CAAC,2DAA2D,CAAC;SAC9D;IAEH,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gCAAgC,MAAM,OAAO;QAC3D,OAAO;YACL,CAAC,MAAM,EAAE,SAAS,KAAK,CAAC,gCAAgC,CAAC;YACzD,CAAC,+CAA+C,CAAC;YACjD,CAAC,+CAA+C,CAAC;YACjD,CAAC,8CAA8C,CAAC;YAChD,CAAC,gDAAgD,CAAC;YAClD,CAAC,iCAAiC,CAAC;SACpC;IACH;AACF;AAEA;;CAEC,GACD,eAAe,uBAAuB,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ;IACpE,IAAI;QACF,MAAM,QAAQ,MAAM,kBAAkB,CAAC;YACrC,OAAO;YACP,kBAAkB;gBAChB,iBAAiB;gBACjB,aAAa;YACf;QACF;QAEA,MAAM,WAAW,KAAK,KAAK,CAAC,cAAc,MAAM,QAAQ;QACxD,MAAM,QAAQ,KAAK,KAAK,CAAC,WAAW;QACpC,MAAM,UAAU,WAAW;QAC3B,MAAM,eAAe,QAAQ,IAAI,GAAG,MAAM,EAAE,EAAE,QAAQ,CAAC,CAAC,GAAG,GAAG,QAAQ,CAAC,CAAC;QAExE,MAAM,SAAS,CAAC,qFAAqF,EAAE,MAAM;;;SAGxG,EAAE,MAAM,KAAK,CAAC;sBACD,EAAE,MAAM,YAAY,CAAC;YAC/B,EAAE,aAAa;SAClB,EAAE,MAAM,SAAS,CAAC,cAAc,GAAG;cAC9B,EAAE,MAAM,SAAS,CAAC,cAAc,GAAG,QAAQ,EAAE,MAAM,YAAY,CAAC,cAAc,GAAG;aAClF,EAAE,IAAI,KAAK,MAAM,WAAW,EAAE,kBAAkB,GAAG;;;kBAG9C,EAAE,SAAS,KAAK,CAAC;eACpB,EAAE,SAAS,KAAK,CAAC;oBACZ,EAAE,SAAS,MAAM,CAAC;;SAE7B,EAAE,aAAa,UAAU,gEAAgE,UAAU;;;;;;;;;;;;;;;;;;;;;4CAqBhE,CAAC;QAEzC,MAAM,SAAS,MAAM,MAAM,eAAe,CAAC;QAC3C,MAAM,eAAe,CAAC,MAAM,OAAO,QAAQ,EAAE,IAAI,GAAG,IAAI;QAExD,OAAO,gBAAgB,CAAC,mBAAmB,EAAE,aAAa,WAAW,EAAE,MAAM,YAAY,CAAC,0BAA0B,EAAE,SAAS,KAAK,CAAC,OAAO,EAAE,MAAM,SAAS,CAAC,cAAc,GAAG,WAAW,EAAE,MAAM,SAAS,CAAC,cAAc,GAAG,mIAAmI,EAAE,SAAS,KAAK,CAAC,6CAA6C,CAAC;IAEja,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,sBAAsB,MAAM,OAAO;QACjD,MAAM,eAAe,eAAe,cAAc,MAAM,QAAQ;QAChE,OAAO,aAAa,UAChB,CAAC,GAAG,EAAE,aAAa,WAAW,EAAE,SAAS,KAAK,CAAC,8BAA8B,EAAE,MAAM,YAAY,CAAC,6CAA6C,EAAE,MAAM,SAAS,CAAC,cAAc,GAAG,WAAW,EAAE,MAAM,SAAS,CAAC,cAAc,GAAG,oDAAoD,EAAE,SAAS,KAAK,CAAC,0CAA0C,CAAC,GAChV,CAAC,KAAK,EAAE,aAAa,gCAAgC,EAAE,SAAS,KAAK,CAAC,EAAE,EAAE,MAAM,YAAY,CAAC,uCAAuC,EAAE,MAAM,SAAS,CAAC,cAAc,GAAG,WAAW,EAAE,MAAM,SAAS,CAAC,cAAc,GAAG,2CAA2C,EAAE,SAAS,KAAK,CAAC,6BAA6B,CAAC;IACrT;AACF;AAKO,eAAe,KAAK,OAAO;IAChC,MAAM,YAAY,KAAK,GAAG;IAE1B,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,KAAK,EAAE,WAAW,SAAS,EAAE,eAAe,KAAK,EAAE,GAAG;QAE9D,IAAI,CAAC,OAAO,QAAQ;YAClB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAoB,GAAG;gBAAE,QAAQ;YAAI;QACzE;QAEA,IAAI,CAAC,mBAAmB,CAAC,QAAQ,GAAG,CAAC,cAAc,EAAE;YACnD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA0B,GAAG;gBAAE,QAAQ;YAAI;QAC/E;QAEA,QAAQ,GAAG,CAAC,CAAC,wBAAwB,CAAC;QACtC,QAAQ,GAAG,CAAC,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QAC/B,QAAQ,GAAG,CAAC,CAAC,UAAU,EAAE,UAAU;QACnC,QAAQ,GAAG,CAAC,CAAC,mBAAmB,EAAE,cAAc;QAChD,QAAQ,GAAG,CAAC,CAAC,wBAAwB,CAAC;QAEtC,MAAM,QAAQ,MAAM,oBAAoB,OAAO,UAAU;QAEzD,IAAI,CAAC,OAAO;YACV,QAAQ,GAAG,CAAC;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,SAAS;gBACT,OAAO;gBACP,gBAAgB,aAAa,UACzB,CAAC,CAAC,EAAE,MAAM,yIAAyI,CAAC,GACpJ,CAAC,+BAA+B,EAAE,MAAM,mFAAmF,CAAC;gBAChI,eAAe,EAAE;gBACjB,cAAc,GAAG,KAAK,GAAG,KAAK,UAAU,EAAE,CAAC;gBAC3C,aAAa,aAAa,UACtB;oBACE;oBACA;oBACA;iBACD,GACD;oBACE;oBACA;oBACA;oBACA;iBACD;YACP;QACF;QAEA,iCAAiC;QACjC,MAAM,WAAW,MAAM,mBAAmB,OAAO,UAAU;QAE3D,yDAAyD;QACzD,MAAM,CAAC,gBAAgB,cAAc,GAAG,MAAM,QAAQ,GAAG,CAAC;YACxD,uBAAuB,OAAO,OAAO,UAAU;YAC/C,sBAAsB,OAAO,UAAU;SACxC;QAED,MAAM,eAAe,KAAK,GAAG,KAAK;QAClC,QAAQ,GAAG,CAAC,CAAC,6BAA6B,CAAC;QAC3C,QAAQ,GAAG,CAAC,CAAC,MAAM,EAAE,aAAa,EAAE,CAAC;QACrC,QAAQ,GAAG,CAAC,CAAC,WAAW,EAAE,MAAM,KAAK,CAAC,CAAC,CAAC;QACxC,QAAQ,GAAG,CAAC,CAAC,SAAS,EAAE,MAAM,YAAY,EAAE;QAC5C,QAAQ,GAAG,CAAC,CAAC,eAAe,EAAE,MAAM,YAAY,CAAC,OAAO,CAAC,GAAG,GAAG,CAAC;QAChE,QAAQ,GAAG,CAAC,CAAC,6BAA6B,CAAC;QAE3C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT;YACA;YACA;YACA,OAAO;gBACL,IAAI,MAAM,EAAE;gBACZ,OAAO,MAAM,KAAK;gBAClB,aAAa,MAAM,WAAW;gBAC9B,WAAW,MAAM,SAAS;gBAC1B,cAAc,MAAM,YAAY;gBAChC,aAAa,MAAM,WAAW;gBAC9B,UAAU,MAAM,QAAQ;gBACxB,mBAAmB,eAAe,cAAc,MAAM,QAAQ;gBAC9D,WAAW,MAAM,SAAS;gBAC1B,WAAW,MAAM,SAAS;gBAC1B,cAAc,MAAM,YAAY;gBAChC,KAAK,MAAM,GAAG;gBACd,mCAAmC;gBACnC,QAAQ;oBACN,SAAS,WAAW,MAAM,YAAY,CAAC,OAAO,CAAC;oBAC/C,WAAW,WAAW,MAAM,cAAc,CAAC,OAAO,CAAC;oBACnD,UAAU,WAAW,MAAM,aAAa,CAAC,OAAO,CAAC;oBACjD,SAAS,WAAW,MAAM,iBAAiB,CAAC,OAAO,CAAC;oBACpD,YAAY,WAAW,MAAM,eAAe,CAAC,OAAO,CAAC;gBACvD;YACF;YACA;YACA;YACA,UAAU;gBACR,eAAe,SAAS,KAAK;gBAC7B,eAAe,SAAS,KAAK;gBAC7B,iBAAiB,SAAS,MAAM;gBAChC,cAAc,GAAG,aAAa,EAAE,CAAC;gBACjC,sBAAsB,MAAM,cAAc,IAAI;gBAC9C,qBAAqB,MAAM,aAAa,IAAI;YAC9C;QACF;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC;QACd,QAAQ,KAAK,CAAC,UAAU;QACxB,QAAQ,KAAK,CAAC,UAAU,MAAM,KAAK;QACnC,QAAQ,KAAK,CAAC;QAEd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,OAAO,MAAM,OAAO,IAAI;YACxB,SAAS,uCAAyC,MAAM,KAAK;YAC7D,WAAW,IAAI,OAAO,WAAW;QACnC,GACA;YAAE,QAAQ;QAAI;IAElB;AACF;AAKO,eAAe;IACpB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QACvB,QAAQ;QACR,SAAS;QACT,SAAS;QACT,WAAW,IAAI,OAAO,WAAW;QACjC,UAAU;YACR;YACA;YACA;YACA;YACA;YACA;YACA;YACA;SACD;QACD,WAAW;YACT,MAAM;YACN,KAAK;QACP;QACA,SAAS;YACP,WAAW;YACX,UAAU;YACV,SAAS;YACT,YAAY;QACd;IACF;AACF","debugId":null}}]
}