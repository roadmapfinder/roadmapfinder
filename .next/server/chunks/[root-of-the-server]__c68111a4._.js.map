{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/api/search-resources/route.js"],"sourcesContent":["// app/api/search-resources/route.js\nimport { NextResponse } from 'next/server';\nimport { GoogleGenerativeAI } from '@google/generative-ai';\n\n// Initialize Gemini AI with 2.5 Flash\nconst genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);\n\n// YouTube API configuration\nconst YOUTUBE_API_KEY = process.env.YOUTUBE_API_KEY;\nconst YOUTUBE_SEARCH_URL = 'https://www.googleapis.com/youtube/v3/search';\nconst YOUTUBE_VIDEOS_URL = 'https://www.googleapis.com/youtube/v3/videos';\n\n/**\n * Intelligent query analysis using Gemini 2.5 Flash\n */\nasync function analyzeQueryWithAI(query, language, preferLatest) {\n  try {\n    const model = genAI.getGenerativeModel({ \n      model: 'gemini-2.0-flash-exp',\n      generationConfig: {\n        maxOutputTokens: 150,\n        temperature: 0.2,\n      }\n    });\n\n    const prompt = `You are an intelligent AI YouTube Course Finder designed to discover high-quality, complete learning resources for users.\n\nUser Query: \"${query}\"  \nPreferred Language: ${language}  \nPreference: ${preferLatest ? 'Latest/Recent courses' : 'Best quality courses'}\n\nYour primary goal:\n1. Generate the most precise YouTube search query for the requested course.\n2. Once videos are fetched (via YouTube API), analyze the metadata — including **title, description, and chapters (if available)** — to summarize what the course covers in a clear and structured **overview + documentation-style format**.\n\n-----------------------------------------\nGuidelines for Search Query Generation:\n-----------------------------------------\n1. Identify the **core learning topic or skill** (e.g., “Python”, “Tally”, “Excel”, “React.js”, “Photoshop”).\n2. Add educational keywords such as:\n   - \"complete course\", \"full tutorial\", \"step by step\", \"beginner to advanced\", \"masterclass\", \"in-depth guide\"\n3. Ensure **language accuracy**:\n   - If ${language} = \"Hindi\", include \"Hindi\" or \"हिंदी\" in the query.\n   - If ${language} = \"English\", include \"English\".\n4. Apply the user’s content preference:\n   - If preferLatest = true → add \"2023\", \"2024\", or \"2025\" for recent uploads.\n   - Else → prioritize \"comprehensive\", \"well-structured\", and \"long-duration\" courses.\n5. Keep the final search query **4–10 words**.\n6. If no exact match exists (e.g., no Hindi or latest course), fallback gracefully:\n   - Fetch the **best available** alternative that still matches the topic closely (even in another language or older version).\n7. Return **only one optimized search query**, no explanations or extra text.\n\n-----------------------------------------\nGuidelines for Course Overview Generation:\n-----------------------------------------\nAfter fetching YouTube API results, analyze the selected video metadata and produce a short structured documentation format with:\n\n- **Course Title:**  \n  (Fetched from YouTube video title)\n  \n- **Language:**  \n  (Based on user preference or detected automatically)\n\n- **Duration:**  \n  (If available from YouTube API)\n\n- **Course Overview (2–3 lines):**  \n  Summarize what this course teaches and who it’s for.\n\n- **Key Modules or Topics Covered:**  \n  - List key concepts or chapters (based on video description or chapters metadata)\n  - Use bullet points for clarity\n\n- **Why This Course Is Useful:**  \n  2–3 bullet points about what makes this course valuable (e.g., hands-on examples, project-based, covers basics to advanced)\n\n-----------------------------------------\nExpected Output Format:\n-----------------------------------------\n{\n  \"search_query\": \"optimized YouTube search query\",\n  \"course_overview\": {\n    \"title\": \"Fetched Course Title\",\n    \"language\": \"Hindi/English\",\n    \"duration\": \"e.g., 5 hours\",\n    \"overview\": \"Short summary of what the course teaches\",\n    \"modules\": [\n      \"Topic 1: Introduction\",\n      \"Topic 2: Core Concepts\",\n      \"Topic 3: Advanced Techniques\",\n      ...\n    ],\n    \"why_useful\": [\n      \"Covers from basics to expert level\",\n      \"Includes hands-on examples\",\n      \"Latest version explained\"\n    ]\n  }\n}\n\n-----------------------------------------\nGoal:\n-----------------------------------------\nAlways ensure the user receives:\n- The **most accurate course** for their topic and language\n- A **concise, well-structured overview** of what the course teaches\n- A **fallback suggestion** if the preferred course isn’t available\n`;\n\n    const result = await model.generateContent(prompt);\n    const response = await result.response;\n    const enhancedQuery = response.text().trim().replace(/['\"]/g, '');\n\n    console.log(`🤖 AI Enhanced Query: \"${query}\" → \"${enhancedQuery}\"`);\n\n    return enhancedQuery;\n  } catch (error) {\n    console.error('AI query analysis error:', error);\n    // Fallback to manual enhancement\n    let fallbackQuery = query;\n    if (language === 'hindi') {\n      fallbackQuery += ' hindi tutorial';\n    } else {\n      fallbackQuery += ' english tutorial';\n    }\n    if (preferLatest) {\n      fallbackQuery += ' 2024';\n    }\n    return fallbackQuery;\n  }\n}\n\n/**\n * Validate if video is relevant to user query using AI\n */\nasync function validateVideoRelevance(video, originalQuery, language) {\n  try {\n    const model = genAI.getGenerativeModel({ \n      model: 'gemini-2.0-flash-exp',\n      generationConfig: {\n        maxOutputTokens: 50,\n        temperature: 0.1,\n      }\n    });\n\n    const prompt = `Is this YouTube video relevant for someone wanting to learn: \"${originalQuery}\"?\n\nVideo Title: ${video.title}\nChannel: ${video.channelTitle}\nDescription: ${video.description.substring(0, 300)}\n\nExpected Language: ${language === 'hindi' ? 'Hindi/Hinglish' : 'English'}\n\nAnswer with ONLY \"YES\" if highly relevant OR \"NO\" if not relevant.`;\n\n    const result = await model.generateContent(prompt);\n    const response = await result.response;\n    const answer = response.text().trim().toUpperCase();\n\n    return answer.includes('YES');\n  } catch (error) {\n    console.error('Video validation error:', error);\n    return true; // Default to true on error\n  }\n}\n\n/**\n * Calculate video quality score\n */\nfunction calculateVideoScore(video, preferLatest) {\n  const views = parseInt(video.viewCount || 0);\n  const likes = parseInt(video.likeCount || 0);\n  const duration = parseDuration(video.duration);\n\n  // Engagement metrics\n  const engagementRate = views > 0 ? likes / views : 0;\n  const viewScore = Math.log10(views + 1);\n  const engagementScore = engagementRate * 10000;\n\n  // Duration scoring - prefer comprehensive courses\n  let durationScore;\n  if (duration >= 30 && duration <= 300) {\n    durationScore = 3; // 30min-5hr sweet spot\n  } else if (duration >= 15 && duration <= 420) {\n    durationScore = 2; // 15min-7hr acceptable\n  } else if (duration >= 10) {\n    durationScore = 1; // At least 10 minutes\n  } else {\n    durationScore = 0.3; // Too short\n  }\n\n  // Recency scoring\n  const publishDate = new Date(video.publishedAt);\n  const monthsOld = (Date.now() - publishDate.getTime()) / (1000 * 60 * 60 * 24 * 30);\n\n  let recencyScore;\n  if (preferLatest) {\n    // Strong preference for recent content\n    if (monthsOld < 3) recencyScore = 5;\n    else if (monthsOld < 6) recencyScore = 4;\n    else if (monthsOld < 12) recencyScore = 2;\n    else if (monthsOld < 24) recencyScore = 1;\n    else recencyScore = 0.2;\n  } else {\n    // Balanced - not too old, not too new\n    if (monthsOld < 6) recencyScore = 2;\n    else if (monthsOld < 18) recencyScore = 2.5;\n    else if (monthsOld < 36) recencyScore = 1.5;\n    else recencyScore = 0.5;\n  }\n\n  // Calculate final score\n  const baseScore = (viewScore * 0.30) + (engagementScore * 0.35) + (durationScore * 0.35);\n  const finalScore = preferLatest \n    ? (baseScore * 0.4 + recencyScore * 0.6) \n    : (baseScore * 0.75 + recencyScore * 0.25);\n\n  return finalScore;\n}\n\n/**\n * Parse ISO 8601 duration to minutes\n */\nfunction parseDuration(duration) {\n  const match = duration.match(/PT(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)S)?/);\n  if (!match) return 0;\n  const hours = parseInt(match[1] || 0);\n  const minutes = parseInt(match[2] || 0);\n  const seconds = parseInt(match[3] || 0);\n  return hours * 60 + minutes + seconds / 60;\n}\n\n/**\n * Search YouTube for relevant courses\n */\nasync function searchYouTubeCourse(query, language, preferLatest) {\n  try {\n    // Get AI-enhanced search query\n    const enhancedQuery = await analyzeQueryWithAI(query, language, preferLatest);\n\n    console.log(`🔍 Searching YouTube with: \"${enhancedQuery}\"`);\n\n    // Search parameters\n    const searchParams = new URLSearchParams({\n      part: 'snippet',\n      q: enhancedQuery,\n      type: 'video',\n      maxResults: 20, // Get more results for better filtering\n      order: preferLatest ? 'date' : 'relevance',\n      videoDuration: 'medium', // At least 4 minutes\n      videoDefinition: 'high',\n      relevanceLanguage: language === 'hindi' ? 'hi' : 'en',\n      key: YOUTUBE_API_KEY,\n    });\n\n    const searchResponse = await fetch(`${YOUTUBE_SEARCH_URL}?${searchParams}`, {\n      signal: AbortSignal.timeout(10000)\n    });\n\n    if (!searchResponse.ok) {\n      const errorData = await searchResponse.json();\n      throw new Error(`YouTube API Error: ${errorData.error?.message || 'Unknown error'}`);\n    }\n\n    const searchData = await searchResponse.json();\n\n    if (!searchData.items || searchData.items.length === 0) {\n      return null;\n    }\n\n    // Get video IDs\n    const videoIds = searchData.items.map(item => item.id.videoId).join(',');\n\n    // Fetch detailed video info\n    const videoParams = new URLSearchParams({\n      part: 'snippet,contentDetails,statistics',\n      id: videoIds,\n      key: YOUTUBE_API_KEY,\n    });\n\n    const videoResponse = await fetch(`${YOUTUBE_VIDEOS_URL}?${videoParams}`, {\n      signal: AbortSignal.timeout(10000)\n    });\n\n    if (!videoResponse.ok) {\n      throw new Error('Failed to fetch video details');\n    }\n\n    const videoData = await videoResponse.json();\n\n    // Format videos\n    const videos = videoData.items.map(video => ({\n      id: video.id,\n      title: video.snippet.title,\n      description: video.snippet.description,\n      thumbnail: video.snippet.thumbnails.high.url,\n      channelTitle: video.snippet.channelTitle,\n      publishedAt: video.snippet.publishedAt,\n      duration: video.contentDetails.duration,\n      viewCount: parseInt(video.statistics.viewCount || 0),\n      likeCount: parseInt(video.statistics.likeCount || 0),\n      commentCount: parseInt(video.statistics.commentCount || 0),\n      url: `https://www.youtube.com/watch?v=${video.id}`,\n    }));\n\n    // Filter by basic criteria\n    const filteredVideos = videos.filter(video => {\n      const duration = parseDuration(video.duration);\n      return video.viewCount > 1000 && duration >= 8; // At least 8 minutes\n    });\n\n    if (filteredVideos.length === 0) {\n      return null;\n    }\n\n    // Validate top candidates with AI\n    console.log(`🤖 Validating ${Math.min(5, filteredVideos.length)} top candidates with AI...`);\n\n    const validationPromises = filteredVideos.slice(0, 5).map(async (video) => {\n      const isRelevant = await validateVideoRelevance(video, query, language);\n      return { video, isRelevant };\n    });\n\n    const validatedVideos = await Promise.all(validationPromises);\n    const relevantVideos = validatedVideos\n      .filter(v => v.isRelevant)\n      .map(v => v.video);\n\n    // If no validated videos, fall back to all filtered videos\n    const videosToScore = relevantVideos.length > 0 ? relevantVideos : filteredVideos;\n\n    // Score and sort\n    const scoredVideos = videosToScore\n      .map(video => ({\n        ...video,\n        qualityScore: calculateVideoScore(video, preferLatest)\n      }))\n      .sort((a, b) => b.qualityScore - a.qualityScore);\n\n    console.log(`✅ Found ${scoredVideos.length} relevant courses`);\n\n    return scoredVideos[0] || null;\n\n  } catch (error) {\n    console.error('Error searching YouTube:', error);\n    throw error;\n  }\n}\n\n/**\n * Generate course content outline using AI\n */\nasync function generateCourseContent(video, language) {\n  try {\n    const model = genAI.getGenerativeModel({ \n      model: 'gemini-2.0-flash-exp',\n      generationConfig: {\n        maxOutputTokens: 1000,\n        temperature: 0.6,\n      }\n    });\n\n    const prompt = `Analyze this educational course and create a detailed content outline:\n\nTitle: \"${video.title}\"\nChannel: ${video.channelTitle}\nDescription: ${video.description.substring(0, 600)}\n\nCreate a comprehensive course outline in ${language === 'hindi' ? 'Hinglish (Hindi-English mix)' : 'English'}.\n\nList 10-15 specific topics/modules this course covers. Each point should:\n- Be specific and actionable\n- Show what skills/concepts students will learn\n- Progress from beginner to advanced\n- Be 1-2 sentences\n\nFormat: Return ONLY the bullet points, no numbering, no headers.`;\n\n    const result = await model.generateContent(prompt);\n    const response = await result.response;\n    const content = response.text();\n\n    // Parse content into clean points\n    const points = content\n      .split('\\n')\n      .map(line => line.trim())\n      .filter(line => line.length > 0)\n      .filter(line => line.startsWith('-') || line.startsWith('*') || line.startsWith('•') || /^\\d+\\./.test(line))\n      .map(line => line.replace(/^[-*•]\\s*/, '').replace(/^\\d+\\.\\s*/, '').trim())\n      .filter(line => line.length > 15 && line.length < 200);\n\n    return points.slice(0, 15);\n\n  } catch (error) {\n    console.error('Error generating course content:', error);\n    return [];\n  }\n}\n\n/**\n * Generate AI course analysis\n */\nasync function generateCourseAnalysis(query, video, language) {\n  try {\n    const model = genAI.getGenerativeModel({ \n      model: 'gemini-2.0-flash-exp',\n      generationConfig: {\n        maxOutputTokens: 400,\n        temperature: 0.7,\n      }\n    });\n\n    const duration = Math.round(parseDuration(video.duration));\n    const hours = Math.floor(duration / 60);\n    const minutes = duration % 60;\n    const durationText = hours > 0 ? `${hours}h ${minutes}m` : `${minutes}m`;\n\n    const prompt = `Write a helpful course recommendation for someone wanting to learn: \"${query}\"\n\nCourse Details:\n- Title: ${video.title}\n- Instructor: ${video.channelTitle}\n- Duration: ${durationText}\n- Views: ${video.viewCount.toLocaleString()}\n- Engagement: ${video.likeCount.toLocaleString()} likes\n\nWrite in ${language === 'hindi' ? 'Hinglish (conversational Hindi-English mix)' : 'clear English'}.\n\nInclude:\n1. Why this course matches their learning goal (2-3 sentences)\n2. What makes it a quality resource (1-2 sentences)\n3. Who it's best suited for (1 sentence)\n\nKeep it friendly, encouraging, and concise. No headers or bullet points.`;\n\n    const result = await model.generateContent(prompt);\n    const response = await result.response;\n    return response.text().trim();\n  } catch (error) {\n    console.error('Error generating course analysis:', error);\n    return null;\n  }\n}\n\n/**\n * Main API handler\n */\nexport async function POST(request) {\n  const startTime = Date.now();\n\n  try {\n    const body = await request.json();\n    const { query, language = 'english', preferLatest = false } = body;\n\n    // Validation\n    if (!query?.trim()) {\n      return NextResponse.json(\n        { error: 'Query is required' },\n        { status: 400 }\n      );\n    }\n\n    if (!YOUTUBE_API_KEY || !process.env.GEMINI_API_KEY) {\n      return NextResponse.json(\n        { error: 'API keys not configured' },\n        { status: 500 }\n      );\n    }\n\n    console.log(`\\n🎯 Search Request: \"${query}\" | Language: ${language} | Latest: ${preferLatest}`);\n\n    // Search for the best matching course\n    const video = await searchYouTubeCourse(query, language, preferLatest);\n\n    if (!video) {\n      return NextResponse.json({\n        video: null,\n        courseAnalysis: language === 'hindi' \n          ? `\"${query}\" ke liye koi suitable course nahi mila. Kripya different keywords try karein.`\n          : `No suitable courses found for \"${query}\". Try different keywords or check your spelling.`,\n        courseContent: [],\n        responseTime: `${Date.now() - startTime}ms`\n      });\n    }\n\n    console.log(`✅ Selected Course: \"${video.title}\" by ${video.channelTitle}`);\n\n    // Generate course analysis and content in parallel\n    const [courseAnalysis, courseContent] = await Promise.all([\n      generateCourseAnalysis(query, video, language),\n      generateCourseContent(video, language)\n    ]);\n\n    const responseTime = Date.now() - startTime;\n    console.log(`⚡ Total response time: ${responseTime}ms\\n`);\n\n    return NextResponse.json({\n      query,\n      language,\n      preferLatest,\n      video: {\n        ...video,\n        durationFormatted: formatDuration(parseDuration(video.duration))\n      },\n      courseAnalysis,\n      courseContent,\n      responseTime: `${responseTime}ms`\n    });\n\n  } catch (error) {\n    console.error('❌ API Error:', error);\n\n    if (error.message.includes('YouTube API')) {\n      return NextResponse.json(\n        { error: 'YouTube API error. Check your API key and quota.' },\n        { status: 500 }\n      );\n    }\n\n    return NextResponse.json(\n      { error: error.message || 'Unexpected error occurred' },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * Format duration for display\n */\nfunction formatDuration(minutes) {\n  const hours = Math.floor(minutes / 60);\n  const mins = Math.round(minutes % 60);\n\n  if (hours > 0) {\n    return `${hours}h ${mins}m`;\n  }\n  return `${mins}m`;\n}\n\n// Health check endpoint\nexport async function GET() {\n  return NextResponse.json({\n    status: 'ok',\n    message: 'Intelligent YouTube Course Finder API',\n    version: '4.0-ai-enhanced',\n    model: 'gemini-2.0-flash-exp',\n    endpoints: {\n      search: 'POST /api/search-resources'\n    }\n  });\n}"],"names":[],"mappings":"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","debugId":null}}]
}