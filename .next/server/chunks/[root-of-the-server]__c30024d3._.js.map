{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/api/generate-project/youtube-service.js"],"sourcesContent":["// lib/youtube-service.js\n// YouTube API Integration Service\n\n/**\n * Enhanced YouTube API helper function with better search logic\n * @param {string} searchQuery - The search query string\n * @param {number} maxResults - Maximum number of results to fetch (default: 5)\n * @returns {Promise<Array>} Array of video objects\n */\nasync function fetchYouTubeVideos(searchQuery, maxResults = 5) {\n  try {\n    if (!process.env.YOUTUBE_API_KEY) {\n      console.warn('YOUTUBE_API_KEY not set, skipping video fetch');\n      return [];\n    }\n\n    // Enhanced search parameters for better results\n    const searchUrl = `https://www.googleapis.com/youtube/v3/search?part=snippet&q=${encodeURIComponent(searchQuery)}&type=video&maxResults=${maxResults}&order=relevance&videoDuration=medium&videoDefinition=any&key=${process.env.YOUTUBE_API_KEY}`;\n\n    const response = await fetch(searchUrl);\n\n    if (!response.ok) {\n      console.error('YouTube API error:', response.status, await response.text());\n      return [];\n    }\n\n    const data = await response.json();\n\n    if (!data.items || data.items.length === 0) {\n      console.log(`No videos found for query: ${searchQuery}`);\n      return [];\n    }\n\n    // Get additional video details for better filtering\n    const videoIds = data.items.map(item => item.id.videoId).join(',');\n    const detailsUrl = `https://www.googleapis.com/youtube/v3/videos?part=statistics,contentDetails&id=${videoIds}&key=${process.env.YOUTUBE_API_KEY}`;\n\n    const detailsResponse = await fetch(detailsUrl);\n    const detailsData = detailsResponse.ok ? await detailsResponse.json() : { items: [] };\n\n    return data.items.map((item, index) => {\n      const details = detailsData.items?.[index];\n      const viewCount = details?.statistics?.viewCount ? parseInt(details.statistics.viewCount) : 0;\n      const duration = details?.contentDetails?.duration || 'Unknown';\n\n      return {\n        title: item.snippet.title,\n        channel: item.snippet.channelTitle,\n        url: `https://www.youtube.com/watch?v=${item.id.videoId}`,\n        description: item.snippet.description.substring(0, 200) + '...',\n        thumbnail: item.snippet.thumbnails.medium?.url || item.snippet.thumbnails.default?.url,\n        publishedAt: item.snippet.publishedAt,\n        viewCount,\n        duration,\n        relevanceScore: calculateRelevanceScore(item, searchQuery)\n      };\n    }).filter(video => video.relevanceScore > 0.3) // Filter out low relevance videos\n      .sort((a, b) => b.relevanceScore - a.relevanceScore); // Sort by relevance\n\n  } catch (error) {\n    console.error('YouTube API fetch error:', error);\n    return [];\n  }\n}\n\n/**\n * Calculate relevance score based on title, description, and channel\n * @param {Object} video - Video object from YouTube API\n * @param {string} searchQuery - Original search query\n * @returns {number} Relevance score between 0 and 1\n */\nfunction calculateRelevanceScore(video, searchQuery) {\n  const queryTerms = searchQuery.toLowerCase().split(' ').filter(term => term.length > 2);\n  const title = video.snippet.title.toLowerCase();\n  const description = video.snippet.description.toLowerCase();\n  const channel = video.snippet.channelTitle.toLowerCase();\n\n  let score = 0;\n\n  queryTerms.forEach(term => {\n    if (title.includes(term)) score += 1;\n    if (description.includes(term)) score += 0.5;\n    if (channel.includes(term)) score += 0.3;\n  });\n\n  // **ENHANCED: Bonus for educational channels and tutorial keywords (Hindi + English)**\n  const educationalKeywords = ['tutorial', 'course', 'learn', 'guide', 'how to', 'coding', 'programming', 'complete course', 'crash course', 'full stack', 'project'];\n  \n  // **Premium Educational Channels - English**\n  const englishChannels = [\n    'freecodecamp', 'net ninja', 'traversy media', 'programming with mosh', 'academind', \n    'codevolution', 'web dev simplified', 'clever programmer', 'dev ed', 'coding addict',\n    'javascript mastery', 'fireship', 'ben awad', 'theo - ping․gg', 'coding garden'\n  ];\n  \n  // **Premium Educational Channels - Hindi**\n  const hindiChannels = [\n    'code with harry', 'thapa technical', 'apna college', 'love babbar', 'chai aur code',\n    'harkirat singh', 'hitesh choudhary', 'websitelearner', 'technical suneja', \n    'programming pathshala', 'codingshuttle', 'programming knowledge', 'geeky shows',\n    'mysirg.com', 'saurabh shukla sir'\n  ];\n  \n  const allEducationalChannels = [...englishChannels, ...hindiChannels];\n\n  educationalKeywords.forEach(keyword => {\n    if (title.includes(keyword) || description.includes(keyword)) score += 0.2;\n  });\n\n  allEducationalChannels.forEach(channelName => {\n    if (channel.includes(channelName)) score += 0.5;\n  });\n\n  return Math.min(score / queryTerms.length, 1); // Normalize to 0-1\n}\n\n/**\n * Advanced project analysis function\n * @param {string} projectIdea - The project idea description\n * @param {Array} technologies - Array of technologies used in the project\n * @returns {Object} Project analysis object\n */\nfunction analyzeProject(projectIdea, technologies) {\n  const ideaLower = projectIdea.toLowerCase();\n  const analysis = {\n    projectType: 'generic',\n    domains: [],\n    complexity: 'beginner',\n    advancedConcepts: []\n  };\n\n  // Project type detection\n  const projectTypes = {\n    'e-commerce': ['shop', 'store', 'marketplace', 'cart', 'payment', 'product'],\n    'social media': ['social', 'chat', 'messaging', 'post', 'feed', 'friend'],\n    'blog': ['blog', 'cms', 'article', 'content', 'publishing'],\n    'dashboard': ['dashboard', 'admin', 'analytics', 'metrics', 'reporting'],\n    'mobile app': ['mobile', 'app', 'ios', 'android', 'native'],\n    'web app': ['web app', 'webapp', 'single page', 'spa'],\n    'api': ['api', 'rest', 'graphql', 'backend', 'service'],\n    'ai app': ['ai', 'ml', 'machine learning', 'neural', 'chatbot'],\n    'game': ['game', 'gaming', 'puzzle', 'arcade'],\n    'portfolio': ['portfolio', 'personal site', 'resume'],\n    'landing page': ['landing', 'marketing', 'promotional']\n  };\n\n  for (const [type, keywords] of Object.entries(projectTypes)) {\n    if (keywords.some(keyword => ideaLower.includes(keyword))) {\n      analysis.projectType = type;\n      break;\n    }\n  }\n\n  // Domain detection\n  const domains = {\n    'web development': ['web', 'website', 'html', 'css', 'javascript'],\n    'mobile development': ['mobile', 'app', 'ios', 'android', 'react native', 'flutter'],\n    'backend development': ['api', 'server', 'database', 'backend'],\n    'ai/ml': ['ai', 'machine learning', 'neural', 'deep learning'],\n    'blockchain': ['blockchain', 'crypto', 'smart contract', 'web3'],\n    'devops': ['deployment', 'docker', 'kubernetes', 'ci/cd'],\n    'data science': ['data', 'analytics', 'visualization', 'statistics']\n  };\n\n  for (const [domain, keywords] of Object.entries(domains)) {\n    if (keywords.some(keyword => ideaLower.includes(keyword) || technologies.some(tech => tech.toLowerCase().includes(keyword)))) {\n      analysis.domains.push(domain);\n    }\n  }\n\n  // Complexity assessment\n  const complexityIndicators = {\n    advanced: ['microservice', 'distributed', 'scalable', 'enterprise', 'real-time', 'machine learning', 'blockchain'],\n    intermediate: ['authentication', 'database', 'api', 'testing', 'deployment'],\n    beginner: ['simple', 'basic', 'learning', 'tutorial']\n  };\n\n  for (const [level, indicators] of Object.entries(complexityIndicators)) {\n    if (indicators.some(indicator => ideaLower.includes(indicator))) {\n      analysis.complexity = level;\n      break;\n    }\n  }\n\n  // Advanced concepts detection\n  const advancedConcepts = ['authentication', 'authorization', 'caching', 'testing', 'deployment', 'optimization', 'security'];\n  analysis.advancedConcepts = advancedConcepts.filter(concept => ideaLower.includes(concept));\n\n  return analysis;\n}\n\n/**\n * Helper function to identify frontend technology from tech stack\n * @param {Array} technologies - Array of technologies\n * @returns {string|undefined} Frontend technology if found\n */\nfunction getFrontendTech(technologies) {\n  const frontendTechs = ['react', 'vue', 'angular', 'svelte', 'next.js', 'nuxt', 'html', 'css', 'javascript'];\n  return technologies.find(tech => frontendTechs.some(ft => tech.toLowerCase().includes(ft.toLowerCase())));\n}\n\n/**\n * Helper function to identify backend technology from tech stack\n * @param {Array} technologies - Array of technologies\n * @returns {string|undefined} Backend technology if found\n */\nfunction getBackendTech(technologies) {\n  const backendTechs = ['node.js', 'express', 'django', 'flask', 'spring', 'laravel', 'ruby on rails', 'fastapi'];\n  return technologies.find(tech => backendTechs.some(bt => tech.toLowerCase().includes(bt.toLowerCase())));\n}\n\n/**\n * Intelligent YouTube search query generation with project analysis\n * @param {Object} projectData - Project data object\n * @param {string} projectIdea - Original project idea\n * @returns {Promise<Array>} Array of search query strings\n */\nasync function generateIntelligentSearchQueries(projectData, projectIdea) {\n  const queries = [];\n\n  // Extract technologies from tech stack (enhanced for new structure)\n  const allTechnologies = [];\n  if (projectData.techStack) {\n    Object.values(projectData.techStack).forEach(techCategory => {\n      if (Array.isArray(techCategory)) {\n        allTechnologies.push(...techCategory);\n      } else if (typeof techCategory === 'object') {\n        // Handle nested structure like { primary: [], styling: [] }\n        Object.values(techCategory).forEach(techArray => {\n          if (Array.isArray(techArray)) {\n            allTechnologies.push(...techArray);\n          }\n        });\n      }\n    });\n  }\n\n  // Analyze project type and complexity\n  const projectAnalysis = analyzeProject(projectIdea, allTechnologies);\n\n  console.log('Project Analysis:', projectAnalysis);\n\n  // **ENHANCED: Priority 1 - Exact project match tutorials (Hindi + English)**\n  if (projectAnalysis.projectType !== 'generic') {\n    // English tutorials\n    queries.push({\n      query: `${projectAnalysis.projectType} ${allTechnologies.slice(0, 2).join(' ')} complete tutorial 2024`,\n      priority: 'high',\n      category: 'project-specific-en'\n    });\n\n    queries.push({\n      query: `build ${projectAnalysis.projectType} ${allTechnologies[0]} step by step project`,\n      priority: 'high', \n      category: 'project-specific-en'\n    });\n\n    // Hindi tutorials\n    queries.push({\n      query: `${projectAnalysis.projectType} ${allTechnologies[0]} hindi tutorial complete course`,\n      priority: 'high',\n      category: 'project-specific-hi'\n    });\n  }\n\n  // **ENHANCED: Priority 2 - Technology stack combinations (Hindi + English)**\n  if (allTechnologies.length >= 2) {\n    const mainStack = allTechnologies.slice(0, 3);\n    \n    // English stack tutorials\n    queries.push({\n      query: `${mainStack.join(' ')} full stack tutorial 2024`,\n      priority: 'high',\n      category: 'tech-stack-en'\n    });\n\n    // Hindi stack tutorials\n    queries.push({\n      query: `${mainStack[0]} ${mainStack[1]} hindi tutorial complete project`,\n      priority: 'high',\n      category: 'tech-stack-hi'\n    });\n\n    // Frontend + Backend combination\n    const frontend = getFrontendTech(allTechnologies);\n    const backend = getBackendTech(allTechnologies);\n    if (frontend && backend) {\n      queries.push({\n        query: `${frontend} ${backend} complete project tutorial english`,\n        priority: 'high',\n        category: 'tech-stack-en'\n      });\n      \n      queries.push({\n        query: `${frontend} ${backend} hindi me complete course`,\n        priority: 'medium',\n        category: 'tech-stack-hi'\n      });\n    }\n  }\n\n  // Priority 3: Individual technology deep dives\n  allTechnologies.slice(0, 3).forEach(tech => {\n    queries.push({\n      query: `${tech} crash course 2024 beginners`,\n      priority: 'medium',\n      category: 'individual-tech'\n    });\n  });\n\n  // Priority 4: Domain-specific tutorials\n  projectAnalysis.domains.forEach(domain => {\n    queries.push({\n      query: `${domain} development tutorial ${allTechnologies[0] || 'programming'}`,\n      priority: 'medium',\n      category: 'domain-specific'\n    });\n  });\n\n  // Priority 5: Advanced concepts if detected\n  if (projectAnalysis.complexity === 'advanced') {\n    projectAnalysis.advancedConcepts.forEach(concept => {\n      queries.push({\n        query: `${concept} ${allTechnologies[0]} implementation tutorial`,\n        priority: 'low',\n        category: 'advanced-concepts'\n      });\n    });\n  }\n\n  // **OPTIMIZED: Reduce to 4 queries for faster processing**\n  const priorityOrder = { 'high': 3, 'medium': 2, 'low': 1 };\n  return queries\n    .sort((a, b) => priorityOrder[b.priority] - priorityOrder[a.priority])\n    .slice(0, 4) // Reduced from 6 to 4 for speed\n    .map(q => q.query);\n}\n\n/**\n * Validate video accessibility and quality\n * @param {Object} video - Video object from YouTube API\n * @returns {boolean} Whether video meets quality standards\n */\nfunction validateVideoQuality(video) {\n  try {\n    // Check if video and snippet exist\n    if (!video || !video.snippet) {\n      return false;\n    }\n\n    // Check if video has proper metadata\n    if (!video.snippet.title || !video.snippet.description) {\n      return false;\n    }\n\n    // Check if video is not private/deleted\n    if (video.snippet.title.toLowerCase().includes('private video') || \n        video.snippet.title.toLowerCase().includes('deleted video') ||\n        video.snippet.title.toLowerCase().includes('[deleted]')) {\n      return false;\n    }\n\n    // Check if video has meaningful title (not just random characters)\n    if (video.snippet.title.length < 10) {\n      return false;\n    }\n\n    // Prefer videos from known educational channels (both Hindi & English)\n    const educationalChannels = [\n      // English channels\n      'freecodecamp', 'net ninja', 'traversy media', 'programming with mosh', 'academind',\n      'web dev simplified', 'javascript mastery', 'fireship', 'coding addict',\n      // Hindi channels  \n      'code with harry', 'thapa technical', 'apna college', 'love babbar', 'chai aur code',\n      'harkirat singh', 'hitesh choudhary', 'codingshuttle'\n    ];\n    \n    const channelName = video.snippet.channelTitle.toLowerCase();\n    const isEducationalChannel = educationalChannels.some(channel => \n      channelName.includes(channel)\n    );\n\n    // Check upload recency (prefer newer content from trusted channels)\n    const uploadDate = new Date(video.snippet.publishedAt);\n    const threeYearsAgo = new Date();\n    threeYearsAgo.setFullYear(threeYearsAgo.getFullYear() - 3);\n    \n    // Allow older videos from trusted channels, recent videos from all channels\n    if (uploadDate < threeYearsAgo && !isEducationalChannel) {\n      return false;\n    }\n\n    return true;\n  } catch (error) {\n    console.error('Video validation error:', error);\n    return false;\n  }\n}\n\n/**\n * Enhanced video fetching with intelligent search and validation\n * @param {Object} projectData - Project data object\n * @param {string} projectIdea - Original project idea\n * @returns {Promise<Array>} Array of validated, relevant YouTube videos\n */\nasync function fetchProjectRelevantVideos(projectData, projectIdea) {\n  // **SAFETY CHECK: Return empty if no YouTube API key**\n  if (!process.env.YOUTUBE_API_KEY) {\n    console.log('YouTube API key not available, skipping video search');\n    return [];\n  }\n\n  console.log('Starting intelligent video search...');\n\n  const searchQueries = await generateIntelligentSearchQueries(projectData, projectIdea);\n  console.log('Generated search queries:', searchQueries);\n\n  const videosByCategory = {\n    projectSpecific: [],\n    techStack: [],\n    individual: [],\n    general: []\n  };\n\n  // **OPTIMIZED: Fetch videos in parallel instead of sequentially**\n  const videoPromises = searchQueries.slice(0, 4).map(async (query) => { // Limit to 4 queries for speed\n    try {\n      const videos = await fetchYouTubeVideos(query, 3); // Reduced to 3 videos per query\n      return { query, videos };\n    } catch (error) {\n      console.error(`Error fetching videos for query \"${query}\":`, error);\n      return { query, videos: [] };\n    }\n  });\n\n  // Wait for all queries to complete in parallel\n  const results = await Promise.all(videoPromises);\n  \n  // Process results with validation\n  results.forEach(({ query, videos }) => {\n    if (videos.length > 0) {\n      // **ENHANCED: Validate each video before categorizing**\n      const validatedVideos = videos.filter(video => validateVideoQuality(video));\n      \n      if (validatedVideos.length > 0) {\n        // Categorize videos based on query type and language\n        if (query.includes('hindi') || query.includes('hindi me')) {\n          // Hindi content gets priority for Indian users\n          videosByCategory.projectSpecific.push(...validatedVideos);\n        } else if (query.includes('tutorial') && (query.includes('build') || query.includes('project'))) {\n          videosByCategory.projectSpecific.push(...validatedVideos);\n        } else if (query.includes('full stack') || query.includes('crash course')) {\n          videosByCategory.techStack.push(...validatedVideos);\n        } else {\n          videosByCategory.individual.push(...validatedVideos);\n        }\n      }\n    }\n  });\n\n  // Combine and prioritize videos\n  let combinedVideos = [\n    ...videosByCategory.projectSpecific.slice(0, 4),\n    ...videosByCategory.techStack.slice(0, 3),\n    ...videosByCategory.individual.slice(0, 2),\n    ...videosByCategory.general.slice(0, 1)\n  ];\n\n  // Remove duplicates based on URL\n  const uniqueVideos = combinedVideos.filter((video, index, self) => \n    index === self.findIndex(v => v.url === video.url)\n  );\n\n  // **ENHANCED: Final filtering and intelligent sorting with language balance**\n  const validatedVideos = uniqueVideos.filter(video => {\n    // More lenient view count filter (500+ for quality content)\n    return video.viewCount > 500 && validateVideoQuality(video);\n  });\n\n  // Separate Hindi and English videos for balanced representation\n  const hindiVideos = validatedVideos.filter(video => \n    video.title.toLowerCase().includes('hindi') || \n    video.channel.toLowerCase().includes('harry') ||\n    video.channel.toLowerCase().includes('thapa') ||\n    video.channel.toLowerCase().includes('apna') ||\n    video.channel.toLowerCase().includes('love babbar')\n  );\n\n  const englishVideos = validatedVideos.filter(video => !hindiVideos.includes(video));\n\n  // Create balanced final list (mix of Hindi and English)\n  const balancedVideos = [\n    ...englishVideos.slice(0, 6), // 6 English videos\n    ...hindiVideos.slice(0, 4),   // 4 Hindi videos\n  ];\n\n  return balancedVideos\n    .sort((a, b) => {\n      // **PREMIUM: Multi-factor sorting algorithm**\n      // 1. Educational channels get priority\n      const aIsEducational = allEducationalChannels.some(channel => \n        a.channel.toLowerCase().includes(channel)\n      );\n      const bIsEducational = allEducationalChannels.some(channel => \n        b.channel.toLowerCase().includes(channel)\n      );\n      \n      if (aIsEducational && !bIsEducational) return -1;\n      if (!aIsEducational && bIsEducational) return 1;\n\n      // 2. Relevance score (quality of match)\n      if (Math.abs(a.relevanceScore - b.relevanceScore) > 0.1) {\n        return b.relevanceScore - a.relevanceScore;\n      }\n\n      // 3. View count for popular content\n      return b.viewCount - a.viewCount;\n    })\n    .slice(0, 10); // Final limit to 10 high-quality videos\n}\n\n/**\n * Create fallback search links when no videos are found\n * @param {Object} projectData - Project data object\n * @param {string} projectIdea - Original project idea\n * @returns {Promise<Array>} Array of fallback search links\n */\nasync function createFallbackSearchLinks(projectData, projectIdea) {\n  console.log('No relevant videos found, creating fallback search links');\n  const fallbackQueries = await generateIntelligentSearchQueries(projectData, projectIdea);\n\n  return fallbackQueries.slice(0, 3).map(query => ({\n    title: `Search: ${query}`,\n    channel: \"YouTube Search\",\n    url: `https://youtube.com/results?search_query=${encodeURIComponent(query)}`,\n    description: `Click to search for tutorials about: ${query}`,\n    thumbnail: null,\n    publishedAt: new Date().toISOString(),\n    viewCount: 0,\n    duration: \"Search\",\n    relevanceScore: 1,\n    isSearchLink: true\n  }));\n}\n\n// Export all functions\nexport {\n  fetchYouTubeVideos,\n  calculateRelevanceScore,\n  analyzeProject,\n  getFrontendTech,\n  getBackendTech,\n  generateIntelligentSearchQueries,\n  fetchProjectRelevantVideos,\n  createFallbackSearchLinks\n};"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 724, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/api/generate-project/route.js"],"sourcesContent":["// app/api/generate-project/route.js\nimport { NextResponse } from 'next/server';\nimport {\n  fetchProjectRelevantVideos,\n  createFallbackSearchLinks,\n  generateIntelligentSearchQueries,\n  analyzeProject\n} from './youtube-service.js';\n\n/**\n * Main POST handler for project generation\n * @param {Request} request - The incoming request object\n * @returns {Promise<NextResponse>} The response with generated project data\n */\nexport async function POST(request) {\n  try {\n    const { projectIdea } = await request.json();\n\n    if (!projectIdea || projectIdea.trim().length === 0) {\n      return NextResponse.json({ error: 'Project idea is required' }, { status: 400 });\n    }\n\n    // Validate API keys\n    if (!process.env.GEMINI_API_KEY) {\n      console.error('GEMINI_API_KEY is not set');\n      return NextResponse.json({ error: 'API configuration error' }, { status: 500 });\n    }\n\n    console.log('Making request to Gemini API for project generation...');\n\n    // Generate comprehensive project data using Gemini AI\n    const projectData = await generateProjectWithGemini(projectIdea);\n\n    // **ENHANCED: Fetch YouTube videos immediately but with quick timeout for instant response**\n    let youtubeResources = [];\n    \n    // Only attempt YouTube fetch if API key is available\n    if (process.env.YOUTUBE_API_KEY) {\n      try {\n        // Very quick YouTube fetch with 1-second timeout to not delay response\n        const youtubePromise = fetchProjectRelevantVideos(projectData, projectIdea);\n        const timeoutPromise = new Promise((resolve) => setTimeout(() => resolve([]), 1000));\n        \n        youtubeResources = await Promise.race([youtubePromise, timeoutPromise]);\n        console.log(`Fetched ${youtubeResources.length} YouTube videos in time for response`);\n      } catch (error) {\n        console.log('YouTube fetch failed, using AI-generated placeholders');\n        youtubeResources = [];\n      }\n    } else {\n      console.log('YouTube API not configured, using AI-generated video suggestions');\n    }\n\n    // **ENHANCED RESPONSE with real YouTube data or AI-generated fallbacks**\n    const enhancedResponse = {\n      ...projectData,\n      youtubeResources: youtubeResources.length > 0 ? youtubeResources.map(video => ({\n        title: video.title || video.snippet?.title || 'Tutorial Video',\n        channel: video.channel || video.snippet?.channelTitle || 'Educational Channel',\n        url: video.url || `https://youtube.com/watch?v=${video.id}`,\n        description: video.description || video.snippet?.description?.slice(0, 150) || 'Educational tutorial video'\n      })) : (projectData.youtubeResources && projectData.youtubeResources.length > 0 ? projectData.youtubeResources : [\n        // Fallback YouTube resources when API is not available\n        {\n          title: `Complete ${projectData.projectSummary?.name || 'Project'} Tutorial`,\n          channel: \"FreeCodeCamp\",\n          url: \"https://youtube.com/results?search_query=\" + encodeURIComponent(`${projectIdea} tutorial 2024`),\n          description: \"Comprehensive full-stack development tutorial\"\n        },\n        {\n          title: `${projectData.projectSummary?.name || 'Project'} Tutorial - Hindi`,\n          channel: \"Code with Harry\",\n          url: \"https://youtube.com/results?search_query=\" + encodeURIComponent(`${projectIdea} hindi tutorial`),\n          description: \"Step-by-step Hindi tutorial for beginners\"\n        }\n      ]),\n      metadata: {\n        model: 'gemini-2.0-flash-exp',\n        timestamp: new Date().toISOString(),\n        youtube_videos_found: youtubeResources.length,\n        project_analysis: analyzeProject(projectIdea, Object.values(projectData.techStack || {}).flat())\n      }\n    };\n\n    // **BACKGROUND ENHANCEMENT** - Continue fetching more videos if initial fetch was incomplete\n    if (youtubeResources.length < 5) {\n      setImmediate(async () => {\n        try {\n          console.log('Starting background YouTube video fetching for additional resources...');\n          const additionalVideos = await fetchProjectRelevantVideos(projectData, projectIdea);\n          console.log(`Background: Fetched ${additionalVideos.length} additional YouTube videos`);\n        } catch (error) {\n          console.error('Background YouTube fetch error:', error);\n        }\n      });\n    }\n\n    return NextResponse.json(enhancedResponse);\n\n  } catch (error) {\n    console.error('Project generation API error:', error);\n\n    if (error.name === 'AbortError') {\n      return NextResponse.json({ error: 'Request timeout. Please try again.' }, { status: 500 });\n    }\n\n    return NextResponse.json({\n      error: 'Failed to generate project guide',\n      details: process.env.NODE_ENV === 'development' ? error.message : 'Please try again later'\n    }, { status: 500 });\n  }\n}\n\n/**\n * Generate project data using Gemini AI\n * @param {string} projectIdea - The project idea description\n * @returns {Promise<Object>} The generated project data\n */\nasync function generateProjectWithGemini(projectIdea) {\n  const prompt = `\nYou are an elite software architect and project consultant with 15+ years of experience. Analyze this project idea and create a premium, professional-grade project guide that would rival those from top tech consulting firms:\n\nPROJECT IDEA: \"${projectIdea}\"\n\nCreate an enterprise-level breakdown that feels like a $10,000 consulting package, tailored for beginners, intermediate, and advanced developers. Your output should be so comprehensive and actionable that developers feel confident building this project from scratch to production deployment.\n\nPREMIUM REQUIREMENTS:\n🏗️ ARCHITECTURE: Design scalable, production-ready architecture\n🔄 SKILL PROGRESSION: Structure roadmap for beginner → intermediate → advanced journey\n⚡ MODERN STACK: Use cutting-edge 2024-2025 technologies and best practices\n🛠️ PRACTICAL FOCUS: Every step must be immediately actionable with real commands\n🎯 PRODUCTION-READY: Include deployment, monitoring, security, and optimization\n📚 LEARNING PATHS: Multiple approaches based on developer experience level\n🔍 DETAILED GUIDANCE: Include file structures, code snippets, and troubleshooting\n🎥 LEARNING RESOURCES: Include comprehensive documentation and YouTube tutorial recommendations\n\nCRITICAL: You must include REAL YouTube tutorial resources that match the project. The system will later enhance these with actual video data.\n\nENHANCED PROJECT STRUCTURE - Return ONLY valid JSON with this exact format:\n\n{\n  \"projectSummary\": {\n    \"name\": \"Project Name\",\n    \"description\": \"Comprehensive description with value proposition\",\n    \"complexity\": \"Beginner\",\n    \"estimatedTime\": \"2-4 weeks\",\n    \"skillsLearned\": [\"React\", \"Node.js\", \"Database Design\"]\n  },\n  \"mindMap\": {\n    \"name\": \"Project Architecture\",\n    \"children\": [\n      {\n        \"name\": \"Frontend Layer\",\n        \"children\": [\n          { \"name\": \"UI Components\", \"details\": \"Reusable component library\" },\n          { \"name\": \"State Management\", \"details\": \"Global state handling\" },\n          { \"name\": \"Routing System\", \"details\": \"Navigation and page structure\" }\n        ]\n      },\n      {\n        \"name\": \"Backend Layer\",\n        \"children\": [\n          { \"name\": \"API Routes\", \"details\": \"RESTful endpoints\" },\n          { \"name\": \"Authentication\", \"details\": \"User management system\" },\n          { \"name\": \"Database Layer\", \"details\": \"Data persistence\" }\n        ]\n      },\n      {\n        \"name\": \"DevOps & Deployment\",\n        \"children\": [\n          { \"name\": \"CI/CD Pipeline\", \"details\": \"Automated deployment\" },\n          { \"name\": \"Monitoring\", \"details\": \"Performance tracking\" }\n        ]\n      }\n    ]\n  },\n  \"learningPaths\": {\n    \"beginner\": \"Core functionality with guided setup - Build functional MVP\",\n    \"intermediate\": \"Advanced features and optimization - Production-ready app\", \n    \"advanced\": \"Scalable architecture and enterprise patterns - Full system\"\n  },\n  \"roadmap\": [\n    {\n      \"phase\": \"Phase 1: Foundation & Setup\",\n      \"description\": \"Environment setup and basic project structure\",\n      \"duration\": \"2-4 hours\",\n      \"difficulty\": \"Beginner\",\n      \"skillLevel\": \"All levels\",\n      \"prerequisites\": [\"Node.js v18+\", \"Git\", \"Code editor\"],\n      \"learningObjectives\": [\"Project initialization\", \"Development environment\", \"Version control setup\"],\n      \"steps\": [\n        {\n          \"title\": \"Environment Setup\",\n          \"commands\": [\"node --version\", \"npm install\", \"git init\"]\n        },\n        {\n          \"title\": \"Project Creation\", \n          \"commands\": [\"npx create-next-app@latest project\", \"cd project\", \"npm run dev\"]\n        }\n      ],\n      \"validation\": [\n        \"npm run dev starts without errors\",\n        \"localhost:3000 shows Next.js welcome page\",\n        \"ESLint runs without issues\"\n      ],\n      \"nextSteps\": [\"Proceed to Phase 2 for core development\"]\n    }\n  ],\n  \"techStack\": {\n    \"frontend\": [\"Next.js\", \"React\", \"TypeScript\", \"Tailwind CSS\"],\n    \"backend\": [\"Node.js\", \"PostgreSQL\", \"Prisma\"],\n    \"deployment\": [\"Vercel\", \"Railway\"],\n    \"tools\": [\"VS Code\", \"Git\", \"Postman\"]\n  },\n  \"packages\": {\n    \"npm\": [\"next\", \"react\", \"typescript\", \"tailwindcss\", \"prisma\"]\n  },\n  \"quickStart\": {\n    \"commands\": [\"npm create next-app project\", \"cd project\", \"npm install\", \"npm run dev\"],\n    \"notes\": [\"Open localhost:3000\", \"Edit files to see changes\", \"Check console for errors\"]\n  },\n  \"documentation\": [\n    {\"title\": \"Next.js Docs\", \"url\": \"https://nextjs.org/docs\", \"description\": \"Complete Next.js guide and API reference\"},\n    {\"title\": \"React Docs\", \"url\": \"https://react.dev\", \"description\": \"Learn React with interactive examples\"},\n    {\"title\": \"Tailwind CSS\", \"url\": \"https://tailwindcss.com/docs\", \"description\": \"Utility-first CSS framework documentation\"}\n  ],\n  \"deployment\": [\"Connect to Vercel\", \"Push to GitHub\", \"Auto-deploy enabled\"],\n  \"features\": [\"Authentication\", \"Database\", \"Responsive design\", \"SEO optimization\"],\n  \"youtubeResources\": [\n    {\"title\": \"Complete Project Tutorial\", \"channel\": \"FreeCodeCamp\", \"url\": \"https://youtube.com/search?q=project+tutorial\", \"description\": \"Full stack development tutorial\"},\n    {\"title\": \"Hindi Tutorial\", \"channel\": \"Code with Harry\", \"url\": \"https://youtube.com/search?q=hindi+tutorial\", \"description\": \"Step-by-step Hindi explanation\"}\n  ]\n}`;\n\n  // Optimized Gemini API request configuration for speed\n  const requestBody = {\n    contents: [{\n      parts: [{\n        text: prompt\n      }]\n    }],\n    generationConfig: {\n      temperature: 0.3, // Lower temperature for faster, more focused responses\n      topK: 20,         // Reduced for faster processing\n      topP: 0.8,        // Reduced for faster processing\n      maxOutputTokens: 4096, // Reduced for faster response\n      responseMimeType: \"text/plain\"\n    },\n    safetySettings: [\n      {\n        category: \"HARM_CATEGORY_HARASSMENT\",\n        threshold: \"BLOCK_MEDIUM_AND_ABOVE\"\n      },\n      {\n        category: \"HARM_CATEGORY_HATE_SPEECH\",\n        threshold: \"BLOCK_MEDIUM_AND_ABOVE\"\n      },\n      {\n        category: \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\n        threshold: \"BLOCK_MEDIUM_AND_ABOVE\"\n      },\n      {\n        category: \"HARM_CATEGORY_DANGEROUS_CONTENT\",\n        threshold: \"BLOCK_MEDIUM_AND_ABOVE\"\n      }\n    ]\n  };\n\n  // Make request to Gemini API\n  const response = await fetch(\n    `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent?key=${process.env.GEMINI_API_KEY}`,\n    {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(requestBody),\n    }\n  );\n\n  // Handle API response errors\n  if (!response.ok) {\n    const errorData = await response.json().catch(() => null);\n    console.error('Gemini API error:', response.status, errorData);\n\n    if (response.status === 401) {\n      throw new Error('Invalid API key configuration');\n    } else if (response.status === 429) {\n      throw new Error('API rate limit exceeded. Please try again in a few minutes.');\n    } else if (response.status === 403) {\n      throw new Error('API quota exceeded or access denied.');\n    }\n\n    throw new Error('Failed to connect to Gemini API');\n  }\n\n  const data = await response.json();\n  console.log('Gemini API response received');\n\n  if (!data.candidates || data.candidates.length === 0) {\n    throw new Error('No response from AI model');\n  }\n\n  const content = data.candidates[0].content.parts[0].text;\n\n  // Enhanced JSON extraction\n  let jsonMatch = content.match(/\\{[\\s\\S]*\\}/);\n  if (!jsonMatch) {\n    const codeBlockMatch = content.match(/```(?:json)?\\s*(\\{[\\s\\S]*\\})\\s*```/);\n    if (codeBlockMatch) {\n      jsonMatch = [codeBlockMatch[1]];\n    }\n  }\n\n  if (!jsonMatch) {\n    console.error('No JSON found in AI response');\n    throw new Error('Invalid response format from AI service');\n  }\n\n  let projectData;\n  try {\n    projectData = JSON.parse(jsonMatch[0]);\n  } catch (parseError) {\n    console.error('JSON parsing error:', parseError);\n    throw new Error('Failed to parse AI response');\n  }\n\n  // Validate required fields\n  const requiredFields = ['mindMap', 'roadmap', 'techStack', 'packages', 'documentation'];\n  for (const field of requiredFields) {\n    if (!projectData[field]) {\n      projectData[field] = getDefaultValue(field);\n    }\n  }\n\n  // Add token usage information\n  projectData.tokens_used = data.usageMetadata?.totalTokenCount || 'N/A';\n\n  return projectData;\n}\n\n/**\n * Helper function for default values when required fields are missing\n * @param {string} field - The field name\n * @returns {*} Default value for the field\n */\nfunction getDefaultValue(field) {\n  const defaults = {\n    mindMap: { name: \"Project\", children: [] },\n    roadmap: [],\n    techStack: {},\n    packages: { npm: [], tools: [] },\n    documentation: [],\n    youtubeResources: [],\n    quickStart: {\n      description: \"Quick setup commands\",\n      commands: [\"npm install\", \"npm run dev\"],\n      notes: [\"Check the documentation for detailed setup\"]\n    }\n  };\n  return defaults[field] || null;\n}"],"names":[],"mappings":"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","debugId":null}}]
}