{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/api/search-resources/route.js"],"sourcesContent":["// app/api/search-resources/route.js\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\nimport { NextResponse } from \"next/server\";\n\nconst genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);\n\n// Premium channels with course specialization metadata\nconst PREMIUM_CHANNELS = {\n  hindi: [\n    { name: \"Chai aur Code\", specialty: [\"javascript\", \"react\", \"full-stack\"], courseQuality: \"high\" },\n    { name: \"Code Step By Step\", specialty: [\"java\", \"spring\", \"dsa\"], courseQuality: \"high\" },\n    { name: \"Coder's Gyan\", specialty: [\"python\", \"django\", \"web\"], courseQuality: \"high\" },\n    { name: \"Apna College\", specialty: [\"dsa\", \"cpp\", \"java\", \"python\"], courseQuality: \"excellent\" },\n    { name: \"Code with Sagar\", specialty: [\"javascript\", \"react\", \"node\"], courseQuality: \"high\" },\n    { name: \"CodeWithHarry\", specialty: [\"python\", \"javascript\", \"web\"], courseQuality: \"excellent\" },\n    { name: \"Piyush Garg\", specialty: [\"javascript\", \"react\", \"system-design\"], courseQuality: \"high\" },\n    { name: \"Harkirat Singh\", specialty: [\"web3\", \"full-stack\", \"system-design\"], courseQuality: \"excellent\" },\n    { name: \"Sheryians Coding School\", specialty: [\"javascript\", \"gsap\", \"frontend\"], courseQuality: \"high\" },\n    { name: \"WsCube Tech\", specialty: [\"web\", \"python\", \"database\"], courseQuality: \"good\" },\n  ],\n  english: [\n    { name: \"Programming with Mosh\", specialty: [\"python\", \"javascript\", \"react\"], courseQuality: \"excellent\" },\n    { name: \"Bro Code\", specialty: [\"java\", \"python\", \"cpp\"], courseQuality: \"excellent\" },\n    { name: \"freeCodeCamp.org\", specialty: [\"all\"], courseQuality: \"excellent\" },\n    { name: \"Traversy Media\", specialty: [\"web\", \"javascript\", \"frameworks\"], courseQuality: \"high\" },\n    { name: \"Net Ninja\", specialty: [\"javascript\", \"react\", \"vue\", \"firebase\"], courseQuality: \"excellent\" },\n    { name: \"Corey Schafer\", specialty: [\"python\", \"django\", \"flask\"], courseQuality: \"excellent\" },\n    { name: \"Web Dev Simplified\", specialty: [\"javascript\", \"react\", \"css\"], courseQuality: \"high\" },\n    { name: \"Fireship\", specialty: [\"quick-concepts\", \"modern-web\"], courseQuality: \"good\" },\n  ],\n};\n\n// Course quality indicators\nconst COURSE_KEYWORDS = {\n  strong: [\"complete course\", \"full course\", \"full tutorial\", \"crash course\", \"bootcamp\", \"masterclass\", \"zero to hero\", \"beginner to advanced\", \"complete guide\"],\n  moderate: [\"tutorial series\", \"learning path\", \"step by step\", \"comprehensive\", \"in-depth\", \"detailed tutorial\"],\n  weak: [\"quick tip\", \"snippet\", \"short tutorial\", \"in 5 minutes\", \"speedrun\"]\n};\n\nconst rateLimitMap = new Map();\nconst RATE_LIMIT_WINDOW = 60000;\nconst MAX_REQUESTS = 10;\n\nfunction checkRateLimit(identifier) {\n  const now = Date.now();\n  const userRequests = rateLimitMap.get(identifier) || [];\n  const recentRequests = userRequests.filter((time) => now - time < RATE_LIMIT_WINDOW);\n  if (recentRequests.length >= MAX_REQUESTS) return false;\n  recentRequests.push(now);\n  rateLimitMap.set(identifier, recentRequests);\n  return true;\n}\n\nfunction validateInput(query, language, preferLatest) {\n  if (!query || typeof query !== \"string\") throw new Error(\"Query is required and must be a string\");\n  if (query.length > 200) throw new Error(\"Query too long (max 200 characters)\");\n  if (![\"hindi\", \"english\"].includes(language)) throw new Error(\"Language must be 'hindi' or 'english'\");\n  if (typeof preferLatest !== \"boolean\") throw new Error(\"preferLatest must be a boolean\");\n}\n\n// Parse ISO 8601 duration to minutes\nfunction parseDuration(duration) {\n  const match = duration.match(/PT(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)S)?/);\n  if (!match) return 0;\n  const hours = parseInt(match[1] || 0);\n  const minutes = parseInt(match[2] || 0);\n  const seconds = parseInt(match[3] || 0);\n  return hours * 60 + minutes + seconds / 60;\n}\n\n// Detect if content is a complete course\nfunction detectCourseQuality(video) {\n  const text = `${video.title} ${video.description}`.toLowerCase();\n\n  let score = 0;\n\n  // Strong course indicators\n  COURSE_KEYWORDS.strong.forEach(keyword => {\n    if (text.includes(keyword)) score += 3;\n  });\n\n  // Moderate indicators\n  COURSE_KEYWORDS.moderate.forEach(keyword => {\n    if (text.includes(keyword)) score += 1.5;\n  });\n\n  // Negative indicators (snippets)\n  COURSE_KEYWORDS.weak.forEach(keyword => {\n    if (text.includes(keyword)) score -= 2;\n  });\n\n  // Duration bonus (longer = more likely complete course)\n  const durationMins = parseDuration(video.duration);\n  if (durationMins > 180) score += 4; // 3+ hours\n  else if (durationMins > 60) score += 2; // 1+ hour\n  else if (durationMins < 15) score -= 2; // Too short\n\n  // Playlist indicators\n  if (text.includes(\"playlist\") || text.includes(\"series\")) score += 2;\n\n  // Chapter/timestamp indicators\n  if (text.includes(\"chapters\") || text.includes(\"timestamps\") || text.includes(\"00:00\")) score += 2;\n\n  return {\n    score,\n    isLikelyCourse: score >= 3,\n    durationMinutes: durationMins,\n    quality: score >= 6 ? \"excellent\" : score >= 3 ? \"good\" : \"moderate\"\n  };\n}\n\n// Build enhanced YouTube query for courses\nfunction buildCourseQuery(query, language) {\n  const langKeyword = language === \"hindi\" ? \"hindi\" : \"english\";\n  const cleanQuery = query.trim().replace(/[^\\w\\s]/gi, \" \").replace(/\\s+/g, \" \");\n\n  // Prioritize course-specific terms\n  return `${cleanQuery} ${langKeyword} complete course tutorial full`;\n}\n\n// Get relevant premium channels based on query\nfunction getRelevantChannels(query, language) {\n  const channels = PREMIUM_CHANNELS[language] || [];\n  const queryLower = query.toLowerCase();\n\n  // Match channels by specialty\n  const relevant = channels.filter(channel => \n    channel.specialty.some(spec => queryLower.includes(spec) || spec === \"all\")\n  );\n\n  // Return all if no specific match, but prioritize excellent quality\n  return relevant.length > 0 \n    ? relevant.sort((a, b) => {\n        const qualityOrder = { excellent: 3, high: 2, good: 1 };\n        return (qualityOrder[b.courseQuality] || 0) - (qualityOrder[a.courseQuality] || 0);\n      })\n    : channels.filter(c => c.courseQuality === \"excellent\" || c.courseQuality === \"high\");\n}\n\n// Search premium channels with course focus\nasync function searchPremiumChannels(query, language, preferLatest, apiKey) {\n  const relevantChannels = getRelevantChannels(query, language);\n  const searchQuery = buildCourseQuery(query, language);\n  const relevanceLanguage = language === \"hindi\" ? \"hi\" : \"en\";\n\n  // Search for each relevant channel\n  const channelPromises = relevantChannels.slice(0, 6).map(async (channel) => {\n    const channelQuery = `${searchQuery} ${channel.name}`;\n\n    const searchUrl = new URL(\"https://www.googleapis.com/youtube/v3/search\");\n    searchUrl.searchParams.append(\"part\", \"snippet\");\n    searchUrl.searchParams.append(\"q\", channelQuery);\n    searchUrl.searchParams.append(\"type\", \"video\");\n    searchUrl.searchParams.append(\"videoDuration\", \"long\"); // Prefer longer videos\n    searchUrl.searchParams.append(\"videoDefinition\", \"high\");\n    searchUrl.searchParams.append(\"relevanceLanguage\", relevanceLanguage);\n    searchUrl.searchParams.append(\"order\", preferLatest ? \"date\" : \"relevance\");\n    searchUrl.searchParams.append(\"maxResults\", \"5\");\n    searchUrl.searchParams.append(\"key\", apiKey);\n\n    try {\n      const response = await fetch(searchUrl.toString(), { next: { revalidate: 3600 } });\n      if (!response.ok) return [];\n      const data = await response.json();\n      return data.items || [];\n    } catch (error) {\n      console.error(`Error searching ${channel.name}:`, error);\n      return [];\n    }\n  });\n\n  const results = await Promise.all(channelPromises);\n  const allItems = results.flat();\n\n  if (allItems.length === 0) return [];\n  return await fetchVideoDetails(allItems, apiKey);\n}\n\n// General search with course focus\nasync function searchGeneralVideos(query, language, preferLatest, apiKey) {\n  const searchQuery = buildCourseQuery(query, language);\n  const relevanceLanguage = language === \"hindi\" ? \"hi\" : \"en\";\n\n  const searchUrl = new URL(\"https://www.googleapis.com/youtube/v3/search\");\n  searchUrl.searchParams.append(\"part\", \"snippet\");\n  searchUrl.searchParams.append(\"q\", searchQuery);\n  searchUrl.searchParams.append(\"type\", \"video\");\n  searchUrl.searchParams.append(\"videoDuration\", \"long\"); // Courses are typically longer\n  searchUrl.searchParams.append(\"videoDefinition\", \"high\");\n  searchUrl.searchParams.append(\"relevanceLanguage\", relevanceLanguage);\n  searchUrl.searchParams.append(\"order\", preferLatest ? \"date\" : \"relevance\");\n  searchUrl.searchParams.append(\"maxResults\", \"15\");\n  searchUrl.searchParams.append(\"key\", apiKey);\n\n  const response = await fetch(searchUrl.toString(), { next: { revalidate: 3600 } });\n  if (!response.ok) {\n    const errorData = await response.json();\n    throw new Error(`YouTube API error: ${errorData.error?.message || \"Unknown error\"}`);\n  }\n\n  const data = await response.json();\n  if (!data.items || data.items.length === 0) return [];\n\n  return await fetchVideoDetails(data.items, apiKey);\n}\n\nasync function fetchVideoDetails(items, apiKey) {\n  const videoIds = items.map((item) => item.id.videoId).join(\",\");\n\n  const videoUrl = new URL(\"https://www.googleapis.com/youtube/v3/videos\");\n  videoUrl.searchParams.append(\"part\", \"snippet,contentDetails,statistics\");\n  videoUrl.searchParams.append(\"id\", videoIds);\n  videoUrl.searchParams.append(\"key\", apiKey);\n\n  const response = await fetch(videoUrl.toString(), { next: { revalidate: 3600 } });\n  if (!response.ok) throw new Error(\"Failed to fetch video details\");\n\n  const videoData = await response.json();\n\n  return videoData.items.map((video) => ({\n    id: video.id,\n    title: video.snippet.title,\n    description: video.snippet.description,\n    thumbnail: video.snippet.thumbnails.high?.url || video.snippet.thumbnails.medium?.url,\n    channelTitle: video.snippet.channelTitle,\n    publishedAt: video.snippet.publishedAt,\n    duration: video.contentDetails.duration,\n    viewCount: parseInt(video.statistics.viewCount || \"0\"),\n    likeCount: parseInt(video.statistics.likeCount || \"0\"),\n    commentCount: parseInt(video.statistics.commentCount || \"0\"),\n    url: `https://www.youtube.com/watch?v=${video.id}`,\n  }));\n}\n\nasync function fetchYouTubeVideos(query, language, preferLatest) {\n  const apiKey = process.env.YOUTUBE_API_KEY;\n  if (!apiKey) throw new Error(\"YouTube API key not configured\");\n\n  let allVideos = [];\n\n  // Premium channels first\n  try {\n    const premiumVideos = await searchPremiumChannels(query, language, preferLatest, apiKey);\n    allVideos.push(...premiumVideos);\n  } catch (error) {\n    console.error(\"Premium channel search error:\", error);\n  }\n\n  // General search if needed\n  if (allVideos.length < 8) {\n    try {\n      const generalVideos = await searchGeneralVideos(query, language, preferLatest, apiKey);\n      allVideos.push(...generalVideos);\n    } catch (error) {\n      console.error(\"General search error:\", error);\n    }\n  }\n\n  // Remove duplicates\n  const uniqueVideos = allVideos.filter(\n    (video, index, self) => index === self.findIndex((v) => v.id === video.id)\n  );\n\n  return uniqueVideos;\n}\n\nfunction isPremiumChannel(channelName, language) {\n  const channels = PREMIUM_CHANNELS[language] || [];\n  return channels.some(channel => \n    channelName.toLowerCase().includes(channel.name.toLowerCase())\n  );\n}\n\nfunction getPremiumChannelInfo(channelName, language) {\n  const channels = PREMIUM_CHANNELS[language] || [];\n  return channels.find(channel => \n    channelName.toLowerCase().includes(channel.name.toLowerCase())\n  );\n}\n\nfunction calculateVideoScore(video, preferLatest, language, query) {\n  const views = video.viewCount || 0;\n  const likes = video.likeCount || 0;\n  const comments = video.commentCount || 0;\n\n  // Course quality detection\n  const courseAnalysis = detectCourseQuality(video);\n  const courseQualityBoost = courseAnalysis.isLikelyCourse ? 2.5 : 0.5;\n\n  // Premium channel boost with quality consideration\n  const channelInfo = getPremiumChannelInfo(video.channelTitle, language);\n  let premiumBoost = 1.0;\n  if (channelInfo) {\n    const qualityMultiplier = {\n      excellent: 2.5,\n      high: 2.0,\n      good: 1.5\n    };\n    premiumBoost = qualityMultiplier[channelInfo.courseQuality] || 1.5;\n\n    // Extra boost if channel specialty matches query\n    const queryLower = query.toLowerCase();\n    if (channelInfo.specialty.some(spec => queryLower.includes(spec))) {\n      premiumBoost *= 1.3;\n    }\n  }\n\n  // Engagement metrics\n  const engagementRate = views > 0 ? (likes + comments) / views : 0;\n  const likeRatio = views > 0 ? likes / views : 0;\n\n  // Recency score\n  let recencyScore = 0;\n  if (preferLatest) {\n    const publishDate = new Date(video.publishedAt);\n    const now = new Date();\n    const daysDiff = (now - publishDate) / (1000 * 60 * 60 * 24);\n    recencyScore = Math.max(0, 1 - daysDiff / 365);\n  }\n\n  // Popularity (logarithmic)\n  const popularityScore = Math.log10(views + 1) / 10;\n\n  // Duration scoring (prefer longer, comprehensive content)\n  const durationMins = courseAnalysis.durationMinutes;\n  let durationScore = 0;\n  if (durationMins > 120) durationScore = 1.0; // 2+ hours excellent\n  else if (durationMins > 60) durationScore = 0.8; // 1+ hour good\n  else if (durationMins > 30) durationScore = 0.5; // 30+ mins moderate\n  else durationScore = 0.2; // Short videos\n\n  // Combined score\n  const baseScore =\n    popularityScore * 0.20 +\n    engagementRate * 1000 * 0.20 +\n    likeRatio * 100 * 0.15 +\n    recencyScore * 0.15 +\n    durationScore * 0.30;\n\n  return baseScore * premiumBoost * courseQualityBoost;\n}\n\nasync function analyzeWithAI(videos, query, language) {\n  const model = genAI.getGenerativeModel({ \n    model: \"gemini-2.0-flash-exp\",\n    generationConfig: {\n      temperature: 0.4,\n      topP: 0.9,\n      topK: 40,\n      maxOutputTokens: 1500,\n    },\n  });\n\n  const channelList = PREMIUM_CHANNELS[language].map(c => `${c.name} (${c.courseQuality})`).join(\", \");\n\n  const videoSummaries = videos.slice(0, 10).map((video, idx) => {\n    const courseAnalysis = detectCourseQuality(video);\n    const channelInfo = getPremiumChannelInfo(video.channelTitle, language);\n\n    return {\n      rank: idx + 1,\n      title: video.title,\n      channel: video.channelTitle,\n      isPremiumChannel: !!channelInfo,\n      channelQuality: channelInfo?.courseQuality || \"unknown\",\n      channelSpecialty: channelInfo?.specialty || [],\n      durationMinutes: Math.round(courseAnalysis.durationMinutes),\n      views: video.viewCount,\n      likes: video.likeCount,\n      publishedAt: video.publishedAt,\n      courseQuality: courseAnalysis.quality,\n      isLikelyCourse: courseAnalysis.isLikelyCourse,\n      description: video.description.substring(0, 600)\n    };\n  });\n\n  const prompt = `You are an expert educational content curator specializing in identifying COMPLETE programming courses and tutorials.\n\n**CRITICAL REQUIREMENT**: The user is searching for a COMPLETE, COMPREHENSIVE COURSE on \"${query}\", NOT short tutorials or quick tips.\n\n**PREMIUM CHANNELS (${language.toUpperCase()}):**\n${channelList}\n\n**User Query:** \"${query}\"\n**Language:** ${language === \"hindi\" ? \"Hindi\" : \"English\"}\n\n**Available Videos (with course analysis):**\n${JSON.stringify(videoSummaries, null, 2)}\n\n**SELECTION CRITERIA (STRICTLY PRIORITIZED):**\n\n1. **COMPLETE COURSE REQUIREMENT (MANDATORY - 40% weight)**:\n   - MUST be a full/complete course, NOT snippets or quick tutorials\n   - Look for: \"complete course\", \"full tutorial\", \"bootcamp\", \"zero to hero\", \"A to Z\"\n   - Duration: Prefer 60+ minutes (courses are typically 1-5+ hours)\n   - Check description for chapters/timestamps/comprehensive content structure\n   - isLikelyCourse: true is STRONGLY preferred\n\n2. **Premium Channel Priority (30% weight)**:\n   - Premium channels with \"excellent\" quality get highest priority\n   - If channel specialty matches query topic, give extra weight\n   - Trust established educators over random creators\n\n3. **Content Relevance (20% weight)**:\n   - Does the course content EXACTLY match what user asked for?\n   - MongoDB query → should teach MongoDB specifically, not general databases\n   - React query → should be React-focused, not general JavaScript\n\n4. **Teaching Quality Indicators (10% weight)**:\n   - Structured description with clear learning outcomes\n   - Good engagement (views, likes)\n   - Recent enough to be relevant (but quality > recency)\n\n**YOUR TASKS:**\n\n1. **Identify Best COMPLETE Course**: Select the video that is the most comprehensive, complete course matching \"${query}\". Give HEAVY preference to videos marked isLikelyCourse: true and premium channels.\n\n2. **Extract Detailed Course Syllabus**: From the description, extract 7-10 SPECIFIC topics/modules covered. Be detailed - not generic points like \"basics\" but actual concepts like \"MongoDB aggregation pipeline\", \"CRUD operations\", etc.\n\n3. **Write Compelling Summary**: Explain in 2-3 sentences WHY this is the perfect COMPLETE course, mention the channel's credibility if premium, and highlight comprehensiveness.\n\n4. **Assess Completeness**: Rate how \"complete\" this course is (0-100).\n\n**RESPOND ONLY WITH THIS JSON (no markdown, no code blocks):**\n{\n  \"bestVideoRank\": <number 1-10>,\n  \"courseContent\": [\n    \"Specific topic/module 1\",\n    \"Specific topic/module 2\",\n    \"...\",\n    \"7-10 specific learning outcomes\"\n  ],\n  \"summary\": \"Compelling 2-3 sentence summary emphasizing completeness and channel quality\",\n  \"confidence\": <number 0-100>,\n  \"completenessScore\": <number 0-100>,\n  \"isPremiumChannel\": <boolean>,\n  \"reasoning\": \"Brief 1-sentence explanation of why this video was chosen over others\"\n}\n\n**CRITICAL RULES:**\n- If NO video seems like a complete course, choose the most comprehensive one and note lower completenessScore\n- ALWAYS prefer isLikelyCourse: true videos\n- Duration matters: 60+ minutes is better for courses\n- Premium channels are trusted but verify course completeness first`;\n\n  try {\n    const result = await model.generateContent(prompt);\n    const response = result.response.text();\n\n    let jsonText = response.trim();\n    jsonText = jsonText.replace(/```json\\n?/g, \"\").replace(/```\\n?/g, \"\");\n\n    const aiAnalysis = JSON.parse(jsonText);\n\n    if (!aiAnalysis.bestVideoRank || !aiAnalysis.courseContent || !aiAnalysis.summary) {\n      throw new Error(\"Invalid AI response structure\");\n    }\n\n    return aiAnalysis;\n  } catch (error) {\n    console.error(\"AI Analysis Error:\", error);\n\n    // Intelligent fallback: prefer complete courses from premium channels\n    const courseVideos = videos.filter(v => detectCourseQuality(v).isLikelyCourse);\n    const premiumCourses = courseVideos.filter(v => isPremiumChannel(v.channelTitle, language));\n\n    const bestVideo = premiumCourses[0] || courseVideos[0] || videos[0];\n    const bestIndex = videos.findIndex(v => v.id === bestVideo.id);\n\n    return {\n      bestVideoRank: bestIndex + 1,\n      courseContent: [\n        \"Comprehensive fundamentals and core concepts\",\n        \"Step-by-step practical implementation\",\n        \"Real-world project examples\",\n        \"Best practices and design patterns\",\n        \"Common challenges and solutions\",\n        \"Advanced techniques and optimization\",\n        \"Hands-on exercises and assignments\"\n      ],\n      summary: `This comprehensive ${language} course covers ${query} from basics to advanced concepts with practical examples from a trusted educational source.`,\n      confidence: premiumCourses.length > 0 ? 80 : 70,\n      completenessScore: courseVideos.length > 0 ? 85 : 65,\n      isPremiumChannel: isPremiumChannel(bestVideo.channelTitle, language),\n      reasoning: \"Selected based on course indicators and channel reputation\"\n    };\n  }\n}\n\nexport async function POST(request) {\n  const startTime = Date.now();\n\n  try {\n    const ip = request.headers.get(\"x-forwarded-for\") || \"unknown\";\n    if (!checkRateLimit(ip)) {\n      return NextResponse.json(\n        { error: \"Too many requests. Please try again later.\" },\n        { status: 429 }\n      );\n    }\n\n    const body = await request.json();\n    const { query, language = \"hindi\", preferLatest = false } = body;\n    validateInput(query, language, preferLatest);\n\n    const videos = await fetchYouTubeVideos(query, language, preferLatest);\n\n    if (videos.length === 0) {\n      return NextResponse.json({\n        video: null,\n        aiSummary: `No complete ${language} courses found for \"${query}\". Try different search terms or check alternative platforms.`,\n        responseTime: `${Date.now() - startTime}ms`,\n      });\n    }\n\n    // Score videos with course quality emphasis\n    const scoredVideos = videos.map((video) => {\n      const courseAnalysis = detectCourseQuality(video);\n      return {\n        ...video,\n        score: calculateVideoScore(video, preferLatest, language, query),\n        isPremium: isPremiumChannel(video.channelTitle, language),\n        courseQuality: courseAnalysis,\n      };\n    });\n\n    scoredVideos.sort((a, b) => b.score - a.score);\n\n    const aiAnalysis = await analyzeWithAI(scoredVideos, query, language);\n\n    const bestVideoIndex = Math.min(\n      Math.max(aiAnalysis.bestVideoRank - 1, 0),\n      scoredVideos.length - 1\n    );\n    const bestVideo = scoredVideos[bestVideoIndex];\n\n    const { score, courseQuality, ...cleanVideo } = bestVideo;\n\n    return NextResponse.json({\n      video: cleanVideo,\n      courseContent: aiAnalysis.courseContent,\n      aiSummary: aiAnalysis.summary,\n      confidence: aiAnalysis.confidence,\n      completenessScore: aiAnalysis.completenessScore,\n      isPremiumChannel: bestVideo.isPremium,\n      channelName: bestVideo.channelTitle,\n      durationMinutes: Math.round(courseQuality.durationMinutes),\n      isCourse: courseQuality.isLikelyCourse,\n      reasoning: aiAnalysis.reasoning,\n      responseTime: `${Date.now() - startTime}ms`,\n    });\n  } catch (error) {\n    console.error(\"API Error:\", error);\n\n    if (error.message.includes(\"API key\")) {\n      return NextResponse.json(\n        { error: \"Service configuration error. Please contact support.\" },\n        { status: 500 }\n      );\n    }\n\n    if (error.message.includes(\"quota\")) {\n      return NextResponse.json(\n        { error: \"Service temporarily unavailable. Please try again later.\" },\n        { status: 503 }\n      );\n    }\n\n    return NextResponse.json(\n      { \n        error: error.message || \"Failed to fetch course. Please try again.\",\n        responseTime: `${Date.now() - startTime}ms`,\n      },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function OPTIONS(request) {\n  return new NextResponse(null, {\n    status: 200,\n    headers: {\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"Access-Control-Allow-Methods\": \"POST, OPTIONS\",\n      \"Access-Control-Allow-Headers\": \"Content-Type\",\n    },\n  });\n}"],"names":[],"mappings":"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","debugId":null}}]
}