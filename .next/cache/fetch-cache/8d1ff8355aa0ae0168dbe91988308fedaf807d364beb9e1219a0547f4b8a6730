{"kind":"FETCH","data":{"headers":{"content-encoding":"gzip","content-type":"application/json; charset=UTF-8","date":"Thu, 23 Oct 2025 10:54:14 GMT","server":"scaffolding on HTTPServer2","transfer-encoding":"chunked","vary":"Origin, X-Origin, Referer","x-content-type-options":"nosniff","x-frame-options":"SAMEORIGIN","x-xss-protection":"0"},"body":"{
  "kind": "youtube#videoListResponse",
  "etag": "hhfB2K6pABSu8G3eb_hr6DEJIT8",
  "items": [
    {
      "kind": "youtube#video",
      "etag": "O-uXPhLUELpuUf926yIBSmZHaHQ",
      "id": "ulhYScz65RI",
      "snippet": {
        "publishedAt": "2025-10-10T00:40:02Z",
        "channelId": "UCeFAqanP08cIbDezsVS6yjg",
        "title": "Master RUST in 200 Seconds (Urdu/Hindi) | Rust Programming Tutorial for Beginners",
        "description": "RUST Tutorial for beginners in URDU – Learn Rust programming basics in 200 seconds with Dr. Zeeshan Bhatti.\n\nWelcome to Zeeshan Academy! In this RUST Tutorial (URDU/Hindi), Dr. Zeeshan Bhatti introduces you to the amazing world of Rust — one of the fastest, most memory-safe programming languages. In just 200 seconds, you’ll explore the core concepts of Rust programming, why it’s used, and how it differs from other languages like Java, C#, and Python.\n\n🚀 Topics Covered in this Tutorial:\n0:00 – Introduction: Why We Use Rust\n0:20 – Where Rust is Used & Its Advantages\n0:40 – The main Method\n1:00 – Print Output in Rust\n1:20 – Variables and Using {} for Printing Values\n1:40 – Strings in Rust\n2:00 – Function Declaration & Function Call\n2:20 – If Statement\n2:40 – For Loops\n2:50 – While Loop\n3:00 – How Rust is Different from Java, C#, or Python\n\nBy the end of this quick tutorial, you’ll understand how to write your first Rust program, declare variables, use functions, and apply control structures. Rust is widely used in system programming, web assembly, and performance-critical applications — this tutorial will give you a strong head start!\n\nWhat You Will Learn:\nWhy Rust is powerful and memory-safe\nHow to write basic Rust programs\nVariables, loops, and conditionals in Rust\nDifference between Rust and other popular languages\n\nMost Searched Questions on Topic:\nWhat is Rust used for?\nIs Rust better than C++?\nCan beginners learn Rust easily?\nWhy is Rust called a safe language?\nHow to write “Hello World” in Rust?\n\nHashtags:\n#RustTutorial #LearnRust #ProgrammingForBeginners #ZeeshanAcademy #DrZeeshanBhatti\n\n👉 Explore More Learning:\n📌 Website: https://codewithdrzeeshanbhatti.com\n📌 Facebook: https://www.facebook.com/drzeeshanacademy/\n📌 Instagram: https://www.instagram.com/zeeshan_academy/\n📌 TikTok: https://www.tiktok.com/@zeeshan_academy\n📌 Udemy: https://www.udemy.com/user/zeeshan-bhatti/\n\n🎥 Don’t miss more tutorials: [Programming Playlist Here]\n\n🙏 Please Like 👍, Share 🔁, and Subscribe 🔔 for more video tutorials:\nhttps://www.youtube.com/zeeshanacademy?sub_confirmation=1\n \n ....:::::: Watch More of MY Interesting Tutorials ::::::…..\n👉Full Stack Web Developer Course https://bit.ly/40TT0s7 \n👉Android Mobile Development https://bit.ly/3Bm6wXM\n👉 PHP Server-side Programming https://bit.ly/3zsySiH\n👉 HTML+CSS Web Programming https://bit.ly/3ypOd22\n👉 JavaScript Tutorials https://bit.ly/3DqSc2k\n👉 Java Programming https://bit.ly/3mFZCZl\n👉 Maya Modeling & Animation Full Training Series 2018 https://bit.ly/3gE94sA\n👉 Autodesk Maya Modeling & Animation Full Course https://bit.ly/2UX5lPg\n👉 Learn Autodesk Maya Tutorials in URDU/Hindi  https://bit.ly/38jwajF\n\n\nSearch Terms:\nRust tutorial, Rust tutorial for beginners, learn Rust in 200 seconds, Rust basics URDU, Rust programming URDU tutorial, Rust crash course, programming tutorial URDU, Dr Zeeshan Bhatti, Zeeshan Academy Rust tutorial\n\nTags (500 characters, comma separated):\nRust tutorial, Rust tutorial for beginners, Rust tutorial in Urdu, learn Rust fast, programming tutorial Urdu, Zeeshan Academy, Dr Zeeshan Bhatti, Rust crash course, Rust for beginners, basics of Rust programming, Rust functions, Rust loops, Rust variables, Rust strings, learn programming in Urdu, software development basics, Rust coding tutorial, Rust practice, Rust introduction, how to learn Rust, best Rust tutorial, Rust lecture Urdu, computer science basics Urdu, Zeeshan Academy Rust tutorial, Dr Zeeshan Bhatti programming",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/ulhYScz65RI/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/ulhYScz65RI/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/ulhYScz65RI/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/ulhYScz65RI/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/ulhYScz65RI/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Zeeshan Academy",
        "tags": [
          "Rust tutorial",
          "Rust tutorial for beginners",
          "Rust tutorial in Urdu",
          "learn Rust fast",
          "programming tutorial Urdu",
          "Zeeshan Academy",
          "Dr Zeeshan Bhatti",
          "Rust crash course",
          "Rust for beginners",
          "basics of Rust programming",
          "learn programming in Urdu",
          "Rust coding tutorial",
          "Rust practice",
          "Rust introduction",
          "how to learn Rust",
          "best Rust tutorial",
          "Rust lecture Urdu",
          "Zeeshan Academy Rust tutorial",
          "Dr Zeeshan Bhatti programming",
          "Master RUST in 200 Seconds",
          "RUST in 200 Seconds"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en-GB",
        "localized": {
          "title": "Master RUST in 200 Seconds (Urdu/Hindi) | Rust Programming Tutorial for Beginners",
          "description": "RUST Tutorial for beginners in URDU – Learn Rust programming basics in 200 seconds with Dr. Zeeshan Bhatti.\n\nWelcome to Zeeshan Academy! In this RUST Tutorial (URDU/Hindi), Dr. Zeeshan Bhatti introduces you to the amazing world of Rust — one of the fastest, most memory-safe programming languages. In just 200 seconds, you’ll explore the core concepts of Rust programming, why it’s used, and how it differs from other languages like Java, C#, and Python.\n\n🚀 Topics Covered in this Tutorial:\n0:00 – Introduction: Why We Use Rust\n0:20 – Where Rust is Used & Its Advantages\n0:40 – The main Method\n1:00 – Print Output in Rust\n1:20 – Variables and Using {} for Printing Values\n1:40 – Strings in Rust\n2:00 – Function Declaration & Function Call\n2:20 – If Statement\n2:40 – For Loops\n2:50 – While Loop\n3:00 – How Rust is Different from Java, C#, or Python\n\nBy the end of this quick tutorial, you’ll understand how to write your first Rust program, declare variables, use functions, and apply control structures. Rust is widely used in system programming, web assembly, and performance-critical applications — this tutorial will give you a strong head start!\n\nWhat You Will Learn:\nWhy Rust is powerful and memory-safe\nHow to write basic Rust programs\nVariables, loops, and conditionals in Rust\nDifference between Rust and other popular languages\n\nMost Searched Questions on Topic:\nWhat is Rust used for?\nIs Rust better than C++?\nCan beginners learn Rust easily?\nWhy is Rust called a safe language?\nHow to write “Hello World” in Rust?\n\nHashtags:\n#RustTutorial #LearnRust #ProgrammingForBeginners #ZeeshanAcademy #DrZeeshanBhatti\n\n👉 Explore More Learning:\n📌 Website: https://codewithdrzeeshanbhatti.com\n📌 Facebook: https://www.facebook.com/drzeeshanacademy/\n📌 Instagram: https://www.instagram.com/zeeshan_academy/\n📌 TikTok: https://www.tiktok.com/@zeeshan_academy\n📌 Udemy: https://www.udemy.com/user/zeeshan-bhatti/\n\n🎥 Don’t miss more tutorials: [Programming Playlist Here]\n\n🙏 Please Like 👍, Share 🔁, and Subscribe 🔔 for more video tutorials:\nhttps://www.youtube.com/zeeshanacademy?sub_confirmation=1\n \n ....:::::: Watch More of MY Interesting Tutorials ::::::…..\n👉Full Stack Web Developer Course https://bit.ly/40TT0s7 \n👉Android Mobile Development https://bit.ly/3Bm6wXM\n👉 PHP Server-side Programming https://bit.ly/3zsySiH\n👉 HTML+CSS Web Programming https://bit.ly/3ypOd22\n👉 JavaScript Tutorials https://bit.ly/3DqSc2k\n👉 Java Programming https://bit.ly/3mFZCZl\n👉 Maya Modeling & Animation Full Training Series 2018 https://bit.ly/3gE94sA\n👉 Autodesk Maya Modeling & Animation Full Course https://bit.ly/2UX5lPg\n👉 Learn Autodesk Maya Tutorials in URDU/Hindi  https://bit.ly/38jwajF\n\n\nSearch Terms:\nRust tutorial, Rust tutorial for beginners, learn Rust in 200 seconds, Rust basics URDU, Rust programming URDU tutorial, Rust crash course, programming tutorial URDU, Dr Zeeshan Bhatti, Zeeshan Academy Rust tutorial\n\nTags (500 characters, comma separated):\nRust tutorial, Rust tutorial for beginners, Rust tutorial in Urdu, learn Rust fast, programming tutorial Urdu, Zeeshan Academy, Dr Zeeshan Bhatti, Rust crash course, Rust for beginners, basics of Rust programming, Rust functions, Rust loops, Rust variables, Rust strings, learn programming in Urdu, software development basics, Rust coding tutorial, Rust practice, Rust introduction, how to learn Rust, best Rust tutorial, Rust lecture Urdu, computer science basics Urdu, Zeeshan Academy Rust tutorial, Dr Zeeshan Bhatti programming"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT7M56S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "30",
        "likeCount": "0",
        "favoriteCount": "0",
        "commentCount": "0"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "u9qwoL-lpKDrurksoFeXNc7PjxU",
      "id": "51ktlXUj3gk",
      "snippet": {
        "publishedAt": "2025-09-24T03:36:00Z",
        "channelId": "UCEnZkcgXkfTjNWF-tY1ldag",
        "title": "Rust Tutorial 8  | Enums in Rust | Rust in Hindi | Tutorial | Learn from scratch",
        "description": "Rust Tutorial 8  | Enums in Rust | Rust in Hindi | Tutorial | Learn from scratch\n\nWelcome to the first video of our Rust Programming Language Tutorial Series in Hindi!\nIn this video, we will give you a complete introduction to Rust, one of the most powerful and safe system programming languages. Whether you're a beginner or coming from C/C++ or Java, this series will help you learn Rust from scratch easily and understandably.\n\n🎯 What you’ll learn in this video:\n- What is Rust?\n- Why learn Rust in 2025?\n- Features of Rust\n- Where Rust is used\n- How will this course be structured\n\n📚 This tutorial is completely in Hindi, so it's perfect for native speakers looking to start their Rust journey.\n\nPOPULAR UPLOADS\n===============================\n🎯 Placement Diaries: https://youtube.com/playlist?list=PL\n\nLet's Connect\n===============================\n📞Telegram Channel: https://t.me/act_tech_viral\n\nSOCIAL \n===============================\n📸 Instagram: https://www.instagram.com/kunal_g_29/\n🐦Twitter: https://twitter.com/kunal_g_29\n👥LinkedIn: https://www.linkedin.com/in/kunalgarg357\n\n\n⏲️ Timestamps ⏲️\n===============================\n0:00 - Welcome\n0:05 - Let's Go\n\n👍 Don’t forget to Like, Share, and Subscribe for the full series!\n\n🌟🌟🌟 Hashtags 🌟🌟🌟\n===============================\n#KunalGarg #RustInHindi #RustTutorial #LearnRust #RustProgramming #HindiCoding #ProgrammingInHindi #RustTutorial #LearnRust #RustProgramming #RustInHindi #ProgrammingTutorial #CodingInHindi #LearnFromScratch #RustLang #RustForBeginners #HindiProgramming #SoftwareDevelopment #TechEducation #RustLanguage #CodingTutorial #ProgrammingBasics",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/51ktlXUj3gk/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/51ktlXUj3gk/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/51ktlXUj3gk/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/51ktlXUj3gk/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/51ktlXUj3gk/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Kunal Garg",
        "tags": [
          "kunal garg",
          "rust tutorial",
          "rust programming in hindi",
          "learn rust from scratch",
          "rust introduction",
          "rust programming language",
          "rust basics",
          "rust coding tutorial hindi",
          "rust development",
          "rust setup guide",
          "rust for beginners",
          "rust installation",
          "rust tutorial for beginners",
          "rust syntax",
          "rust programming course",
          "rust projects",
          "rust compiler",
          "rust on windows",
          "rust on linux",
          "rust programming",
          "rust tutorial 2025",
          "rust language hindi",
          "rust language playlist"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "Rust Tutorial 8  | Enums in Rust | Rust in Hindi | Tutorial | Learn from scratch",
          "description": "Rust Tutorial 8  | Enums in Rust | Rust in Hindi | Tutorial | Learn from scratch\n\nWelcome to the first video of our Rust Programming Language Tutorial Series in Hindi!\nIn this video, we will give you a complete introduction to Rust, one of the most powerful and safe system programming languages. Whether you're a beginner or coming from C/C++ or Java, this series will help you learn Rust from scratch easily and understandably.\n\n🎯 What you’ll learn in this video:\n- What is Rust?\n- Why learn Rust in 2025?\n- Features of Rust\n- Where Rust is used\n- How will this course be structured\n\n📚 This tutorial is completely in Hindi, so it's perfect for native speakers looking to start their Rust journey.\n\nPOPULAR UPLOADS\n===============================\n🎯 Placement Diaries: https://youtube.com/playlist?list=PL\n\nLet's Connect\n===============================\n📞Telegram Channel: https://t.me/act_tech_viral\n\nSOCIAL \n===============================\n📸 Instagram: https://www.instagram.com/kunal_g_29/\n🐦Twitter: https://twitter.com/kunal_g_29\n👥LinkedIn: https://www.linkedin.com/in/kunalgarg357\n\n\n⏲️ Timestamps ⏲️\n===============================\n0:00 - Welcome\n0:05 - Let's Go\n\n👍 Don’t forget to Like, Share, and Subscribe for the full series!\n\n🌟🌟🌟 Hashtags 🌟🌟🌟\n===============================\n#KunalGarg #RustInHindi #RustTutorial #LearnRust #RustProgramming #HindiCoding #ProgrammingInHindi #RustTutorial #LearnRust #RustProgramming #RustInHindi #ProgrammingTutorial #CodingInHindi #LearnFromScratch #RustLang #RustForBeginners #HindiProgramming #SoftwareDevelopment #TechEducation #RustLanguage #CodingTutorial #ProgrammingBasics"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT9M2S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": false,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "8",
        "likeCount": "3",
        "favoriteCount": "0",
        "commentCount": "0"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "2nTwlERDxmF2M7PT6gQU07lR_Aw",
      "id": "5oRrCY8rt3s",
      "snippet": {
        "publishedAt": "2025-09-17T12:30:14Z",
        "channelId": "UCEnZkcgXkfTjNWF-tY1ldag",
        "title": "Rust Tutorial 7  | Structs in Rust | Rust in Hindi | Tutorial | Learn from scratch",
        "description": "Rust Tutorial 7  | Structs in Rust | Rust in Hindi | Tutorial | Learn from scratch\n\nWelcome to the first video of our Rust Programming Language Tutorial Series in Hindi!\nIn this video, we will give you a complete introduction to Rust, one of the most powerful and safe system programming languages. Whether you're a beginner or coming from C/C++ or Java, this series will help you learn Rust from scratch easily and understandably.\n\n🎯 What you’ll learn in this video:\n- What is Rust?\n- Why learn Rust in 2025?\n- Features of Rust\n- Where Rust is used\n- How will this course be structured\n\n📚 This tutorial is completely in Hindi, so it's perfect for native speakers looking to start their Rust journey.\n\nPOPULAR UPLOADS\n===============================\n🎯 Placement Diaries: https://youtube.com/playlist?list=PL\n\nLet's Connect\n===============================\n📞Telegram Channel: https://t.me/act_tech_viral\n\nSOCIAL \n===============================\n📸 Instagram: https://www.instagram.com/kunal_g_29/\n🐦Twitter: https://twitter.com/kunal_g_29\n👥LinkedIn: https://www.linkedin.com/in/kunalgarg357\n\n\n⏲️ Timestamps ⏲️\n===============================\n0:00 - Welcome\n0:05 - Let's Go\n\n👍 Don’t forget to Like, Share, and Subscribe for the full series!\n\n🌟🌟🌟 Hashtags 🌟🌟🌟\n===============================\n#KunalGarg #RustInHindi #RustTutorial #LearnRust #RustProgramming #HindiCoding #ProgrammingInHindi #RustTutorial #LearnRust #RustProgramming #RustInHindi #ProgrammingTutorial #CodingInHindi #LearnFromScratch #RustLang #RustForBeginners #HindiProgramming #SoftwareDevelopment #TechEducation #RustLanguage #CodingTutorial #ProgrammingBasics",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/5oRrCY8rt3s/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/5oRrCY8rt3s/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/5oRrCY8rt3s/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/5oRrCY8rt3s/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/5oRrCY8rt3s/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Kunal Garg",
        "tags": [
          "kunal garg",
          "rust tutorial",
          "rust programming in hindi",
          "learn rust from scratch",
          "rust introduction",
          "rust programming language",
          "rust basics",
          "rust coding tutorial hindi",
          "rust development",
          "rust setup guide",
          "rust for beginners",
          "rust installation",
          "rust tutorial for beginners",
          "rust syntax",
          "rust programming course",
          "rust projects",
          "rust compiler",
          "rust on windows",
          "rust on linux",
          "rust programming",
          "rust tutorial 2025",
          "rust language hindi",
          "rust language playlist"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "Rust Tutorial 7  | Structs in Rust | Rust in Hindi | Tutorial | Learn from scratch",
          "description": "Rust Tutorial 7  | Structs in Rust | Rust in Hindi | Tutorial | Learn from scratch\n\nWelcome to the first video of our Rust Programming Language Tutorial Series in Hindi!\nIn this video, we will give you a complete introduction to Rust, one of the most powerful and safe system programming languages. Whether you're a beginner or coming from C/C++ or Java, this series will help you learn Rust from scratch easily and understandably.\n\n🎯 What you’ll learn in this video:\n- What is Rust?\n- Why learn Rust in 2025?\n- Features of Rust\n- Where Rust is used\n- How will this course be structured\n\n📚 This tutorial is completely in Hindi, so it's perfect for native speakers looking to start their Rust journey.\n\nPOPULAR UPLOADS\n===============================\n🎯 Placement Diaries: https://youtube.com/playlist?list=PL\n\nLet's Connect\n===============================\n📞Telegram Channel: https://t.me/act_tech_viral\n\nSOCIAL \n===============================\n📸 Instagram: https://www.instagram.com/kunal_g_29/\n🐦Twitter: https://twitter.com/kunal_g_29\n👥LinkedIn: https://www.linkedin.com/in/kunalgarg357\n\n\n⏲️ Timestamps ⏲️\n===============================\n0:00 - Welcome\n0:05 - Let's Go\n\n👍 Don’t forget to Like, Share, and Subscribe for the full series!\n\n🌟🌟🌟 Hashtags 🌟🌟🌟\n===============================\n#KunalGarg #RustInHindi #RustTutorial #LearnRust #RustProgramming #HindiCoding #ProgrammingInHindi #RustTutorial #LearnRust #RustProgramming #RustInHindi #ProgrammingTutorial #CodingInHindi #LearnFromScratch #RustLang #RustForBeginners #HindiProgramming #SoftwareDevelopment #TechEducation #RustLanguage #CodingTutorial #ProgrammingBasics"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT5M39S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": false,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "8",
        "likeCount": "0",
        "favoriteCount": "0",
        "commentCount": "0"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "2aNPfyYS6FAYq40BQWZP9Bd3n7M",
      "id": "JeBJHqK8Ovc",
      "snippet": {
        "publishedAt": "2025-07-12T13:30:28Z",
        "channelId": "UCNQ6FEtztATuaVhZKCY28Yw",
        "title": "Prisma moves away from Rust",
        "description": "Check out https://hitesh.ai for our Udemy courses\n\nWelcome to chai aur code, a coding/programming dedicated channel in Hindi language. Now you can learn best of programming concepts with industry standard practical guide in Hindi language.\n\nAll source code is available at my Github account:\nhttps://github.com/hiteshchoudhary\n\nOur Open-Source Project is here: https://freeapi.app\n\nJoin me at whatsapp: https://hitesh.ai/whatsapp\n\nfor community discord: https://hitesh.ai/discord\n\nInstagram pe yaha paaye jaate h:\nhttps://www.instagram.com/hiteshchoudharyofficial/\n\nHTML video series:  https://www.youtube.com/watch?v=XmLOwJHFHf0&list=PLu71SKxNbfoDBNF5s-WH6aLbthSEIMhMI\n\nComplete javascript series: https://www.youtube.com/watch?v=Hr5iLG7sUa0&list=PLu71SKxNbfoBuX3f4EOACle2y-tRC5Q37\n\nComplete Reactjs series: https://www.youtube.com/watch?v=vz1RlUyrc3w&list=PLu71SKxNbfoDqgPchmvIsL4hTnJIrtige\n\nJavascript and react interview series: https://www.youtube.com/watch?v=1wqCyz7XrV4&list=PLu71SKxNbfoCy_MsA98SBfvUKF5eQit6L\n\nBackend development with Javascript: https://www.youtube.com/watch?v=EH3vGeqeIAo&list=PLu71SKxNbfoBGh_8p_NS-ZAh6v7HhYqHW\n\nPython Series: https://www.youtube.com/watch?v=Ca5DLSDfPec&list=PLu71SKxNbfoBsMugTFALhdLlZ5VOqCg2s",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/JeBJHqK8Ovc/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/JeBJHqK8Ovc/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/JeBJHqK8Ovc/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/JeBJHqK8Ovc/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/JeBJHqK8Ovc/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chai aur Code",
        "tags": [
          "coding",
          "hindi",
          "javascript",
          "web developer",
          "react",
          "quality",
          "reactjs",
          "tech interviews",
          "coding interviews",
          "python",
          "django",
          "machine learning",
          "python for beginners",
          "AI",
          "Data Science"
        ],
        "categoryId": "24",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "Prisma moves away from Rust",
          "description": "Check out https://hitesh.ai for our Udemy courses\n\nWelcome to chai aur code, a coding/programming dedicated channel in Hindi language. Now you can learn best of programming concepts with industry standard practical guide in Hindi language.\n\nAll source code is available at my Github account:\nhttps://github.com/hiteshchoudhary\n\nOur Open-Source Project is here: https://freeapi.app\n\nJoin me at whatsapp: https://hitesh.ai/whatsapp\n\nfor community discord: https://hitesh.ai/discord\n\nInstagram pe yaha paaye jaate h:\nhttps://www.instagram.com/hiteshchoudharyofficial/\n\nHTML video series:  https://www.youtube.com/watch?v=XmLOwJHFHf0&list=PLu71SKxNbfoDBNF5s-WH6aLbthSEIMhMI\n\nComplete javascript series: https://www.youtube.com/watch?v=Hr5iLG7sUa0&list=PLu71SKxNbfoBuX3f4EOACle2y-tRC5Q37\n\nComplete Reactjs series: https://www.youtube.com/watch?v=vz1RlUyrc3w&list=PLu71SKxNbfoDqgPchmvIsL4hTnJIrtige\n\nJavascript and react interview series: https://www.youtube.com/watch?v=1wqCyz7XrV4&list=PLu71SKxNbfoCy_MsA98SBfvUKF5eQit6L\n\nBackend development with Javascript: https://www.youtube.com/watch?v=EH3vGeqeIAo&list=PLu71SKxNbfoBGh_8p_NS-ZAh6v7HhYqHW\n\nPython Series: https://www.youtube.com/watch?v=Ca5DLSDfPec&list=PLu71SKxNbfoBsMugTFALhdLlZ5VOqCg2s"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT19M",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "32181",
        "likeCount": "1369",
        "favoriteCount": "0",
        "commentCount": "96"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "vjmQmx78-4yQURRhY6QGJ365SHc",
      "id": "_uwneq_cwvE",
      "snippet": {
        "publishedAt": "2025-07-07T12:30:44Z",
        "channelId": "UCEnZkcgXkfTjNWF-tY1ldag",
        "title": "Rust Tutorial 5  | Ownership and Borrowing | Rust in Hindi | Tutorial | Learn from scratch",
        "description": "Rust Tutorial 5  | Ownership and Borrowing | Rust in Hindi | Tutorial | Learn from scratch\n\nWelcome to the first video of our Rust Programming Language Tutorial Series in Hindi!\nIn this video, we will give you a complete introduction to Rust, one of the most powerful and safe system programming languages. Whether you're a beginner or coming from C/C++ or Java, this series will help you learn Rust from scratch easily and understandably.\n\n🎯 What you’ll learn in this video:\n- What is Rust?\n- Why learn Rust in 2025?\n- Features of Rust\n- Where Rust is used\n- How will this course be structured\n\n📚 This tutorial is completely in Hindi, so it's perfect for native speakers looking to start their Rust journey.\n\nPOPULAR UPLOADS\n===============================\n🎯 Placement Diaries: https://youtube.com/playlist?list=PL\n\nLet's Connect\n===============================\n📞Telegram Channel: https://t.me/act_tech_viral\n\nSOCIAL \n===============================\n📸 Instagram: https://www.instagram.com/kunal_g_29/\n🐦Twitter: https://twitter.com/kunal_g_29\n👥LinkedIn: https://www.linkedin.com/in/kunalgarg357\n\n\n⏲️ Timestamps ⏲️\n===============================\n0:00 - Welcome\n0:05 - Let's Go\n\n👍 Don’t forget to Like, Share, and Subscribe for the full series!\n\n🌟🌟🌟 Hashtags 🌟🌟🌟\n===============================\n#KunalGarg #RustInHindi #RustTutorial #LearnRust #RustProgramming #HindiCoding #ProgrammingInHindi #RustTutorial #LearnRust #RustProgramming #RustInHindi #ProgrammingTutorial #CodingInHindi #LearnFromScratch #RustLang #RustForBeginners #HindiProgramming #SoftwareDevelopment #TechEducation #RustLanguage #CodingTutorial #ProgrammingBasics",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/_uwneq_cwvE/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/_uwneq_cwvE/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/_uwneq_cwvE/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/_uwneq_cwvE/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/_uwneq_cwvE/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Kunal Garg",
        "tags": [
          "kunal garg",
          "rust tutorial",
          "rust programming in hindi",
          "learn rust from scratch",
          "rust introduction",
          "rust programming language",
          "rust basics",
          "rust coding tutorial hindi",
          "rust development",
          "rust setup guide",
          "rust for beginners",
          "rust installation",
          "rust tutorial for beginners",
          "rust syntax",
          "rust programming course",
          "rust projects",
          "rust compiler",
          "rust on windows",
          "rust on linux",
          "rust programming",
          "rust tutorial 2025",
          "rust language hindi",
          "rust language playlist"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "Rust Tutorial 5  | Ownership and Borrowing | Rust in Hindi | Tutorial | Learn from scratch",
          "description": "Rust Tutorial 5  | Ownership and Borrowing | Rust in Hindi | Tutorial | Learn from scratch\n\nWelcome to the first video of our Rust Programming Language Tutorial Series in Hindi!\nIn this video, we will give you a complete introduction to Rust, one of the most powerful and safe system programming languages. Whether you're a beginner or coming from C/C++ or Java, this series will help you learn Rust from scratch easily and understandably.\n\n🎯 What you’ll learn in this video:\n- What is Rust?\n- Why learn Rust in 2025?\n- Features of Rust\n- Where Rust is used\n- How will this course be structured\n\n📚 This tutorial is completely in Hindi, so it's perfect for native speakers looking to start their Rust journey.\n\nPOPULAR UPLOADS\n===============================\n🎯 Placement Diaries: https://youtube.com/playlist?list=PL\n\nLet's Connect\n===============================\n📞Telegram Channel: https://t.me/act_tech_viral\n\nSOCIAL \n===============================\n📸 Instagram: https://www.instagram.com/kunal_g_29/\n🐦Twitter: https://twitter.com/kunal_g_29\n👥LinkedIn: https://www.linkedin.com/in/kunalgarg357\n\n\n⏲️ Timestamps ⏲️\n===============================\n0:00 - Welcome\n0:05 - Let's Go\n\n👍 Don’t forget to Like, Share, and Subscribe for the full series!\n\n🌟🌟🌟 Hashtags 🌟🌟🌟\n===============================\n#KunalGarg #RustInHindi #RustTutorial #LearnRust #RustProgramming #HindiCoding #ProgrammingInHindi #RustTutorial #LearnRust #RustProgramming #RustInHindi #ProgrammingTutorial #CodingInHindi #LearnFromScratch #RustLang #RustForBeginners #HindiProgramming #SoftwareDevelopment #TechEducation #RustLanguage #CodingTutorial #ProgrammingBasics"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT8M15S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": false,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "11",
        "likeCount": "2",
        "favoriteCount": "0",
        "commentCount": "1"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "r_BF2T4ml6Fgfl27WJ1UJ6GjMUM",
      "id": "CF52N-w4anI",
      "snippet": {
        "publishedAt": "2025-07-05T11:30:20Z",
        "channelId": "UCeVMnSShP_Iviwkknt83cww",
        "title": "Your First Programming Language in the AI Era Should be...",
        "description": "Data Science Course: https://www.codewithharry.com/courses/the-ultimate-job-ready-data-science-course\nCourse Curriculum: https://www.codewithharry.com/courses/the-ultimate-job-ready-data-science-course\nCheckout Clerk: https://go.clerk.com/7c2oeRx\nData Science Course (International Students): https://buy.stripe.com/9B65kF3790jS2kCeiZ1gs04\nPython Udemy Course: https://goharry.in/python\n\n➡️ Download Notes and CheatSheets: https://www.codewithharry.com/notes/\n➡️ Udemy Python Course: https://goharry.in/python\n➡️ Checkout Data Science The Ultimate Job Ready Data Science Course: https://www.codewithharry.com/courses/the-ultimate-job-ready-data-science-course\n➡️ Data Science (International Students): https://buy.stripe.com/9B65kF3790jS2kCeiZ1gs04\n➡️ Career Advice:\nIf you are into college and C/C++/Java is being taught, please continue with it. Here are my respective videos/playlists:\nLearn C Programming: https://www.youtube.com/watch?v=aZb0iu4uGwA\nLearn C++ Programming: https://www.youtube.com/playlist?list=PLu0W_9lII9agpFUAlPFe_VNSlXW5uE0YL \nLearn Java Programming: https://www.youtube.com/playlist?list=PLu0W_9lII9agS67Uits0UnJyrYiXhDS6q\n\nBut if you are not in college and want to learn programming, then I would suggest you to start with Python.  \n\nAlso if you are a beginner and want to learn programming, start with Python. It is beginner-friendly and has a large community for support and a lot of jobs. If you're serious start with my Udemy course in English. Its updated + has a lot of projects. Here is the discounted link which will get you this course for less than ₹400-500. I request you to leave a review if you have enrolled: \nUdemy Course: https://goharry.in/python\n\nAfter you finish this course, you can start with Data Science. It is a very profitable field to get into and has a lot of job opportunities. You can learn Data Science through my \"Ultimate Job Ready Data Science Course\". It is a complete course that covers everything you need to know to get a job in Data Science. Here is the discounted link to the course that will get you this course for ₹2899:\nData Science Course: https://www.codewithharry.com/courses/the-ultimate-job-ready-data-science-course\n\nIf you are looking for free resources to learn Python, you can start with my Python Course on YouTube. It is a complete course that covers everything you need to know to become a Python developer. Its Free and you can access it here:\n10 Hour Long Python Course (VS Code): https://www.youtube.com/watch?v=UrsmFxEIp5k\n100 Days of Code Playlist that uses Replit: https://www.youtube.com/playlist?list=PLu0W_9lII9agwh1XjRt242xIpHhPT2llg\n\nIf you want to learn web development, you can start with my Sigma Web Development Course. It is a complete course that covers everything you need to know to become a web developer. Its Free and you can access it here:\nWeb Development Course: https://www.youtube.com/playlist?list=PLu0W_9lII9agq5TrH9XLIKQvv0iaF2X3w\n\nIf you want to learn Data Structures and Algorithms, you can start with my Data Structures and Algorithms Course. It is a complete course that covers everything you need to know to become a good programmer. Its Free and you can access it here:\nData Structures and Algorithms Course: https://www.youtube.com/playlist?list=PLu0W_9lII9ahIappRPN0MCAgtOu3lQjQi\n\n➡️ Other Tutorials:\nWordpress[3.2 Hr]:https://www.youtube.com/watch?v=GlLRYml8mCY&list=PLu0W_9lII9ahKZ42vg2w9ERPmShYbYAB7\nAngular[2 Hr]:https://www.youtube.com/watch?v=0LhBvp8qpro&list=PLu0W_9lII9ahKZ42vg2w9ERPmShYbYAB7\nGUI Development with Python: https://www.youtube.com/playlist?list=PLu0W_9lII9ajLcqRcj4PoEihkukF_OTzA\nLinux[1 Hr]:https://www.youtube.com/watch?v=_tCY-c-sPZc&list=PLu0W_9lII9ahKZ42vg2w9ERPmShYbYAB7\n\n➡️ More Advise from Harry:\nMany people say that in the AI era , programming is dead. But I don't think so. AI is a tool that can help you in your programming journey. But dont overuse it in the  beginning. Try to learn basics first!\nAI can help you write better code, debug your code, and even help you learn new programming languages. So don't be afraid of AI, embrace it and use it to your advantage. Talk to ChatGPT daily and you will realize how quickly you can learn new things and build software. What others think is a disadvantage will become your advantage.\n\n➡️ Hosting\nIf you want to host a website on a VPS and get $200 in credits, use my DigitalOcean Link\nGet Free 200$ DigitalOcean Credits here: https://m.do.co/c/2f2aa100b7ee\n\n➡️ Follow Me On Social Media\n► Website (Created Using Next.js): https://www.codewithharry.com\n► Facebook: https://www.facebook.com/CodeWithHarry\n► Instagram: https://www.instagram.com/CodeWithHarry/ \n► Twitter: https://twitter.com/CodeWithHarry\n► English channel: https://www.youtube.com/channel/UC7btqG2Ww0_2LwuQxpvo2HQ\nComment \"#HarryBhai\" if you read this 😉😉",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/CF52N-w4anI/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/CF52N-w4anI/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/CF52N-w4anI/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/CF52N-w4anI/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/CF52N-w4anI/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "CodeWithHarry",
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "Your First Programming Language in the AI Era Should be...",
          "description": "Data Science Course: https://www.codewithharry.com/courses/the-ultimate-job-ready-data-science-course\nCourse Curriculum: https://www.codewithharry.com/courses/the-ultimate-job-ready-data-science-course\nCheckout Clerk: https://go.clerk.com/7c2oeRx\nData Science Course (International Students): https://buy.stripe.com/9B65kF3790jS2kCeiZ1gs04\nPython Udemy Course: https://goharry.in/python\n\n➡️ Download Notes and CheatSheets: https://www.codewithharry.com/notes/\n➡️ Udemy Python Course: https://goharry.in/python\n➡️ Checkout Data Science The Ultimate Job Ready Data Science Course: https://www.codewithharry.com/courses/the-ultimate-job-ready-data-science-course\n➡️ Data Science (International Students): https://buy.stripe.com/9B65kF3790jS2kCeiZ1gs04\n➡️ Career Advice:\nIf you are into college and C/C++/Java is being taught, please continue with it. Here are my respective videos/playlists:\nLearn C Programming: https://www.youtube.com/watch?v=aZb0iu4uGwA\nLearn C++ Programming: https://www.youtube.com/playlist?list=PLu0W_9lII9agpFUAlPFe_VNSlXW5uE0YL \nLearn Java Programming: https://www.youtube.com/playlist?list=PLu0W_9lII9agS67Uits0UnJyrYiXhDS6q\n\nBut if you are not in college and want to learn programming, then I would suggest you to start with Python.  \n\nAlso if you are a beginner and want to learn programming, start with Python. It is beginner-friendly and has a large community for support and a lot of jobs. If you're serious start with my Udemy course in English. Its updated + has a lot of projects. Here is the discounted link which will get you this course for less than ₹400-500. I request you to leave a review if you have enrolled: \nUdemy Course: https://goharry.in/python\n\nAfter you finish this course, you can start with Data Science. It is a very profitable field to get into and has a lot of job opportunities. You can learn Data Science through my \"Ultimate Job Ready Data Science Course\". It is a complete course that covers everything you need to know to get a job in Data Science. Here is the discounted link to the course that will get you this course for ₹2899:\nData Science Course: https://www.codewithharry.com/courses/the-ultimate-job-ready-data-science-course\n\nIf you are looking for free resources to learn Python, you can start with my Python Course on YouTube. It is a complete course that covers everything you need to know to become a Python developer. Its Free and you can access it here:\n10 Hour Long Python Course (VS Code): https://www.youtube.com/watch?v=UrsmFxEIp5k\n100 Days of Code Playlist that uses Replit: https://www.youtube.com/playlist?list=PLu0W_9lII9agwh1XjRt242xIpHhPT2llg\n\nIf you want to learn web development, you can start with my Sigma Web Development Course. It is a complete course that covers everything you need to know to become a web developer. Its Free and you can access it here:\nWeb Development Course: https://www.youtube.com/playlist?list=PLu0W_9lII9agq5TrH9XLIKQvv0iaF2X3w\n\nIf you want to learn Data Structures and Algorithms, you can start with my Data Structures and Algorithms Course. It is a complete course that covers everything you need to know to become a good programmer. Its Free and you can access it here:\nData Structures and Algorithms Course: https://www.youtube.com/playlist?list=PLu0W_9lII9ahIappRPN0MCAgtOu3lQjQi\n\n➡️ Other Tutorials:\nWordpress[3.2 Hr]:https://www.youtube.com/watch?v=GlLRYml8mCY&list=PLu0W_9lII9ahKZ42vg2w9ERPmShYbYAB7\nAngular[2 Hr]:https://www.youtube.com/watch?v=0LhBvp8qpro&list=PLu0W_9lII9ahKZ42vg2w9ERPmShYbYAB7\nGUI Development with Python: https://www.youtube.com/playlist?list=PLu0W_9lII9ajLcqRcj4PoEihkukF_OTzA\nLinux[1 Hr]:https://www.youtube.com/watch?v=_tCY-c-sPZc&list=PLu0W_9lII9ahKZ42vg2w9ERPmShYbYAB7\n\n➡️ More Advise from Harry:\nMany people say that in the AI era , programming is dead. But I don't think so. AI is a tool that can help you in your programming journey. But dont overuse it in the  beginning. Try to learn basics first!\nAI can help you write better code, debug your code, and even help you learn new programming languages. So don't be afraid of AI, embrace it and use it to your advantage. Talk to ChatGPT daily and you will realize how quickly you can learn new things and build software. What others think is a disadvantage will become your advantage.\n\n➡️ Hosting\nIf you want to host a website on a VPS and get $200 in credits, use my DigitalOcean Link\nGet Free 200$ DigitalOcean Credits here: https://m.do.co/c/2f2aa100b7ee\n\n➡️ Follow Me On Social Media\n► Website (Created Using Next.js): https://www.codewithharry.com\n► Facebook: https://www.facebook.com/CodeWithHarry\n► Instagram: https://www.instagram.com/CodeWithHarry/ \n► Twitter: https://twitter.com/CodeWithHarry\n► English channel: https://www.youtube.com/channel/UC7btqG2Ww0_2LwuQxpvo2HQ\nComment \"#HarryBhai\" if you read this 😉😉"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT12M29S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "823208",
        "likeCount": "29087",
        "favoriteCount": "0",
        "commentCount": "2018"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "-FzCGRZYYSR4lXMLkvnZ7jvDotY",
      "id": "VTV0f1MEBro",
      "snippet": {
        "publishedAt": "2025-06-30T12:30:41Z",
        "channelId": "UCEnZkcgXkfTjNWF-tY1ldag",
        "title": "Rust Tutorial 4  | Loops & Match in Rust | Rust in Hindi | Tutorial | Learn from scratch",
        "description": "Rust Tutorial 4  | Loops & Match in Rust | Rust in Hindi | Tutorial | Learn from scratch\n\nWelcome to the first video of our Rust Programming Language Tutorial Series in Hindi!\nIn this video, we will give you a complete introduction to Rust, one of the most powerful and safe system programming languages. Whether you're a beginner or coming from C/C++ or Java, this series will help you learn Rust from scratch easily and understandably.\n\n🎯 What you’ll learn in this video:\n- What is Rust?\n- Why learn Rust in 2025?\n- Features of Rust\n- Where Rust is used\n- How will this course be structured\n\n📚 This tutorial is completely in Hindi, so it's perfect for native speakers looking to start their Rust journey.\n\nPOPULAR UPLOADS\n===============================\n🎯 Placement Diaries: https://youtube.com/playlist?list=PL\n\nLet's Connect\n===============================\n📞Telegram Channel: https://t.me/act_tech_viral\n\nSOCIAL \n===============================\n📸 Instagram: https://www.instagram.com/kunal_g_29/\n🐦Twitter: https://twitter.com/kunal_g_29\n👥LinkedIn: https://www.linkedin.com/in/kunalgarg357\n\n\n⏲️ Timestamps ⏲️\n===============================\n0:00 - Welcome\n0:05 - Let's Go\n\n👍 Don’t forget to Like, Share, and Subscribe for the full series!\n\n🌟🌟🌟 Hashtags 🌟🌟🌟\n===============================\n#KunalGarg #RustInHindi #RustTutorial #LearnRust #RustProgramming #HindiCoding #ProgrammingInHindi #RustTutorial #LearnRust #RustProgramming #RustInHindi #ProgrammingTutorial #CodingInHindi #LearnFromScratch #RustLang #RustForBeginners #HindiProgramming #SoftwareDevelopment #TechEducation #RustLanguage #CodingTutorial #ProgrammingBasics",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/VTV0f1MEBro/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/VTV0f1MEBro/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/VTV0f1MEBro/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/VTV0f1MEBro/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/VTV0f1MEBro/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Kunal Garg",
        "tags": [
          "kunal garg",
          "rust tutorial",
          "rust programming in hindi",
          "learn rust from scratch",
          "rust introduction",
          "rust programming language",
          "rust basics",
          "rust coding tutorial hindi",
          "rust development",
          "rust setup guide",
          "rust for beginners",
          "rust installation",
          "rust tutorial for beginners",
          "rust syntax",
          "rust programming course",
          "rust projects",
          "rust compiler",
          "rust on windows",
          "rust on linux",
          "rust programming",
          "rust tutorial 2025",
          "rust language hindi",
          "rust language playlist"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "Rust Tutorial 4  | Loops & Match in Rust | Rust in Hindi | Tutorial | Learn from scratch",
          "description": "Rust Tutorial 4  | Loops & Match in Rust | Rust in Hindi | Tutorial | Learn from scratch\n\nWelcome to the first video of our Rust Programming Language Tutorial Series in Hindi!\nIn this video, we will give you a complete introduction to Rust, one of the most powerful and safe system programming languages. Whether you're a beginner or coming from C/C++ or Java, this series will help you learn Rust from scratch easily and understandably.\n\n🎯 What you’ll learn in this video:\n- What is Rust?\n- Why learn Rust in 2025?\n- Features of Rust\n- Where Rust is used\n- How will this course be structured\n\n📚 This tutorial is completely in Hindi, so it's perfect for native speakers looking to start their Rust journey.\n\nPOPULAR UPLOADS\n===============================\n🎯 Placement Diaries: https://youtube.com/playlist?list=PL\n\nLet's Connect\n===============================\n📞Telegram Channel: https://t.me/act_tech_viral\n\nSOCIAL \n===============================\n📸 Instagram: https://www.instagram.com/kunal_g_29/\n🐦Twitter: https://twitter.com/kunal_g_29\n👥LinkedIn: https://www.linkedin.com/in/kunalgarg357\n\n\n⏲️ Timestamps ⏲️\n===============================\n0:00 - Welcome\n0:05 - Let's Go\n\n👍 Don’t forget to Like, Share, and Subscribe for the full series!\n\n🌟🌟🌟 Hashtags 🌟🌟🌟\n===============================\n#KunalGarg #RustInHindi #RustTutorial #LearnRust #RustProgramming #HindiCoding #ProgrammingInHindi #RustTutorial #LearnRust #RustProgramming #RustInHindi #ProgrammingTutorial #CodingInHindi #LearnFromScratch #RustLang #RustForBeginners #HindiProgramming #SoftwareDevelopment #TechEducation #RustLanguage #CodingTutorial #ProgrammingBasics"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT9M44S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": false,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "15",
        "likeCount": "2",
        "favoriteCount": "0",
        "commentCount": "0"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "xuAFG0qVHaFjyv9HJsuM2Rf0sTE",
      "id": "5RAFSK6y5AY",
      "snippet": {
        "publishedAt": "2025-06-29T20:12:47Z",
        "channelId": "UCbHZtOmVMZ3NDATwDvcvMvw",
        "title": "Rust programming course ( Hindi ) Class 02: Rust variable's scope and operators.",
        "description": "Rust programming course: Basics to Advanced\n== Pls SHARE & SUBSCRIBE ==\nAll videos of Wordpress -\nhttps://www.youtube.com/playlist?list=PLeQ-jUq_K75KjSy4jXiQbKaofG0ymeC7d\nAll videos of digital marketing (playlist) -\nhttps://www.youtube.com/playlist?list=PLeQ-jUq_K75IiBpg5ErHpBvYFqDTYtHW-\nCorel Draw Playlist:-\nhttps://www.youtube.com/playlist?list=PLeQ-jUq_K75LPSL-bI_ej9_sM-anOtRrK\nPlaylist of Adobe photoshop:- \nhttps://www.youtube.com/playlist?list=PLeQ-jUq_K75JC4X64QOEsGUCVMcHb_KaR\nPlaylist of Adobe premiere Pro: \nhttps://www.youtube.com/playlist?list=PLeQ-jUq_K75KHYTVCpLhjVTbMjNSYi1r2\nPlaylist of CapCut: \nhttps://www.youtube.com/playlist?list=PLeQ-jUq_K75I7Jc7QSwyhcPqy5KR6u6j8\nChat with me. Join telegram Zenovation group chat -\nhttps://t.me/+B6GLiCgc7XljZmM9\n\nRust programming\nRust programming in hindi\nRust programming course in hindi\nRust programming tutorial\nRust programming tutorial in hindi\nRust language\nRust language course\nRust language course in hindi\nRust programming basic to advanced\nRust programming course basic to advanced\n\n#rustprogramming \n#rustlang \n#learnprogramming \n#programmingtutorial \n#programmingtutorials \n#programmingcourse \n#programmingcourses \n#learnsoftwareskills",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/5RAFSK6y5AY/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/5RAFSK6y5AY/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/5RAFSK6y5AY/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/5RAFSK6y5AY/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/5RAFSK6y5AY/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Zenovation Hindi - Freelance tutorials",
        "categoryId": "22",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "Rust programming course ( Hindi ) Class 02: Rust variable's scope and operators.",
          "description": "Rust programming course: Basics to Advanced\n== Pls SHARE & SUBSCRIBE ==\nAll videos of Wordpress -\nhttps://www.youtube.com/playlist?list=PLeQ-jUq_K75KjSy4jXiQbKaofG0ymeC7d\nAll videos of digital marketing (playlist) -\nhttps://www.youtube.com/playlist?list=PLeQ-jUq_K75IiBpg5ErHpBvYFqDTYtHW-\nCorel Draw Playlist:-\nhttps://www.youtube.com/playlist?list=PLeQ-jUq_K75LPSL-bI_ej9_sM-anOtRrK\nPlaylist of Adobe photoshop:- \nhttps://www.youtube.com/playlist?list=PLeQ-jUq_K75JC4X64QOEsGUCVMcHb_KaR\nPlaylist of Adobe premiere Pro: \nhttps://www.youtube.com/playlist?list=PLeQ-jUq_K75KHYTVCpLhjVTbMjNSYi1r2\nPlaylist of CapCut: \nhttps://www.youtube.com/playlist?list=PLeQ-jUq_K75I7Jc7QSwyhcPqy5KR6u6j8\nChat with me. Join telegram Zenovation group chat -\nhttps://t.me/+B6GLiCgc7XljZmM9\n\nRust programming\nRust programming in hindi\nRust programming course in hindi\nRust programming tutorial\nRust programming tutorial in hindi\nRust language\nRust language course\nRust language course in hindi\nRust programming basic to advanced\nRust programming course basic to advanced\n\n#rustprogramming \n#rustlang \n#learnprogramming \n#programmingtutorial \n#programmingtutorials \n#programmingcourse \n#programmingcourses \n#learnsoftwareskills"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT19M41S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": false,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "40",
        "likeCount": "1",
        "favoriteCount": "0",
        "commentCount": "6"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "NTwHX8cAxdaCAirMbfxvSO_w7BM",
      "id": "GXPMQSgma54",
      "snippet": {
        "publishedAt": "2025-06-23T03:36:00Z",
        "channelId": "UCEnZkcgXkfTjNWF-tY1ldag",
        "title": "Rust Tutorial 3 | Functions & If/Else in Rust | Rust in Hindi | Tutorial | Learn from scratch",
        "description": "Rust Tutorial 3 | Functions & If/Else in Rust | Rust in Hindi | Tutorial | Learn from scratch\n\nWelcome to the first video of our Rust Programming Language Tutorial Series in Hindi!\nIn this video, we will give you a complete introduction to Rust, one of the most powerful and safe system programming languages. Whether you're a beginner or coming from C/C++ or Java, this series will help you learn Rust from scratch easily and understandably.\n\n🎯 What you’ll learn in this video:\n- What is Rust?\n- Why learn Rust in 2025?\n- Features of Rust\n- Where Rust is used\n- How will this course be structured\n\n📚 This tutorial is completely in Hindi, so it's perfect for native speakers looking to start their Rust journey.\n\nPOPULAR UPLOADS\n===============================\n🎯 Placement Diaries: https://youtube.com/playlist?list=PL\n\nLet's Connect\n===============================\n📞Telegram Channel: https://t.me/act_tech_viral\n\nSOCIAL \n===============================\n📸 Instagram: https://www.instagram.com/kunal_g_29/\n🐦Twitter: https://twitter.com/kunal_g_29\n👥LinkedIn: https://www.linkedin.com/in/kunalgarg357\n\n\n⏲️ Timestamps ⏲️\n===============================\n0:00 - Welcome\n0:05 - Let's Go\n\n👍 Don’t forget to Like, Share, and Subscribe for the full series!\n\n🌟🌟🌟 Hashtags 🌟🌟🌟\n===============================\n#KunalGarg #RustInHindi #RustTutorial #LearnRust #RustProgramming #HindiCoding #ProgrammingInHindi #RustTutorial #LearnRust #RustProgramming #RustInHindi #ProgrammingTutorial #CodingInHindi #LearnFromScratch #RustLang #RustForBeginners #HindiProgramming #SoftwareDevelopment #TechEducation #RustLanguage #CodingTutorial #ProgrammingBasics",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/GXPMQSgma54/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/GXPMQSgma54/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/GXPMQSgma54/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/GXPMQSgma54/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/GXPMQSgma54/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Kunal Garg",
        "tags": [
          "kunal garg",
          "rust tutorial",
          "rust programming in hindi",
          "learn rust from scratch",
          "rust introduction",
          "rust programming language",
          "rust basics",
          "rust coding tutorial hindi",
          "rust development",
          "rust setup guide",
          "rust for beginners",
          "rust installation",
          "rust tutorial for beginners",
          "rust syntax",
          "rust programming course",
          "rust projects",
          "rust compiler",
          "rust on windows",
          "rust on linux",
          "rust programming",
          "rust tutorial 2025",
          "rust language hindi",
          "rust language playlist"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "Rust Tutorial 3 | Functions & If/Else in Rust | Rust in Hindi | Tutorial | Learn from scratch",
          "description": "Rust Tutorial 3 | Functions & If/Else in Rust | Rust in Hindi | Tutorial | Learn from scratch\n\nWelcome to the first video of our Rust Programming Language Tutorial Series in Hindi!\nIn this video, we will give you a complete introduction to Rust, one of the most powerful and safe system programming languages. Whether you're a beginner or coming from C/C++ or Java, this series will help you learn Rust from scratch easily and understandably.\n\n🎯 What you’ll learn in this video:\n- What is Rust?\n- Why learn Rust in 2025?\n- Features of Rust\n- Where Rust is used\n- How will this course be structured\n\n📚 This tutorial is completely in Hindi, so it's perfect for native speakers looking to start their Rust journey.\n\nPOPULAR UPLOADS\n===============================\n🎯 Placement Diaries: https://youtube.com/playlist?list=PL\n\nLet's Connect\n===============================\n📞Telegram Channel: https://t.me/act_tech_viral\n\nSOCIAL \n===============================\n📸 Instagram: https://www.instagram.com/kunal_g_29/\n🐦Twitter: https://twitter.com/kunal_g_29\n👥LinkedIn: https://www.linkedin.com/in/kunalgarg357\n\n\n⏲️ Timestamps ⏲️\n===============================\n0:00 - Welcome\n0:05 - Let's Go\n\n👍 Don’t forget to Like, Share, and Subscribe for the full series!\n\n🌟🌟🌟 Hashtags 🌟🌟🌟\n===============================\n#KunalGarg #RustInHindi #RustTutorial #LearnRust #RustProgramming #HindiCoding #ProgrammingInHindi #RustTutorial #LearnRust #RustProgramming #RustInHindi #ProgrammingTutorial #CodingInHindi #LearnFromScratch #RustLang #RustForBeginners #HindiProgramming #SoftwareDevelopment #TechEducation #RustLanguage #CodingTutorial #ProgrammingBasics"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT7M10S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": false,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "24",
        "likeCount": "2",
        "favoriteCount": "0",
        "commentCount": "0"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "eY0w8CgdHFbYiNkgOzjKlZwoD70",
      "id": "0jGyWHbcdG0",
      "snippet": {
        "publishedAt": "2025-06-09T15:36:00Z",
        "channelId": "UCEnZkcgXkfTjNWF-tY1ldag",
        "title": "Rust Tutorial #2 | Vars in Rust | Rust in Hindi | Tutorial | Learn from scratch",
        "description": "Rust Tutorial #2 | Vars in Rust | Rust in Hindi | Tutorial | Learn from scratch\n\nWelcome to the first video of our Rust Programming Language Tutorial Series in Hindi! 🇮🇳\nIn this video, we will give you a complete introduction to Rust, one of the most powerful and safe system programming languages. Whether you're a beginner or coming from C/C++ or Java, this series will help you learn Rust from scratch in an easy and understandable way.\n\n🎯 What you’ll learn in this video:\n- What is Rust?\n-  Why learn Rust in 2025?\n- Features of Rust\n- Where Rust is used\n- How will this course be structured\n\n📚 This tutorial is completely in Hindi, so it's perfect for native speakers looking to start their Rust journey.\n\nPOPULAR UPLOADS\n===============================\n🎯 Placement Diaries: https://youtube.com/playlist?list=PL\n\nLet's Connect\n===============================\n📞Telegram Channel: https://t.me/act_tech_viral\n\nSOCIAL \n===============================\n📸 Instagram: https://www.instagram.com/kunal_g_29/\n🐦Twitter: https://twitter.com/kunal_g_29\n👥LinkedIn: https://www.linkedin.com/in/kunalgarg357\n\n\n⏲️ Timestamps ⏲️\n===============================\n0:00 - Welcome\n0:05 - Let's Go\n\n👍 Don’t forget to Like, Share, and Subscribe for the full series!\n\n🌟🌟🌟 Hashtags 🌟🌟🌟\n===============================\n#KunalGarg #RustInHindi #RustTutorial #LearnRust #RustProgramming #HindiCoding #ProgrammingInHindi #RustTutorial #LearnRust #RustProgramming #RustInHindi #ProgrammingTutorial #CodingInHindi #LearnFromScratch #RustLang #RustForBeginners #HindiProgramming #SoftwareDevelopment #TechEducation #RustLanguage #CodingTutorial #ProgrammingBasics",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/0jGyWHbcdG0/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/0jGyWHbcdG0/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/0jGyWHbcdG0/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/0jGyWHbcdG0/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/0jGyWHbcdG0/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Kunal Garg",
        "tags": [
          "kunal garg",
          "rust tutorial",
          "rust programming in hindi",
          "learn rust from scratch",
          "rust introduction",
          "rust programming language",
          "rust basics",
          "rust coding tutorial hindi",
          "rust development",
          "rust setup guide",
          "rust for beginners",
          "rust installation",
          "rust tutorial for beginners",
          "rust syntax",
          "rust programming course",
          "rust projects",
          "rust compiler",
          "rust on windows",
          "rust on linux",
          "rust programming",
          "rust tutorial 2025",
          "rust language hindi",
          "rust language playlist"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "Rust Tutorial #2 | Vars in Rust | Rust in Hindi | Tutorial | Learn from scratch",
          "description": "Rust Tutorial #2 | Vars in Rust | Rust in Hindi | Tutorial | Learn from scratch\n\nWelcome to the first video of our Rust Programming Language Tutorial Series in Hindi! 🇮🇳\nIn this video, we will give you a complete introduction to Rust, one of the most powerful and safe system programming languages. Whether you're a beginner or coming from C/C++ or Java, this series will help you learn Rust from scratch in an easy and understandable way.\n\n🎯 What you’ll learn in this video:\n- What is Rust?\n-  Why learn Rust in 2025?\n- Features of Rust\n- Where Rust is used\n- How will this course be structured\n\n📚 This tutorial is completely in Hindi, so it's perfect for native speakers looking to start their Rust journey.\n\nPOPULAR UPLOADS\n===============================\n🎯 Placement Diaries: https://youtube.com/playlist?list=PL\n\nLet's Connect\n===============================\n📞Telegram Channel: https://t.me/act_tech_viral\n\nSOCIAL \n===============================\n📸 Instagram: https://www.instagram.com/kunal_g_29/\n🐦Twitter: https://twitter.com/kunal_g_29\n👥LinkedIn: https://www.linkedin.com/in/kunalgarg357\n\n\n⏲️ Timestamps ⏲️\n===============================\n0:00 - Welcome\n0:05 - Let's Go\n\n👍 Don’t forget to Like, Share, and Subscribe for the full series!\n\n🌟🌟🌟 Hashtags 🌟🌟🌟\n===============================\n#KunalGarg #RustInHindi #RustTutorial #LearnRust #RustProgramming #HindiCoding #ProgrammingInHindi #RustTutorial #LearnRust #RustProgramming #RustInHindi #ProgrammingTutorial #CodingInHindi #LearnFromScratch #RustLang #RustForBeginners #HindiProgramming #SoftwareDevelopment #TechEducation #RustLanguage #CodingTutorial #ProgrammingBasics"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT7M23S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": false,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "20",
        "likeCount": "1",
        "favoriteCount": "0",
        "commentCount": "0"
      }
    }
  ],
  "pageInfo": {
    "totalResults": 10,
    "resultsPerPage": 10
  }
}
","status":200,"url":"https://www.googleapis.com/youtube/v3/videos?part=snippet%2CcontentDetails%2Cstatistics&id=ulhYScz65RI%2C51ktlXUj3gk%2C5oRrCY8rt3s%2CJeBJHqK8Ovc%2C_uwneq_cwvE%2CCF52N-w4anI%2CVTV0f1MEBro%2C5RAFSK6y5AY%2CGXPMQSgma54%2C0jGyWHbcdG0&key=AIzaSyAeZAsOW2kBeNqsdozdSNpajJeUOXsJ2fs"},"revalidate":3600,"tags":[]}