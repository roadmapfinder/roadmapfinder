{"kind":"FETCH","data":{"headers":{"content-encoding":"gzip","content-type":"application/json; charset=UTF-8","date":"Thu, 23 Oct 2025 11:10:51 GMT","server":"scaffolding on HTTPServer2","transfer-encoding":"chunked","vary":"Origin, X-Origin, Referer","x-content-type-options":"nosniff","x-frame-options":"SAMEORIGIN","x-xss-protection":"0"},"body":"{
  "kind": "youtube#videoListResponse",
  "etag": "A9jmW3-8IHd2NLECFZouQeT6kC0",
  "items": [
    {
      "kind": "youtube#video",
      "etag": "nS2Jyidj718xYy9JHd-gDL46eoA",
      "id": "8Xg7E9shq0U",
      "snippet": {
        "publishedAt": "2022-12-07T16:01:04Z",
        "channelId": "UC8butISFwT-Wl7EV0hUK0BQ",
        "title": "Swift Programming Tutorial – Full Course for Beginners",
        "description": "Learn the Swift programming language in this full tutorial for beginners. \n\nIn this video, we will go through every modern aspect of Swift as a programming language including, variables, constants, functions, structures, classes, protocols. extensions, asynchronous programming, generics and much more. This video will lay the foundation for learning Swift for those who are not familiar with Swift already.\n\nYou can follow along with this video on macOS, Linux and Windows. On Linux and Windows you will need to download the Swift toolchain from https://swift.org and run the examples manually by invoking Swift from Terminal using your favorite code editor such as Visual Studio Code.\n\n✏️ Vandad Nahavandipoor created this course. \nVandad on YouTube: https://youtube.com/c/vandadnp\nVandad on Twitter: https://twitter.com/vandadnp\nVandad on LinkedIn: https://linkedin.com/in/vandadnp\n\n⭐️ Contents ⭐️\n⌨️ (0:00:00) Introduction\n⌨️ (0:06:49) Variables\n⌨️ (0:29:46) Operators\n⌨️ (0:46:55) If and else\n⌨️ (1:05:08) Functions\n⌨️ (1:23:58) Closures\n⌨️ (1:52:08) Structures\n⌨️ (2:17:58) Enumerations\n⌨️ (2:59:21) Classes\n⌨️ (3:24:51) Protocols\n⌨️ (3:47:48) Extensions\n⌨️ (4:00:06) Generics\n⌨️ (4:32:44) Optionals\n⌨️ (4:53:39) Error Handling\n⌨️ (5:39:35) Collections\n⌨️ (6:17:17) Equality and Hashing\n⌨️ (6:38:46) Custom Operators\n⌨️ (6:50:53) Asynchronous Programming\n⌨️ (7:04:38) Outro\n\n🎉 Thanks to our Champion and Sponsor supporters:\n👾 Nattira Maneerat\n👾 Heather Wcislo\n👾 Serhiy Kalinets\n👾 Erdeniz Unvan\n👾 Justin Hual\n👾 Agustín Kussrow\n👾 Otis Morgan\n\n--\n\nLearn to code for free and get a developer job: https://www.freecodecamp.org\n\nRead hundreds of articles on programming: https://freecodecamp.org/news \n\n❤️ Support for this channel comes from our friends at Scrimba – the coding platform that's reinvented interactive learning: https://scrimba.com/freecodecamp",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/8Xg7E9shq0U/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/8Xg7E9shq0U/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/8Xg7E9shq0U/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/8Xg7E9shq0U/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/8Xg7E9shq0U/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "freeCodeCamp.org",
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "Swift Programming Tutorial – Full Course for Beginners",
          "description": "Learn the Swift programming language in this full tutorial for beginners. \n\nIn this video, we will go through every modern aspect of Swift as a programming language including, variables, constants, functions, structures, classes, protocols. extensions, asynchronous programming, generics and much more. This video will lay the foundation for learning Swift for those who are not familiar with Swift already.\n\nYou can follow along with this video on macOS, Linux and Windows. On Linux and Windows you will need to download the Swift toolchain from https://swift.org and run the examples manually by invoking Swift from Terminal using your favorite code editor such as Visual Studio Code.\n\n✏️ Vandad Nahavandipoor created this course. \nVandad on YouTube: https://youtube.com/c/vandadnp\nVandad on Twitter: https://twitter.com/vandadnp\nVandad on LinkedIn: https://linkedin.com/in/vandadnp\n\n⭐️ Contents ⭐️\n⌨️ (0:00:00) Introduction\n⌨️ (0:06:49) Variables\n⌨️ (0:29:46) Operators\n⌨️ (0:46:55) If and else\n⌨️ (1:05:08) Functions\n⌨️ (1:23:58) Closures\n⌨️ (1:52:08) Structures\n⌨️ (2:17:58) Enumerations\n⌨️ (2:59:21) Classes\n⌨️ (3:24:51) Protocols\n⌨️ (3:47:48) Extensions\n⌨️ (4:00:06) Generics\n⌨️ (4:32:44) Optionals\n⌨️ (4:53:39) Error Handling\n⌨️ (5:39:35) Collections\n⌨️ (6:17:17) Equality and Hashing\n⌨️ (6:38:46) Custom Operators\n⌨️ (6:50:53) Asynchronous Programming\n⌨️ (7:04:38) Outro\n\n🎉 Thanks to our Champion and Sponsor supporters:\n👾 Nattira Maneerat\n👾 Heather Wcislo\n👾 Serhiy Kalinets\n👾 Erdeniz Unvan\n👾 Justin Hual\n👾 Agustín Kussrow\n👾 Otis Morgan\n\n--\n\nLearn to code for free and get a developer job: https://www.freecodecamp.org\n\nRead hundreds of articles on programming: https://freecodecamp.org/news \n\n❤️ Support for this channel comes from our friends at Scrimba – the coding platform that's reinvented interactive learning: https://scrimba.com/freecodecamp"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT7H5M17S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "483630",
        "likeCount": "10348",
        "favoriteCount": "0",
        "commentCount": "227"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "yUa1WuD1BHzCDSG4JqY9adA2K9U",
      "id": "CwA1VWP0Ldw",
      "snippet": {
        "publishedAt": "2022-10-08T14:42:34Z",
        "channelId": "UCbTw29mcP12YlTt1EpUaVJw",
        "title": "Swift Programming Tutorial | FULL COURSE | Absolute Beginner",
        "description": "My Swift & SwiftUI Courses - https://seanallen.teachable.com/?video=CwA1VWP0Ldw\nSwift News Newsletter - https://swiftnews.kit.com/newsletter\n\nNeed help with something specific? Book a call with me:\nhttps://seanallen.teachable.com/p/call?video=CwA1VWP0Ldw\n\nWhen you've finished this course, try my SwiftUI Fundamentals course which is now free:\nhttps://www.youtube.com/watch?v=b1oC7sLIgpI\n\nMy Formula 1 App:\nhttps://apps.apple.com/app/formula-widgets-push-push/id6744127751\n \nMy other iOS Developer Courses\nhttps://seanallen.teachable.com/\n\nCard Deck Assets:\nhttps://www.dropbox.com/sh/ygwlohcppk0c8dv/AACDU3NSO8oK8i74SNXDY68Ta?dl=0\n\nSwiftUI Video Thumbnail Assets:\nhttps://www.dropbox.com/sh/cpp1ibizedt6f9t/AABJHoTqiQf_-A1n1aMUpKpla?dl=0\n\nhttps://seanallen.co\n\nTwitter:\nhttps://twitter.com/seanallen_dev\n\nHired.com:\nhttps://hired.com/x/1n01g\n\nBook and learning recommendations that help out the channel if you decide to purchase (Affiliate Links):\n\nPaul Hudson's Hacking With Swift:\nhttps://gumroad.com/a/762098803\n\nDonny Wals - Combine:\nhttps://gumroad.com/a/909014131\n\nMark Moeyken’s SwiftUI Books:\nwww.bigmountainstudio.com/swiftui-views-book/fzc51\n\nObjc.io Books (Thinking in SwiftUI & Advanced Swift):\nhttps://gumroad.com/a/656585843\n\nRay Wenderlich Books:\nhttps://store.raywenderlich.com/a/20866/link/1\n\nCurriculum Timestamps:\n00:00:00 - Course overview\n00:05:36 - I was just like you\n00:13:48 - What is Xcode?\n00:19:47 - SwiftUI or UIKit (2020)\n00:22:27 - SwiftUI or UIKit (2021)\n00:26:00 - Intro to Swift Language\n00:33:30 - Swift Types\n00:37:15 - Variables\n00:42:10 - Array\n00:49:37 - Set\n00:57:59 - Dictionary\n01:02:25 - Functions\n01:14:50 - if / else\n01:21:15 - For Loops\n01:30:29 - Enum\n01:40:27 - Switch Statement\n01:48:49 - Operators\n02:01:45 - Optionals\n02:12:46 - Self\n02:15:27 - Class\n02:23:36 - Inheritance\n02:31:31 - Struct\n02:36:45 - Extension\n02:40:30 - Apple Developer Program\n02:43:54 - Tour of Xcode\n02:58:56 - What’s New in Xcode 12\n03:08:07 - What’s New in Xcode 13\n03:24:59 - What’s New in Xcode 14\n03:34:54 - What is Auto Layout?\n03:38:38 - What is UIKit?\n03:55:05 - Storyboard vs. Programmatic UI\n04:01:16 - FizzBuzz Challenge\n04:09:27 - Colors App Intro\n04:10:39 - Colors App - Navigation\n04:25:02 - Colors App - UITableView\n04:36:37 - Colors App - Code\n05:05:56 - Card Workout App - Intro\n05:08:53 - Card Workout App - Storyboard UI\n05:21:20 - Card Workout App - IBOutlets\n05:41:49 - Card Workout App - Storyboard Logic\n05:59:27 - iOS 15 Storyboard Buttons\n06:08:05 - Programmatic UI - Setup\n06:17:37 - Programmatic UIButtons\n06:25:55 - Card Workout App - Card Selection\n06:44:29 - Card Workout App - Rules Screen\n07:04:07 - Card Workout App - Logic\n07:13:52 - iOS 15 Update - UIButtons\n07:24:24 - SwiftUI Overview\n07:34:06 - SwiftUI Example\n08:00:29 - General Knowledge Section Intro\n08:01:57 - How Apps Work\n08:05:34 - What is an API?\n08:10:00 - What is Version Control?\n08:19:34 - 3rd Party Libraries\n08:25:56 - What are Edge Cases?\n08:30:55 - iOS Dev Career Paths\n08:36:48 - World of iOS Dev\n08:38:31 - Why WWDC is the best\n08:45:02 - Twitter will change your career\n08:55:30 - Swift blogs & websites\n09:03:47 - Book Recommendations\n09:10:40 - Podcast Recommendations\n09:20:23 - Next Steps\n09:26:18 - Thank You!\n09:29:04 - Bonus: Homeless to $130k iOS Dev\n09:46:21 - Bonus: 37 Tips for Jr. Developers\n10:01:04 - Bonus: I’m an Average Developer\n10:06:34 - Bonus: 9 Things I Wish I Knew When I Started\n10:16:46 - Bonus: How to Gain Confidence as a Dev\n10:25:56 - Bonus: The 90/90 Rule\n\n#swift #softwaredeveloper #iosdeveloper",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/CwA1VWP0Ldw/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/CwA1VWP0Ldw/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/CwA1VWP0Ldw/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/CwA1VWP0Ldw/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/CwA1VWP0Ldw/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Sean Allen",
        "tags": [
          "Swift",
          "Swift Tutorial",
          "iOS Developer",
          "iOS Development",
          "Swift app tutorial",
          "swift beginner",
          "beginner swift",
          "swift beginner tutorial",
          "swift beginner app",
          "swift beginner course",
          "beginner swift programming",
          "beginner swift tutorial",
          "beginner swift projects",
          "iOS swift beginner",
          "iOS development course",
          "iOS development for beginners",
          "swift first app",
          "Swift programming language",
          "What is swift",
          "Xcode for beginners",
          "Swift programming course",
          "Swift for beginners",
          "iOS dev for beginners"
        ],
        "categoryId": "28",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "Swift Programming Tutorial | FULL COURSE | Absolute Beginner",
          "description": "My Swift & SwiftUI Courses - https://seanallen.teachable.com/?video=CwA1VWP0Ldw\nSwift News Newsletter - https://swiftnews.kit.com/newsletter\n\nNeed help with something specific? Book a call with me:\nhttps://seanallen.teachable.com/p/call?video=CwA1VWP0Ldw\n\nWhen you've finished this course, try my SwiftUI Fundamentals course which is now free:\nhttps://www.youtube.com/watch?v=b1oC7sLIgpI\n\nMy Formula 1 App:\nhttps://apps.apple.com/app/formula-widgets-push-push/id6744127751\n \nMy other iOS Developer Courses\nhttps://seanallen.teachable.com/\n\nCard Deck Assets:\nhttps://www.dropbox.com/sh/ygwlohcppk0c8dv/AACDU3NSO8oK8i74SNXDY68Ta?dl=0\n\nSwiftUI Video Thumbnail Assets:\nhttps://www.dropbox.com/sh/cpp1ibizedt6f9t/AABJHoTqiQf_-A1n1aMUpKpla?dl=0\n\nhttps://seanallen.co\n\nTwitter:\nhttps://twitter.com/seanallen_dev\n\nHired.com:\nhttps://hired.com/x/1n01g\n\nBook and learning recommendations that help out the channel if you decide to purchase (Affiliate Links):\n\nPaul Hudson's Hacking With Swift:\nhttps://gumroad.com/a/762098803\n\nDonny Wals - Combine:\nhttps://gumroad.com/a/909014131\n\nMark Moeyken’s SwiftUI Books:\nwww.bigmountainstudio.com/swiftui-views-book/fzc51\n\nObjc.io Books (Thinking in SwiftUI & Advanced Swift):\nhttps://gumroad.com/a/656585843\n\nRay Wenderlich Books:\nhttps://store.raywenderlich.com/a/20866/link/1\n\nCurriculum Timestamps:\n00:00:00 - Course overview\n00:05:36 - I was just like you\n00:13:48 - What is Xcode?\n00:19:47 - SwiftUI or UIKit (2020)\n00:22:27 - SwiftUI or UIKit (2021)\n00:26:00 - Intro to Swift Language\n00:33:30 - Swift Types\n00:37:15 - Variables\n00:42:10 - Array\n00:49:37 - Set\n00:57:59 - Dictionary\n01:02:25 - Functions\n01:14:50 - if / else\n01:21:15 - For Loops\n01:30:29 - Enum\n01:40:27 - Switch Statement\n01:48:49 - Operators\n02:01:45 - Optionals\n02:12:46 - Self\n02:15:27 - Class\n02:23:36 - Inheritance\n02:31:31 - Struct\n02:36:45 - Extension\n02:40:30 - Apple Developer Program\n02:43:54 - Tour of Xcode\n02:58:56 - What’s New in Xcode 12\n03:08:07 - What’s New in Xcode 13\n03:24:59 - What’s New in Xcode 14\n03:34:54 - What is Auto Layout?\n03:38:38 - What is UIKit?\n03:55:05 - Storyboard vs. Programmatic UI\n04:01:16 - FizzBuzz Challenge\n04:09:27 - Colors App Intro\n04:10:39 - Colors App - Navigation\n04:25:02 - Colors App - UITableView\n04:36:37 - Colors App - Code\n05:05:56 - Card Workout App - Intro\n05:08:53 - Card Workout App - Storyboard UI\n05:21:20 - Card Workout App - IBOutlets\n05:41:49 - Card Workout App - Storyboard Logic\n05:59:27 - iOS 15 Storyboard Buttons\n06:08:05 - Programmatic UI - Setup\n06:17:37 - Programmatic UIButtons\n06:25:55 - Card Workout App - Card Selection\n06:44:29 - Card Workout App - Rules Screen\n07:04:07 - Card Workout App - Logic\n07:13:52 - iOS 15 Update - UIButtons\n07:24:24 - SwiftUI Overview\n07:34:06 - SwiftUI Example\n08:00:29 - General Knowledge Section Intro\n08:01:57 - How Apps Work\n08:05:34 - What is an API?\n08:10:00 - What is Version Control?\n08:19:34 - 3rd Party Libraries\n08:25:56 - What are Edge Cases?\n08:30:55 - iOS Dev Career Paths\n08:36:48 - World of iOS Dev\n08:38:31 - Why WWDC is the best\n08:45:02 - Twitter will change your career\n08:55:30 - Swift blogs & websites\n09:03:47 - Book Recommendations\n09:10:40 - Podcast Recommendations\n09:20:23 - Next Steps\n09:26:18 - Thank You!\n09:29:04 - Bonus: Homeless to $130k iOS Dev\n09:46:21 - Bonus: 37 Tips for Jr. Developers\n10:01:04 - Bonus: I’m an Average Developer\n10:06:34 - Bonus: 9 Things I Wish I Knew When I Started\n10:16:46 - Bonus: How to Gain Confidence as a Dev\n10:25:56 - Bonus: The 90/90 Rule\n\n#swift #softwaredeveloper #iosdeveloper"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT10H32M30S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "656564",
        "likeCount": "15754",
        "favoriteCount": "0",
        "commentCount": "871"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "byUtJdBeJm_X4LRG6Deh36Jd_6c",
      "id": "7fjOw8ApZ1I",
      "snippet": {
        "publishedAt": "2023-11-25T12:48:04Z",
        "channelId": "UCNQ6FEtztATuaVhZKCY28Yw",
        "title": "Complete Backend Developer course | Part 1",
        "description": "Visit https://chaicode.com for all related materials, community help, source code etc.\njavascript Backend Roadmap | chai aur backend  00:00:00\nHow to deploy backend code in production   00:29:19\nConnect Backend with frontend   01:19:32\nData Modelling for backend with mongoose  02:10:17\nE-commerce and Hospital management data modelling  03:06:27\nTaking backend to next level  03:56:16\nHow to setup a professional backend project  04:06:17\nHow to connect database in MERN with debugging  04:47:51\nCustom API response and error handling 05:28:43\nUser and video model with hooks and JWT 06:15:38\nHow to upload file in backend | Multer 07:05:38\nHTTP crash course 07:43:59\nComplete guide for router and controller 08:08:17\nLogic building - Register controller 08:37:51\nHow to use postman for backend 09:30:39\n\nWelcome to chai aur code, a coding/programming dedicated channel in Hindi language. Now you can learn best of programming concepts with industry standard practical guide in Hindi language.\n\nAll source code is available at my Github account:\nhttps://github.com/hiteshchoudhary\n\nOur Open-Source Project is here: https://freeapi.app\n\nJoin me at whatsapp: https://hitesh.ai/whatsapp\n\nfor community discord: https://hitesh/ai/discord\n\nInstagram pe yaha paaye jaate h:\nhttps://www.instagram.com/hiteshchoudharyofficial/\n\nHTML video series:  https://www.youtube.com/watch?v=XmLOwJHFHf0&list=PLu71SKxNbfoDBNF5s-WH6aLbthSEIMhMI\n\nComplete javascript series: https://www.youtube.com/watch?v=Hr5iLG7sUa0&list=PLu71SKxNbfoBuX3f4EOACle2y-tRC5Q37\n\nComplete Reactjs series: https://www.youtube.com/watch?v=vz1RlUyrc3w&list=PLu71SKxNbfoDqgPchmvIsL4hTnJIrtige\n\nJavascript and react interview series: https://www.youtube.com/watch?v=1wqCyz7XrV4&list=PLu71SKxNbfoCy_MsA98SBfvUKF5eQit6L\n\nBackend development with Javascript: https://www.youtube.com/watch?v=EH3vGeqeIAo&list=PLu71SKxNbfoBGh_8p_NS-ZAh6v7HhYqHW",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/7fjOw8ApZ1I/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/7fjOw8ApZ1I/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/7fjOw8ApZ1I/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/7fjOw8ApZ1I/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/7fjOw8ApZ1I/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chai aur Code",
        "tags": [
          "API Response",
          "Authentication",
          "Backend API",
          "Backend Debugging",
          "Backend Development",
          "Backend File Handling",
          "Backend Hooks File Upload",
          "Backend Networking",
          "Database Connection",
          "Debugging",
          "Error Handling",
          "HTTP Protocols",
          "JWT",
          "JavaScript Backend",
          "MERN Database Custom API",
          "MERN Stack",
          "Multer",
          "Networking",
          "Programming Roadmap",
          "Server File Management HTTP",
          "Server-side Development User Model",
          "Video Model",
          "chai aur backend"
        ],
        "categoryId": "24",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "Complete Backend Developer course | Part 1",
          "description": "Visit https://chaicode.com for all related materials, community help, source code etc.\njavascript Backend Roadmap | chai aur backend  00:00:00\nHow to deploy backend code in production   00:29:19\nConnect Backend with frontend   01:19:32\nData Modelling for backend with mongoose  02:10:17\nE-commerce and Hospital management data modelling  03:06:27\nTaking backend to next level  03:56:16\nHow to setup a professional backend project  04:06:17\nHow to connect database in MERN with debugging  04:47:51\nCustom API response and error handling 05:28:43\nUser and video model with hooks and JWT 06:15:38\nHow to upload file in backend | Multer 07:05:38\nHTTP crash course 07:43:59\nComplete guide for router and controller 08:08:17\nLogic building - Register controller 08:37:51\nHow to use postman for backend 09:30:39\n\nWelcome to chai aur code, a coding/programming dedicated channel in Hindi language. Now you can learn best of programming concepts with industry standard practical guide in Hindi language.\n\nAll source code is available at my Github account:\nhttps://github.com/hiteshchoudhary\n\nOur Open-Source Project is here: https://freeapi.app\n\nJoin me at whatsapp: https://hitesh.ai/whatsapp\n\nfor community discord: https://hitesh/ai/discord\n\nInstagram pe yaha paaye jaate h:\nhttps://www.instagram.com/hiteshchoudharyofficial/\n\nHTML video series:  https://www.youtube.com/watch?v=XmLOwJHFHf0&list=PLu71SKxNbfoDBNF5s-WH6aLbthSEIMhMI\n\nComplete javascript series: https://www.youtube.com/watch?v=Hr5iLG7sUa0&list=PLu71SKxNbfoBuX3f4EOACle2y-tRC5Q37\n\nComplete Reactjs series: https://www.youtube.com/watch?v=vz1RlUyrc3w&list=PLu71SKxNbfoDqgPchmvIsL4hTnJIrtige\n\nJavascript and react interview series: https://www.youtube.com/watch?v=1wqCyz7XrV4&list=PLu71SKxNbfoCy_MsA98SBfvUKF5eQit6L\n\nBackend development with Javascript: https://www.youtube.com/watch?v=EH3vGeqeIAo&list=PLu71SKxNbfoBGh_8p_NS-ZAh6v7HhYqHW"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT10H6M53S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "1290513",
        "likeCount": "30303",
        "favoriteCount": "0",
        "commentCount": "3635"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "sWigpYgDJkbV1TefGce0TA0ODHg",
      "id": "comQ1-x2a1Q",
      "snippet": {
        "publishedAt": "2019-01-09T15:28:29Z",
        "channelId": "UC8butISFwT-Wl7EV0hUK0BQ",
        "title": "Swift Tutorial - Full Course for Beginners",
        "description": "Learn how to code with Swift in this full tutorial course for beginners. Swift is a powerful and intuitive programming language for macOS, iOS, watchOS and tvOS.\n\nThis course covers all the core concepts of Swift including:\nVariables and Constants, Data Types, Properties, Functions and Parameters, Classes, IF Statements, and more.\n\nCourse from Code With Chris. Check out their YouTube channel: https://www.youtube.com/user/codewithchris\n\nThe Code With Chris Facebook community: https://www.facebook.com/groups/codewithchriscommunity/\n\n--\n\nLearn to code for free and get a developer job: https://www.freecodecamp.org\n\nRead hundreds of articles on programming: https://medium.freecodecamp.org \n\n❤️ Support for this channel comes from our friends at Scrimba – the coding platform that's reinvented interactive learning: https://scrimba.com/freecodecamp",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/comQ1-x2a1Q/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/comQ1-x2a1Q/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/comQ1-x2a1Q/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/comQ1-x2a1Q/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/comQ1-x2a1Q/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "freeCodeCamp.org",
        "tags": [
          "swift course",
          "swift programming",
          "swift tutorial",
          "learn swift",
          "swift programming language",
          "ios",
          "ios development",
          "swift tutorial for beginners",
          "swift course for beginners",
          "ios programming"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "Swift Tutorial - Full Course for Beginners",
          "description": "Learn how to code with Swift in this full tutorial course for beginners. Swift is a powerful and intuitive programming language for macOS, iOS, watchOS and tvOS.\n\nThis course covers all the core concepts of Swift including:\nVariables and Constants, Data Types, Properties, Functions and Parameters, Classes, IF Statements, and more.\n\nCourse from Code With Chris. Check out their YouTube channel: https://www.youtube.com/user/codewithchris\n\nThe Code With Chris Facebook community: https://www.facebook.com/groups/codewithchriscommunity/\n\n--\n\nLearn to code for free and get a developer job: https://www.freecodecamp.org\n\nRead hundreds of articles on programming: https://medium.freecodecamp.org \n\n❤️ Support for this channel comes from our friends at Scrimba – the coding platform that's reinvented interactive learning: https://scrimba.com/freecodecamp"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT3H9M58S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "565487",
        "likeCount": "8360",
        "favoriteCount": "0",
        "commentCount": "257"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "6mn2BUiRdVw3AltJLnfObsi3f4c",
      "id": "n5X_V81OYnQ",
      "snippet": {
        "publishedAt": "2021-10-15T21:23:32Z",
        "channelId": "UCmJi5RdDLgzvkl3Ly0DRMlQ",
        "title": "Learn the Essentials of Swift in one hour",
        "description": "This video walks through all the essential language features of Swift in just under one hour, and is aimed at two groups of people: folks who have completed up to day 14 of the 100 Days of SwiftUI and want to review what they've learned, and developers with extensive experience of other languages who want to transfer their knowledge to Swift quickly.\n\nThis video is very fast! If you're struggling to understand concepts such as arrays, functions, closures, and similar, you should consider following the videos in my 100 Days of SwiftUI course at https://www.hackingwithswift.com/100/swiftui – they are much slower, providing much more explanation and example code along the way.\n\n00:00 Introduction\n01:21 Creating constants and variables, \n01:59 Strings\n03:38 Integers\n04:38 Decimals\n05:01 Booleans\n05:23 Joining strings \n05:59 Arrays\n07:39 Dictionaries\n08:16 Sets\n09:10 Enums\n09:40 Type annotations\n11:50 Conditions\n12:46 Switch statements\n13:25 The ternary conditional operator\n13:55 Loops\n16:24 Functions\n17:39 Returning multiple values from functions\n18:45 Customizing parameter labels\n19:52 Providing default values for parameters\n20:38 Handling errors in functions\n22:46 Closures\n25:02 Trailing closures and shorthand syntax\n26:22 Structs\n27:43 Computed properties\n28:37 Property observers\n29:16 Custom initializers\n30:10 Access control\n31:56 Static properties and methods\n32:42 Classes\n39:49 Protocols\n43:49 Extensions\n46:00 Protocol extensions\n49:31 Optionals\n49:31 Unwrapping optionals with guard\n51:34 Nil coalescing\n53:06 Optional chaining\n54:09 Optional try?\n55:37 Wrap up\n56:52 Dog reward",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/n5X_V81OYnQ/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/n5X_V81OYnQ/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/n5X_V81OYnQ/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/n5X_V81OYnQ/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/n5X_V81OYnQ/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Paul Hudson",
        "categoryId": "28",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "Learn the Essentials of Swift in one hour",
          "description": "This video walks through all the essential language features of Swift in just under one hour, and is aimed at two groups of people: folks who have completed up to day 14 of the 100 Days of SwiftUI and want to review what they've learned, and developers with extensive experience of other languages who want to transfer their knowledge to Swift quickly.\n\nThis video is very fast! If you're struggling to understand concepts such as arrays, functions, closures, and similar, you should consider following the videos in my 100 Days of SwiftUI course at https://www.hackingwithswift.com/100/swiftui – they are much slower, providing much more explanation and example code along the way.\n\n00:00 Introduction\n01:21 Creating constants and variables, \n01:59 Strings\n03:38 Integers\n04:38 Decimals\n05:01 Booleans\n05:23 Joining strings \n05:59 Arrays\n07:39 Dictionaries\n08:16 Sets\n09:10 Enums\n09:40 Type annotations\n11:50 Conditions\n12:46 Switch statements\n13:25 The ternary conditional operator\n13:55 Loops\n16:24 Functions\n17:39 Returning multiple values from functions\n18:45 Customizing parameter labels\n19:52 Providing default values for parameters\n20:38 Handling errors in functions\n22:46 Closures\n25:02 Trailing closures and shorthand syntax\n26:22 Structs\n27:43 Computed properties\n28:37 Property observers\n29:16 Custom initializers\n30:10 Access control\n31:56 Static properties and methods\n32:42 Classes\n39:49 Protocols\n43:49 Extensions\n46:00 Protocol extensions\n49:31 Optionals\n49:31 Unwrapping optionals with guard\n51:34 Nil coalescing\n53:06 Optional chaining\n54:09 Optional try?\n55:37 Wrap up\n56:52 Dog reward"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT58M14S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": false,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "264467",
        "likeCount": "7969",
        "favoriteCount": "0",
        "commentCount": "238"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "nS2Jyidj718xYy9JHd-gDL46eoA",
      "id": "8Xg7E9shq0U",
      "snippet": {
        "publishedAt": "2022-12-07T16:01:04Z",
        "channelId": "UC8butISFwT-Wl7EV0hUK0BQ",
        "title": "Swift Programming Tutorial – Full Course for Beginners",
        "description": "Learn the Swift programming language in this full tutorial for beginners. \n\nIn this video, we will go through every modern aspect of Swift as a programming language including, variables, constants, functions, structures, classes, protocols. extensions, asynchronous programming, generics and much more. This video will lay the foundation for learning Swift for those who are not familiar with Swift already.\n\nYou can follow along with this video on macOS, Linux and Windows. On Linux and Windows you will need to download the Swift toolchain from https://swift.org and run the examples manually by invoking Swift from Terminal using your favorite code editor such as Visual Studio Code.\n\n✏️ Vandad Nahavandipoor created this course. \nVandad on YouTube: https://youtube.com/c/vandadnp\nVandad on Twitter: https://twitter.com/vandadnp\nVandad on LinkedIn: https://linkedin.com/in/vandadnp\n\n⭐️ Contents ⭐️\n⌨️ (0:00:00) Introduction\n⌨️ (0:06:49) Variables\n⌨️ (0:29:46) Operators\n⌨️ (0:46:55) If and else\n⌨️ (1:05:08) Functions\n⌨️ (1:23:58) Closures\n⌨️ (1:52:08) Structures\n⌨️ (2:17:58) Enumerations\n⌨️ (2:59:21) Classes\n⌨️ (3:24:51) Protocols\n⌨️ (3:47:48) Extensions\n⌨️ (4:00:06) Generics\n⌨️ (4:32:44) Optionals\n⌨️ (4:53:39) Error Handling\n⌨️ (5:39:35) Collections\n⌨️ (6:17:17) Equality and Hashing\n⌨️ (6:38:46) Custom Operators\n⌨️ (6:50:53) Asynchronous Programming\n⌨️ (7:04:38) Outro\n\n🎉 Thanks to our Champion and Sponsor supporters:\n👾 Nattira Maneerat\n👾 Heather Wcislo\n👾 Serhiy Kalinets\n👾 Erdeniz Unvan\n👾 Justin Hual\n👾 Agustín Kussrow\n👾 Otis Morgan\n\n--\n\nLearn to code for free and get a developer job: https://www.freecodecamp.org\n\nRead hundreds of articles on programming: https://freecodecamp.org/news \n\n❤️ Support for this channel comes from our friends at Scrimba – the coding platform that's reinvented interactive learning: https://scrimba.com/freecodecamp",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/8Xg7E9shq0U/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/8Xg7E9shq0U/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/8Xg7E9shq0U/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/8Xg7E9shq0U/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/8Xg7E9shq0U/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "freeCodeCamp.org",
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "Swift Programming Tutorial – Full Course for Beginners",
          "description": "Learn the Swift programming language in this full tutorial for beginners. \n\nIn this video, we will go through every modern aspect of Swift as a programming language including, variables, constants, functions, structures, classes, protocols. extensions, asynchronous programming, generics and much more. This video will lay the foundation for learning Swift for those who are not familiar with Swift already.\n\nYou can follow along with this video on macOS, Linux and Windows. On Linux and Windows you will need to download the Swift toolchain from https://swift.org and run the examples manually by invoking Swift from Terminal using your favorite code editor such as Visual Studio Code.\n\n✏️ Vandad Nahavandipoor created this course. \nVandad on YouTube: https://youtube.com/c/vandadnp\nVandad on Twitter: https://twitter.com/vandadnp\nVandad on LinkedIn: https://linkedin.com/in/vandadnp\n\n⭐️ Contents ⭐️\n⌨️ (0:00:00) Introduction\n⌨️ (0:06:49) Variables\n⌨️ (0:29:46) Operators\n⌨️ (0:46:55) If and else\n⌨️ (1:05:08) Functions\n⌨️ (1:23:58) Closures\n⌨️ (1:52:08) Structures\n⌨️ (2:17:58) Enumerations\n⌨️ (2:59:21) Classes\n⌨️ (3:24:51) Protocols\n⌨️ (3:47:48) Extensions\n⌨️ (4:00:06) Generics\n⌨️ (4:32:44) Optionals\n⌨️ (4:53:39) Error Handling\n⌨️ (5:39:35) Collections\n⌨️ (6:17:17) Equality and Hashing\n⌨️ (6:38:46) Custom Operators\n⌨️ (6:50:53) Asynchronous Programming\n⌨️ (7:04:38) Outro\n\n🎉 Thanks to our Champion and Sponsor supporters:\n👾 Nattira Maneerat\n👾 Heather Wcislo\n👾 Serhiy Kalinets\n👾 Erdeniz Unvan\n👾 Justin Hual\n👾 Agustín Kussrow\n👾 Otis Morgan\n\n--\n\nLearn to code for free and get a developer job: https://www.freecodecamp.org\n\nRead hundreds of articles on programming: https://freecodecamp.org/news \n\n❤️ Support for this channel comes from our friends at Scrimba – the coding platform that's reinvented interactive learning: https://scrimba.com/freecodecamp"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT7H5M17S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "483630",
        "likeCount": "10348",
        "favoriteCount": "0",
        "commentCount": "227"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "yUa1WuD1BHzCDSG4JqY9adA2K9U",
      "id": "CwA1VWP0Ldw",
      "snippet": {
        "publishedAt": "2022-10-08T14:42:34Z",
        "channelId": "UCbTw29mcP12YlTt1EpUaVJw",
        "title": "Swift Programming Tutorial | FULL COURSE | Absolute Beginner",
        "description": "My Swift & SwiftUI Courses - https://seanallen.teachable.com/?video=CwA1VWP0Ldw\nSwift News Newsletter - https://swiftnews.kit.com/newsletter\n\nNeed help with something specific? Book a call with me:\nhttps://seanallen.teachable.com/p/call?video=CwA1VWP0Ldw\n\nWhen you've finished this course, try my SwiftUI Fundamentals course which is now free:\nhttps://www.youtube.com/watch?v=b1oC7sLIgpI\n\nMy Formula 1 App:\nhttps://apps.apple.com/app/formula-widgets-push-push/id6744127751\n \nMy other iOS Developer Courses\nhttps://seanallen.teachable.com/\n\nCard Deck Assets:\nhttps://www.dropbox.com/sh/ygwlohcppk0c8dv/AACDU3NSO8oK8i74SNXDY68Ta?dl=0\n\nSwiftUI Video Thumbnail Assets:\nhttps://www.dropbox.com/sh/cpp1ibizedt6f9t/AABJHoTqiQf_-A1n1aMUpKpla?dl=0\n\nhttps://seanallen.co\n\nTwitter:\nhttps://twitter.com/seanallen_dev\n\nHired.com:\nhttps://hired.com/x/1n01g\n\nBook and learning recommendations that help out the channel if you decide to purchase (Affiliate Links):\n\nPaul Hudson's Hacking With Swift:\nhttps://gumroad.com/a/762098803\n\nDonny Wals - Combine:\nhttps://gumroad.com/a/909014131\n\nMark Moeyken’s SwiftUI Books:\nwww.bigmountainstudio.com/swiftui-views-book/fzc51\n\nObjc.io Books (Thinking in SwiftUI & Advanced Swift):\nhttps://gumroad.com/a/656585843\n\nRay Wenderlich Books:\nhttps://store.raywenderlich.com/a/20866/link/1\n\nCurriculum Timestamps:\n00:00:00 - Course overview\n00:05:36 - I was just like you\n00:13:48 - What is Xcode?\n00:19:47 - SwiftUI or UIKit (2020)\n00:22:27 - SwiftUI or UIKit (2021)\n00:26:00 - Intro to Swift Language\n00:33:30 - Swift Types\n00:37:15 - Variables\n00:42:10 - Array\n00:49:37 - Set\n00:57:59 - Dictionary\n01:02:25 - Functions\n01:14:50 - if / else\n01:21:15 - For Loops\n01:30:29 - Enum\n01:40:27 - Switch Statement\n01:48:49 - Operators\n02:01:45 - Optionals\n02:12:46 - Self\n02:15:27 - Class\n02:23:36 - Inheritance\n02:31:31 - Struct\n02:36:45 - Extension\n02:40:30 - Apple Developer Program\n02:43:54 - Tour of Xcode\n02:58:56 - What’s New in Xcode 12\n03:08:07 - What’s New in Xcode 13\n03:24:59 - What’s New in Xcode 14\n03:34:54 - What is Auto Layout?\n03:38:38 - What is UIKit?\n03:55:05 - Storyboard vs. Programmatic UI\n04:01:16 - FizzBuzz Challenge\n04:09:27 - Colors App Intro\n04:10:39 - Colors App - Navigation\n04:25:02 - Colors App - UITableView\n04:36:37 - Colors App - Code\n05:05:56 - Card Workout App - Intro\n05:08:53 - Card Workout App - Storyboard UI\n05:21:20 - Card Workout App - IBOutlets\n05:41:49 - Card Workout App - Storyboard Logic\n05:59:27 - iOS 15 Storyboard Buttons\n06:08:05 - Programmatic UI - Setup\n06:17:37 - Programmatic UIButtons\n06:25:55 - Card Workout App - Card Selection\n06:44:29 - Card Workout App - Rules Screen\n07:04:07 - Card Workout App - Logic\n07:13:52 - iOS 15 Update - UIButtons\n07:24:24 - SwiftUI Overview\n07:34:06 - SwiftUI Example\n08:00:29 - General Knowledge Section Intro\n08:01:57 - How Apps Work\n08:05:34 - What is an API?\n08:10:00 - What is Version Control?\n08:19:34 - 3rd Party Libraries\n08:25:56 - What are Edge Cases?\n08:30:55 - iOS Dev Career Paths\n08:36:48 - World of iOS Dev\n08:38:31 - Why WWDC is the best\n08:45:02 - Twitter will change your career\n08:55:30 - Swift blogs & websites\n09:03:47 - Book Recommendations\n09:10:40 - Podcast Recommendations\n09:20:23 - Next Steps\n09:26:18 - Thank You!\n09:29:04 - Bonus: Homeless to $130k iOS Dev\n09:46:21 - Bonus: 37 Tips for Jr. Developers\n10:01:04 - Bonus: I’m an Average Developer\n10:06:34 - Bonus: 9 Things I Wish I Knew When I Started\n10:16:46 - Bonus: How to Gain Confidence as a Dev\n10:25:56 - Bonus: The 90/90 Rule\n\n#swift #softwaredeveloper #iosdeveloper",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/CwA1VWP0Ldw/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/CwA1VWP0Ldw/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/CwA1VWP0Ldw/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/CwA1VWP0Ldw/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/CwA1VWP0Ldw/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Sean Allen",
        "tags": [
          "Swift",
          "Swift Tutorial",
          "iOS Developer",
          "iOS Development",
          "Swift app tutorial",
          "swift beginner",
          "beginner swift",
          "swift beginner tutorial",
          "swift beginner app",
          "swift beginner course",
          "beginner swift programming",
          "beginner swift tutorial",
          "beginner swift projects",
          "iOS swift beginner",
          "iOS development course",
          "iOS development for beginners",
          "swift first app",
          "Swift programming language",
          "What is swift",
          "Xcode for beginners",
          "Swift programming course",
          "Swift for beginners",
          "iOS dev for beginners"
        ],
        "categoryId": "28",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "Swift Programming Tutorial | FULL COURSE | Absolute Beginner",
          "description": "My Swift & SwiftUI Courses - https://seanallen.teachable.com/?video=CwA1VWP0Ldw\nSwift News Newsletter - https://swiftnews.kit.com/newsletter\n\nNeed help with something specific? Book a call with me:\nhttps://seanallen.teachable.com/p/call?video=CwA1VWP0Ldw\n\nWhen you've finished this course, try my SwiftUI Fundamentals course which is now free:\nhttps://www.youtube.com/watch?v=b1oC7sLIgpI\n\nMy Formula 1 App:\nhttps://apps.apple.com/app/formula-widgets-push-push/id6744127751\n \nMy other iOS Developer Courses\nhttps://seanallen.teachable.com/\n\nCard Deck Assets:\nhttps://www.dropbox.com/sh/ygwlohcppk0c8dv/AACDU3NSO8oK8i74SNXDY68Ta?dl=0\n\nSwiftUI Video Thumbnail Assets:\nhttps://www.dropbox.com/sh/cpp1ibizedt6f9t/AABJHoTqiQf_-A1n1aMUpKpla?dl=0\n\nhttps://seanallen.co\n\nTwitter:\nhttps://twitter.com/seanallen_dev\n\nHired.com:\nhttps://hired.com/x/1n01g\n\nBook and learning recommendations that help out the channel if you decide to purchase (Affiliate Links):\n\nPaul Hudson's Hacking With Swift:\nhttps://gumroad.com/a/762098803\n\nDonny Wals - Combine:\nhttps://gumroad.com/a/909014131\n\nMark Moeyken’s SwiftUI Books:\nwww.bigmountainstudio.com/swiftui-views-book/fzc51\n\nObjc.io Books (Thinking in SwiftUI & Advanced Swift):\nhttps://gumroad.com/a/656585843\n\nRay Wenderlich Books:\nhttps://store.raywenderlich.com/a/20866/link/1\n\nCurriculum Timestamps:\n00:00:00 - Course overview\n00:05:36 - I was just like you\n00:13:48 - What is Xcode?\n00:19:47 - SwiftUI or UIKit (2020)\n00:22:27 - SwiftUI or UIKit (2021)\n00:26:00 - Intro to Swift Language\n00:33:30 - Swift Types\n00:37:15 - Variables\n00:42:10 - Array\n00:49:37 - Set\n00:57:59 - Dictionary\n01:02:25 - Functions\n01:14:50 - if / else\n01:21:15 - For Loops\n01:30:29 - Enum\n01:40:27 - Switch Statement\n01:48:49 - Operators\n02:01:45 - Optionals\n02:12:46 - Self\n02:15:27 - Class\n02:23:36 - Inheritance\n02:31:31 - Struct\n02:36:45 - Extension\n02:40:30 - Apple Developer Program\n02:43:54 - Tour of Xcode\n02:58:56 - What’s New in Xcode 12\n03:08:07 - What’s New in Xcode 13\n03:24:59 - What’s New in Xcode 14\n03:34:54 - What is Auto Layout?\n03:38:38 - What is UIKit?\n03:55:05 - Storyboard vs. Programmatic UI\n04:01:16 - FizzBuzz Challenge\n04:09:27 - Colors App Intro\n04:10:39 - Colors App - Navigation\n04:25:02 - Colors App - UITableView\n04:36:37 - Colors App - Code\n05:05:56 - Card Workout App - Intro\n05:08:53 - Card Workout App - Storyboard UI\n05:21:20 - Card Workout App - IBOutlets\n05:41:49 - Card Workout App - Storyboard Logic\n05:59:27 - iOS 15 Storyboard Buttons\n06:08:05 - Programmatic UI - Setup\n06:17:37 - Programmatic UIButtons\n06:25:55 - Card Workout App - Card Selection\n06:44:29 - Card Workout App - Rules Screen\n07:04:07 - Card Workout App - Logic\n07:13:52 - iOS 15 Update - UIButtons\n07:24:24 - SwiftUI Overview\n07:34:06 - SwiftUI Example\n08:00:29 - General Knowledge Section Intro\n08:01:57 - How Apps Work\n08:05:34 - What is an API?\n08:10:00 - What is Version Control?\n08:19:34 - 3rd Party Libraries\n08:25:56 - What are Edge Cases?\n08:30:55 - iOS Dev Career Paths\n08:36:48 - World of iOS Dev\n08:38:31 - Why WWDC is the best\n08:45:02 - Twitter will change your career\n08:55:30 - Swift blogs & websites\n09:03:47 - Book Recommendations\n09:10:40 - Podcast Recommendations\n09:20:23 - Next Steps\n09:26:18 - Thank You!\n09:29:04 - Bonus: Homeless to $130k iOS Dev\n09:46:21 - Bonus: 37 Tips for Jr. Developers\n10:01:04 - Bonus: I’m an Average Developer\n10:06:34 - Bonus: 9 Things I Wish I Knew When I Started\n10:16:46 - Bonus: How to Gain Confidence as a Dev\n10:25:56 - Bonus: The 90/90 Rule\n\n#swift #softwaredeveloper #iosdeveloper"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT10H32M30S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "656564",
        "likeCount": "15754",
        "favoriteCount": "0",
        "commentCount": "871"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "6mn2BUiRdVw3AltJLnfObsi3f4c",
      "id": "n5X_V81OYnQ",
      "snippet": {
        "publishedAt": "2021-10-15T21:23:32Z",
        "channelId": "UCmJi5RdDLgzvkl3Ly0DRMlQ",
        "title": "Learn the Essentials of Swift in one hour",
        "description": "This video walks through all the essential language features of Swift in just under one hour, and is aimed at two groups of people: folks who have completed up to day 14 of the 100 Days of SwiftUI and want to review what they've learned, and developers with extensive experience of other languages who want to transfer their knowledge to Swift quickly.\n\nThis video is very fast! If you're struggling to understand concepts such as arrays, functions, closures, and similar, you should consider following the videos in my 100 Days of SwiftUI course at https://www.hackingwithswift.com/100/swiftui – they are much slower, providing much more explanation and example code along the way.\n\n00:00 Introduction\n01:21 Creating constants and variables, \n01:59 Strings\n03:38 Integers\n04:38 Decimals\n05:01 Booleans\n05:23 Joining strings \n05:59 Arrays\n07:39 Dictionaries\n08:16 Sets\n09:10 Enums\n09:40 Type annotations\n11:50 Conditions\n12:46 Switch statements\n13:25 The ternary conditional operator\n13:55 Loops\n16:24 Functions\n17:39 Returning multiple values from functions\n18:45 Customizing parameter labels\n19:52 Providing default values for parameters\n20:38 Handling errors in functions\n22:46 Closures\n25:02 Trailing closures and shorthand syntax\n26:22 Structs\n27:43 Computed properties\n28:37 Property observers\n29:16 Custom initializers\n30:10 Access control\n31:56 Static properties and methods\n32:42 Classes\n39:49 Protocols\n43:49 Extensions\n46:00 Protocol extensions\n49:31 Optionals\n49:31 Unwrapping optionals with guard\n51:34 Nil coalescing\n53:06 Optional chaining\n54:09 Optional try?\n55:37 Wrap up\n56:52 Dog reward",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/n5X_V81OYnQ/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/n5X_V81OYnQ/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/n5X_V81OYnQ/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/n5X_V81OYnQ/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/n5X_V81OYnQ/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Paul Hudson",
        "categoryId": "28",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "Learn the Essentials of Swift in one hour",
          "description": "This video walks through all the essential language features of Swift in just under one hour, and is aimed at two groups of people: folks who have completed up to day 14 of the 100 Days of SwiftUI and want to review what they've learned, and developers with extensive experience of other languages who want to transfer their knowledge to Swift quickly.\n\nThis video is very fast! If you're struggling to understand concepts such as arrays, functions, closures, and similar, you should consider following the videos in my 100 Days of SwiftUI course at https://www.hackingwithswift.com/100/swiftui – they are much slower, providing much more explanation and example code along the way.\n\n00:00 Introduction\n01:21 Creating constants and variables, \n01:59 Strings\n03:38 Integers\n04:38 Decimals\n05:01 Booleans\n05:23 Joining strings \n05:59 Arrays\n07:39 Dictionaries\n08:16 Sets\n09:10 Enums\n09:40 Type annotations\n11:50 Conditions\n12:46 Switch statements\n13:25 The ternary conditional operator\n13:55 Loops\n16:24 Functions\n17:39 Returning multiple values from functions\n18:45 Customizing parameter labels\n19:52 Providing default values for parameters\n20:38 Handling errors in functions\n22:46 Closures\n25:02 Trailing closures and shorthand syntax\n26:22 Structs\n27:43 Computed properties\n28:37 Property observers\n29:16 Custom initializers\n30:10 Access control\n31:56 Static properties and methods\n32:42 Classes\n39:49 Protocols\n43:49 Extensions\n46:00 Protocol extensions\n49:31 Optionals\n49:31 Unwrapping optionals with guard\n51:34 Nil coalescing\n53:06 Optional chaining\n54:09 Optional try?\n55:37 Wrap up\n56:52 Dog reward"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT58M14S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": false,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "264467",
        "likeCount": "7969",
        "favoriteCount": "0",
        "commentCount": "238"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "sWigpYgDJkbV1TefGce0TA0ODHg",
      "id": "comQ1-x2a1Q",
      "snippet": {
        "publishedAt": "2019-01-09T15:28:29Z",
        "channelId": "UC8butISFwT-Wl7EV0hUK0BQ",
        "title": "Swift Tutorial - Full Course for Beginners",
        "description": "Learn how to code with Swift in this full tutorial course for beginners. Swift is a powerful and intuitive programming language for macOS, iOS, watchOS and tvOS.\n\nThis course covers all the core concepts of Swift including:\nVariables and Constants, Data Types, Properties, Functions and Parameters, Classes, IF Statements, and more.\n\nCourse from Code With Chris. Check out their YouTube channel: https://www.youtube.com/user/codewithchris\n\nThe Code With Chris Facebook community: https://www.facebook.com/groups/codewithchriscommunity/\n\n--\n\nLearn to code for free and get a developer job: https://www.freecodecamp.org\n\nRead hundreds of articles on programming: https://medium.freecodecamp.org \n\n❤️ Support for this channel comes from our friends at Scrimba – the coding platform that's reinvented interactive learning: https://scrimba.com/freecodecamp",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/comQ1-x2a1Q/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/comQ1-x2a1Q/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/comQ1-x2a1Q/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/comQ1-x2a1Q/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/comQ1-x2a1Q/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "freeCodeCamp.org",
        "tags": [
          "swift course",
          "swift programming",
          "swift tutorial",
          "learn swift",
          "swift programming language",
          "ios",
          "ios development",
          "swift tutorial for beginners",
          "swift course for beginners",
          "ios programming"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "Swift Tutorial - Full Course for Beginners",
          "description": "Learn how to code with Swift in this full tutorial course for beginners. Swift is a powerful and intuitive programming language for macOS, iOS, watchOS and tvOS.\n\nThis course covers all the core concepts of Swift including:\nVariables and Constants, Data Types, Properties, Functions and Parameters, Classes, IF Statements, and more.\n\nCourse from Code With Chris. Check out their YouTube channel: https://www.youtube.com/user/codewithchris\n\nThe Code With Chris Facebook community: https://www.facebook.com/groups/codewithchriscommunity/\n\n--\n\nLearn to code for free and get a developer job: https://www.freecodecamp.org\n\nRead hundreds of articles on programming: https://medium.freecodecamp.org \n\n❤️ Support for this channel comes from our friends at Scrimba – the coding platform that's reinvented interactive learning: https://scrimba.com/freecodecamp"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT3H9M58S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "565487",
        "likeCount": "8360",
        "favoriteCount": "0",
        "commentCount": "257"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "NSkSCU4zEyYWPUruKKGucAOf7RM",
      "id": "b1oC7sLIgpI",
      "snippet": {
        "publishedAt": "2023-09-06T11:56:06Z",
        "channelId": "UCbTw29mcP12YlTt1EpUaVJw",
        "title": "SwiftUI Fundamentals | FULL COURSE | Beginner Friendly",
        "description": "My Latest SwiftUI Courses - https://seanallen.teachable.com/?video=b1oC7sLIgpI\nSwift News Newsletter - https://swiftnews.kit.com/newsletter\n\nIn this 12 hour course we build 4 apps that ramp up in difficulty. The first 3 apps are quite simple, but the 4th and final app grows substantially in size and challenge. See the timestamps at the bottom of the description for the full curriculum.\n\nNeed help with something specific? Book a call with me:\nhttps://seanallen.teachable.com/p/call?video=b1oC7sLIgpI\n\nThe course has been updated for iOS 15 and iOS 16. Check out my latest, up to date courses at https://seanallen.teachable.com/?video=b1oC7sLIgpI\n\nApp 1 Weather: \nWe learn the absolute basics of SwiftUI to build the user interface of a weather app. If you have experience with SwiftUI, feel free to skip this one as it's very beginner friendly.\n\nWeather Completed Source Code (Updated for iOS 16):\nhttps://www.dropbox.com/scl/fo/sh092hs8fnwxwa169kkre/h?rlkey=5l9h82p95con0bu9usc2s1wg3&dl=0\n\nApp 2 - Apple Frameworks: \nWe learn to build a Grid and pass data from our main view to a detail view.\n\nFramework icon images:\nhttps://www.dropbox.com/scl/fo/lijj23qlv9eiblta13z61/h?rlkey=79h2tiegl2ysood23qcvfxo85&dl=0\n\nApple Frameworks Completed Source Code (Updated for iOS 16):\nhttps://www.dropbox.com/scl/fo/5zvhvulzemu74sit9qn96/h?rlkey=pc8nycuc6eejy8rb8j9szfvhm&dl=0\n\nApp 3 - Barcode Scanner: \nWe learn to use UIViewRepresentable to connect SwiftUI and UIKit in case SwiftUI doesn't support a type of user interface you want.\n\nBarcode Scanner Completed Source Code:\nhttps://www.dropbox.com/scl/fo/iy2ymc4jcrz7vfh2wqxzk/h?rlkey=8055hc325k07rji6hapgifcw1&dl=0\n\nApp 4 - Appetizers: \nThis app is a big one where we put it all our learnings together to build a proper SwiftUI app that works with a network call (updated to Async/Await in iOS 15).\n\nAppetizers Completed Source Code (updated for iOS 16):\nhttps://www.dropbox.com/scl/fo/0h5kub6len9jkghiwj6gz/h?rlkey=uf04zyhvww722jksfrech2up4&dl=0\n\nWhat's New in Xcode 15:\nhttps://youtu.be/oNAj6aIU7tk\n\nWhat's New in Xcode 14:\nhttps://youtu.be/tYBZ8AVH0Q0\n\nWhat's New in Xcode 13: \nhttps://youtu.be/8OIyptQpzMQ\n\nWhat's New in SwiftUI WWDC 2021:\nhttps://developer.apple.com/videos/play/wwdc2021/10018/\n\nWhat's New in SwiftUI WWDC 2022:\nhttps://developer.apple.com/videos/play/wwdc2022/10052/\n\nWhat's New in SwiftUI WWDC 2023:\nhttps://developer.apple.com/videos/play/wwdc2023/10148/\n\nMy Formula 1 App:\nhttps://apps.apple.com/app/formula-widgets-push-push/id6744127751\n\nTwitter:\nSean Allen - https://twitter.com/seanallen_dev\n\nBook and learning recommendations that help out the channel if you decide to purchase (Affiliate Links):\n\n#swift #swiftui #iosdeveloper \n\nTimestamps:\n0:00 - What you will learn & updates\n6:30 - SwiftUI Basics - Weather App\n19:01 - Weather - Text\n25:54 - Weather - SF Symbols\n29:13 - Weather - Main VStack\n36:41 - Weather - HStack of Days\n50:08 - Weather - Button & Refactoring\n1:07:35 - Weather - @State & @Binding Basics\n1:18:03 - Weather App - iOS 15 & 16 Updates\n1:31:52 - How SwiftUI Works - Fundamental Concepts\n2:02:00 - App 2 - Apple Frameworks\n2:09:08 - Frameworks - Grid Start\n2:20:35 - Frameworks - Grid End\n2:32:34 - Frameworks - Detail View\n2:47:00 - Frameworks - Intro to MVVM & Moving Data\n3:06:09 - Frameworks - Integrating with UIKit\n3:17:56 - Frameworks - Refactor\n3:38:12 - Frameworks - iOS 15 & 16 Updates\n3:53:41 - App 3 - Barcode Scanner\n4:05:24 - Barcode Scanner - Camera Setup\n4:21:44 - Barcode Scanner - Error Handling\n4:26:49 - Barcode Scanner - Coordinator Setup\n4:48:28 - Barcode Scanner - More Error Handling\n5:02:46 - Barcode Scanner - Refactor\n5:12:26 - App 4 - Appetizers\n5:24:48 - Appetizers - App Lifecycle\n5:29:55 - Appetizers - Model\n5:42:19 - Appetizers - List View\n5:55:32 - Appetizers - Network Manager\n6:12:40 - Appetizers - Connecting the UI\n6:26:53 - Appetizers - Errors & Alerts\n6:41:35 - Appetizers - Loading View\n6:53:21 - Appetizers - Download Image\n7:03:42 - Appetizers - Remote Image\n7:16:16 - Appetizers - Project cleanup & organization\n7:21:12 - Appetizers - Detail View UI Setup\n7:41:09 - Appetizers - Detail View UI Connections\n7:52:28 - Appetizers - Detail View Refactor\n8:02:56 - Appetizers - Account View UI Setup\n8:17:29 - Appetizers - View Model & Text Validation\n8:33:22 - Appetizers - @AppStorage\n8:50:56 - Appetizers - Order Screen UI\n9:02:18 - Appetizers - Empty State\n9:12:40 - Appetizers - @EnvironmentObject - Order\n9:30:21 - Appetizers - iOS 15 - Initial Run\n9:38:48 - Appetizers - iOS 15 - Tabbar Badge & List Separator\n9:52:25 - Appetizers - iOS 15 - @FocusState Keyboard\n10:01:01 - Appetizers - iOS 15 - Async/Await Network Calls\n10:26:19 - Appetizers - iOS 15 - AsyncImage\n10:32:52 - Appetizers - iOS 16 - Regex, guard let\n10:45:58 - App Optimizations\n11:19:41 - Data Flow Review\n11:38:47 - iOS 17 @Observable\n11:45:36 - What’s Next?",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/b1oC7sLIgpI/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/b1oC7sLIgpI/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/b1oC7sLIgpI/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/b1oC7sLIgpI/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/b1oC7sLIgpI/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Sean Allen",
        "tags": [
          "Swift",
          "Swift Tutorial",
          "iOS Developer",
          "iOS Development",
          "Swift Code Tutorial",
          "Swift app tutorial",
          "SwiftUI",
          "SwiftUI Basics",
          "Swift for beginners",
          "SwiftUI For Beginners",
          "SwiftUI Tutorial",
          "SwiftUI Basics for Beginners",
          "SwiftUI app",
          "SwiftUI tutorial 2020",
          "SwiftUI Tutorial 2021",
          "swiftUI for dummies",
          "Sean Allen",
          "SwiftUI Fundamentals",
          "fundamentals of swiftui",
          "beginner swiftui",
          "how to learn swiftui",
          "swiftui example",
          "swiftui full course"
        ],
        "categoryId": "28",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "SwiftUI Fundamentals | FULL COURSE | Beginner Friendly",
          "description": "My Latest SwiftUI Courses - https://seanallen.teachable.com/?video=b1oC7sLIgpI\nSwift News Newsletter - https://swiftnews.kit.com/newsletter\n\nIn this 12 hour course we build 4 apps that ramp up in difficulty. The first 3 apps are quite simple, but the 4th and final app grows substantially in size and challenge. See the timestamps at the bottom of the description for the full curriculum.\n\nNeed help with something specific? Book a call with me:\nhttps://seanallen.teachable.com/p/call?video=b1oC7sLIgpI\n\nThe course has been updated for iOS 15 and iOS 16. Check out my latest, up to date courses at https://seanallen.teachable.com/?video=b1oC7sLIgpI\n\nApp 1 Weather: \nWe learn the absolute basics of SwiftUI to build the user interface of a weather app. If you have experience with SwiftUI, feel free to skip this one as it's very beginner friendly.\n\nWeather Completed Source Code (Updated for iOS 16):\nhttps://www.dropbox.com/scl/fo/sh092hs8fnwxwa169kkre/h?rlkey=5l9h82p95con0bu9usc2s1wg3&dl=0\n\nApp 2 - Apple Frameworks: \nWe learn to build a Grid and pass data from our main view to a detail view.\n\nFramework icon images:\nhttps://www.dropbox.com/scl/fo/lijj23qlv9eiblta13z61/h?rlkey=79h2tiegl2ysood23qcvfxo85&dl=0\n\nApple Frameworks Completed Source Code (Updated for iOS 16):\nhttps://www.dropbox.com/scl/fo/5zvhvulzemu74sit9qn96/h?rlkey=pc8nycuc6eejy8rb8j9szfvhm&dl=0\n\nApp 3 - Barcode Scanner: \nWe learn to use UIViewRepresentable to connect SwiftUI and UIKit in case SwiftUI doesn't support a type of user interface you want.\n\nBarcode Scanner Completed Source Code:\nhttps://www.dropbox.com/scl/fo/iy2ymc4jcrz7vfh2wqxzk/h?rlkey=8055hc325k07rji6hapgifcw1&dl=0\n\nApp 4 - Appetizers: \nThis app is a big one where we put it all our learnings together to build a proper SwiftUI app that works with a network call (updated to Async/Await in iOS 15).\n\nAppetizers Completed Source Code (updated for iOS 16):\nhttps://www.dropbox.com/scl/fo/0h5kub6len9jkghiwj6gz/h?rlkey=uf04zyhvww722jksfrech2up4&dl=0\n\nWhat's New in Xcode 15:\nhttps://youtu.be/oNAj6aIU7tk\n\nWhat's New in Xcode 14:\nhttps://youtu.be/tYBZ8AVH0Q0\n\nWhat's New in Xcode 13: \nhttps://youtu.be/8OIyptQpzMQ\n\nWhat's New in SwiftUI WWDC 2021:\nhttps://developer.apple.com/videos/play/wwdc2021/10018/\n\nWhat's New in SwiftUI WWDC 2022:\nhttps://developer.apple.com/videos/play/wwdc2022/10052/\n\nWhat's New in SwiftUI WWDC 2023:\nhttps://developer.apple.com/videos/play/wwdc2023/10148/\n\nMy Formula 1 App:\nhttps://apps.apple.com/app/formula-widgets-push-push/id6744127751\n\nTwitter:\nSean Allen - https://twitter.com/seanallen_dev\n\nBook and learning recommendations that help out the channel if you decide to purchase (Affiliate Links):\n\n#swift #swiftui #iosdeveloper \n\nTimestamps:\n0:00 - What you will learn & updates\n6:30 - SwiftUI Basics - Weather App\n19:01 - Weather - Text\n25:54 - Weather - SF Symbols\n29:13 - Weather - Main VStack\n36:41 - Weather - HStack of Days\n50:08 - Weather - Button & Refactoring\n1:07:35 - Weather - @State & @Binding Basics\n1:18:03 - Weather App - iOS 15 & 16 Updates\n1:31:52 - How SwiftUI Works - Fundamental Concepts\n2:02:00 - App 2 - Apple Frameworks\n2:09:08 - Frameworks - Grid Start\n2:20:35 - Frameworks - Grid End\n2:32:34 - Frameworks - Detail View\n2:47:00 - Frameworks - Intro to MVVM & Moving Data\n3:06:09 - Frameworks - Integrating with UIKit\n3:17:56 - Frameworks - Refactor\n3:38:12 - Frameworks - iOS 15 & 16 Updates\n3:53:41 - App 3 - Barcode Scanner\n4:05:24 - Barcode Scanner - Camera Setup\n4:21:44 - Barcode Scanner - Error Handling\n4:26:49 - Barcode Scanner - Coordinator Setup\n4:48:28 - Barcode Scanner - More Error Handling\n5:02:46 - Barcode Scanner - Refactor\n5:12:26 - App 4 - Appetizers\n5:24:48 - Appetizers - App Lifecycle\n5:29:55 - Appetizers - Model\n5:42:19 - Appetizers - List View\n5:55:32 - Appetizers - Network Manager\n6:12:40 - Appetizers - Connecting the UI\n6:26:53 - Appetizers - Errors & Alerts\n6:41:35 - Appetizers - Loading View\n6:53:21 - Appetizers - Download Image\n7:03:42 - Appetizers - Remote Image\n7:16:16 - Appetizers - Project cleanup & organization\n7:21:12 - Appetizers - Detail View UI Setup\n7:41:09 - Appetizers - Detail View UI Connections\n7:52:28 - Appetizers - Detail View Refactor\n8:02:56 - Appetizers - Account View UI Setup\n8:17:29 - Appetizers - View Model & Text Validation\n8:33:22 - Appetizers - @AppStorage\n8:50:56 - Appetizers - Order Screen UI\n9:02:18 - Appetizers - Empty State\n9:12:40 - Appetizers - @EnvironmentObject - Order\n9:30:21 - Appetizers - iOS 15 - Initial Run\n9:38:48 - Appetizers - iOS 15 - Tabbar Badge & List Separator\n9:52:25 - Appetizers - iOS 15 - @FocusState Keyboard\n10:01:01 - Appetizers - iOS 15 - Async/Await Network Calls\n10:26:19 - Appetizers - iOS 15 - AsyncImage\n10:32:52 - Appetizers - iOS 16 - Regex, guard let\n10:45:58 - App Optimizations\n11:19:41 - Data Flow Review\n11:38:47 - iOS 17 @Observable\n11:45:36 - What’s Next?"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT11H48M41S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "true",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "553727",
        "likeCount": "12435",
        "favoriteCount": "0",
        "commentCount": "742"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "nS2Jyidj718xYy9JHd-gDL46eoA",
      "id": "8Xg7E9shq0U",
      "snippet": {
        "publishedAt": "2022-12-07T16:01:04Z",
        "channelId": "UC8butISFwT-Wl7EV0hUK0BQ",
        "title": "Swift Programming Tutorial – Full Course for Beginners",
        "description": "Learn the Swift programming language in this full tutorial for beginners. \n\nIn this video, we will go through every modern aspect of Swift as a programming language including, variables, constants, functions, structures, classes, protocols. extensions, asynchronous programming, generics and much more. This video will lay the foundation for learning Swift for those who are not familiar with Swift already.\n\nYou can follow along with this video on macOS, Linux and Windows. On Linux and Windows you will need to download the Swift toolchain from https://swift.org and run the examples manually by invoking Swift from Terminal using your favorite code editor such as Visual Studio Code.\n\n✏️ Vandad Nahavandipoor created this course. \nVandad on YouTube: https://youtube.com/c/vandadnp\nVandad on Twitter: https://twitter.com/vandadnp\nVandad on LinkedIn: https://linkedin.com/in/vandadnp\n\n⭐️ Contents ⭐️\n⌨️ (0:00:00) Introduction\n⌨️ (0:06:49) Variables\n⌨️ (0:29:46) Operators\n⌨️ (0:46:55) If and else\n⌨️ (1:05:08) Functions\n⌨️ (1:23:58) Closures\n⌨️ (1:52:08) Structures\n⌨️ (2:17:58) Enumerations\n⌨️ (2:59:21) Classes\n⌨️ (3:24:51) Protocols\n⌨️ (3:47:48) Extensions\n⌨️ (4:00:06) Generics\n⌨️ (4:32:44) Optionals\n⌨️ (4:53:39) Error Handling\n⌨️ (5:39:35) Collections\n⌨️ (6:17:17) Equality and Hashing\n⌨️ (6:38:46) Custom Operators\n⌨️ (6:50:53) Asynchronous Programming\n⌨️ (7:04:38) Outro\n\n🎉 Thanks to our Champion and Sponsor supporters:\n👾 Nattira Maneerat\n👾 Heather Wcislo\n👾 Serhiy Kalinets\n👾 Erdeniz Unvan\n👾 Justin Hual\n👾 Agustín Kussrow\n👾 Otis Morgan\n\n--\n\nLearn to code for free and get a developer job: https://www.freecodecamp.org\n\nRead hundreds of articles on programming: https://freecodecamp.org/news \n\n❤️ Support for this channel comes from our friends at Scrimba – the coding platform that's reinvented interactive learning: https://scrimba.com/freecodecamp",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/8Xg7E9shq0U/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/8Xg7E9shq0U/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/8Xg7E9shq0U/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/8Xg7E9shq0U/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/8Xg7E9shq0U/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "freeCodeCamp.org",
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "Swift Programming Tutorial – Full Course for Beginners",
          "description": "Learn the Swift programming language in this full tutorial for beginners. \n\nIn this video, we will go through every modern aspect of Swift as a programming language including, variables, constants, functions, structures, classes, protocols. extensions, asynchronous programming, generics and much more. This video will lay the foundation for learning Swift for those who are not familiar with Swift already.\n\nYou can follow along with this video on macOS, Linux and Windows. On Linux and Windows you will need to download the Swift toolchain from https://swift.org and run the examples manually by invoking Swift from Terminal using your favorite code editor such as Visual Studio Code.\n\n✏️ Vandad Nahavandipoor created this course. \nVandad on YouTube: https://youtube.com/c/vandadnp\nVandad on Twitter: https://twitter.com/vandadnp\nVandad on LinkedIn: https://linkedin.com/in/vandadnp\n\n⭐️ Contents ⭐️\n⌨️ (0:00:00) Introduction\n⌨️ (0:06:49) Variables\n⌨️ (0:29:46) Operators\n⌨️ (0:46:55) If and else\n⌨️ (1:05:08) Functions\n⌨️ (1:23:58) Closures\n⌨️ (1:52:08) Structures\n⌨️ (2:17:58) Enumerations\n⌨️ (2:59:21) Classes\n⌨️ (3:24:51) Protocols\n⌨️ (3:47:48) Extensions\n⌨️ (4:00:06) Generics\n⌨️ (4:32:44) Optionals\n⌨️ (4:53:39) Error Handling\n⌨️ (5:39:35) Collections\n⌨️ (6:17:17) Equality and Hashing\n⌨️ (6:38:46) Custom Operators\n⌨️ (6:50:53) Asynchronous Programming\n⌨️ (7:04:38) Outro\n\n🎉 Thanks to our Champion and Sponsor supporters:\n👾 Nattira Maneerat\n👾 Heather Wcislo\n👾 Serhiy Kalinets\n👾 Erdeniz Unvan\n👾 Justin Hual\n👾 Agustín Kussrow\n👾 Otis Morgan\n\n--\n\nLearn to code for free and get a developer job: https://www.freecodecamp.org\n\nRead hundreds of articles on programming: https://freecodecamp.org/news \n\n❤️ Support for this channel comes from our friends at Scrimba – the coding platform that's reinvented interactive learning: https://scrimba.com/freecodecamp"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT7H5M17S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "483630",
        "likeCount": "10348",
        "favoriteCount": "0",
        "commentCount": "227"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "yUa1WuD1BHzCDSG4JqY9adA2K9U",
      "id": "CwA1VWP0Ldw",
      "snippet": {
        "publishedAt": "2022-10-08T14:42:34Z",
        "channelId": "UCbTw29mcP12YlTt1EpUaVJw",
        "title": "Swift Programming Tutorial | FULL COURSE | Absolute Beginner",
        "description": "My Swift & SwiftUI Courses - https://seanallen.teachable.com/?video=CwA1VWP0Ldw\nSwift News Newsletter - https://swiftnews.kit.com/newsletter\n\nNeed help with something specific? Book a call with me:\nhttps://seanallen.teachable.com/p/call?video=CwA1VWP0Ldw\n\nWhen you've finished this course, try my SwiftUI Fundamentals course which is now free:\nhttps://www.youtube.com/watch?v=b1oC7sLIgpI\n\nMy Formula 1 App:\nhttps://apps.apple.com/app/formula-widgets-push-push/id6744127751\n \nMy other iOS Developer Courses\nhttps://seanallen.teachable.com/\n\nCard Deck Assets:\nhttps://www.dropbox.com/sh/ygwlohcppk0c8dv/AACDU3NSO8oK8i74SNXDY68Ta?dl=0\n\nSwiftUI Video Thumbnail Assets:\nhttps://www.dropbox.com/sh/cpp1ibizedt6f9t/AABJHoTqiQf_-A1n1aMUpKpla?dl=0\n\nhttps://seanallen.co\n\nTwitter:\nhttps://twitter.com/seanallen_dev\n\nHired.com:\nhttps://hired.com/x/1n01g\n\nBook and learning recommendations that help out the channel if you decide to purchase (Affiliate Links):\n\nPaul Hudson's Hacking With Swift:\nhttps://gumroad.com/a/762098803\n\nDonny Wals - Combine:\nhttps://gumroad.com/a/909014131\n\nMark Moeyken’s SwiftUI Books:\nwww.bigmountainstudio.com/swiftui-views-book/fzc51\n\nObjc.io Books (Thinking in SwiftUI & Advanced Swift):\nhttps://gumroad.com/a/656585843\n\nRay Wenderlich Books:\nhttps://store.raywenderlich.com/a/20866/link/1\n\nCurriculum Timestamps:\n00:00:00 - Course overview\n00:05:36 - I was just like you\n00:13:48 - What is Xcode?\n00:19:47 - SwiftUI or UIKit (2020)\n00:22:27 - SwiftUI or UIKit (2021)\n00:26:00 - Intro to Swift Language\n00:33:30 - Swift Types\n00:37:15 - Variables\n00:42:10 - Array\n00:49:37 - Set\n00:57:59 - Dictionary\n01:02:25 - Functions\n01:14:50 - if / else\n01:21:15 - For Loops\n01:30:29 - Enum\n01:40:27 - Switch Statement\n01:48:49 - Operators\n02:01:45 - Optionals\n02:12:46 - Self\n02:15:27 - Class\n02:23:36 - Inheritance\n02:31:31 - Struct\n02:36:45 - Extension\n02:40:30 - Apple Developer Program\n02:43:54 - Tour of Xcode\n02:58:56 - What’s New in Xcode 12\n03:08:07 - What’s New in Xcode 13\n03:24:59 - What’s New in Xcode 14\n03:34:54 - What is Auto Layout?\n03:38:38 - What is UIKit?\n03:55:05 - Storyboard vs. Programmatic UI\n04:01:16 - FizzBuzz Challenge\n04:09:27 - Colors App Intro\n04:10:39 - Colors App - Navigation\n04:25:02 - Colors App - UITableView\n04:36:37 - Colors App - Code\n05:05:56 - Card Workout App - Intro\n05:08:53 - Card Workout App - Storyboard UI\n05:21:20 - Card Workout App - IBOutlets\n05:41:49 - Card Workout App - Storyboard Logic\n05:59:27 - iOS 15 Storyboard Buttons\n06:08:05 - Programmatic UI - Setup\n06:17:37 - Programmatic UIButtons\n06:25:55 - Card Workout App - Card Selection\n06:44:29 - Card Workout App - Rules Screen\n07:04:07 - Card Workout App - Logic\n07:13:52 - iOS 15 Update - UIButtons\n07:24:24 - SwiftUI Overview\n07:34:06 - SwiftUI Example\n08:00:29 - General Knowledge Section Intro\n08:01:57 - How Apps Work\n08:05:34 - What is an API?\n08:10:00 - What is Version Control?\n08:19:34 - 3rd Party Libraries\n08:25:56 - What are Edge Cases?\n08:30:55 - iOS Dev Career Paths\n08:36:48 - World of iOS Dev\n08:38:31 - Why WWDC is the best\n08:45:02 - Twitter will change your career\n08:55:30 - Swift blogs & websites\n09:03:47 - Book Recommendations\n09:10:40 - Podcast Recommendations\n09:20:23 - Next Steps\n09:26:18 - Thank You!\n09:29:04 - Bonus: Homeless to $130k iOS Dev\n09:46:21 - Bonus: 37 Tips for Jr. Developers\n10:01:04 - Bonus: I’m an Average Developer\n10:06:34 - Bonus: 9 Things I Wish I Knew When I Started\n10:16:46 - Bonus: How to Gain Confidence as a Dev\n10:25:56 - Bonus: The 90/90 Rule\n\n#swift #softwaredeveloper #iosdeveloper",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/CwA1VWP0Ldw/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/CwA1VWP0Ldw/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/CwA1VWP0Ldw/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/CwA1VWP0Ldw/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/CwA1VWP0Ldw/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Sean Allen",
        "tags": [
          "Swift",
          "Swift Tutorial",
          "iOS Developer",
          "iOS Development",
          "Swift app tutorial",
          "swift beginner",
          "beginner swift",
          "swift beginner tutorial",
          "swift beginner app",
          "swift beginner course",
          "beginner swift programming",
          "beginner swift tutorial",
          "beginner swift projects",
          "iOS swift beginner",
          "iOS development course",
          "iOS development for beginners",
          "swift first app",
          "Swift programming language",
          "What is swift",
          "Xcode for beginners",
          "Swift programming course",
          "Swift for beginners",
          "iOS dev for beginners"
        ],
        "categoryId": "28",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "Swift Programming Tutorial | FULL COURSE | Absolute Beginner",
          "description": "My Swift & SwiftUI Courses - https://seanallen.teachable.com/?video=CwA1VWP0Ldw\nSwift News Newsletter - https://swiftnews.kit.com/newsletter\n\nNeed help with something specific? Book a call with me:\nhttps://seanallen.teachable.com/p/call?video=CwA1VWP0Ldw\n\nWhen you've finished this course, try my SwiftUI Fundamentals course which is now free:\nhttps://www.youtube.com/watch?v=b1oC7sLIgpI\n\nMy Formula 1 App:\nhttps://apps.apple.com/app/formula-widgets-push-push/id6744127751\n \nMy other iOS Developer Courses\nhttps://seanallen.teachable.com/\n\nCard Deck Assets:\nhttps://www.dropbox.com/sh/ygwlohcppk0c8dv/AACDU3NSO8oK8i74SNXDY68Ta?dl=0\n\nSwiftUI Video Thumbnail Assets:\nhttps://www.dropbox.com/sh/cpp1ibizedt6f9t/AABJHoTqiQf_-A1n1aMUpKpla?dl=0\n\nhttps://seanallen.co\n\nTwitter:\nhttps://twitter.com/seanallen_dev\n\nHired.com:\nhttps://hired.com/x/1n01g\n\nBook and learning recommendations that help out the channel if you decide to purchase (Affiliate Links):\n\nPaul Hudson's Hacking With Swift:\nhttps://gumroad.com/a/762098803\n\nDonny Wals - Combine:\nhttps://gumroad.com/a/909014131\n\nMark Moeyken’s SwiftUI Books:\nwww.bigmountainstudio.com/swiftui-views-book/fzc51\n\nObjc.io Books (Thinking in SwiftUI & Advanced Swift):\nhttps://gumroad.com/a/656585843\n\nRay Wenderlich Books:\nhttps://store.raywenderlich.com/a/20866/link/1\n\nCurriculum Timestamps:\n00:00:00 - Course overview\n00:05:36 - I was just like you\n00:13:48 - What is Xcode?\n00:19:47 - SwiftUI or UIKit (2020)\n00:22:27 - SwiftUI or UIKit (2021)\n00:26:00 - Intro to Swift Language\n00:33:30 - Swift Types\n00:37:15 - Variables\n00:42:10 - Array\n00:49:37 - Set\n00:57:59 - Dictionary\n01:02:25 - Functions\n01:14:50 - if / else\n01:21:15 - For Loops\n01:30:29 - Enum\n01:40:27 - Switch Statement\n01:48:49 - Operators\n02:01:45 - Optionals\n02:12:46 - Self\n02:15:27 - Class\n02:23:36 - Inheritance\n02:31:31 - Struct\n02:36:45 - Extension\n02:40:30 - Apple Developer Program\n02:43:54 - Tour of Xcode\n02:58:56 - What’s New in Xcode 12\n03:08:07 - What’s New in Xcode 13\n03:24:59 - What’s New in Xcode 14\n03:34:54 - What is Auto Layout?\n03:38:38 - What is UIKit?\n03:55:05 - Storyboard vs. Programmatic UI\n04:01:16 - FizzBuzz Challenge\n04:09:27 - Colors App Intro\n04:10:39 - Colors App - Navigation\n04:25:02 - Colors App - UITableView\n04:36:37 - Colors App - Code\n05:05:56 - Card Workout App - Intro\n05:08:53 - Card Workout App - Storyboard UI\n05:21:20 - Card Workout App - IBOutlets\n05:41:49 - Card Workout App - Storyboard Logic\n05:59:27 - iOS 15 Storyboard Buttons\n06:08:05 - Programmatic UI - Setup\n06:17:37 - Programmatic UIButtons\n06:25:55 - Card Workout App - Card Selection\n06:44:29 - Card Workout App - Rules Screen\n07:04:07 - Card Workout App - Logic\n07:13:52 - iOS 15 Update - UIButtons\n07:24:24 - SwiftUI Overview\n07:34:06 - SwiftUI Example\n08:00:29 - General Knowledge Section Intro\n08:01:57 - How Apps Work\n08:05:34 - What is an API?\n08:10:00 - What is Version Control?\n08:19:34 - 3rd Party Libraries\n08:25:56 - What are Edge Cases?\n08:30:55 - iOS Dev Career Paths\n08:36:48 - World of iOS Dev\n08:38:31 - Why WWDC is the best\n08:45:02 - Twitter will change your career\n08:55:30 - Swift blogs & websites\n09:03:47 - Book Recommendations\n09:10:40 - Podcast Recommendations\n09:20:23 - Next Steps\n09:26:18 - Thank You!\n09:29:04 - Bonus: Homeless to $130k iOS Dev\n09:46:21 - Bonus: 37 Tips for Jr. Developers\n10:01:04 - Bonus: I’m an Average Developer\n10:06:34 - Bonus: 9 Things I Wish I Knew When I Started\n10:16:46 - Bonus: How to Gain Confidence as a Dev\n10:25:56 - Bonus: The 90/90 Rule\n\n#swift #softwaredeveloper #iosdeveloper"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT10H32M30S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "656564",
        "likeCount": "15754",
        "favoriteCount": "0",
        "commentCount": "871"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "RKZQXuPjkcph1qMP4a0mv52Bf00",
      "id": "VSEnzzjAm0c",
      "snippet": {
        "publishedAt": "2021-05-06T05:03:19Z",
        "channelId": "UCV7cZwHMX_0vk8DSYrS7GCg",
        "title": "C Programming Full Course (Hindi) | Learn Coding",
        "description": "इस एक video में मैने C Programming को Basic से Advance तक बताया है, जिसमें हमने C Language के सारे Chapters को theory notes + concepts + programs के साथ detail में explain किया है!\n\n\nTurbo C Download Link👇👇👇\nhttps://www.filehorse.com/download-turbo-c/\n\nDev C++ Download Link 👇👇👇\nhttps://sourceforge.net/projects/orwelldevcpp/\n\n\n----------------------------------------------\nC Programming Topics-Time:\n----------------------------------------------\n👇👇👇\n\nC Basics:-  00:00:12\n\nWhat is C Language? 00:01:12\n   ●Syntax of C Language: 00:02:25\n\nTurbo C Installation: 00:05:41\n\nFirst C Program: 00:07:45\n\nWhat is Keyword? 00:09:37\n\nWhat is Datatype? 00:13:30\n\nWhat is Variable? 00:20:37\n\nWhat is Identifier? 00:28:22\n\nWhat is Operator? 00:30:06\n\nConditional Statement:- 00:42:02\n    ●if statement: 00:42:38\n    ●if else statement: 00:48:00\n    ●if else if ladder statement: 00:57:12\n    ●nested if else statement: 01:02:47\n    ●switch statement: 01:09:21\n\nLoops: 01:19:32\n   ●while loop: 01:20:50\n   ●do while loop: 01:25:32\n   ●for loop: 01:30:19\n   ●nested loop: 01:34:50\n\nJumping Statement: 01:42:24\n\nDev C++ Installation: 01:43:27\n   ●Jumping Statement Program: 01:46:04\n\nWhat is Array? 01:53:19\n\nWhat is String? 02:07:35\n\nWhat is Pointer? 02:23:08\n    ●Types of Pointers: 02:32:10\n\nWhat is Function? 02:34:05\n\nWhat is Storage Class? 02:42:31\n\nStructure vs Union:  03:01:59\n\nWhat is Structure?  03:04:34\n\nWhat is Union?  03:10:49\n\nWhat is Macro?  03:19:48\n\nWhat is File Handling?  03:26:39\n\nC Language PDF 👇👇\nhttps://t.me/LearnCodingTelegram/130\n\n2nd Option to Get PDF👇\nhttps://www.mediafire.com/folder/ixq1emm5frfjs/C_Language_Notes\n\n\nइसी तरह Java Programming Full Course का video Link है ये वाला, इसे भी एक बार जरूर देखे |\n👇👇👇👇\nhttps://youtu.be/VZg5r9i90z0\n\n100% Java सीख जाओगे ☝️☝️☝️\n\n\nDon't forget to tag our Channel...!\n#CProgramming\n#LearnCoding\n#ask4help\n#CLanguage\n#cfullcourse\n#ctutorial\n#ccompletecourse\n#ccompletetutorial\n#cfreecourse\n#ccourseforbeginners\n#completecinhindi\n\n\nYourQueries:\n\nC Programming Full Course\n\nC Language tutorial for Beginners\n\nC Programming for Beginners  \n\nC Complete Course in Hindi\n\nC programming in one video\n\nBest C programming course\n\nbest free online course for c programming\n\nc full course\n\nc full course in hindi\n\nc full course for beginners\n\n\n|| Content ||\n1. writer ✍  :- ankush\n2. voice  🔊  :- akhilesh\n\nThank You 👌",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/VSEnzzjAm0c/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/VSEnzzjAm0c/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/VSEnzzjAm0c/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/VSEnzzjAm0c/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/VSEnzzjAm0c/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Learn Coding",
        "tags": [
          "c programming",
          "c language",
          "c programming for beginners",
          "c programming full course",
          "c programming tutorial",
          "c language tutorial for beginners in hindi",
          "c programming for beginners full course",
          "learn c language in 4 hours",
          "c programming in hindi",
          "c programming tutorial for beginners",
          "c full course",
          "full course of c programming",
          "c language tutorial in hindi",
          "c programming complete course for beginners",
          "c tutorial for beginners",
          "learn c programming",
          "c language full course hindi"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "C Programming Full Course (Hindi) | Learn Coding",
          "description": "इस एक video में मैने C Programming को Basic से Advance तक बताया है, जिसमें हमने C Language के सारे Chapters को theory notes + concepts + programs के साथ detail में explain किया है!\n\n\nTurbo C Download Link👇👇👇\nhttps://www.filehorse.com/download-turbo-c/\n\nDev C++ Download Link 👇👇👇\nhttps://sourceforge.net/projects/orwelldevcpp/\n\n\n----------------------------------------------\nC Programming Topics-Time:\n----------------------------------------------\n👇👇👇\n\nC Basics:-  00:00:12\n\nWhat is C Language? 00:01:12\n   ●Syntax of C Language: 00:02:25\n\nTurbo C Installation: 00:05:41\n\nFirst C Program: 00:07:45\n\nWhat is Keyword? 00:09:37\n\nWhat is Datatype? 00:13:30\n\nWhat is Variable? 00:20:37\n\nWhat is Identifier? 00:28:22\n\nWhat is Operator? 00:30:06\n\nConditional Statement:- 00:42:02\n    ●if statement: 00:42:38\n    ●if else statement: 00:48:00\n    ●if else if ladder statement: 00:57:12\n    ●nested if else statement: 01:02:47\n    ●switch statement: 01:09:21\n\nLoops: 01:19:32\n   ●while loop: 01:20:50\n   ●do while loop: 01:25:32\n   ●for loop: 01:30:19\n   ●nested loop: 01:34:50\n\nJumping Statement: 01:42:24\n\nDev C++ Installation: 01:43:27\n   ●Jumping Statement Program: 01:46:04\n\nWhat is Array? 01:53:19\n\nWhat is String? 02:07:35\n\nWhat is Pointer? 02:23:08\n    ●Types of Pointers: 02:32:10\n\nWhat is Function? 02:34:05\n\nWhat is Storage Class? 02:42:31\n\nStructure vs Union:  03:01:59\n\nWhat is Structure?  03:04:34\n\nWhat is Union?  03:10:49\n\nWhat is Macro?  03:19:48\n\nWhat is File Handling?  03:26:39\n\nC Language PDF 👇👇\nhttps://t.me/LearnCodingTelegram/130\n\n2nd Option to Get PDF👇\nhttps://www.mediafire.com/folder/ixq1emm5frfjs/C_Language_Notes\n\n\nइसी तरह Java Programming Full Course का video Link है ये वाला, इसे भी एक बार जरूर देखे |\n👇👇👇👇\nhttps://youtu.be/VZg5r9i90z0\n\n100% Java सीख जाओगे ☝️☝️☝️\n\n\nDon't forget to tag our Channel...!\n#CProgramming\n#LearnCoding\n#ask4help\n#CLanguage\n#cfullcourse\n#ctutorial\n#ccompletecourse\n#ccompletetutorial\n#cfreecourse\n#ccourseforbeginners\n#completecinhindi\n\n\nYourQueries:\n\nC Programming Full Course\n\nC Language tutorial for Beginners\n\nC Programming for Beginners  \n\nC Complete Course in Hindi\n\nC programming in one video\n\nBest C programming course\n\nbest free online course for c programming\n\nc full course\n\nc full course in hindi\n\nc full course for beginners\n\n\n|| Content ||\n1. writer ✍  :- ankush\n2. voice  🔊  :- akhilesh\n\nThank You 👌"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT3H43M45S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "6887352",
        "likeCount": "178828",
        "favoriteCount": "0",
        "commentCount": "5436"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "XPX-hGrWJGWvgPTe_jXG7ch_Iz4",
      "id": "QIlI7YquuRY",
      "snippet": {
        "publishedAt": "2020-12-07T16:04:22Z",
        "channelId": "UCeVMnSShP_Iviwkknt83cww",
        "title": "How I Learned to Type Really Fast (150 Words/Minute)",
        "description": "How to learn touch typing: In this video I will discuss about how I learnt to type as fast as 150 wpm. This video will give you an exact roadmap needed to type at the speed of 150wpm. You will need the discussed tools along with adequate practice to crack fast typing. \n►Checkout my English channel here: https://www.youtube.com/ProgrammingWithHarry\n►Click here to subscribe - https://www.youtube.com/channel/UCeVMnSShP_Iviwkknt83cww\n\nBest Hindi Videos For Learning Programming:\n►Learn Python In One Video - https://www.youtube.com/watch?v=ihk_Xglr164\n\n►Python Complete Course In Hindi - https://www.youtube.com/playlist?list=PLu0W_9lII9agICnT8t4iYVSZ3eykIAOME\n\n►C Language Complete Course In Hindi -  \nhttps://www.youtube.com/playlist?list=PLu0W_9lII9aiXlHcLx-mDH1Qul38wD3aR&disable_polymer=true\n\n►JavaScript Complete Course In Hindi - \n https://www.youtube.com/playlist?list=PLu0W_9lII9ajyk081To1Cbt2eI5913SsL\n\n►Learn JavaScript in One Video - https://www.youtube.com/watch?v=onbBV0uFVpo\n\n►Learn PHP In One Video - https://www.youtube.com/watch?v=xW7ro3lwaCI\n\n►Django Complete Course In Hindi -  \nhttps://www.youtube.com/playlist?list=PLu0W_9lII9ah7DDtYtflgwMwpT3xmjXY9\n\n►Machine Learning Using Python - https://www.youtube.com/playlist?list=PLu0W_9lII9ai6fAMHp-acBmJONT7Y4BSG\n\n►Creating & Hosting A Website (Tech Blog) Using Python - https://www.youtube.com/playlist?list=PLu0W_9lII9agAiWp6Y41ueUKx1VcTRxmf\n\n►Advanced Python Tutorials - https://www.youtube.com/playlist?list=PLu0W_9lII9aiJWQ7VhY712fuimEpQZYp4\n\n►Object Oriented Programming In Python - https://www.youtube.com/playlist?list=PLu0W_9lII9ahfRrhFcoB-4lpp9YaBmdCP\n\n►Python Data Science and Big Data Tutorials - https://www.youtube.com/playlist?list=PLu0W_9lII9agK8pojo23OHiNz3Jm6VQCH\n\nFollow Me On Social Media\n►Website (created using Flask) - http://www.codewithharry.com\n►Facebook - https://www.facebook.com/CodeWithHarry\n►Instagram - https://www.instagram.com/codewithharry/\n►Personal Facebook A/c - https://www.facebook.com/geekyharis\nTwitter - https://twitter.com/Haris_Is_Here",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/QIlI7YquuRY/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/QIlI7YquuRY/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/QIlI7YquuRY/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/QIlI7YquuRY/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/QIlI7YquuRY/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "CodeWithHarry",
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "How I Learned to Type Really Fast (150 Words/Minute)",
          "description": "How to learn touch typing: In this video I will discuss about how I learnt to type as fast as 150 wpm. This video will give you an exact roadmap needed to type at the speed of 150wpm. You will need the discussed tools along with adequate practice to crack fast typing. \n►Checkout my English channel here: https://www.youtube.com/ProgrammingWithHarry\n►Click here to subscribe - https://www.youtube.com/channel/UCeVMnSShP_Iviwkknt83cww\n\nBest Hindi Videos For Learning Programming:\n►Learn Python In One Video - https://www.youtube.com/watch?v=ihk_Xglr164\n\n►Python Complete Course In Hindi - https://www.youtube.com/playlist?list=PLu0W_9lII9agICnT8t4iYVSZ3eykIAOME\n\n►C Language Complete Course In Hindi -  \nhttps://www.youtube.com/playlist?list=PLu0W_9lII9aiXlHcLx-mDH1Qul38wD3aR&disable_polymer=true\n\n►JavaScript Complete Course In Hindi - \n https://www.youtube.com/playlist?list=PLu0W_9lII9ajyk081To1Cbt2eI5913SsL\n\n►Learn JavaScript in One Video - https://www.youtube.com/watch?v=onbBV0uFVpo\n\n►Learn PHP In One Video - https://www.youtube.com/watch?v=xW7ro3lwaCI\n\n►Django Complete Course In Hindi -  \nhttps://www.youtube.com/playlist?list=PLu0W_9lII9ah7DDtYtflgwMwpT3xmjXY9\n\n►Machine Learning Using Python - https://www.youtube.com/playlist?list=PLu0W_9lII9ai6fAMHp-acBmJONT7Y4BSG\n\n►Creating & Hosting A Website (Tech Blog) Using Python - https://www.youtube.com/playlist?list=PLu0W_9lII9agAiWp6Y41ueUKx1VcTRxmf\n\n►Advanced Python Tutorials - https://www.youtube.com/playlist?list=PLu0W_9lII9aiJWQ7VhY712fuimEpQZYp4\n\n►Object Oriented Programming In Python - https://www.youtube.com/playlist?list=PLu0W_9lII9ahfRrhFcoB-4lpp9YaBmdCP\n\n►Python Data Science and Big Data Tutorials - https://www.youtube.com/playlist?list=PLu0W_9lII9agK8pojo23OHiNz3Jm6VQCH\n\nFollow Me On Social Media\n►Website (created using Flask) - http://www.codewithharry.com\n►Facebook - https://www.facebook.com/CodeWithHarry\n►Instagram - https://www.instagram.com/codewithharry/\n►Personal Facebook A/c - https://www.facebook.com/geekyharis\nTwitter - https://twitter.com/Haris_Is_Here"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT23M23S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "true",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "5365201",
        "likeCount": "184028",
        "favoriteCount": "0",
        "commentCount": "5132"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "sWigpYgDJkbV1TefGce0TA0ODHg",
      "id": "comQ1-x2a1Q",
      "snippet": {
        "publishedAt": "2019-01-09T15:28:29Z",
        "channelId": "UC8butISFwT-Wl7EV0hUK0BQ",
        "title": "Swift Tutorial - Full Course for Beginners",
        "description": "Learn how to code with Swift in this full tutorial course for beginners. Swift is a powerful and intuitive programming language for macOS, iOS, watchOS and tvOS.\n\nThis course covers all the core concepts of Swift including:\nVariables and Constants, Data Types, Properties, Functions and Parameters, Classes, IF Statements, and more.\n\nCourse from Code With Chris. Check out their YouTube channel: https://www.youtube.com/user/codewithchris\n\nThe Code With Chris Facebook community: https://www.facebook.com/groups/codewithchriscommunity/\n\n--\n\nLearn to code for free and get a developer job: https://www.freecodecamp.org\n\nRead hundreds of articles on programming: https://medium.freecodecamp.org \n\n❤️ Support for this channel comes from our friends at Scrimba – the coding platform that's reinvented interactive learning: https://scrimba.com/freecodecamp",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/comQ1-x2a1Q/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/comQ1-x2a1Q/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/comQ1-x2a1Q/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/comQ1-x2a1Q/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/comQ1-x2a1Q/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "freeCodeCamp.org",
        "tags": [
          "swift course",
          "swift programming",
          "swift tutorial",
          "learn swift",
          "swift programming language",
          "ios",
          "ios development",
          "swift tutorial for beginners",
          "swift course for beginners",
          "ios programming"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "Swift Tutorial - Full Course for Beginners",
          "description": "Learn how to code with Swift in this full tutorial course for beginners. Swift is a powerful and intuitive programming language for macOS, iOS, watchOS and tvOS.\n\nThis course covers all the core concepts of Swift including:\nVariables and Constants, Data Types, Properties, Functions and Parameters, Classes, IF Statements, and more.\n\nCourse from Code With Chris. Check out their YouTube channel: https://www.youtube.com/user/codewithchris\n\nThe Code With Chris Facebook community: https://www.facebook.com/groups/codewithchriscommunity/\n\n--\n\nLearn to code for free and get a developer job: https://www.freecodecamp.org\n\nRead hundreds of articles on programming: https://medium.freecodecamp.org \n\n❤️ Support for this channel comes from our friends at Scrimba – the coding platform that's reinvented interactive learning: https://scrimba.com/freecodecamp"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT3H9M58S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "565487",
        "likeCount": "8360",
        "favoriteCount": "0",
        "commentCount": "257"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "nS2Jyidj718xYy9JHd-gDL46eoA",
      "id": "8Xg7E9shq0U",
      "snippet": {
        "publishedAt": "2022-12-07T16:01:04Z",
        "channelId": "UC8butISFwT-Wl7EV0hUK0BQ",
        "title": "Swift Programming Tutorial – Full Course for Beginners",
        "description": "Learn the Swift programming language in this full tutorial for beginners. \n\nIn this video, we will go through every modern aspect of Swift as a programming language including, variables, constants, functions, structures, classes, protocols. extensions, asynchronous programming, generics and much more. This video will lay the foundation for learning Swift for those who are not familiar with Swift already.\n\nYou can follow along with this video on macOS, Linux and Windows. On Linux and Windows you will need to download the Swift toolchain from https://swift.org and run the examples manually by invoking Swift from Terminal using your favorite code editor such as Visual Studio Code.\n\n✏️ Vandad Nahavandipoor created this course. \nVandad on YouTube: https://youtube.com/c/vandadnp\nVandad on Twitter: https://twitter.com/vandadnp\nVandad on LinkedIn: https://linkedin.com/in/vandadnp\n\n⭐️ Contents ⭐️\n⌨️ (0:00:00) Introduction\n⌨️ (0:06:49) Variables\n⌨️ (0:29:46) Operators\n⌨️ (0:46:55) If and else\n⌨️ (1:05:08) Functions\n⌨️ (1:23:58) Closures\n⌨️ (1:52:08) Structures\n⌨️ (2:17:58) Enumerations\n⌨️ (2:59:21) Classes\n⌨️ (3:24:51) Protocols\n⌨️ (3:47:48) Extensions\n⌨️ (4:00:06) Generics\n⌨️ (4:32:44) Optionals\n⌨️ (4:53:39) Error Handling\n⌨️ (5:39:35) Collections\n⌨️ (6:17:17) Equality and Hashing\n⌨️ (6:38:46) Custom Operators\n⌨️ (6:50:53) Asynchronous Programming\n⌨️ (7:04:38) Outro\n\n🎉 Thanks to our Champion and Sponsor supporters:\n👾 Nattira Maneerat\n👾 Heather Wcislo\n👾 Serhiy Kalinets\n👾 Erdeniz Unvan\n👾 Justin Hual\n👾 Agustín Kussrow\n👾 Otis Morgan\n\n--\n\nLearn to code for free and get a developer job: https://www.freecodecamp.org\n\nRead hundreds of articles on programming: https://freecodecamp.org/news \n\n❤️ Support for this channel comes from our friends at Scrimba – the coding platform that's reinvented interactive learning: https://scrimba.com/freecodecamp",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/8Xg7E9shq0U/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/8Xg7E9shq0U/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/8Xg7E9shq0U/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/8Xg7E9shq0U/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/8Xg7E9shq0U/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "freeCodeCamp.org",
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "Swift Programming Tutorial – Full Course for Beginners",
          "description": "Learn the Swift programming language in this full tutorial for beginners. \n\nIn this video, we will go through every modern aspect of Swift as a programming language including, variables, constants, functions, structures, classes, protocols. extensions, asynchronous programming, generics and much more. This video will lay the foundation for learning Swift for those who are not familiar with Swift already.\n\nYou can follow along with this video on macOS, Linux and Windows. On Linux and Windows you will need to download the Swift toolchain from https://swift.org and run the examples manually by invoking Swift from Terminal using your favorite code editor such as Visual Studio Code.\n\n✏️ Vandad Nahavandipoor created this course. \nVandad on YouTube: https://youtube.com/c/vandadnp\nVandad on Twitter: https://twitter.com/vandadnp\nVandad on LinkedIn: https://linkedin.com/in/vandadnp\n\n⭐️ Contents ⭐️\n⌨️ (0:00:00) Introduction\n⌨️ (0:06:49) Variables\n⌨️ (0:29:46) Operators\n⌨️ (0:46:55) If and else\n⌨️ (1:05:08) Functions\n⌨️ (1:23:58) Closures\n⌨️ (1:52:08) Structures\n⌨️ (2:17:58) Enumerations\n⌨️ (2:59:21) Classes\n⌨️ (3:24:51) Protocols\n⌨️ (3:47:48) Extensions\n⌨️ (4:00:06) Generics\n⌨️ (4:32:44) Optionals\n⌨️ (4:53:39) Error Handling\n⌨️ (5:39:35) Collections\n⌨️ (6:17:17) Equality and Hashing\n⌨️ (6:38:46) Custom Operators\n⌨️ (6:50:53) Asynchronous Programming\n⌨️ (7:04:38) Outro\n\n🎉 Thanks to our Champion and Sponsor supporters:\n👾 Nattira Maneerat\n👾 Heather Wcislo\n👾 Serhiy Kalinets\n👾 Erdeniz Unvan\n👾 Justin Hual\n👾 Agustín Kussrow\n👾 Otis Morgan\n\n--\n\nLearn to code for free and get a developer job: https://www.freecodecamp.org\n\nRead hundreds of articles on programming: https://freecodecamp.org/news \n\n❤️ Support for this channel comes from our friends at Scrimba – the coding platform that's reinvented interactive learning: https://scrimba.com/freecodecamp"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT7H5M17S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "483630",
        "likeCount": "10348",
        "favoriteCount": "0",
        "commentCount": "227"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "yUa1WuD1BHzCDSG4JqY9adA2K9U",
      "id": "CwA1VWP0Ldw",
      "snippet": {
        "publishedAt": "2022-10-08T14:42:34Z",
        "channelId": "UCbTw29mcP12YlTt1EpUaVJw",
        "title": "Swift Programming Tutorial | FULL COURSE | Absolute Beginner",
        "description": "My Swift & SwiftUI Courses - https://seanallen.teachable.com/?video=CwA1VWP0Ldw\nSwift News Newsletter - https://swiftnews.kit.com/newsletter\n\nNeed help with something specific? Book a call with me:\nhttps://seanallen.teachable.com/p/call?video=CwA1VWP0Ldw\n\nWhen you've finished this course, try my SwiftUI Fundamentals course which is now free:\nhttps://www.youtube.com/watch?v=b1oC7sLIgpI\n\nMy Formula 1 App:\nhttps://apps.apple.com/app/formula-widgets-push-push/id6744127751\n \nMy other iOS Developer Courses\nhttps://seanallen.teachable.com/\n\nCard Deck Assets:\nhttps://www.dropbox.com/sh/ygwlohcppk0c8dv/AACDU3NSO8oK8i74SNXDY68Ta?dl=0\n\nSwiftUI Video Thumbnail Assets:\nhttps://www.dropbox.com/sh/cpp1ibizedt6f9t/AABJHoTqiQf_-A1n1aMUpKpla?dl=0\n\nhttps://seanallen.co\n\nTwitter:\nhttps://twitter.com/seanallen_dev\n\nHired.com:\nhttps://hired.com/x/1n01g\n\nBook and learning recommendations that help out the channel if you decide to purchase (Affiliate Links):\n\nPaul Hudson's Hacking With Swift:\nhttps://gumroad.com/a/762098803\n\nDonny Wals - Combine:\nhttps://gumroad.com/a/909014131\n\nMark Moeyken’s SwiftUI Books:\nwww.bigmountainstudio.com/swiftui-views-book/fzc51\n\nObjc.io Books (Thinking in SwiftUI & Advanced Swift):\nhttps://gumroad.com/a/656585843\n\nRay Wenderlich Books:\nhttps://store.raywenderlich.com/a/20866/link/1\n\nCurriculum Timestamps:\n00:00:00 - Course overview\n00:05:36 - I was just like you\n00:13:48 - What is Xcode?\n00:19:47 - SwiftUI or UIKit (2020)\n00:22:27 - SwiftUI or UIKit (2021)\n00:26:00 - Intro to Swift Language\n00:33:30 - Swift Types\n00:37:15 - Variables\n00:42:10 - Array\n00:49:37 - Set\n00:57:59 - Dictionary\n01:02:25 - Functions\n01:14:50 - if / else\n01:21:15 - For Loops\n01:30:29 - Enum\n01:40:27 - Switch Statement\n01:48:49 - Operators\n02:01:45 - Optionals\n02:12:46 - Self\n02:15:27 - Class\n02:23:36 - Inheritance\n02:31:31 - Struct\n02:36:45 - Extension\n02:40:30 - Apple Developer Program\n02:43:54 - Tour of Xcode\n02:58:56 - What’s New in Xcode 12\n03:08:07 - What’s New in Xcode 13\n03:24:59 - What’s New in Xcode 14\n03:34:54 - What is Auto Layout?\n03:38:38 - What is UIKit?\n03:55:05 - Storyboard vs. Programmatic UI\n04:01:16 - FizzBuzz Challenge\n04:09:27 - Colors App Intro\n04:10:39 - Colors App - Navigation\n04:25:02 - Colors App - UITableView\n04:36:37 - Colors App - Code\n05:05:56 - Card Workout App - Intro\n05:08:53 - Card Workout App - Storyboard UI\n05:21:20 - Card Workout App - IBOutlets\n05:41:49 - Card Workout App - Storyboard Logic\n05:59:27 - iOS 15 Storyboard Buttons\n06:08:05 - Programmatic UI - Setup\n06:17:37 - Programmatic UIButtons\n06:25:55 - Card Workout App - Card Selection\n06:44:29 - Card Workout App - Rules Screen\n07:04:07 - Card Workout App - Logic\n07:13:52 - iOS 15 Update - UIButtons\n07:24:24 - SwiftUI Overview\n07:34:06 - SwiftUI Example\n08:00:29 - General Knowledge Section Intro\n08:01:57 - How Apps Work\n08:05:34 - What is an API?\n08:10:00 - What is Version Control?\n08:19:34 - 3rd Party Libraries\n08:25:56 - What are Edge Cases?\n08:30:55 - iOS Dev Career Paths\n08:36:48 - World of iOS Dev\n08:38:31 - Why WWDC is the best\n08:45:02 - Twitter will change your career\n08:55:30 - Swift blogs & websites\n09:03:47 - Book Recommendations\n09:10:40 - Podcast Recommendations\n09:20:23 - Next Steps\n09:26:18 - Thank You!\n09:29:04 - Bonus: Homeless to $130k iOS Dev\n09:46:21 - Bonus: 37 Tips for Jr. Developers\n10:01:04 - Bonus: I’m an Average Developer\n10:06:34 - Bonus: 9 Things I Wish I Knew When I Started\n10:16:46 - Bonus: How to Gain Confidence as a Dev\n10:25:56 - Bonus: The 90/90 Rule\n\n#swift #softwaredeveloper #iosdeveloper",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/CwA1VWP0Ldw/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/CwA1VWP0Ldw/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/CwA1VWP0Ldw/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/CwA1VWP0Ldw/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/CwA1VWP0Ldw/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Sean Allen",
        "tags": [
          "Swift",
          "Swift Tutorial",
          "iOS Developer",
          "iOS Development",
          "Swift app tutorial",
          "swift beginner",
          "beginner swift",
          "swift beginner tutorial",
          "swift beginner app",
          "swift beginner course",
          "beginner swift programming",
          "beginner swift tutorial",
          "beginner swift projects",
          "iOS swift beginner",
          "iOS development course",
          "iOS development for beginners",
          "swift first app",
          "Swift programming language",
          "What is swift",
          "Xcode for beginners",
          "Swift programming course",
          "Swift for beginners",
          "iOS dev for beginners"
        ],
        "categoryId": "28",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "Swift Programming Tutorial | FULL COURSE | Absolute Beginner",
          "description": "My Swift & SwiftUI Courses - https://seanallen.teachable.com/?video=CwA1VWP0Ldw\nSwift News Newsletter - https://swiftnews.kit.com/newsletter\n\nNeed help with something specific? Book a call with me:\nhttps://seanallen.teachable.com/p/call?video=CwA1VWP0Ldw\n\nWhen you've finished this course, try my SwiftUI Fundamentals course which is now free:\nhttps://www.youtube.com/watch?v=b1oC7sLIgpI\n\nMy Formula 1 App:\nhttps://apps.apple.com/app/formula-widgets-push-push/id6744127751\n \nMy other iOS Developer Courses\nhttps://seanallen.teachable.com/\n\nCard Deck Assets:\nhttps://www.dropbox.com/sh/ygwlohcppk0c8dv/AACDU3NSO8oK8i74SNXDY68Ta?dl=0\n\nSwiftUI Video Thumbnail Assets:\nhttps://www.dropbox.com/sh/cpp1ibizedt6f9t/AABJHoTqiQf_-A1n1aMUpKpla?dl=0\n\nhttps://seanallen.co\n\nTwitter:\nhttps://twitter.com/seanallen_dev\n\nHired.com:\nhttps://hired.com/x/1n01g\n\nBook and learning recommendations that help out the channel if you decide to purchase (Affiliate Links):\n\nPaul Hudson's Hacking With Swift:\nhttps://gumroad.com/a/762098803\n\nDonny Wals - Combine:\nhttps://gumroad.com/a/909014131\n\nMark Moeyken’s SwiftUI Books:\nwww.bigmountainstudio.com/swiftui-views-book/fzc51\n\nObjc.io Books (Thinking in SwiftUI & Advanced Swift):\nhttps://gumroad.com/a/656585843\n\nRay Wenderlich Books:\nhttps://store.raywenderlich.com/a/20866/link/1\n\nCurriculum Timestamps:\n00:00:00 - Course overview\n00:05:36 - I was just like you\n00:13:48 - What is Xcode?\n00:19:47 - SwiftUI or UIKit (2020)\n00:22:27 - SwiftUI or UIKit (2021)\n00:26:00 - Intro to Swift Language\n00:33:30 - Swift Types\n00:37:15 - Variables\n00:42:10 - Array\n00:49:37 - Set\n00:57:59 - Dictionary\n01:02:25 - Functions\n01:14:50 - if / else\n01:21:15 - For Loops\n01:30:29 - Enum\n01:40:27 - Switch Statement\n01:48:49 - Operators\n02:01:45 - Optionals\n02:12:46 - Self\n02:15:27 - Class\n02:23:36 - Inheritance\n02:31:31 - Struct\n02:36:45 - Extension\n02:40:30 - Apple Developer Program\n02:43:54 - Tour of Xcode\n02:58:56 - What’s New in Xcode 12\n03:08:07 - What’s New in Xcode 13\n03:24:59 - What’s New in Xcode 14\n03:34:54 - What is Auto Layout?\n03:38:38 - What is UIKit?\n03:55:05 - Storyboard vs. Programmatic UI\n04:01:16 - FizzBuzz Challenge\n04:09:27 - Colors App Intro\n04:10:39 - Colors App - Navigation\n04:25:02 - Colors App - UITableView\n04:36:37 - Colors App - Code\n05:05:56 - Card Workout App - Intro\n05:08:53 - Card Workout App - Storyboard UI\n05:21:20 - Card Workout App - IBOutlets\n05:41:49 - Card Workout App - Storyboard Logic\n05:59:27 - iOS 15 Storyboard Buttons\n06:08:05 - Programmatic UI - Setup\n06:17:37 - Programmatic UIButtons\n06:25:55 - Card Workout App - Card Selection\n06:44:29 - Card Workout App - Rules Screen\n07:04:07 - Card Workout App - Logic\n07:13:52 - iOS 15 Update - UIButtons\n07:24:24 - SwiftUI Overview\n07:34:06 - SwiftUI Example\n08:00:29 - General Knowledge Section Intro\n08:01:57 - How Apps Work\n08:05:34 - What is an API?\n08:10:00 - What is Version Control?\n08:19:34 - 3rd Party Libraries\n08:25:56 - What are Edge Cases?\n08:30:55 - iOS Dev Career Paths\n08:36:48 - World of iOS Dev\n08:38:31 - Why WWDC is the best\n08:45:02 - Twitter will change your career\n08:55:30 - Swift blogs & websites\n09:03:47 - Book Recommendations\n09:10:40 - Podcast Recommendations\n09:20:23 - Next Steps\n09:26:18 - Thank You!\n09:29:04 - Bonus: Homeless to $130k iOS Dev\n09:46:21 - Bonus: 37 Tips for Jr. Developers\n10:01:04 - Bonus: I’m an Average Developer\n10:06:34 - Bonus: 9 Things I Wish I Knew When I Started\n10:16:46 - Bonus: How to Gain Confidence as a Dev\n10:25:56 - Bonus: The 90/90 Rule\n\n#swift #softwaredeveloper #iosdeveloper"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT10H32M30S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "656564",
        "likeCount": "15754",
        "favoriteCount": "0",
        "commentCount": "871"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "sWigpYgDJkbV1TefGce0TA0ODHg",
      "id": "comQ1-x2a1Q",
      "snippet": {
        "publishedAt": "2019-01-09T15:28:29Z",
        "channelId": "UC8butISFwT-Wl7EV0hUK0BQ",
        "title": "Swift Tutorial - Full Course for Beginners",
        "description": "Learn how to code with Swift in this full tutorial course for beginners. Swift is a powerful and intuitive programming language for macOS, iOS, watchOS and tvOS.\n\nThis course covers all the core concepts of Swift including:\nVariables and Constants, Data Types, Properties, Functions and Parameters, Classes, IF Statements, and more.\n\nCourse from Code With Chris. Check out their YouTube channel: https://www.youtube.com/user/codewithchris\n\nThe Code With Chris Facebook community: https://www.facebook.com/groups/codewithchriscommunity/\n\n--\n\nLearn to code for free and get a developer job: https://www.freecodecamp.org\n\nRead hundreds of articles on programming: https://medium.freecodecamp.org \n\n❤️ Support for this channel comes from our friends at Scrimba – the coding platform that's reinvented interactive learning: https://scrimba.com/freecodecamp",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/comQ1-x2a1Q/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/comQ1-x2a1Q/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/comQ1-x2a1Q/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/comQ1-x2a1Q/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/comQ1-x2a1Q/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "freeCodeCamp.org",
        "tags": [
          "swift course",
          "swift programming",
          "swift tutorial",
          "learn swift",
          "swift programming language",
          "ios",
          "ios development",
          "swift tutorial for beginners",
          "swift course for beginners",
          "ios programming"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "Swift Tutorial - Full Course for Beginners",
          "description": "Learn how to code with Swift in this full tutorial course for beginners. Swift is a powerful and intuitive programming language for macOS, iOS, watchOS and tvOS.\n\nThis course covers all the core concepts of Swift including:\nVariables and Constants, Data Types, Properties, Functions and Parameters, Classes, IF Statements, and more.\n\nCourse from Code With Chris. Check out their YouTube channel: https://www.youtube.com/user/codewithchris\n\nThe Code With Chris Facebook community: https://www.facebook.com/groups/codewithchriscommunity/\n\n--\n\nLearn to code for free and get a developer job: https://www.freecodecamp.org\n\nRead hundreds of articles on programming: https://medium.freecodecamp.org \n\n❤️ Support for this channel comes from our friends at Scrimba – the coding platform that's reinvented interactive learning: https://scrimba.com/freecodecamp"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT3H9M58S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "565487",
        "likeCount": "8360",
        "favoriteCount": "0",
        "commentCount": "257"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "6mn2BUiRdVw3AltJLnfObsi3f4c",
      "id": "n5X_V81OYnQ",
      "snippet": {
        "publishedAt": "2021-10-15T21:23:32Z",
        "channelId": "UCmJi5RdDLgzvkl3Ly0DRMlQ",
        "title": "Learn the Essentials of Swift in one hour",
        "description": "This video walks through all the essential language features of Swift in just under one hour, and is aimed at two groups of people: folks who have completed up to day 14 of the 100 Days of SwiftUI and want to review what they've learned, and developers with extensive experience of other languages who want to transfer their knowledge to Swift quickly.\n\nThis video is very fast! If you're struggling to understand concepts such as arrays, functions, closures, and similar, you should consider following the videos in my 100 Days of SwiftUI course at https://www.hackingwithswift.com/100/swiftui – they are much slower, providing much more explanation and example code along the way.\n\n00:00 Introduction\n01:21 Creating constants and variables, \n01:59 Strings\n03:38 Integers\n04:38 Decimals\n05:01 Booleans\n05:23 Joining strings \n05:59 Arrays\n07:39 Dictionaries\n08:16 Sets\n09:10 Enums\n09:40 Type annotations\n11:50 Conditions\n12:46 Switch statements\n13:25 The ternary conditional operator\n13:55 Loops\n16:24 Functions\n17:39 Returning multiple values from functions\n18:45 Customizing parameter labels\n19:52 Providing default values for parameters\n20:38 Handling errors in functions\n22:46 Closures\n25:02 Trailing closures and shorthand syntax\n26:22 Structs\n27:43 Computed properties\n28:37 Property observers\n29:16 Custom initializers\n30:10 Access control\n31:56 Static properties and methods\n32:42 Classes\n39:49 Protocols\n43:49 Extensions\n46:00 Protocol extensions\n49:31 Optionals\n49:31 Unwrapping optionals with guard\n51:34 Nil coalescing\n53:06 Optional chaining\n54:09 Optional try?\n55:37 Wrap up\n56:52 Dog reward",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/n5X_V81OYnQ/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/n5X_V81OYnQ/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/n5X_V81OYnQ/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/n5X_V81OYnQ/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/n5X_V81OYnQ/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Paul Hudson",
        "categoryId": "28",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "Learn the Essentials of Swift in one hour",
          "description": "This video walks through all the essential language features of Swift in just under one hour, and is aimed at two groups of people: folks who have completed up to day 14 of the 100 Days of SwiftUI and want to review what they've learned, and developers with extensive experience of other languages who want to transfer their knowledge to Swift quickly.\n\nThis video is very fast! If you're struggling to understand concepts such as arrays, functions, closures, and similar, you should consider following the videos in my 100 Days of SwiftUI course at https://www.hackingwithswift.com/100/swiftui – they are much slower, providing much more explanation and example code along the way.\n\n00:00 Introduction\n01:21 Creating constants and variables, \n01:59 Strings\n03:38 Integers\n04:38 Decimals\n05:01 Booleans\n05:23 Joining strings \n05:59 Arrays\n07:39 Dictionaries\n08:16 Sets\n09:10 Enums\n09:40 Type annotations\n11:50 Conditions\n12:46 Switch statements\n13:25 The ternary conditional operator\n13:55 Loops\n16:24 Functions\n17:39 Returning multiple values from functions\n18:45 Customizing parameter labels\n19:52 Providing default values for parameters\n20:38 Handling errors in functions\n22:46 Closures\n25:02 Trailing closures and shorthand syntax\n26:22 Structs\n27:43 Computed properties\n28:37 Property observers\n29:16 Custom initializers\n30:10 Access control\n31:56 Static properties and methods\n32:42 Classes\n39:49 Protocols\n43:49 Extensions\n46:00 Protocol extensions\n49:31 Optionals\n49:31 Unwrapping optionals with guard\n51:34 Nil coalescing\n53:06 Optional chaining\n54:09 Optional try?\n55:37 Wrap up\n56:52 Dog reward"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT58M14S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": false,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "264467",
        "likeCount": "7969",
        "favoriteCount": "0",
        "commentCount": "238"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "gTkTGy5DkD9fCUSJIAcmWQPEKLE",
      "id": "FcsY1YPBwzQ",
      "snippet": {
        "publishedAt": "2019-06-07T14:00:02Z",
        "channelId": "UC2D6eRvCeMtcF5OGHf1-trw",
        "title": "Learn Swift Fast (2020) - Full Course For Beginners",
        "description": "If you want to learn swift fast, this is the course for you! Learn Swift programming with this 3 hour course that will take you from beginner to a solid understanding of how to program in Swift!\n\nThis Swift tutorial is perfect even for beginners with no programming experience! You'll be taken through the basics and build up skills layer by layer.\n\n🚨 SPECIAL CWC+ OFFER FOR YOUTUBE:\nhttps://cwc.to/youtubeoffer\n\nThis Swift course also comes with notes, cheatsheets, exercises and solutions which you can download here:\nhttps://codewithchris.com/swift-tutorial-resources/\n\n𝗖𝗵𝗮𝗽𝘁𝗲𝗿𝘀 & 𝗧𝗶𝗺𝗲𝘀𝘁𝗮𝗺𝗽𝘀\n-------------------------------------\n00:00 Intro\n0:20 Lesson 1 - Start Here\n21:50 Lesson 2 - Data Types\n29:50 Lesson 3 - If Statements\n46:04 Lesson 4 - Switch Statements\n53:17 Lesson 5 - Loops (Part 1)\n1:03:19 Lesson 6 - Loops (Part 2)\n1:11:50 Lesson 7 - Functions (Part 1)\n1:19:16 Lesson 8 - Functions (Part 2)\n1:32:02 Lesson 9 - Classes\n1:42:28 Lesson 10 - Classes Inheritance\n1:51:34 Lesson 11 - UI Kit\n1:57:08 Lesson 12 - Initializers\n2:06:23 Lesson 13 - Optionals\n2:27:59 Lesson 14 - Properties\n2:34:42 Lesson 15 - Designated & Convenience Initializers\n2:42:42 Lesson 16 - Arrays\n2:58:38 Lesson 17 -Dictionaries\n\nThis course will teach you using Swift 5 and Xcode.\n_________________ \nFREE RESOURCES (download links)\n\nResources, Code, Bonus Videos and Recap Notes:\n📓 https://codewithchris.com/swift-tutorial-resources/\n\nMY FREE ONLINE COURSE:\n⚡ How to make an app in 14 days - https://cwc.to/14days\n\nCWC+ PROGRAM:\n👩\u200d💻 All our courses in a learning path - https://cwc.to/plus\n\nWEEKLY UPDATES VIA EMAIL:\n✉️ Every Saturday, receive an email digest of new content - https://cwc.to/newsletter\n\nCONNECT:\n🌍 Website - https://codewithchris.com\n😺 GitHub - https://github.com/codewithchris\n📸 Instagram - https://www.instagram.com/codewithchris/\n🐦 Twitter - https://twitter.com/codewithchris\n\nABOUT CODEWITHCHRIS:\nHi I’m Chris! I’m dedicated to teaching fundamentals about how to make an app. This is important if you’re trying to land an iOS job, be a freelancer, increase or start a business with an app idea. On this channel and my website, you'll find a ton of free resources and tutorials to aid you on your journey to learn iOS development. Many people have learned to code and build apps on their own! https://cwc.to/reviews\n\n#LearnSwift #SwiftTutorial #CodeWithChris",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/FcsY1YPBwzQ/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/FcsY1YPBwzQ/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/FcsY1YPBwzQ/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/FcsY1YPBwzQ/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/FcsY1YPBwzQ/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "CodeWithChris",
        "tags": [
          "learn swift",
          "learn swift programming",
          "learn swift 5",
          "learn swift in one video",
          "learn swift programming language",
          "learn swift fast",
          "swift tutorial",
          "swift 5",
          "swift programming",
          "swift tutorial for beginners",
          "learn swift 2019",
          "learn swift with bob",
          "learn swift ios",
          "learn swift for beginners",
          "ios",
          "app development",
          "mobile development",
          "apps",
          "developer",
          "programming",
          "tutorial",
          "code",
          "ios development",
          "learn to code",
          "swift language",
          "learn swift from scratch",
          "swift programming tutorial"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "Learn Swift Fast (2020) - Full Course For Beginners",
          "description": "If you want to learn swift fast, this is the course for you! Learn Swift programming with this 3 hour course that will take you from beginner to a solid understanding of how to program in Swift!\n\nThis Swift tutorial is perfect even for beginners with no programming experience! You'll be taken through the basics and build up skills layer by layer.\n\n🚨 SPECIAL CWC+ OFFER FOR YOUTUBE:\nhttps://cwc.to/youtubeoffer\n\nThis Swift course also comes with notes, cheatsheets, exercises and solutions which you can download here:\nhttps://codewithchris.com/swift-tutorial-resources/\n\n𝗖𝗵𝗮𝗽𝘁𝗲𝗿𝘀 & 𝗧𝗶𝗺𝗲𝘀𝘁𝗮𝗺𝗽𝘀\n-------------------------------------\n00:00 Intro\n0:20 Lesson 1 - Start Here\n21:50 Lesson 2 - Data Types\n29:50 Lesson 3 - If Statements\n46:04 Lesson 4 - Switch Statements\n53:17 Lesson 5 - Loops (Part 1)\n1:03:19 Lesson 6 - Loops (Part 2)\n1:11:50 Lesson 7 - Functions (Part 1)\n1:19:16 Lesson 8 - Functions (Part 2)\n1:32:02 Lesson 9 - Classes\n1:42:28 Lesson 10 - Classes Inheritance\n1:51:34 Lesson 11 - UI Kit\n1:57:08 Lesson 12 - Initializers\n2:06:23 Lesson 13 - Optionals\n2:27:59 Lesson 14 - Properties\n2:34:42 Lesson 15 - Designated & Convenience Initializers\n2:42:42 Lesson 16 - Arrays\n2:58:38 Lesson 17 -Dictionaries\n\nThis course will teach you using Swift 5 and Xcode.\n_________________ \nFREE RESOURCES (download links)\n\nResources, Code, Bonus Videos and Recap Notes:\n📓 https://codewithchris.com/swift-tutorial-resources/\n\nMY FREE ONLINE COURSE:\n⚡ How to make an app in 14 days - https://cwc.to/14days\n\nCWC+ PROGRAM:\n👩\u200d💻 All our courses in a learning path - https://cwc.to/plus\n\nWEEKLY UPDATES VIA EMAIL:\n✉️ Every Saturday, receive an email digest of new content - https://cwc.to/newsletter\n\nCONNECT:\n🌍 Website - https://codewithchris.com\n😺 GitHub - https://github.com/codewithchris\n📸 Instagram - https://www.instagram.com/codewithchris/\n🐦 Twitter - https://twitter.com/codewithchris\n\nABOUT CODEWITHCHRIS:\nHi I’m Chris! I’m dedicated to teaching fundamentals about how to make an app. This is important if you’re trying to land an iOS job, be a freelancer, increase or start a business with an app idea. On this channel and my website, you'll find a ton of free resources and tutorials to aid you on your journey to learn iOS development. Many people have learned to code and build apps on their own! https://cwc.to/reviews\n\n#LearnSwift #SwiftTutorial #CodeWithChris"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT3H8M8S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "true",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "387886",
        "likeCount": "7929",
        "favoriteCount": "0",
        "commentCount": "641"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "nS2Jyidj718xYy9JHd-gDL46eoA",
      "id": "8Xg7E9shq0U",
      "snippet": {
        "publishedAt": "2022-12-07T16:01:04Z",
        "channelId": "UC8butISFwT-Wl7EV0hUK0BQ",
        "title": "Swift Programming Tutorial – Full Course for Beginners",
        "description": "Learn the Swift programming language in this full tutorial for beginners. \n\nIn this video, we will go through every modern aspect of Swift as a programming language including, variables, constants, functions, structures, classes, protocols. extensions, asynchronous programming, generics and much more. This video will lay the foundation for learning Swift for those who are not familiar with Swift already.\n\nYou can follow along with this video on macOS, Linux and Windows. On Linux and Windows you will need to download the Swift toolchain from https://swift.org and run the examples manually by invoking Swift from Terminal using your favorite code editor such as Visual Studio Code.\n\n✏️ Vandad Nahavandipoor created this course. \nVandad on YouTube: https://youtube.com/c/vandadnp\nVandad on Twitter: https://twitter.com/vandadnp\nVandad on LinkedIn: https://linkedin.com/in/vandadnp\n\n⭐️ Contents ⭐️\n⌨️ (0:00:00) Introduction\n⌨️ (0:06:49) Variables\n⌨️ (0:29:46) Operators\n⌨️ (0:46:55) If and else\n⌨️ (1:05:08) Functions\n⌨️ (1:23:58) Closures\n⌨️ (1:52:08) Structures\n⌨️ (2:17:58) Enumerations\n⌨️ (2:59:21) Classes\n⌨️ (3:24:51) Protocols\n⌨️ (3:47:48) Extensions\n⌨️ (4:00:06) Generics\n⌨️ (4:32:44) Optionals\n⌨️ (4:53:39) Error Handling\n⌨️ (5:39:35) Collections\n⌨️ (6:17:17) Equality and Hashing\n⌨️ (6:38:46) Custom Operators\n⌨️ (6:50:53) Asynchronous Programming\n⌨️ (7:04:38) Outro\n\n🎉 Thanks to our Champion and Sponsor supporters:\n👾 Nattira Maneerat\n👾 Heather Wcislo\n👾 Serhiy Kalinets\n👾 Erdeniz Unvan\n👾 Justin Hual\n👾 Agustín Kussrow\n👾 Otis Morgan\n\n--\n\nLearn to code for free and get a developer job: https://www.freecodecamp.org\n\nRead hundreds of articles on programming: https://freecodecamp.org/news \n\n❤️ Support for this channel comes from our friends at Scrimba – the coding platform that's reinvented interactive learning: https://scrimba.com/freecodecamp",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/8Xg7E9shq0U/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/8Xg7E9shq0U/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/8Xg7E9shq0U/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/8Xg7E9shq0U/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/8Xg7E9shq0U/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "freeCodeCamp.org",
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "Swift Programming Tutorial – Full Course for Beginners",
          "description": "Learn the Swift programming language in this full tutorial for beginners. \n\nIn this video, we will go through every modern aspect of Swift as a programming language including, variables, constants, functions, structures, classes, protocols. extensions, asynchronous programming, generics and much more. This video will lay the foundation for learning Swift for those who are not familiar with Swift already.\n\nYou can follow along with this video on macOS, Linux and Windows. On Linux and Windows you will need to download the Swift toolchain from https://swift.org and run the examples manually by invoking Swift from Terminal using your favorite code editor such as Visual Studio Code.\n\n✏️ Vandad Nahavandipoor created this course. \nVandad on YouTube: https://youtube.com/c/vandadnp\nVandad on Twitter: https://twitter.com/vandadnp\nVandad on LinkedIn: https://linkedin.com/in/vandadnp\n\n⭐️ Contents ⭐️\n⌨️ (0:00:00) Introduction\n⌨️ (0:06:49) Variables\n⌨️ (0:29:46) Operators\n⌨️ (0:46:55) If and else\n⌨️ (1:05:08) Functions\n⌨️ (1:23:58) Closures\n⌨️ (1:52:08) Structures\n⌨️ (2:17:58) Enumerations\n⌨️ (2:59:21) Classes\n⌨️ (3:24:51) Protocols\n⌨️ (3:47:48) Extensions\n⌨️ (4:00:06) Generics\n⌨️ (4:32:44) Optionals\n⌨️ (4:53:39) Error Handling\n⌨️ (5:39:35) Collections\n⌨️ (6:17:17) Equality and Hashing\n⌨️ (6:38:46) Custom Operators\n⌨️ (6:50:53) Asynchronous Programming\n⌨️ (7:04:38) Outro\n\n🎉 Thanks to our Champion and Sponsor supporters:\n👾 Nattira Maneerat\n👾 Heather Wcislo\n👾 Serhiy Kalinets\n👾 Erdeniz Unvan\n👾 Justin Hual\n👾 Agustín Kussrow\n👾 Otis Morgan\n\n--\n\nLearn to code for free and get a developer job: https://www.freecodecamp.org\n\nRead hundreds of articles on programming: https://freecodecamp.org/news \n\n❤️ Support for this channel comes from our friends at Scrimba – the coding platform that's reinvented interactive learning: https://scrimba.com/freecodecamp"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT7H5M17S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "483630",
        "likeCount": "10348",
        "favoriteCount": "0",
        "commentCount": "227"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "yUa1WuD1BHzCDSG4JqY9adA2K9U",
      "id": "CwA1VWP0Ldw",
      "snippet": {
        "publishedAt": "2022-10-08T14:42:34Z",
        "channelId": "UCbTw29mcP12YlTt1EpUaVJw",
        "title": "Swift Programming Tutorial | FULL COURSE | Absolute Beginner",
        "description": "My Swift & SwiftUI Courses - https://seanallen.teachable.com/?video=CwA1VWP0Ldw\nSwift News Newsletter - https://swiftnews.kit.com/newsletter\n\nNeed help with something specific? Book a call with me:\nhttps://seanallen.teachable.com/p/call?video=CwA1VWP0Ldw\n\nWhen you've finished this course, try my SwiftUI Fundamentals course which is now free:\nhttps://www.youtube.com/watch?v=b1oC7sLIgpI\n\nMy Formula 1 App:\nhttps://apps.apple.com/app/formula-widgets-push-push/id6744127751\n \nMy other iOS Developer Courses\nhttps://seanallen.teachable.com/\n\nCard Deck Assets:\nhttps://www.dropbox.com/sh/ygwlohcppk0c8dv/AACDU3NSO8oK8i74SNXDY68Ta?dl=0\n\nSwiftUI Video Thumbnail Assets:\nhttps://www.dropbox.com/sh/cpp1ibizedt6f9t/AABJHoTqiQf_-A1n1aMUpKpla?dl=0\n\nhttps://seanallen.co\n\nTwitter:\nhttps://twitter.com/seanallen_dev\n\nHired.com:\nhttps://hired.com/x/1n01g\n\nBook and learning recommendations that help out the channel if you decide to purchase (Affiliate Links):\n\nPaul Hudson's Hacking With Swift:\nhttps://gumroad.com/a/762098803\n\nDonny Wals - Combine:\nhttps://gumroad.com/a/909014131\n\nMark Moeyken’s SwiftUI Books:\nwww.bigmountainstudio.com/swiftui-views-book/fzc51\n\nObjc.io Books (Thinking in SwiftUI & Advanced Swift):\nhttps://gumroad.com/a/656585843\n\nRay Wenderlich Books:\nhttps://store.raywenderlich.com/a/20866/link/1\n\nCurriculum Timestamps:\n00:00:00 - Course overview\n00:05:36 - I was just like you\n00:13:48 - What is Xcode?\n00:19:47 - SwiftUI or UIKit (2020)\n00:22:27 - SwiftUI or UIKit (2021)\n00:26:00 - Intro to Swift Language\n00:33:30 - Swift Types\n00:37:15 - Variables\n00:42:10 - Array\n00:49:37 - Set\n00:57:59 - Dictionary\n01:02:25 - Functions\n01:14:50 - if / else\n01:21:15 - For Loops\n01:30:29 - Enum\n01:40:27 - Switch Statement\n01:48:49 - Operators\n02:01:45 - Optionals\n02:12:46 - Self\n02:15:27 - Class\n02:23:36 - Inheritance\n02:31:31 - Struct\n02:36:45 - Extension\n02:40:30 - Apple Developer Program\n02:43:54 - Tour of Xcode\n02:58:56 - What’s New in Xcode 12\n03:08:07 - What’s New in Xcode 13\n03:24:59 - What’s New in Xcode 14\n03:34:54 - What is Auto Layout?\n03:38:38 - What is UIKit?\n03:55:05 - Storyboard vs. Programmatic UI\n04:01:16 - FizzBuzz Challenge\n04:09:27 - Colors App Intro\n04:10:39 - Colors App - Navigation\n04:25:02 - Colors App - UITableView\n04:36:37 - Colors App - Code\n05:05:56 - Card Workout App - Intro\n05:08:53 - Card Workout App - Storyboard UI\n05:21:20 - Card Workout App - IBOutlets\n05:41:49 - Card Workout App - Storyboard Logic\n05:59:27 - iOS 15 Storyboard Buttons\n06:08:05 - Programmatic UI - Setup\n06:17:37 - Programmatic UIButtons\n06:25:55 - Card Workout App - Card Selection\n06:44:29 - Card Workout App - Rules Screen\n07:04:07 - Card Workout App - Logic\n07:13:52 - iOS 15 Update - UIButtons\n07:24:24 - SwiftUI Overview\n07:34:06 - SwiftUI Example\n08:00:29 - General Knowledge Section Intro\n08:01:57 - How Apps Work\n08:05:34 - What is an API?\n08:10:00 - What is Version Control?\n08:19:34 - 3rd Party Libraries\n08:25:56 - What are Edge Cases?\n08:30:55 - iOS Dev Career Paths\n08:36:48 - World of iOS Dev\n08:38:31 - Why WWDC is the best\n08:45:02 - Twitter will change your career\n08:55:30 - Swift blogs & websites\n09:03:47 - Book Recommendations\n09:10:40 - Podcast Recommendations\n09:20:23 - Next Steps\n09:26:18 - Thank You!\n09:29:04 - Bonus: Homeless to $130k iOS Dev\n09:46:21 - Bonus: 37 Tips for Jr. Developers\n10:01:04 - Bonus: I’m an Average Developer\n10:06:34 - Bonus: 9 Things I Wish I Knew When I Started\n10:16:46 - Bonus: How to Gain Confidence as a Dev\n10:25:56 - Bonus: The 90/90 Rule\n\n#swift #softwaredeveloper #iosdeveloper",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/CwA1VWP0Ldw/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/CwA1VWP0Ldw/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/CwA1VWP0Ldw/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/CwA1VWP0Ldw/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/CwA1VWP0Ldw/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Sean Allen",
        "tags": [
          "Swift",
          "Swift Tutorial",
          "iOS Developer",
          "iOS Development",
          "Swift app tutorial",
          "swift beginner",
          "beginner swift",
          "swift beginner tutorial",
          "swift beginner app",
          "swift beginner course",
          "beginner swift programming",
          "beginner swift tutorial",
          "beginner swift projects",
          "iOS swift beginner",
          "iOS development course",
          "iOS development for beginners",
          "swift first app",
          "Swift programming language",
          "What is swift",
          "Xcode for beginners",
          "Swift programming course",
          "Swift for beginners",
          "iOS dev for beginners"
        ],
        "categoryId": "28",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "Swift Programming Tutorial | FULL COURSE | Absolute Beginner",
          "description": "My Swift & SwiftUI Courses - https://seanallen.teachable.com/?video=CwA1VWP0Ldw\nSwift News Newsletter - https://swiftnews.kit.com/newsletter\n\nNeed help with something specific? Book a call with me:\nhttps://seanallen.teachable.com/p/call?video=CwA1VWP0Ldw\n\nWhen you've finished this course, try my SwiftUI Fundamentals course which is now free:\nhttps://www.youtube.com/watch?v=b1oC7sLIgpI\n\nMy Formula 1 App:\nhttps://apps.apple.com/app/formula-widgets-push-push/id6744127751\n \nMy other iOS Developer Courses\nhttps://seanallen.teachable.com/\n\nCard Deck Assets:\nhttps://www.dropbox.com/sh/ygwlohcppk0c8dv/AACDU3NSO8oK8i74SNXDY68Ta?dl=0\n\nSwiftUI Video Thumbnail Assets:\nhttps://www.dropbox.com/sh/cpp1ibizedt6f9t/AABJHoTqiQf_-A1n1aMUpKpla?dl=0\n\nhttps://seanallen.co\n\nTwitter:\nhttps://twitter.com/seanallen_dev\n\nHired.com:\nhttps://hired.com/x/1n01g\n\nBook and learning recommendations that help out the channel if you decide to purchase (Affiliate Links):\n\nPaul Hudson's Hacking With Swift:\nhttps://gumroad.com/a/762098803\n\nDonny Wals - Combine:\nhttps://gumroad.com/a/909014131\n\nMark Moeyken’s SwiftUI Books:\nwww.bigmountainstudio.com/swiftui-views-book/fzc51\n\nObjc.io Books (Thinking in SwiftUI & Advanced Swift):\nhttps://gumroad.com/a/656585843\n\nRay Wenderlich Books:\nhttps://store.raywenderlich.com/a/20866/link/1\n\nCurriculum Timestamps:\n00:00:00 - Course overview\n00:05:36 - I was just like you\n00:13:48 - What is Xcode?\n00:19:47 - SwiftUI or UIKit (2020)\n00:22:27 - SwiftUI or UIKit (2021)\n00:26:00 - Intro to Swift Language\n00:33:30 - Swift Types\n00:37:15 - Variables\n00:42:10 - Array\n00:49:37 - Set\n00:57:59 - Dictionary\n01:02:25 - Functions\n01:14:50 - if / else\n01:21:15 - For Loops\n01:30:29 - Enum\n01:40:27 - Switch Statement\n01:48:49 - Operators\n02:01:45 - Optionals\n02:12:46 - Self\n02:15:27 - Class\n02:23:36 - Inheritance\n02:31:31 - Struct\n02:36:45 - Extension\n02:40:30 - Apple Developer Program\n02:43:54 - Tour of Xcode\n02:58:56 - What’s New in Xcode 12\n03:08:07 - What’s New in Xcode 13\n03:24:59 - What’s New in Xcode 14\n03:34:54 - What is Auto Layout?\n03:38:38 - What is UIKit?\n03:55:05 - Storyboard vs. Programmatic UI\n04:01:16 - FizzBuzz Challenge\n04:09:27 - Colors App Intro\n04:10:39 - Colors App - Navigation\n04:25:02 - Colors App - UITableView\n04:36:37 - Colors App - Code\n05:05:56 - Card Workout App - Intro\n05:08:53 - Card Workout App - Storyboard UI\n05:21:20 - Card Workout App - IBOutlets\n05:41:49 - Card Workout App - Storyboard Logic\n05:59:27 - iOS 15 Storyboard Buttons\n06:08:05 - Programmatic UI - Setup\n06:17:37 - Programmatic UIButtons\n06:25:55 - Card Workout App - Card Selection\n06:44:29 - Card Workout App - Rules Screen\n07:04:07 - Card Workout App - Logic\n07:13:52 - iOS 15 Update - UIButtons\n07:24:24 - SwiftUI Overview\n07:34:06 - SwiftUI Example\n08:00:29 - General Knowledge Section Intro\n08:01:57 - How Apps Work\n08:05:34 - What is an API?\n08:10:00 - What is Version Control?\n08:19:34 - 3rd Party Libraries\n08:25:56 - What are Edge Cases?\n08:30:55 - iOS Dev Career Paths\n08:36:48 - World of iOS Dev\n08:38:31 - Why WWDC is the best\n08:45:02 - Twitter will change your career\n08:55:30 - Swift blogs & websites\n09:03:47 - Book Recommendations\n09:10:40 - Podcast Recommendations\n09:20:23 - Next Steps\n09:26:18 - Thank You!\n09:29:04 - Bonus: Homeless to $130k iOS Dev\n09:46:21 - Bonus: 37 Tips for Jr. Developers\n10:01:04 - Bonus: I’m an Average Developer\n10:06:34 - Bonus: 9 Things I Wish I Knew When I Started\n10:16:46 - Bonus: How to Gain Confidence as a Dev\n10:25:56 - Bonus: The 90/90 Rule\n\n#swift #softwaredeveloper #iosdeveloper"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT10H32M30S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "656564",
        "likeCount": "15754",
        "favoriteCount": "0",
        "commentCount": "871"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "sWigpYgDJkbV1TefGce0TA0ODHg",
      "id": "comQ1-x2a1Q",
      "snippet": {
        "publishedAt": "2019-01-09T15:28:29Z",
        "channelId": "UC8butISFwT-Wl7EV0hUK0BQ",
        "title": "Swift Tutorial - Full Course for Beginners",
        "description": "Learn how to code with Swift in this full tutorial course for beginners. Swift is a powerful and intuitive programming language for macOS, iOS, watchOS and tvOS.\n\nThis course covers all the core concepts of Swift including:\nVariables and Constants, Data Types, Properties, Functions and Parameters, Classes, IF Statements, and more.\n\nCourse from Code With Chris. Check out their YouTube channel: https://www.youtube.com/user/codewithchris\n\nThe Code With Chris Facebook community: https://www.facebook.com/groups/codewithchriscommunity/\n\n--\n\nLearn to code for free and get a developer job: https://www.freecodecamp.org\n\nRead hundreds of articles on programming: https://medium.freecodecamp.org \n\n❤️ Support for this channel comes from our friends at Scrimba – the coding platform that's reinvented interactive learning: https://scrimba.com/freecodecamp",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/comQ1-x2a1Q/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/comQ1-x2a1Q/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/comQ1-x2a1Q/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/comQ1-x2a1Q/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/comQ1-x2a1Q/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "freeCodeCamp.org",
        "tags": [
          "swift course",
          "swift programming",
          "swift tutorial",
          "learn swift",
          "swift programming language",
          "ios",
          "ios development",
          "swift tutorial for beginners",
          "swift course for beginners",
          "ios programming"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "Swift Tutorial - Full Course for Beginners",
          "description": "Learn how to code with Swift in this full tutorial course for beginners. Swift is a powerful and intuitive programming language for macOS, iOS, watchOS and tvOS.\n\nThis course covers all the core concepts of Swift including:\nVariables and Constants, Data Types, Properties, Functions and Parameters, Classes, IF Statements, and more.\n\nCourse from Code With Chris. Check out their YouTube channel: https://www.youtube.com/user/codewithchris\n\nThe Code With Chris Facebook community: https://www.facebook.com/groups/codewithchriscommunity/\n\n--\n\nLearn to code for free and get a developer job: https://www.freecodecamp.org\n\nRead hundreds of articles on programming: https://medium.freecodecamp.org \n\n❤️ Support for this channel comes from our friends at Scrimba – the coding platform that's reinvented interactive learning: https://scrimba.com/freecodecamp"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT3H9M58S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "565487",
        "likeCount": "8360",
        "favoriteCount": "0",
        "commentCount": "257"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "6mn2BUiRdVw3AltJLnfObsi3f4c",
      "id": "n5X_V81OYnQ",
      "snippet": {
        "publishedAt": "2021-10-15T21:23:32Z",
        "channelId": "UCmJi5RdDLgzvkl3Ly0DRMlQ",
        "title": "Learn the Essentials of Swift in one hour",
        "description": "This video walks through all the essential language features of Swift in just under one hour, and is aimed at two groups of people: folks who have completed up to day 14 of the 100 Days of SwiftUI and want to review what they've learned, and developers with extensive experience of other languages who want to transfer their knowledge to Swift quickly.\n\nThis video is very fast! If you're struggling to understand concepts such as arrays, functions, closures, and similar, you should consider following the videos in my 100 Days of SwiftUI course at https://www.hackingwithswift.com/100/swiftui – they are much slower, providing much more explanation and example code along the way.\n\n00:00 Introduction\n01:21 Creating constants and variables, \n01:59 Strings\n03:38 Integers\n04:38 Decimals\n05:01 Booleans\n05:23 Joining strings \n05:59 Arrays\n07:39 Dictionaries\n08:16 Sets\n09:10 Enums\n09:40 Type annotations\n11:50 Conditions\n12:46 Switch statements\n13:25 The ternary conditional operator\n13:55 Loops\n16:24 Functions\n17:39 Returning multiple values from functions\n18:45 Customizing parameter labels\n19:52 Providing default values for parameters\n20:38 Handling errors in functions\n22:46 Closures\n25:02 Trailing closures and shorthand syntax\n26:22 Structs\n27:43 Computed properties\n28:37 Property observers\n29:16 Custom initializers\n30:10 Access control\n31:56 Static properties and methods\n32:42 Classes\n39:49 Protocols\n43:49 Extensions\n46:00 Protocol extensions\n49:31 Optionals\n49:31 Unwrapping optionals with guard\n51:34 Nil coalescing\n53:06 Optional chaining\n54:09 Optional try?\n55:37 Wrap up\n56:52 Dog reward",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/n5X_V81OYnQ/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/n5X_V81OYnQ/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/n5X_V81OYnQ/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/n5X_V81OYnQ/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/n5X_V81OYnQ/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Paul Hudson",
        "categoryId": "28",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "Learn the Essentials of Swift in one hour",
          "description": "This video walks through all the essential language features of Swift in just under one hour, and is aimed at two groups of people: folks who have completed up to day 14 of the 100 Days of SwiftUI and want to review what they've learned, and developers with extensive experience of other languages who want to transfer their knowledge to Swift quickly.\n\nThis video is very fast! If you're struggling to understand concepts such as arrays, functions, closures, and similar, you should consider following the videos in my 100 Days of SwiftUI course at https://www.hackingwithswift.com/100/swiftui – they are much slower, providing much more explanation and example code along the way.\n\n00:00 Introduction\n01:21 Creating constants and variables, \n01:59 Strings\n03:38 Integers\n04:38 Decimals\n05:01 Booleans\n05:23 Joining strings \n05:59 Arrays\n07:39 Dictionaries\n08:16 Sets\n09:10 Enums\n09:40 Type annotations\n11:50 Conditions\n12:46 Switch statements\n13:25 The ternary conditional operator\n13:55 Loops\n16:24 Functions\n17:39 Returning multiple values from functions\n18:45 Customizing parameter labels\n19:52 Providing default values for parameters\n20:38 Handling errors in functions\n22:46 Closures\n25:02 Trailing closures and shorthand syntax\n26:22 Structs\n27:43 Computed properties\n28:37 Property observers\n29:16 Custom initializers\n30:10 Access control\n31:56 Static properties and methods\n32:42 Classes\n39:49 Protocols\n43:49 Extensions\n46:00 Protocol extensions\n49:31 Optionals\n49:31 Unwrapping optionals with guard\n51:34 Nil coalescing\n53:06 Optional chaining\n54:09 Optional try?\n55:37 Wrap up\n56:52 Dog reward"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT58M14S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": false,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "264467",
        "likeCount": "7969",
        "favoriteCount": "0",
        "commentCount": "238"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "NSkSCU4zEyYWPUruKKGucAOf7RM",
      "id": "b1oC7sLIgpI",
      "snippet": {
        "publishedAt": "2023-09-06T11:56:06Z",
        "channelId": "UCbTw29mcP12YlTt1EpUaVJw",
        "title": "SwiftUI Fundamentals | FULL COURSE | Beginner Friendly",
        "description": "My Latest SwiftUI Courses - https://seanallen.teachable.com/?video=b1oC7sLIgpI\nSwift News Newsletter - https://swiftnews.kit.com/newsletter\n\nIn this 12 hour course we build 4 apps that ramp up in difficulty. The first 3 apps are quite simple, but the 4th and final app grows substantially in size and challenge. See the timestamps at the bottom of the description for the full curriculum.\n\nNeed help with something specific? Book a call with me:\nhttps://seanallen.teachable.com/p/call?video=b1oC7sLIgpI\n\nThe course has been updated for iOS 15 and iOS 16. Check out my latest, up to date courses at https://seanallen.teachable.com/?video=b1oC7sLIgpI\n\nApp 1 Weather: \nWe learn the absolute basics of SwiftUI to build the user interface of a weather app. If you have experience with SwiftUI, feel free to skip this one as it's very beginner friendly.\n\nWeather Completed Source Code (Updated for iOS 16):\nhttps://www.dropbox.com/scl/fo/sh092hs8fnwxwa169kkre/h?rlkey=5l9h82p95con0bu9usc2s1wg3&dl=0\n\nApp 2 - Apple Frameworks: \nWe learn to build a Grid and pass data from our main view to a detail view.\n\nFramework icon images:\nhttps://www.dropbox.com/scl/fo/lijj23qlv9eiblta13z61/h?rlkey=79h2tiegl2ysood23qcvfxo85&dl=0\n\nApple Frameworks Completed Source Code (Updated for iOS 16):\nhttps://www.dropbox.com/scl/fo/5zvhvulzemu74sit9qn96/h?rlkey=pc8nycuc6eejy8rb8j9szfvhm&dl=0\n\nApp 3 - Barcode Scanner: \nWe learn to use UIViewRepresentable to connect SwiftUI and UIKit in case SwiftUI doesn't support a type of user interface you want.\n\nBarcode Scanner Completed Source Code:\nhttps://www.dropbox.com/scl/fo/iy2ymc4jcrz7vfh2wqxzk/h?rlkey=8055hc325k07rji6hapgifcw1&dl=0\n\nApp 4 - Appetizers: \nThis app is a big one where we put it all our learnings together to build a proper SwiftUI app that works with a network call (updated to Async/Await in iOS 15).\n\nAppetizers Completed Source Code (updated for iOS 16):\nhttps://www.dropbox.com/scl/fo/0h5kub6len9jkghiwj6gz/h?rlkey=uf04zyhvww722jksfrech2up4&dl=0\n\nWhat's New in Xcode 15:\nhttps://youtu.be/oNAj6aIU7tk\n\nWhat's New in Xcode 14:\nhttps://youtu.be/tYBZ8AVH0Q0\n\nWhat's New in Xcode 13: \nhttps://youtu.be/8OIyptQpzMQ\n\nWhat's New in SwiftUI WWDC 2021:\nhttps://developer.apple.com/videos/play/wwdc2021/10018/\n\nWhat's New in SwiftUI WWDC 2022:\nhttps://developer.apple.com/videos/play/wwdc2022/10052/\n\nWhat's New in SwiftUI WWDC 2023:\nhttps://developer.apple.com/videos/play/wwdc2023/10148/\n\nMy Formula 1 App:\nhttps://apps.apple.com/app/formula-widgets-push-push/id6744127751\n\nTwitter:\nSean Allen - https://twitter.com/seanallen_dev\n\nBook and learning recommendations that help out the channel if you decide to purchase (Affiliate Links):\n\n#swift #swiftui #iosdeveloper \n\nTimestamps:\n0:00 - What you will learn & updates\n6:30 - SwiftUI Basics - Weather App\n19:01 - Weather - Text\n25:54 - Weather - SF Symbols\n29:13 - Weather - Main VStack\n36:41 - Weather - HStack of Days\n50:08 - Weather - Button & Refactoring\n1:07:35 - Weather - @State & @Binding Basics\n1:18:03 - Weather App - iOS 15 & 16 Updates\n1:31:52 - How SwiftUI Works - Fundamental Concepts\n2:02:00 - App 2 - Apple Frameworks\n2:09:08 - Frameworks - Grid Start\n2:20:35 - Frameworks - Grid End\n2:32:34 - Frameworks - Detail View\n2:47:00 - Frameworks - Intro to MVVM & Moving Data\n3:06:09 - Frameworks - Integrating with UIKit\n3:17:56 - Frameworks - Refactor\n3:38:12 - Frameworks - iOS 15 & 16 Updates\n3:53:41 - App 3 - Barcode Scanner\n4:05:24 - Barcode Scanner - Camera Setup\n4:21:44 - Barcode Scanner - Error Handling\n4:26:49 - Barcode Scanner - Coordinator Setup\n4:48:28 - Barcode Scanner - More Error Handling\n5:02:46 - Barcode Scanner - Refactor\n5:12:26 - App 4 - Appetizers\n5:24:48 - Appetizers - App Lifecycle\n5:29:55 - Appetizers - Model\n5:42:19 - Appetizers - List View\n5:55:32 - Appetizers - Network Manager\n6:12:40 - Appetizers - Connecting the UI\n6:26:53 - Appetizers - Errors & Alerts\n6:41:35 - Appetizers - Loading View\n6:53:21 - Appetizers - Download Image\n7:03:42 - Appetizers - Remote Image\n7:16:16 - Appetizers - Project cleanup & organization\n7:21:12 - Appetizers - Detail View UI Setup\n7:41:09 - Appetizers - Detail View UI Connections\n7:52:28 - Appetizers - Detail View Refactor\n8:02:56 - Appetizers - Account View UI Setup\n8:17:29 - Appetizers - View Model & Text Validation\n8:33:22 - Appetizers - @AppStorage\n8:50:56 - Appetizers - Order Screen UI\n9:02:18 - Appetizers - Empty State\n9:12:40 - Appetizers - @EnvironmentObject - Order\n9:30:21 - Appetizers - iOS 15 - Initial Run\n9:38:48 - Appetizers - iOS 15 - Tabbar Badge & List Separator\n9:52:25 - Appetizers - iOS 15 - @FocusState Keyboard\n10:01:01 - Appetizers - iOS 15 - Async/Await Network Calls\n10:26:19 - Appetizers - iOS 15 - AsyncImage\n10:32:52 - Appetizers - iOS 16 - Regex, guard let\n10:45:58 - App Optimizations\n11:19:41 - Data Flow Review\n11:38:47 - iOS 17 @Observable\n11:45:36 - What’s Next?",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/b1oC7sLIgpI/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/b1oC7sLIgpI/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/b1oC7sLIgpI/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/b1oC7sLIgpI/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/b1oC7sLIgpI/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Sean Allen",
        "tags": [
          "Swift",
          "Swift Tutorial",
          "iOS Developer",
          "iOS Development",
          "Swift Code Tutorial",
          "Swift app tutorial",
          "SwiftUI",
          "SwiftUI Basics",
          "Swift for beginners",
          "SwiftUI For Beginners",
          "SwiftUI Tutorial",
          "SwiftUI Basics for Beginners",
          "SwiftUI app",
          "SwiftUI tutorial 2020",
          "SwiftUI Tutorial 2021",
          "swiftUI for dummies",
          "Sean Allen",
          "SwiftUI Fundamentals",
          "fundamentals of swiftui",
          "beginner swiftui",
          "how to learn swiftui",
          "swiftui example",
          "swiftui full course"
        ],
        "categoryId": "28",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "SwiftUI Fundamentals | FULL COURSE | Beginner Friendly",
          "description": "My Latest SwiftUI Courses - https://seanallen.teachable.com/?video=b1oC7sLIgpI\nSwift News Newsletter - https://swiftnews.kit.com/newsletter\n\nIn this 12 hour course we build 4 apps that ramp up in difficulty. The first 3 apps are quite simple, but the 4th and final app grows substantially in size and challenge. See the timestamps at the bottom of the description for the full curriculum.\n\nNeed help with something specific? Book a call with me:\nhttps://seanallen.teachable.com/p/call?video=b1oC7sLIgpI\n\nThe course has been updated for iOS 15 and iOS 16. Check out my latest, up to date courses at https://seanallen.teachable.com/?video=b1oC7sLIgpI\n\nApp 1 Weather: \nWe learn the absolute basics of SwiftUI to build the user interface of a weather app. If you have experience with SwiftUI, feel free to skip this one as it's very beginner friendly.\n\nWeather Completed Source Code (Updated for iOS 16):\nhttps://www.dropbox.com/scl/fo/sh092hs8fnwxwa169kkre/h?rlkey=5l9h82p95con0bu9usc2s1wg3&dl=0\n\nApp 2 - Apple Frameworks: \nWe learn to build a Grid and pass data from our main view to a detail view.\n\nFramework icon images:\nhttps://www.dropbox.com/scl/fo/lijj23qlv9eiblta13z61/h?rlkey=79h2tiegl2ysood23qcvfxo85&dl=0\n\nApple Frameworks Completed Source Code (Updated for iOS 16):\nhttps://www.dropbox.com/scl/fo/5zvhvulzemu74sit9qn96/h?rlkey=pc8nycuc6eejy8rb8j9szfvhm&dl=0\n\nApp 3 - Barcode Scanner: \nWe learn to use UIViewRepresentable to connect SwiftUI and UIKit in case SwiftUI doesn't support a type of user interface you want.\n\nBarcode Scanner Completed Source Code:\nhttps://www.dropbox.com/scl/fo/iy2ymc4jcrz7vfh2wqxzk/h?rlkey=8055hc325k07rji6hapgifcw1&dl=0\n\nApp 4 - Appetizers: \nThis app is a big one where we put it all our learnings together to build a proper SwiftUI app that works with a network call (updated to Async/Await in iOS 15).\n\nAppetizers Completed Source Code (updated for iOS 16):\nhttps://www.dropbox.com/scl/fo/0h5kub6len9jkghiwj6gz/h?rlkey=uf04zyhvww722jksfrech2up4&dl=0\n\nWhat's New in Xcode 15:\nhttps://youtu.be/oNAj6aIU7tk\n\nWhat's New in Xcode 14:\nhttps://youtu.be/tYBZ8AVH0Q0\n\nWhat's New in Xcode 13: \nhttps://youtu.be/8OIyptQpzMQ\n\nWhat's New in SwiftUI WWDC 2021:\nhttps://developer.apple.com/videos/play/wwdc2021/10018/\n\nWhat's New in SwiftUI WWDC 2022:\nhttps://developer.apple.com/videos/play/wwdc2022/10052/\n\nWhat's New in SwiftUI WWDC 2023:\nhttps://developer.apple.com/videos/play/wwdc2023/10148/\n\nMy Formula 1 App:\nhttps://apps.apple.com/app/formula-widgets-push-push/id6744127751\n\nTwitter:\nSean Allen - https://twitter.com/seanallen_dev\n\nBook and learning recommendations that help out the channel if you decide to purchase (Affiliate Links):\n\n#swift #swiftui #iosdeveloper \n\nTimestamps:\n0:00 - What you will learn & updates\n6:30 - SwiftUI Basics - Weather App\n19:01 - Weather - Text\n25:54 - Weather - SF Symbols\n29:13 - Weather - Main VStack\n36:41 - Weather - HStack of Days\n50:08 - Weather - Button & Refactoring\n1:07:35 - Weather - @State & @Binding Basics\n1:18:03 - Weather App - iOS 15 & 16 Updates\n1:31:52 - How SwiftUI Works - Fundamental Concepts\n2:02:00 - App 2 - Apple Frameworks\n2:09:08 - Frameworks - Grid Start\n2:20:35 - Frameworks - Grid End\n2:32:34 - Frameworks - Detail View\n2:47:00 - Frameworks - Intro to MVVM & Moving Data\n3:06:09 - Frameworks - Integrating with UIKit\n3:17:56 - Frameworks - Refactor\n3:38:12 - Frameworks - iOS 15 & 16 Updates\n3:53:41 - App 3 - Barcode Scanner\n4:05:24 - Barcode Scanner - Camera Setup\n4:21:44 - Barcode Scanner - Error Handling\n4:26:49 - Barcode Scanner - Coordinator Setup\n4:48:28 - Barcode Scanner - More Error Handling\n5:02:46 - Barcode Scanner - Refactor\n5:12:26 - App 4 - Appetizers\n5:24:48 - Appetizers - App Lifecycle\n5:29:55 - Appetizers - Model\n5:42:19 - Appetizers - List View\n5:55:32 - Appetizers - Network Manager\n6:12:40 - Appetizers - Connecting the UI\n6:26:53 - Appetizers - Errors & Alerts\n6:41:35 - Appetizers - Loading View\n6:53:21 - Appetizers - Download Image\n7:03:42 - Appetizers - Remote Image\n7:16:16 - Appetizers - Project cleanup & organization\n7:21:12 - Appetizers - Detail View UI Setup\n7:41:09 - Appetizers - Detail View UI Connections\n7:52:28 - Appetizers - Detail View Refactor\n8:02:56 - Appetizers - Account View UI Setup\n8:17:29 - Appetizers - View Model & Text Validation\n8:33:22 - Appetizers - @AppStorage\n8:50:56 - Appetizers - Order Screen UI\n9:02:18 - Appetizers - Empty State\n9:12:40 - Appetizers - @EnvironmentObject - Order\n9:30:21 - Appetizers - iOS 15 - Initial Run\n9:38:48 - Appetizers - iOS 15 - Tabbar Badge & List Separator\n9:52:25 - Appetizers - iOS 15 - @FocusState Keyboard\n10:01:01 - Appetizers - iOS 15 - Async/Await Network Calls\n10:26:19 - Appetizers - iOS 15 - AsyncImage\n10:32:52 - Appetizers - iOS 16 - Regex, guard let\n10:45:58 - App Optimizations\n11:19:41 - Data Flow Review\n11:38:47 - iOS 17 @Observable\n11:45:36 - What’s Next?"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT11H48M41S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "true",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "553727",
        "likeCount": "12435",
        "favoriteCount": "0",
        "commentCount": "742"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "nS2Jyidj718xYy9JHd-gDL46eoA",
      "id": "8Xg7E9shq0U",
      "snippet": {
        "publishedAt": "2022-12-07T16:01:04Z",
        "channelId": "UC8butISFwT-Wl7EV0hUK0BQ",
        "title": "Swift Programming Tutorial – Full Course for Beginners",
        "description": "Learn the Swift programming language in this full tutorial for beginners. \n\nIn this video, we will go through every modern aspect of Swift as a programming language including, variables, constants, functions, structures, classes, protocols. extensions, asynchronous programming, generics and much more. This video will lay the foundation for learning Swift for those who are not familiar with Swift already.\n\nYou can follow along with this video on macOS, Linux and Windows. On Linux and Windows you will need to download the Swift toolchain from https://swift.org and run the examples manually by invoking Swift from Terminal using your favorite code editor such as Visual Studio Code.\n\n✏️ Vandad Nahavandipoor created this course. \nVandad on YouTube: https://youtube.com/c/vandadnp\nVandad on Twitter: https://twitter.com/vandadnp\nVandad on LinkedIn: https://linkedin.com/in/vandadnp\n\n⭐️ Contents ⭐️\n⌨️ (0:00:00) Introduction\n⌨️ (0:06:49) Variables\n⌨️ (0:29:46) Operators\n⌨️ (0:46:55) If and else\n⌨️ (1:05:08) Functions\n⌨️ (1:23:58) Closures\n⌨️ (1:52:08) Structures\n⌨️ (2:17:58) Enumerations\n⌨️ (2:59:21) Classes\n⌨️ (3:24:51) Protocols\n⌨️ (3:47:48) Extensions\n⌨️ (4:00:06) Generics\n⌨️ (4:32:44) Optionals\n⌨️ (4:53:39) Error Handling\n⌨️ (5:39:35) Collections\n⌨️ (6:17:17) Equality and Hashing\n⌨️ (6:38:46) Custom Operators\n⌨️ (6:50:53) Asynchronous Programming\n⌨️ (7:04:38) Outro\n\n🎉 Thanks to our Champion and Sponsor supporters:\n👾 Nattira Maneerat\n👾 Heather Wcislo\n👾 Serhiy Kalinets\n👾 Erdeniz Unvan\n👾 Justin Hual\n👾 Agustín Kussrow\n👾 Otis Morgan\n\n--\n\nLearn to code for free and get a developer job: https://www.freecodecamp.org\n\nRead hundreds of articles on programming: https://freecodecamp.org/news \n\n❤️ Support for this channel comes from our friends at Scrimba – the coding platform that's reinvented interactive learning: https://scrimba.com/freecodecamp",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/8Xg7E9shq0U/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/8Xg7E9shq0U/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/8Xg7E9shq0U/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/8Xg7E9shq0U/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/8Xg7E9shq0U/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "freeCodeCamp.org",
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "Swift Programming Tutorial – Full Course for Beginners",
          "description": "Learn the Swift programming language in this full tutorial for beginners. \n\nIn this video, we will go through every modern aspect of Swift as a programming language including, variables, constants, functions, structures, classes, protocols. extensions, asynchronous programming, generics and much more. This video will lay the foundation for learning Swift for those who are not familiar with Swift already.\n\nYou can follow along with this video on macOS, Linux and Windows. On Linux and Windows you will need to download the Swift toolchain from https://swift.org and run the examples manually by invoking Swift from Terminal using your favorite code editor such as Visual Studio Code.\n\n✏️ Vandad Nahavandipoor created this course. \nVandad on YouTube: https://youtube.com/c/vandadnp\nVandad on Twitter: https://twitter.com/vandadnp\nVandad on LinkedIn: https://linkedin.com/in/vandadnp\n\n⭐️ Contents ⭐️\n⌨️ (0:00:00) Introduction\n⌨️ (0:06:49) Variables\n⌨️ (0:29:46) Operators\n⌨️ (0:46:55) If and else\n⌨️ (1:05:08) Functions\n⌨️ (1:23:58) Closures\n⌨️ (1:52:08) Structures\n⌨️ (2:17:58) Enumerations\n⌨️ (2:59:21) Classes\n⌨️ (3:24:51) Protocols\n⌨️ (3:47:48) Extensions\n⌨️ (4:00:06) Generics\n⌨️ (4:32:44) Optionals\n⌨️ (4:53:39) Error Handling\n⌨️ (5:39:35) Collections\n⌨️ (6:17:17) Equality and Hashing\n⌨️ (6:38:46) Custom Operators\n⌨️ (6:50:53) Asynchronous Programming\n⌨️ (7:04:38) Outro\n\n🎉 Thanks to our Champion and Sponsor supporters:\n👾 Nattira Maneerat\n👾 Heather Wcislo\n👾 Serhiy Kalinets\n👾 Erdeniz Unvan\n👾 Justin Hual\n👾 Agustín Kussrow\n👾 Otis Morgan\n\n--\n\nLearn to code for free and get a developer job: https://www.freecodecamp.org\n\nRead hundreds of articles on programming: https://freecodecamp.org/news \n\n❤️ Support for this channel comes from our friends at Scrimba – the coding platform that's reinvented interactive learning: https://scrimba.com/freecodecamp"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT7H5M17S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "483630",
        "likeCount": "10348",
        "favoriteCount": "0",
        "commentCount": "227"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "yUa1WuD1BHzCDSG4JqY9adA2K9U",
      "id": "CwA1VWP0Ldw",
      "snippet": {
        "publishedAt": "2022-10-08T14:42:34Z",
        "channelId": "UCbTw29mcP12YlTt1EpUaVJw",
        "title": "Swift Programming Tutorial | FULL COURSE | Absolute Beginner",
        "description": "My Swift & SwiftUI Courses - https://seanallen.teachable.com/?video=CwA1VWP0Ldw\nSwift News Newsletter - https://swiftnews.kit.com/newsletter\n\nNeed help with something specific? Book a call with me:\nhttps://seanallen.teachable.com/p/call?video=CwA1VWP0Ldw\n\nWhen you've finished this course, try my SwiftUI Fundamentals course which is now free:\nhttps://www.youtube.com/watch?v=b1oC7sLIgpI\n\nMy Formula 1 App:\nhttps://apps.apple.com/app/formula-widgets-push-push/id6744127751\n \nMy other iOS Developer Courses\nhttps://seanallen.teachable.com/\n\nCard Deck Assets:\nhttps://www.dropbox.com/sh/ygwlohcppk0c8dv/AACDU3NSO8oK8i74SNXDY68Ta?dl=0\n\nSwiftUI Video Thumbnail Assets:\nhttps://www.dropbox.com/sh/cpp1ibizedt6f9t/AABJHoTqiQf_-A1n1aMUpKpla?dl=0\n\nhttps://seanallen.co\n\nTwitter:\nhttps://twitter.com/seanallen_dev\n\nHired.com:\nhttps://hired.com/x/1n01g\n\nBook and learning recommendations that help out the channel if you decide to purchase (Affiliate Links):\n\nPaul Hudson's Hacking With Swift:\nhttps://gumroad.com/a/762098803\n\nDonny Wals - Combine:\nhttps://gumroad.com/a/909014131\n\nMark Moeyken’s SwiftUI Books:\nwww.bigmountainstudio.com/swiftui-views-book/fzc51\n\nObjc.io Books (Thinking in SwiftUI & Advanced Swift):\nhttps://gumroad.com/a/656585843\n\nRay Wenderlich Books:\nhttps://store.raywenderlich.com/a/20866/link/1\n\nCurriculum Timestamps:\n00:00:00 - Course overview\n00:05:36 - I was just like you\n00:13:48 - What is Xcode?\n00:19:47 - SwiftUI or UIKit (2020)\n00:22:27 - SwiftUI or UIKit (2021)\n00:26:00 - Intro to Swift Language\n00:33:30 - Swift Types\n00:37:15 - Variables\n00:42:10 - Array\n00:49:37 - Set\n00:57:59 - Dictionary\n01:02:25 - Functions\n01:14:50 - if / else\n01:21:15 - For Loops\n01:30:29 - Enum\n01:40:27 - Switch Statement\n01:48:49 - Operators\n02:01:45 - Optionals\n02:12:46 - Self\n02:15:27 - Class\n02:23:36 - Inheritance\n02:31:31 - Struct\n02:36:45 - Extension\n02:40:30 - Apple Developer Program\n02:43:54 - Tour of Xcode\n02:58:56 - What’s New in Xcode 12\n03:08:07 - What’s New in Xcode 13\n03:24:59 - What’s New in Xcode 14\n03:34:54 - What is Auto Layout?\n03:38:38 - What is UIKit?\n03:55:05 - Storyboard vs. Programmatic UI\n04:01:16 - FizzBuzz Challenge\n04:09:27 - Colors App Intro\n04:10:39 - Colors App - Navigation\n04:25:02 - Colors App - UITableView\n04:36:37 - Colors App - Code\n05:05:56 - Card Workout App - Intro\n05:08:53 - Card Workout App - Storyboard UI\n05:21:20 - Card Workout App - IBOutlets\n05:41:49 - Card Workout App - Storyboard Logic\n05:59:27 - iOS 15 Storyboard Buttons\n06:08:05 - Programmatic UI - Setup\n06:17:37 - Programmatic UIButtons\n06:25:55 - Card Workout App - Card Selection\n06:44:29 - Card Workout App - Rules Screen\n07:04:07 - Card Workout App - Logic\n07:13:52 - iOS 15 Update - UIButtons\n07:24:24 - SwiftUI Overview\n07:34:06 - SwiftUI Example\n08:00:29 - General Knowledge Section Intro\n08:01:57 - How Apps Work\n08:05:34 - What is an API?\n08:10:00 - What is Version Control?\n08:19:34 - 3rd Party Libraries\n08:25:56 - What are Edge Cases?\n08:30:55 - iOS Dev Career Paths\n08:36:48 - World of iOS Dev\n08:38:31 - Why WWDC is the best\n08:45:02 - Twitter will change your career\n08:55:30 - Swift blogs & websites\n09:03:47 - Book Recommendations\n09:10:40 - Podcast Recommendations\n09:20:23 - Next Steps\n09:26:18 - Thank You!\n09:29:04 - Bonus: Homeless to $130k iOS Dev\n09:46:21 - Bonus: 37 Tips for Jr. Developers\n10:01:04 - Bonus: I’m an Average Developer\n10:06:34 - Bonus: 9 Things I Wish I Knew When I Started\n10:16:46 - Bonus: How to Gain Confidence as a Dev\n10:25:56 - Bonus: The 90/90 Rule\n\n#swift #softwaredeveloper #iosdeveloper",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/CwA1VWP0Ldw/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/CwA1VWP0Ldw/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/CwA1VWP0Ldw/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/CwA1VWP0Ldw/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/CwA1VWP0Ldw/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Sean Allen",
        "tags": [
          "Swift",
          "Swift Tutorial",
          "iOS Developer",
          "iOS Development",
          "Swift app tutorial",
          "swift beginner",
          "beginner swift",
          "swift beginner tutorial",
          "swift beginner app",
          "swift beginner course",
          "beginner swift programming",
          "beginner swift tutorial",
          "beginner swift projects",
          "iOS swift beginner",
          "iOS development course",
          "iOS development for beginners",
          "swift first app",
          "Swift programming language",
          "What is swift",
          "Xcode for beginners",
          "Swift programming course",
          "Swift for beginners",
          "iOS dev for beginners"
        ],
        "categoryId": "28",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "Swift Programming Tutorial | FULL COURSE | Absolute Beginner",
          "description": "My Swift & SwiftUI Courses - https://seanallen.teachable.com/?video=CwA1VWP0Ldw\nSwift News Newsletter - https://swiftnews.kit.com/newsletter\n\nNeed help with something specific? Book a call with me:\nhttps://seanallen.teachable.com/p/call?video=CwA1VWP0Ldw\n\nWhen you've finished this course, try my SwiftUI Fundamentals course which is now free:\nhttps://www.youtube.com/watch?v=b1oC7sLIgpI\n\nMy Formula 1 App:\nhttps://apps.apple.com/app/formula-widgets-push-push/id6744127751\n \nMy other iOS Developer Courses\nhttps://seanallen.teachable.com/\n\nCard Deck Assets:\nhttps://www.dropbox.com/sh/ygwlohcppk0c8dv/AACDU3NSO8oK8i74SNXDY68Ta?dl=0\n\nSwiftUI Video Thumbnail Assets:\nhttps://www.dropbox.com/sh/cpp1ibizedt6f9t/AABJHoTqiQf_-A1n1aMUpKpla?dl=0\n\nhttps://seanallen.co\n\nTwitter:\nhttps://twitter.com/seanallen_dev\n\nHired.com:\nhttps://hired.com/x/1n01g\n\nBook and learning recommendations that help out the channel if you decide to purchase (Affiliate Links):\n\nPaul Hudson's Hacking With Swift:\nhttps://gumroad.com/a/762098803\n\nDonny Wals - Combine:\nhttps://gumroad.com/a/909014131\n\nMark Moeyken’s SwiftUI Books:\nwww.bigmountainstudio.com/swiftui-views-book/fzc51\n\nObjc.io Books (Thinking in SwiftUI & Advanced Swift):\nhttps://gumroad.com/a/656585843\n\nRay Wenderlich Books:\nhttps://store.raywenderlich.com/a/20866/link/1\n\nCurriculum Timestamps:\n00:00:00 - Course overview\n00:05:36 - I was just like you\n00:13:48 - What is Xcode?\n00:19:47 - SwiftUI or UIKit (2020)\n00:22:27 - SwiftUI or UIKit (2021)\n00:26:00 - Intro to Swift Language\n00:33:30 - Swift Types\n00:37:15 - Variables\n00:42:10 - Array\n00:49:37 - Set\n00:57:59 - Dictionary\n01:02:25 - Functions\n01:14:50 - if / else\n01:21:15 - For Loops\n01:30:29 - Enum\n01:40:27 - Switch Statement\n01:48:49 - Operators\n02:01:45 - Optionals\n02:12:46 - Self\n02:15:27 - Class\n02:23:36 - Inheritance\n02:31:31 - Struct\n02:36:45 - Extension\n02:40:30 - Apple Developer Program\n02:43:54 - Tour of Xcode\n02:58:56 - What’s New in Xcode 12\n03:08:07 - What’s New in Xcode 13\n03:24:59 - What’s New in Xcode 14\n03:34:54 - What is Auto Layout?\n03:38:38 - What is UIKit?\n03:55:05 - Storyboard vs. Programmatic UI\n04:01:16 - FizzBuzz Challenge\n04:09:27 - Colors App Intro\n04:10:39 - Colors App - Navigation\n04:25:02 - Colors App - UITableView\n04:36:37 - Colors App - Code\n05:05:56 - Card Workout App - Intro\n05:08:53 - Card Workout App - Storyboard UI\n05:21:20 - Card Workout App - IBOutlets\n05:41:49 - Card Workout App - Storyboard Logic\n05:59:27 - iOS 15 Storyboard Buttons\n06:08:05 - Programmatic UI - Setup\n06:17:37 - Programmatic UIButtons\n06:25:55 - Card Workout App - Card Selection\n06:44:29 - Card Workout App - Rules Screen\n07:04:07 - Card Workout App - Logic\n07:13:52 - iOS 15 Update - UIButtons\n07:24:24 - SwiftUI Overview\n07:34:06 - SwiftUI Example\n08:00:29 - General Knowledge Section Intro\n08:01:57 - How Apps Work\n08:05:34 - What is an API?\n08:10:00 - What is Version Control?\n08:19:34 - 3rd Party Libraries\n08:25:56 - What are Edge Cases?\n08:30:55 - iOS Dev Career Paths\n08:36:48 - World of iOS Dev\n08:38:31 - Why WWDC is the best\n08:45:02 - Twitter will change your career\n08:55:30 - Swift blogs & websites\n09:03:47 - Book Recommendations\n09:10:40 - Podcast Recommendations\n09:20:23 - Next Steps\n09:26:18 - Thank You!\n09:29:04 - Bonus: Homeless to $130k iOS Dev\n09:46:21 - Bonus: 37 Tips for Jr. Developers\n10:01:04 - Bonus: I’m an Average Developer\n10:06:34 - Bonus: 9 Things I Wish I Knew When I Started\n10:16:46 - Bonus: How to Gain Confidence as a Dev\n10:25:56 - Bonus: The 90/90 Rule\n\n#swift #softwaredeveloper #iosdeveloper"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT10H32M30S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "656564",
        "likeCount": "15754",
        "favoriteCount": "0",
        "commentCount": "871"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "XPX-hGrWJGWvgPTe_jXG7ch_Iz4",
      "id": "QIlI7YquuRY",
      "snippet": {
        "publishedAt": "2020-12-07T16:04:22Z",
        "channelId": "UCeVMnSShP_Iviwkknt83cww",
        "title": "How I Learned to Type Really Fast (150 Words/Minute)",
        "description": "How to learn touch typing: In this video I will discuss about how I learnt to type as fast as 150 wpm. This video will give you an exact roadmap needed to type at the speed of 150wpm. You will need the discussed tools along with adequate practice to crack fast typing. \n►Checkout my English channel here: https://www.youtube.com/ProgrammingWithHarry\n►Click here to subscribe - https://www.youtube.com/channel/UCeVMnSShP_Iviwkknt83cww\n\nBest Hindi Videos For Learning Programming:\n►Learn Python In One Video - https://www.youtube.com/watch?v=ihk_Xglr164\n\n►Python Complete Course In Hindi - https://www.youtube.com/playlist?list=PLu0W_9lII9agICnT8t4iYVSZ3eykIAOME\n\n►C Language Complete Course In Hindi -  \nhttps://www.youtube.com/playlist?list=PLu0W_9lII9aiXlHcLx-mDH1Qul38wD3aR&disable_polymer=true\n\n►JavaScript Complete Course In Hindi - \n https://www.youtube.com/playlist?list=PLu0W_9lII9ajyk081To1Cbt2eI5913SsL\n\n►Learn JavaScript in One Video - https://www.youtube.com/watch?v=onbBV0uFVpo\n\n►Learn PHP In One Video - https://www.youtube.com/watch?v=xW7ro3lwaCI\n\n►Django Complete Course In Hindi -  \nhttps://www.youtube.com/playlist?list=PLu0W_9lII9ah7DDtYtflgwMwpT3xmjXY9\n\n►Machine Learning Using Python - https://www.youtube.com/playlist?list=PLu0W_9lII9ai6fAMHp-acBmJONT7Y4BSG\n\n►Creating & Hosting A Website (Tech Blog) Using Python - https://www.youtube.com/playlist?list=PLu0W_9lII9agAiWp6Y41ueUKx1VcTRxmf\n\n►Advanced Python Tutorials - https://www.youtube.com/playlist?list=PLu0W_9lII9aiJWQ7VhY712fuimEpQZYp4\n\n►Object Oriented Programming In Python - https://www.youtube.com/playlist?list=PLu0W_9lII9ahfRrhFcoB-4lpp9YaBmdCP\n\n►Python Data Science and Big Data Tutorials - https://www.youtube.com/playlist?list=PLu0W_9lII9agK8pojo23OHiNz3Jm6VQCH\n\nFollow Me On Social Media\n►Website (created using Flask) - http://www.codewithharry.com\n►Facebook - https://www.facebook.com/CodeWithHarry\n►Instagram - https://www.instagram.com/codewithharry/\n►Personal Facebook A/c - https://www.facebook.com/geekyharis\nTwitter - https://twitter.com/Haris_Is_Here",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/QIlI7YquuRY/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/QIlI7YquuRY/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/QIlI7YquuRY/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/QIlI7YquuRY/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/QIlI7YquuRY/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "CodeWithHarry",
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "How I Learned to Type Really Fast (150 Words/Minute)",
          "description": "How to learn touch typing: In this video I will discuss about how I learnt to type as fast as 150 wpm. This video will give you an exact roadmap needed to type at the speed of 150wpm. You will need the discussed tools along with adequate practice to crack fast typing. \n►Checkout my English channel here: https://www.youtube.com/ProgrammingWithHarry\n►Click here to subscribe - https://www.youtube.com/channel/UCeVMnSShP_Iviwkknt83cww\n\nBest Hindi Videos For Learning Programming:\n►Learn Python In One Video - https://www.youtube.com/watch?v=ihk_Xglr164\n\n►Python Complete Course In Hindi - https://www.youtube.com/playlist?list=PLu0W_9lII9agICnT8t4iYVSZ3eykIAOME\n\n►C Language Complete Course In Hindi -  \nhttps://www.youtube.com/playlist?list=PLu0W_9lII9aiXlHcLx-mDH1Qul38wD3aR&disable_polymer=true\n\n►JavaScript Complete Course In Hindi - \n https://www.youtube.com/playlist?list=PLu0W_9lII9ajyk081To1Cbt2eI5913SsL\n\n►Learn JavaScript in One Video - https://www.youtube.com/watch?v=onbBV0uFVpo\n\n►Learn PHP In One Video - https://www.youtube.com/watch?v=xW7ro3lwaCI\n\n►Django Complete Course In Hindi -  \nhttps://www.youtube.com/playlist?list=PLu0W_9lII9ah7DDtYtflgwMwpT3xmjXY9\n\n►Machine Learning Using Python - https://www.youtube.com/playlist?list=PLu0W_9lII9ai6fAMHp-acBmJONT7Y4BSG\n\n►Creating & Hosting A Website (Tech Blog) Using Python - https://www.youtube.com/playlist?list=PLu0W_9lII9agAiWp6Y41ueUKx1VcTRxmf\n\n►Advanced Python Tutorials - https://www.youtube.com/playlist?list=PLu0W_9lII9aiJWQ7VhY712fuimEpQZYp4\n\n►Object Oriented Programming In Python - https://www.youtube.com/playlist?list=PLu0W_9lII9ahfRrhFcoB-4lpp9YaBmdCP\n\n►Python Data Science and Big Data Tutorials - https://www.youtube.com/playlist?list=PLu0W_9lII9agK8pojo23OHiNz3Jm6VQCH\n\nFollow Me On Social Media\n►Website (created using Flask) - http://www.codewithharry.com\n►Facebook - https://www.facebook.com/CodeWithHarry\n►Instagram - https://www.instagram.com/codewithharry/\n►Personal Facebook A/c - https://www.facebook.com/geekyharis\nTwitter - https://twitter.com/Haris_Is_Here"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT23M23S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "true",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "5365201",
        "likeCount": "184028",
        "favoriteCount": "0",
        "commentCount": "5132"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "sWigpYgDJkbV1TefGce0TA0ODHg",
      "id": "comQ1-x2a1Q",
      "snippet": {
        "publishedAt": "2019-01-09T15:28:29Z",
        "channelId": "UC8butISFwT-Wl7EV0hUK0BQ",
        "title": "Swift Tutorial - Full Course for Beginners",
        "description": "Learn how to code with Swift in this full tutorial course for beginners. Swift is a powerful and intuitive programming language for macOS, iOS, watchOS and tvOS.\n\nThis course covers all the core concepts of Swift including:\nVariables and Constants, Data Types, Properties, Functions and Parameters, Classes, IF Statements, and more.\n\nCourse from Code With Chris. Check out their YouTube channel: https://www.youtube.com/user/codewithchris\n\nThe Code With Chris Facebook community: https://www.facebook.com/groups/codewithchriscommunity/\n\n--\n\nLearn to code for free and get a developer job: https://www.freecodecamp.org\n\nRead hundreds of articles on programming: https://medium.freecodecamp.org \n\n❤️ Support for this channel comes from our friends at Scrimba – the coding platform that's reinvented interactive learning: https://scrimba.com/freecodecamp",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/comQ1-x2a1Q/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/comQ1-x2a1Q/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/comQ1-x2a1Q/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/comQ1-x2a1Q/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/comQ1-x2a1Q/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "freeCodeCamp.org",
        "tags": [
          "swift course",
          "swift programming",
          "swift tutorial",
          "learn swift",
          "swift programming language",
          "ios",
          "ios development",
          "swift tutorial for beginners",
          "swift course for beginners",
          "ios programming"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "Swift Tutorial - Full Course for Beginners",
          "description": "Learn how to code with Swift in this full tutorial course for beginners. Swift is a powerful and intuitive programming language for macOS, iOS, watchOS and tvOS.\n\nThis course covers all the core concepts of Swift including:\nVariables and Constants, Data Types, Properties, Functions and Parameters, Classes, IF Statements, and more.\n\nCourse from Code With Chris. Check out their YouTube channel: https://www.youtube.com/user/codewithchris\n\nThe Code With Chris Facebook community: https://www.facebook.com/groups/codewithchriscommunity/\n\n--\n\nLearn to code for free and get a developer job: https://www.freecodecamp.org\n\nRead hundreds of articles on programming: https://medium.freecodecamp.org \n\n❤️ Support for this channel comes from our friends at Scrimba – the coding platform that's reinvented interactive learning: https://scrimba.com/freecodecamp"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT3H9M58S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "565487",
        "likeCount": "8360",
        "favoriteCount": "0",
        "commentCount": "257"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "6mn2BUiRdVw3AltJLnfObsi3f4c",
      "id": "n5X_V81OYnQ",
      "snippet": {
        "publishedAt": "2021-10-15T21:23:32Z",
        "channelId": "UCmJi5RdDLgzvkl3Ly0DRMlQ",
        "title": "Learn the Essentials of Swift in one hour",
        "description": "This video walks through all the essential language features of Swift in just under one hour, and is aimed at two groups of people: folks who have completed up to day 14 of the 100 Days of SwiftUI and want to review what they've learned, and developers with extensive experience of other languages who want to transfer their knowledge to Swift quickly.\n\nThis video is very fast! If you're struggling to understand concepts such as arrays, functions, closures, and similar, you should consider following the videos in my 100 Days of SwiftUI course at https://www.hackingwithswift.com/100/swiftui – they are much slower, providing much more explanation and example code along the way.\n\n00:00 Introduction\n01:21 Creating constants and variables, \n01:59 Strings\n03:38 Integers\n04:38 Decimals\n05:01 Booleans\n05:23 Joining strings \n05:59 Arrays\n07:39 Dictionaries\n08:16 Sets\n09:10 Enums\n09:40 Type annotations\n11:50 Conditions\n12:46 Switch statements\n13:25 The ternary conditional operator\n13:55 Loops\n16:24 Functions\n17:39 Returning multiple values from functions\n18:45 Customizing parameter labels\n19:52 Providing default values for parameters\n20:38 Handling errors in functions\n22:46 Closures\n25:02 Trailing closures and shorthand syntax\n26:22 Structs\n27:43 Computed properties\n28:37 Property observers\n29:16 Custom initializers\n30:10 Access control\n31:56 Static properties and methods\n32:42 Classes\n39:49 Protocols\n43:49 Extensions\n46:00 Protocol extensions\n49:31 Optionals\n49:31 Unwrapping optionals with guard\n51:34 Nil coalescing\n53:06 Optional chaining\n54:09 Optional try?\n55:37 Wrap up\n56:52 Dog reward",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/n5X_V81OYnQ/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/n5X_V81OYnQ/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/n5X_V81OYnQ/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/n5X_V81OYnQ/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/n5X_V81OYnQ/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Paul Hudson",
        "categoryId": "28",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "Learn the Essentials of Swift in one hour",
          "description": "This video walks through all the essential language features of Swift in just under one hour, and is aimed at two groups of people: folks who have completed up to day 14 of the 100 Days of SwiftUI and want to review what they've learned, and developers with extensive experience of other languages who want to transfer their knowledge to Swift quickly.\n\nThis video is very fast! If you're struggling to understand concepts such as arrays, functions, closures, and similar, you should consider following the videos in my 100 Days of SwiftUI course at https://www.hackingwithswift.com/100/swiftui – they are much slower, providing much more explanation and example code along the way.\n\n00:00 Introduction\n01:21 Creating constants and variables, \n01:59 Strings\n03:38 Integers\n04:38 Decimals\n05:01 Booleans\n05:23 Joining strings \n05:59 Arrays\n07:39 Dictionaries\n08:16 Sets\n09:10 Enums\n09:40 Type annotations\n11:50 Conditions\n12:46 Switch statements\n13:25 The ternary conditional operator\n13:55 Loops\n16:24 Functions\n17:39 Returning multiple values from functions\n18:45 Customizing parameter labels\n19:52 Providing default values for parameters\n20:38 Handling errors in functions\n22:46 Closures\n25:02 Trailing closures and shorthand syntax\n26:22 Structs\n27:43 Computed properties\n28:37 Property observers\n29:16 Custom initializers\n30:10 Access control\n31:56 Static properties and methods\n32:42 Classes\n39:49 Protocols\n43:49 Extensions\n46:00 Protocol extensions\n49:31 Optionals\n49:31 Unwrapping optionals with guard\n51:34 Nil coalescing\n53:06 Optional chaining\n54:09 Optional try?\n55:37 Wrap up\n56:52 Dog reward"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT58M14S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": false,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "264467",
        "likeCount": "7969",
        "favoriteCount": "0",
        "commentCount": "238"
      }
    }
  ],
  "pageInfo": {
    "totalResults": 30,
    "resultsPerPage": 30
  }
}
","status":200,"url":"https://www.googleapis.com/youtube/v3/videos?part=snippet%2CcontentDetails%2Cstatistics&id=8Xg7E9shq0U%2CCwA1VWP0Ldw%2C7fjOw8ApZ1I%2CcomQ1-x2a1Q%2Cn5X_V81OYnQ%2C8Xg7E9shq0U%2CCwA1VWP0Ldw%2Cn5X_V81OYnQ%2CcomQ1-x2a1Q%2Cb1oC7sLIgpI%2C8Xg7E9shq0U%2CCwA1VWP0Ldw%2CVSEnzzjAm0c%2CQIlI7YquuRY%2CcomQ1-x2a1Q%2C8Xg7E9shq0U%2CCwA1VWP0Ldw%2CcomQ1-x2a1Q%2Cn5X_V81OYnQ%2CFcsY1YPBwzQ%2C8Xg7E9shq0U%2CCwA1VWP0Ldw%2CcomQ1-x2a1Q%2Cn5X_V81OYnQ%2Cb1oC7sLIgpI%2C8Xg7E9shq0U%2CCwA1VWP0Ldw%2CQIlI7YquuRY%2CcomQ1-x2a1Q%2Cn5X_V81OYnQ&key=AIzaSyAeZAsOW2kBeNqsdozdSNpajJeUOXsJ2fs"},"revalidate":3600,"tags":[]}