{"kind":"FETCH","data":{"headers":{"content-encoding":"gzip","content-type":"application/json; charset=UTF-8","date":"Thu, 23 Oct 2025 11:11:26 GMT","server":"scaffolding on HTTPServer2","transfer-encoding":"chunked","vary":"Origin, X-Origin, Referer","x-content-type-options":"nosniff","x-frame-options":"SAMEORIGIN","x-xss-protection":"0"},"body":"{
  "kind": "youtube#videoListResponse",
  "etag": "SUu0mBGxKZ5-3vKjeCTXOZGDh3w",
  "items": [
    {
      "kind": "youtube#video",
      "etag": "5FYrUrOtgymQotcWwSgfOKZ3Spg",
      "id": "0-S5a0eXPoc",
      "snippet": {
        "publishedAt": "2020-05-11T16:00:11Z",
        "channelId": "UCWv7vMbMWH4-V0ZXdmDpPBA",
        "title": "React Native Tutorial for Beginners - Build a React Native App",
        "description": "Build amazing iOS & Android apps with React Native! 🚀 This beginner-friendly tutorial gets you started.\n\n❤️ Join this channel to get access to perks:\nhttps://www.youtube.com/channel/UCWv7vMbMWH4-V0ZXdmDpPBA/join\n\n🚀 Ready for a deep dive? \n- Check out my full course: https://mosh.link/react-native-course\n- Subscribe for more awesome content: https://goo.gl/6PYaGF\n\n✋ Stay connected:\n- Twitter: https://twitter.com/moshhamedani\n- Facebook: https://www.facebook.com/programmingwithmosh/\n- Instagram: https://www.instagram.com/codewithmosh.official/\n- LinkedIn: https://www.linkedin.com/school/codewithmosh/\n\n💡 Why React Native?\n- Build apps for both iOS & Android using your web development skills.\n- Faster development than native languages.\n- Huge developer community and resources.\n\n👉 This tutorial is perfect for you if:\n- You know basic React.\n- Want to break into mobile app development.\n- You value fast development and cross-platform compatibility.\n\n📕 Learn React\n- React Tutorial for Beginners: https://youtu.be/Ke90Tje7VS0\n- Mastering React Course: http://bit.ly/2KVl2A3\n\n🎁 Get the FREE goodies:\n- Layout Exercises PDF: https://bit.ly/3dzbKDZ\n- Layout Exercises Supplementary Materials: https://bit.ly/3fvqZQ9\n\n📖 TABLE OF CONTENT \n0:00:00 Introduction\n0:02:20 Prerequisites\n0:02:58 What is React Native?\n0:04:33 Expo\n0:06:19 Setting up the development environment \n0:09:17 Your First React Native App\n0:14:38 Running on an iOS simulator\n0:18:02 Running on an Android emulator\n0:26:48 Running on a physical device\n0:27:54 Logging\n0:29:16 Debugging with Chrome\n0:34:27 Debugging in VSCode\n0:41:39 Publishing\n0:46:30 Fundamental Concepts\n0:48:20 View\n0:51:08 Text\n0:53:50 Image\n0:59:25 Touchables\n1:04:21 Button\n1:06:01 Alert\n1:09:55 StyleSheet\n1:14:49 Platform-specific code\n1:18:06 Layouts\n1:18:43 Dimensions\n1:22:22 Detecting orientation changes\n1:27:39 Flexbox\n1:30:56 flexDirection\n1:32:48 justifyContent, alignItems and alignSelf \n1:37:22 flexWrap and alignContent\n1:40:22 flexBasis, flexGrow and flexShrink \n1:43:07 Absolute and Relative Positioning \n1:45:59 Exercises\n1:46:58 Welcome Screen\n1:57:55 View Image Screen\n2:02:51 Refactoring\n\n#reactnative #reactjs #javascript #coding #programming",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/0-S5a0eXPoc/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/0-S5a0eXPoc/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/0-S5a0eXPoc/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/0-S5a0eXPoc/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/0-S5a0eXPoc/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Programming with Mosh",
        "tags": [
          "react native",
          "react native tutorial",
          "react native app",
          "react native tutorial for beginners",
          "react native crash course",
          "react native project",
          "react native app tutorial",
          "react",
          "javascript",
          "mobile app development",
          "tutorial",
          "react native for beginners",
          "app development",
          "react-native",
          "programming",
          "react native course",
          "code with mosh",
          "programming with mosh",
          "mosh hamedani",
          "learn react native",
          "react native 2020",
          "learn react",
          "reactnative"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "React Native Tutorial for Beginners - Build a React Native App",
          "description": "Build amazing iOS & Android apps with React Native! 🚀 This beginner-friendly tutorial gets you started.\n\n❤️ Join this channel to get access to perks:\nhttps://www.youtube.com/channel/UCWv7vMbMWH4-V0ZXdmDpPBA/join\n\n🚀 Ready for a deep dive? \n- Check out my full course: https://mosh.link/react-native-course\n- Subscribe for more awesome content: https://goo.gl/6PYaGF\n\n✋ Stay connected:\n- Twitter: https://twitter.com/moshhamedani\n- Facebook: https://www.facebook.com/programmingwithmosh/\n- Instagram: https://www.instagram.com/codewithmosh.official/\n- LinkedIn: https://www.linkedin.com/school/codewithmosh/\n\n💡 Why React Native?\n- Build apps for both iOS & Android using your web development skills.\n- Faster development than native languages.\n- Huge developer community and resources.\n\n👉 This tutorial is perfect for you if:\n- You know basic React.\n- Want to break into mobile app development.\n- You value fast development and cross-platform compatibility.\n\n📕 Learn React\n- React Tutorial for Beginners: https://youtu.be/Ke90Tje7VS0\n- Mastering React Course: http://bit.ly/2KVl2A3\n\n🎁 Get the FREE goodies:\n- Layout Exercises PDF: https://bit.ly/3dzbKDZ\n- Layout Exercises Supplementary Materials: https://bit.ly/3fvqZQ9\n\n📖 TABLE OF CONTENT \n0:00:00 Introduction\n0:02:20 Prerequisites\n0:02:58 What is React Native?\n0:04:33 Expo\n0:06:19 Setting up the development environment \n0:09:17 Your First React Native App\n0:14:38 Running on an iOS simulator\n0:18:02 Running on an Android emulator\n0:26:48 Running on a physical device\n0:27:54 Logging\n0:29:16 Debugging with Chrome\n0:34:27 Debugging in VSCode\n0:41:39 Publishing\n0:46:30 Fundamental Concepts\n0:48:20 View\n0:51:08 Text\n0:53:50 Image\n0:59:25 Touchables\n1:04:21 Button\n1:06:01 Alert\n1:09:55 StyleSheet\n1:14:49 Platform-specific code\n1:18:06 Layouts\n1:18:43 Dimensions\n1:22:22 Detecting orientation changes\n1:27:39 Flexbox\n1:30:56 flexDirection\n1:32:48 justifyContent, alignItems and alignSelf \n1:37:22 flexWrap and alignContent\n1:40:22 flexBasis, flexGrow and flexShrink \n1:43:07 Absolute and Relative Positioning \n1:45:59 Exercises\n1:46:58 Welcome Screen\n1:57:55 View Image Screen\n2:02:51 Refactoring\n\n#reactnative #reactjs #javascript #coding #programming"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT2H6M30S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "true",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "3580574",
        "likeCount": "54806",
        "favoriteCount": "0",
        "commentCount": "2055"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "enTVIXytCGYhE0QEOf_DFjfghek",
      "id": "f8Z9JyB2EIE",
      "snippet": {
        "publishedAt": "2025-03-07T16:12:02Z",
        "channelId": "UCmXmlB4-HJytD7wek0Uo97A",
        "title": "React Native Course for Beginners in 2025 | Build a Full Stack React Native App",
        "description": "Get hands-on with React Native and Expo in this crash course! Build a mobile movie app from scratch, and learn essential skills for mobile development along the way.\n\n⭐ Join JS Mastery Pro: https://jsm.dev/reactnative25-jsmpro\n💎 Become a Top 1% Next.js Developer: https://jsm.dev/reactnative25-nextjs\n\n📁 Free Video Kit (Code, Design, Repo, Guide): https://jsm.dev/reactnative25-kit\n📘 React Native Pro Course Waitlist: https://jsm.dev/reactnative25-waitlist\n\nAppwrite: https://jsm.dev/reactnative25-appwrite\nWebStorm: https://jsm.dev/reactnative25-webstorm\n\nRate us on TrustPilot: https://jsm.dev/trustpilot\n\nhttps://discord.com/invite/n6EdbFJ https://twitter.com/jsmasterypro https://instagram.com/javascriptmastery https://linkedin.com/company/javascriptmastery\n\nBusiness Inquiries: contact@jsmastery.pro\n\nTime Stamps 👇\n00:00:00 — Intro\n00:02:12 — Why React Native?\n00:06:00 — React Native Fundamentals\n00:16:34 — Project Overview\n00:18:34 — Intro & Setup\n00:27:01— Setup Styling\n00:35:56 — Routing & Navigation\n00:58:28 — Customize App Title & Icon\n01:00:41 — Home Screen UI\n01:09:39 — TMDB API\n01:19:06 — Custom Hook\n01:25:38 — Fetch & Display Movies\n01:45:59 — Develop Search Screen\n02:04:36 — Appwrite Setup\n02:22:01 — Show Trending Movies\n02:38:50 — Hide StatusBar\n02:41:16 — Movie Details\n03:02:09 — Optimization",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/f8Z9JyB2EIE/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/f8Z9JyB2EIE/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/f8Z9JyB2EIE/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/f8Z9JyB2EIE/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/f8Z9JyB2EIE/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "JavaScript Mastery",
        "tags": [
          "javascript",
          "javascript mastery",
          "js mastery",
          "master javascript",
          "react native",
          "react native tutorial",
          "react native expo",
          "react native expo router",
          "react native expo crash course",
          "react native tutorial for beginners",
          "react native course",
          "react native app",
          "react native course 2024",
          "expo 52",
          "expo 52 sdk",
          "app development",
          "react native mobile apps",
          "react native mobile app development tutorial",
          "expo",
          "expo router",
          "expo tutorial",
          "expo react native",
          "expo react native tutorial"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "React Native Course for Beginners in 2025 | Build a Full Stack React Native App",
          "description": "Get hands-on with React Native and Expo in this crash course! Build a mobile movie app from scratch, and learn essential skills for mobile development along the way.\n\n⭐ Join JS Mastery Pro: https://jsm.dev/reactnative25-jsmpro\n💎 Become a Top 1% Next.js Developer: https://jsm.dev/reactnative25-nextjs\n\n📁 Free Video Kit (Code, Design, Repo, Guide): https://jsm.dev/reactnative25-kit\n📘 React Native Pro Course Waitlist: https://jsm.dev/reactnative25-waitlist\n\nAppwrite: https://jsm.dev/reactnative25-appwrite\nWebStorm: https://jsm.dev/reactnative25-webstorm\n\nRate us on TrustPilot: https://jsm.dev/trustpilot\n\nhttps://discord.com/invite/n6EdbFJ https://twitter.com/jsmasterypro https://instagram.com/javascriptmastery https://linkedin.com/company/javascriptmastery\n\nBusiness Inquiries: contact@jsmastery.pro\n\nTime Stamps 👇\n00:00:00 — Intro\n00:02:12 — Why React Native?\n00:06:00 — React Native Fundamentals\n00:16:34 — Project Overview\n00:18:34 — Intro & Setup\n00:27:01— Setup Styling\n00:35:56 — Routing & Navigation\n00:58:28 — Customize App Title & Icon\n01:00:41 — Home Screen UI\n01:09:39 — TMDB API\n01:19:06 — Custom Hook\n01:25:38 — Fetch & Display Movies\n01:45:59 — Develop Search Screen\n02:04:36 — Appwrite Setup\n02:22:01 — Show Trending Movies\n02:38:50 — Hide StatusBar\n02:41:16 — Movie Details\n03:02:09 — Optimization"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT3H6M19S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "1551467",
        "likeCount": "18866",
        "favoriteCount": "0",
        "commentCount": "1106"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "9Y6Ic2Bnana66ICJJLNjGqlyzfs",
      "id": "SqcY0GlETPk",
      "snippet": {
        "publishedAt": "2023-03-12T08:00:07Z",
        "channelId": "UCWv7vMbMWH4-V0ZXdmDpPBA",
        "title": "React Tutorial for Beginners",
        "description": "Master React 18 with TypeScript! ⚛️  Build amazing front-end apps with this beginner-friendly tutorial.\n\n❤️ Join this channel to get access to perks:\nhttps://www.youtube.com/channel/UCWv7vMbMWH4-V0ZXdmDpPBA/join\n\n🚀 Want the ultimate React deep dive? Check out my full course: https://mosh.link/react-course\n- Subscribe for more awesome content: https://goo.gl/6PYaGF\n\n✋ Stay connected:\n- Twitter: https://twitter.com/moshhamedani\n- Facebook: https://www.facebook.com/programmingwithmosh/\n- Instagram: https://www.instagram.com/codewithmosh.official/\n- LinkedIn: https://www.linkedin.com/school/codewithmosh/\n\n📖 TABLE OF CONTENT\n00:00:00 Course Intro\n00:01:55 Prerequisites\n00:02:43 What is React?\n00:04:57 Setting Up the Development Environment \n00:06:24 Creating a React App\n00:09:17 Project Structure\n00:11:20 Creating a React Component\n00:16:41 How React Works\n00:19:00 React Ecosystem\n00:21:04 Building Components\n00:21:40 Creating a ListGroup Component\n00:27:15 Fragments\n00:29:42 Rendering Lists\n00:33:11 Conditional Rendering\n00:38:36 Handling Events\n00:44:43 Managing State\n00:50:44 Passing Data Via Props\n00:54:42 Passing Functions Via Props\n00:58:27 State Vs Props\n01:00:00 Passing Children\n01:05:04 Inspecting Components with React Dev Tools \n01:07:14 Exercise: Building a Button Component \n01:14:15 Exercise: Showing an Alert\n\n#react #reactjs #javascript #coding",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/SqcY0GlETPk/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/SqcY0GlETPk/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/SqcY0GlETPk/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/SqcY0GlETPk/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/SqcY0GlETPk/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Programming with Mosh",
        "tags": [
          "react js",
          "react tutorial",
          "learn react",
          "react course",
          "reactjs tutorial",
          "react crash course",
          "react js tutorial",
          "reactjs course",
          "react tutorial for beginners",
          "react.js",
          "reactjs tutorial for beginners",
          "reactJS",
          "react",
          "learn reactjs",
          "tutorial",
          "javascript",
          "crash course",
          "programming with mosh",
          "code with mosh",
          "web development",
          "mosh hamedani",
          "learn react js",
          "typescript"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "React Tutorial for Beginners",
          "description": "Master React 18 with TypeScript! ⚛️  Build amazing front-end apps with this beginner-friendly tutorial.\n\n❤️ Join this channel to get access to perks:\nhttps://www.youtube.com/channel/UCWv7vMbMWH4-V0ZXdmDpPBA/join\n\n🚀 Want the ultimate React deep dive? Check out my full course: https://mosh.link/react-course\n- Subscribe for more awesome content: https://goo.gl/6PYaGF\n\n✋ Stay connected:\n- Twitter: https://twitter.com/moshhamedani\n- Facebook: https://www.facebook.com/programmingwithmosh/\n- Instagram: https://www.instagram.com/codewithmosh.official/\n- LinkedIn: https://www.linkedin.com/school/codewithmosh/\n\n📖 TABLE OF CONTENT\n00:00:00 Course Intro\n00:01:55 Prerequisites\n00:02:43 What is React?\n00:04:57 Setting Up the Development Environment \n00:06:24 Creating a React App\n00:09:17 Project Structure\n00:11:20 Creating a React Component\n00:16:41 How React Works\n00:19:00 React Ecosystem\n00:21:04 Building Components\n00:21:40 Creating a ListGroup Component\n00:27:15 Fragments\n00:29:42 Rendering Lists\n00:33:11 Conditional Rendering\n00:38:36 Handling Events\n00:44:43 Managing State\n00:50:44 Passing Data Via Props\n00:54:42 Passing Functions Via Props\n00:58:27 State Vs Props\n01:00:00 Passing Children\n01:05:04 Inspecting Components with React Dev Tools \n01:07:14 Exercise: Building a Button Component \n01:14:15 Exercise: Showing an Alert\n\n#react #reactjs #javascript #coding"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT1H20M4S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "5195004",
        "likeCount": "88847",
        "favoriteCount": "0",
        "commentCount": "1889"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "7L0DvGcjI5VwoLR4SIS-s-hWFQ8",
      "id": "JKccS9k56_I",
      "snippet": {
        "publishedAt": "2024-12-31T14:00:19Z",
        "channelId": "UCc7gpqMnnOSbU_F2-5MVVZw",
        "title": "React Native Full Course for Beginners | Build Your First Mobile App in 4 Hours!",
        "description": "Ready to build your first mobile app? 🚀 In this 4-hour beginner-friendly React Native course, I’ll teach you step-by-step how to create amazing cross-platform apps!\n\nNo experience? No problem! Learn the basics, master components, state, and props, and get started with real mobile development.\n\nReact Native powers apps like Instagram and Airbnb—now it’s your turn! Let’s make coding fun and simple.\n\n\n\nMachine Requirements for React Native CLI\n\n\n1. Operating System:\nWindows: Windows 10 or newer (64-bit).\nmacOS: macOS 11 (Big Sur) or newer (required for\niOS app development).\nLinux: Any modern distribution like Ubuntu or Fedora.\n\n\n2. Hardware:\nProcessor: 2 GHz or faster multi-core processor.\nRAM: Minimum 8 GB (16 GB recommended for\nsmooth performance).\nDisk Space: At least 30 GB free for tools, SDKs, and\ndependencies.\n\n\nDon’t forget to like, share, and subscribe for more awesome tutorials!\n\nJoin our General Discussion on Discord - https://discord.gg/sAaqkAfpmN\n\nVisit our Website - https://sheryians.com/\n\nInstructor in this video: Muskan Rai\n\nDon't forget to LIKE 👍 this video, SUBSCRIBE 🔔 for more DSA tutorials, and COMMENT below if you have any questions or suggestions! 🚀\n\nOur Website - https://sheryians.com/\n\nSocials:\n📷 Instagram:  https://www.instagram.com/sheryians_coding_school/\n📘 Facebook: https://www.facebook.com/sheryians.community\n💌 Telegram: https://t.me/sheryiansCommunity\n💼 LinkedIn:  https://in.linkedin.com/company/the-sheryians-coding-school\n🎮 Discord: https://discord.gg/Au3TquBarQ\nPeace out ✌\n\n#sheryianscodingschool #sheryians #code #coding #jobs #reactjs  #mernstack #mern #web #reactjscourse #tutorial  #creativewebdevelopment #webdevelopment #functionalwebdevelopment #thebasics #mernstack #jslogic #javascriptlogics\n\n\n-----------------------------------------------------------------------------------------------------------------------------------------\nTimestamps : \n\n0:00 - 04:40 - Introduction\n04:41 - 06:26 - What is React Native ? \n06:27 - 09:20 - Expo cli vs React Native cli\n09:21 - 38:34 - Windows Setup\n38:35 - 52:53 - Mac Setup\n52:54 - 01:06:57 - Fundamental Concepts\n01:06:58 - 01:58:34 - Styling\n01:58:35 - 02:00:58 - Scroll View \n02:00:59 - 02:16:57 - FlatList \n02:16:58 - 02:34:50 - Handling User Input\n02:34:51 - 03:06:45 - Stack Navigation\n03:06:46 - 03:24:23 - Tab Navigation\n03:24:24 - 03:25:41 - Project Preview\n03:25:42 - 04:20:45 - Project Making\n04:20:46 - 04:21:13 - Outro",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/JKccS9k56_I/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/JKccS9k56_I/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/JKccS9k56_I/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/JKccS9k56_I/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/JKccS9k56_I/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Sheryians Coding School",
        "tags": [
          "sheryians",
          "sheryians coding school",
          "web development",
          "web development projects",
          "coding",
          "code",
          "programming",
          "js",
          "animation",
          "internship",
          "web animation",
          "coding journey",
          "mernstack",
          "reactjs",
          "reactjstutorial",
          "mernstacktutorial",
          "reactjscrashcourse",
          "reactjscourse",
          "project",
          "html",
          "css",
          "javascript",
          "react js tutorial",
          "react",
          "react js",
          "react js project",
          "sheryians react",
          "next",
          "localstorage in react js",
          "three js",
          "job",
          "sarthak sharma",
          "Harsh Sharma"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "React Native Full Course for Beginners | Build Your First Mobile App in 4 Hours!",
          "description": "Ready to build your first mobile app? 🚀 In this 4-hour beginner-friendly React Native course, I’ll teach you step-by-step how to create amazing cross-platform apps!\n\nNo experience? No problem! Learn the basics, master components, state, and props, and get started with real mobile development.\n\nReact Native powers apps like Instagram and Airbnb—now it’s your turn! Let’s make coding fun and simple.\n\n\n\nMachine Requirements for React Native CLI\n\n\n1. Operating System:\nWindows: Windows 10 or newer (64-bit).\nmacOS: macOS 11 (Big Sur) or newer (required for\niOS app development).\nLinux: Any modern distribution like Ubuntu or Fedora.\n\n\n2. Hardware:\nProcessor: 2 GHz or faster multi-core processor.\nRAM: Minimum 8 GB (16 GB recommended for\nsmooth performance).\nDisk Space: At least 30 GB free for tools, SDKs, and\ndependencies.\n\n\nDon’t forget to like, share, and subscribe for more awesome tutorials!\n\nJoin our General Discussion on Discord - https://discord.gg/sAaqkAfpmN\n\nVisit our Website - https://sheryians.com/\n\nInstructor in this video: Muskan Rai\n\nDon't forget to LIKE 👍 this video, SUBSCRIBE 🔔 for more DSA tutorials, and COMMENT below if you have any questions or suggestions! 🚀\n\nOur Website - https://sheryians.com/\n\nSocials:\n📷 Instagram:  https://www.instagram.com/sheryians_coding_school/\n📘 Facebook: https://www.facebook.com/sheryians.community\n💌 Telegram: https://t.me/sheryiansCommunity\n💼 LinkedIn:  https://in.linkedin.com/company/the-sheryians-coding-school\n🎮 Discord: https://discord.gg/Au3TquBarQ\nPeace out ✌\n\n#sheryianscodingschool #sheryians #code #coding #jobs #reactjs  #mernstack #mern #web #reactjscourse #tutorial  #creativewebdevelopment #webdevelopment #functionalwebdevelopment #thebasics #mernstack #jslogic #javascriptlogics\n\n\n-----------------------------------------------------------------------------------------------------------------------------------------\nTimestamps : \n\n0:00 - 04:40 - Introduction\n04:41 - 06:26 - What is React Native ? \n06:27 - 09:20 - Expo cli vs React Native cli\n09:21 - 38:34 - Windows Setup\n38:35 - 52:53 - Mac Setup\n52:54 - 01:06:57 - Fundamental Concepts\n01:06:58 - 01:58:34 - Styling\n01:58:35 - 02:00:58 - Scroll View \n02:00:59 - 02:16:57 - FlatList \n02:16:58 - 02:34:50 - Handling User Input\n02:34:51 - 03:06:45 - Stack Navigation\n03:06:46 - 03:24:23 - Tab Navigation\n03:24:24 - 03:25:41 - Project Preview\n03:25:42 - 04:20:45 - Project Making\n04:20:46 - 04:21:13 - Outro"
        },
        "defaultAudioLanguage": "en-IN"
      },
      "contentDetails": {
        "duration": "PT4H21M14S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "361167",
        "likeCount": "8603",
        "favoriteCount": "0",
        "commentCount": "1742"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "3r2fTICzvc02uDLRJg7qXlI4kBw",
      "id": "J50gwzwLvAk",
      "snippet": {
        "publishedAt": "2025-05-27T13:00:28Z",
        "channelId": "UC8S4rDRZn6Z_StJ-hh7ph8g",
        "title": "React Native Full Course 2025 | Become a React Native Pro in 4 Hours",
        "description": "In this video, I will teach you everything you need to know about React Native for beginners. I will take you from setting up your first project, setting up screens, understanding navigation and building your first full stack react native app.\n\nWant to MASTER NextJS? 🍀\nCheck out my Course: https://www.webdevultra.com/nextjs\n\n🌟 Support My Work: https://buymeacoffee.com/pedrow\n📰 Join My Newsletter: https://www.pedrotech.co/newsletter\n\n📖 Video Resources:\nCode Repo: https://www.webdevultra.com/video-info/J50gwzwLvAk\nAppwrite: https://appwrite.io/\n\n💻 Check out my Blog: https://www.pedrotech.co\n🐤 Follow me on Twitter: (https://twitter.com/pedrotech_)\n📸 Follow me on Instagram: (https://www.instagram.com/pedro.fmachado_/)\n🧳 Follow me on Linkedin: (https://www.linkedin.com/in/pedrotech/)\n👨\u200d💻 GitHub: https://github.com/machadop1407\n\n📋 Business Email: pedro@pedrotech.co\n\nTimestamps:\n00:00 - Introduction & What You'll Build\n01:00 - Why React Native & Expo in 2025\n02:45 - Understanding Core Components (View, Text, TextInput, ScrollView)\n03:58 - What is Expo and Why We're Using It\n04:48 - Creating a New Expo App Project\n06:17 - Exploring the Boilerplate Project\n07:10 - Understanding the App Folder, index.tsx, and _layout.tsx\n08:48 - Navigation Basics with Expo Router\n13:12 - Creating and Linking New Screens\n17:01 - Styling and Customizing Navigation Links\n20:50 - Implementing Bottom Tab Navigation with Expo Router\n27:04 - Customizing Tab Icons & Active States\n29:56 - Starting the Habit Tracker App: Project Structure & Goal\n34:04 - Setting Up Appwrite for Backend Services\n38:09 - Creating the Appwrite Client in Your Project\n42:10 - Building the Auth Page UI with React Native Paper\n47:07 - Implementing Route Guards with Expo Router\n50:04 - Handling Sign Up / Sign In Logic\n56:00 - Finalizing UI & Switching Between Auth Modes\n1:03:00 - Wiring Up Auth Logic with Context API\n1:10:00 - Using Auth Provider and Redirecting Logged-In Users\n1:17:32 - Sign Out Functionality and Testing Auth Flow\n1:21:10 - Planning the Habit Tracker Screens\n1:23:00 - Styling Tabs & Customizing Navigation UI\n1:28:20 - Setting Up the Appwrite Database & Collections\n1:33:00 - Connecting to Appwrite Database from React Native\n1:35:00 - Building the Add Habit Screen UI\n2:00:33 - Adding Habits to the Database  \n2:06:18 - Handling Permissions in Appwrite  \n2:08:04 - Fetching & Displaying Today's Habits  \n2:14:13 - Building the Habits UI  \n2:19:03 - Styling the Habit Cards  \n2:31:05 - Making the Screen Scrollable  \n2:34:00 - Setting Up Swipe to Complete/Delete  \n2:40:00 - Implementing Swipeable Actions  \n2:44:00 - Deleting a Habit with Swipe  \n2:46:00 - Fixing Swipe Ref Behavior  \n2:48:00 - Completing a Habit & Creating a New Collection  \n2:59:02 - Updating Habit Streak on Completion  \n3:00:06 - Completing a Habit and Updating the Streak  \n3:03:12 - Creating the Habit Completions Collection  \n3:04:14 - Fetching Today's Completions  \n3:07:02 - Preventing Duplicate Completions  \n3:10:30 - Subscribing to Habit Completion Updates  \n3:13:13 - Styling Completed Habits  \n3:17:32 - Creating the Streaks Screen  \n3:21:00 - Fetching Habit Completion History  \n3:23:24 - Calculating Current & Best Streaks  \n3:32:29 - Ranking Habits by Streak  \n3:37:04 - Displaying Streak Cards  \n3:54:06 - Building Top 3 Habit Leaderboard  \n4:03:00 - Final UI Touches & Styling  \n4:06:59 - Outro",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/J50gwzwLvAk/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/J50gwzwLvAk/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/J50gwzwLvAk/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/J50gwzwLvAk/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/J50gwzwLvAk/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "PedroTech",
        "tags": [
          "javascript",
          "react tutorial",
          "reactjs",
          "react js",
          "pedrotech",
          "freecodecamp",
          "pedro tech",
          "React Native crash course",
          "React Native tutorial",
          "Expo tutorial",
          "React Native 2025",
          "React Native beginner",
          "Expo app",
          "React Native app",
          "learn React Native",
          "mobile development tutorial",
          "React Native with Expo",
          "build mobile apps 2025",
          "React Native for beginners",
          "React Native authentication",
          "React Native course",
          "Expo React Native tutorial",
          "build app with Expo",
          "React Native fullstack",
          "javascriptmastery"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "React Native Full Course 2025 | Become a React Native Pro in 4 Hours",
          "description": "In this video, I will teach you everything you need to know about React Native for beginners. I will take you from setting up your first project, setting up screens, understanding navigation and building your first full stack react native app.\n\nWant to MASTER NextJS? 🍀\nCheck out my Course: https://www.webdevultra.com/nextjs\n\n🌟 Support My Work: https://buymeacoffee.com/pedrow\n📰 Join My Newsletter: https://www.pedrotech.co/newsletter\n\n📖 Video Resources:\nCode Repo: https://www.webdevultra.com/video-info/J50gwzwLvAk\nAppwrite: https://appwrite.io/\n\n💻 Check out my Blog: https://www.pedrotech.co\n🐤 Follow me on Twitter: (https://twitter.com/pedrotech_)\n📸 Follow me on Instagram: (https://www.instagram.com/pedro.fmachado_/)\n🧳 Follow me on Linkedin: (https://www.linkedin.com/in/pedrotech/)\n👨\u200d💻 GitHub: https://github.com/machadop1407\n\n📋 Business Email: pedro@pedrotech.co\n\nTimestamps:\n00:00 - Introduction & What You'll Build\n01:00 - Why React Native & Expo in 2025\n02:45 - Understanding Core Components (View, Text, TextInput, ScrollView)\n03:58 - What is Expo and Why We're Using It\n04:48 - Creating a New Expo App Project\n06:17 - Exploring the Boilerplate Project\n07:10 - Understanding the App Folder, index.tsx, and _layout.tsx\n08:48 - Navigation Basics with Expo Router\n13:12 - Creating and Linking New Screens\n17:01 - Styling and Customizing Navigation Links\n20:50 - Implementing Bottom Tab Navigation with Expo Router\n27:04 - Customizing Tab Icons & Active States\n29:56 - Starting the Habit Tracker App: Project Structure & Goal\n34:04 - Setting Up Appwrite for Backend Services\n38:09 - Creating the Appwrite Client in Your Project\n42:10 - Building the Auth Page UI with React Native Paper\n47:07 - Implementing Route Guards with Expo Router\n50:04 - Handling Sign Up / Sign In Logic\n56:00 - Finalizing UI & Switching Between Auth Modes\n1:03:00 - Wiring Up Auth Logic with Context API\n1:10:00 - Using Auth Provider and Redirecting Logged-In Users\n1:17:32 - Sign Out Functionality and Testing Auth Flow\n1:21:10 - Planning the Habit Tracker Screens\n1:23:00 - Styling Tabs & Customizing Navigation UI\n1:28:20 - Setting Up the Appwrite Database & Collections\n1:33:00 - Connecting to Appwrite Database from React Native\n1:35:00 - Building the Add Habit Screen UI\n2:00:33 - Adding Habits to the Database  \n2:06:18 - Handling Permissions in Appwrite  \n2:08:04 - Fetching & Displaying Today's Habits  \n2:14:13 - Building the Habits UI  \n2:19:03 - Styling the Habit Cards  \n2:31:05 - Making the Screen Scrollable  \n2:34:00 - Setting Up Swipe to Complete/Delete  \n2:40:00 - Implementing Swipeable Actions  \n2:44:00 - Deleting a Habit with Swipe  \n2:46:00 - Fixing Swipe Ref Behavior  \n2:48:00 - Completing a Habit & Creating a New Collection  \n2:59:02 - Updating Habit Streak on Completion  \n3:00:06 - Completing a Habit and Updating the Streak  \n3:03:12 - Creating the Habit Completions Collection  \n3:04:14 - Fetching Today's Completions  \n3:07:02 - Preventing Duplicate Completions  \n3:10:30 - Subscribing to Habit Completion Updates  \n3:13:13 - Styling Completed Habits  \n3:17:32 - Creating the Streaks Screen  \n3:21:00 - Fetching Habit Completion History  \n3:23:24 - Calculating Current & Best Streaks  \n3:32:29 - Ranking Habits by Streak  \n3:37:04 - Displaying Streak Cards  \n3:54:06 - Building Top 3 Habit Leaderboard  \n4:03:00 - Final UI Touches & Styling  \n4:06:59 - Outro"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT4H9M",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "145203",
        "likeCount": "4043",
        "favoriteCount": "0",
        "commentCount": "287"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "u_UZzmfB58-65nYDusStan3-plg",
      "id": "sm5Y7Vtuihg",
      "snippet": {
        "publishedAt": "2024-12-30T14:26:43Z",
        "channelId": "UC8butISFwT-Wl7EV0hUK0BQ",
        "title": "React Native Full Course for Beginners",
        "description": "This React Native Course for beginners from @DaveGrayTeachesCode is an all-in-one tutorial full of over 4 hours of React Native code and instruction to help you learn the basics of mobile app development. \n\n🔗 Course Resources: https://github.com/gitdagray/react-native-course\n\n❤️ Try interactive React courses we love, right in your browser: https://scrimba.com/freeCodeCamp-React (Made possible by a grant from our friends at Scrimba)\n\n⭐️ Contents ⭐️\n(0:00:00) Intro\n(0:01:08) Chapter 1: Start Here\n(0:21:47) Chapter 2: Build an App\n(0:43:06) Chapter 3: Navigation\n(1:17:25) Chapter 4: List Views\n(2:05:47) Chapter 5: CRUD App\n(2:42:40) Chapter 6: Data Storage\n(3:20:20) Chapter 7: Dynamic Routing\n(4:02:34) Chapter 8: EAS Development Builds\n\n🎉 Thanks to our Champion and Sponsor supporters:\n👾 Drake Milly\n👾 Ulises Moralez\n👾 Goddard Tan\n👾 David MG\n👾 Matthew Springman\n👾 Claudio\n👾 Oscar R.\n👾 jedi-or-sith\n👾 Nattira Maneerat\n👾 Justin Hual\n\n--\n\nLearn to code for free and get a developer job: https://www.freecodecamp.org\n\nRead hundreds of articles on programming: https://freecodecamp.org/news",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/sm5Y7Vtuihg/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/sm5Y7Vtuihg/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/sm5Y7Vtuihg/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/sm5Y7Vtuihg/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/sm5Y7Vtuihg/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "freeCodeCamp.org",
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "React Native Full Course for Beginners",
          "description": "This React Native Course for beginners from @DaveGrayTeachesCode is an all-in-one tutorial full of over 4 hours of React Native code and instruction to help you learn the basics of mobile app development. \n\n🔗 Course Resources: https://github.com/gitdagray/react-native-course\n\n❤️ Try interactive React courses we love, right in your browser: https://scrimba.com/freeCodeCamp-React (Made possible by a grant from our friends at Scrimba)\n\n⭐️ Contents ⭐️\n(0:00:00) Intro\n(0:01:08) Chapter 1: Start Here\n(0:21:47) Chapter 2: Build an App\n(0:43:06) Chapter 3: Navigation\n(1:17:25) Chapter 4: List Views\n(2:05:47) Chapter 5: CRUD App\n(2:42:40) Chapter 6: Data Storage\n(3:20:20) Chapter 7: Dynamic Routing\n(4:02:34) Chapter 8: EAS Development Builds\n\n🎉 Thanks to our Champion and Sponsor supporters:\n👾 Drake Milly\n👾 Ulises Moralez\n👾 Goddard Tan\n👾 David MG\n👾 Matthew Springman\n👾 Claudio\n👾 Oscar R.\n👾 jedi-or-sith\n👾 Nattira Maneerat\n👾 Justin Hual\n\n--\n\nLearn to code for free and get a developer job: https://www.freecodecamp.org\n\nRead hundreds of articles on programming: https://freecodecamp.org/news"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT4H23M53S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "310675",
        "likeCount": "6782",
        "favoriteCount": "0",
        "commentCount": "271"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "ou3HF2Pti1F2diAfs5QutnbRgXM",
      "id": "obH0Po_RdWk",
      "snippet": {
        "publishedAt": "2023-04-10T14:29:03Z",
        "channelId": "UC8butISFwT-Wl7EV0hUK0BQ",
        "title": "React Native Course – Android and iOS App Development",
        "description": "Master React Native with this comprehensive course, covering everything from the basics of setup and components to advanced topics like navigation and fetching API data. Learn to build a weather app from scratch, complete with a sleek user interface and real-time data integration, while exploring concepts like state management, hooks, and styling.\n\n💻 Code: https://github.com/Em01/weather-app-demo\n\n✏️ Course created by @codecupdev \n🔗 Instagram: https://www.instagram.com/codecup_dev/\n🔗 Twitter: https://twitter.com/codecupdev\n\n❤️ Try interactive React courses we love, right in your browser: https://scrimba.com/freeCodeCamp-React (Made possible by a grant from our friends at Scrimba)\n\n⭐️ Contents ⭐️\n⌨️ (0:00:00) Introduction\n⌨️ (0:01:25) What is React Native?\n⌨️ (0:03:45) Expo\n⌨️ (0:04:22) Setup with Expo\n⌨️ (0:06:17) Setting up a custom app \n⌨️ (0:10:17) Setting up Android Studio \n⌨️ (0:12:03) The directory structure \n⌨️ (0:12:42) Setting up linting \n⌨️ (0:14:33) Setting up Prettier \n⌨️ (0:16:35) Debugging \n⌨️ (0:18:17) Native components \n⌨️ (0:19:00) Core components \n⌨️ (0:20:17) JSX \n⌨️ (0:21:29) Working with components \n⌨️ (0:21:57) What are components \n⌨️ (0:23:08) Creating our first component \n⌨️ (0:26:50) Styling basics \n⌨️ (0:31:17) Layout props \n⌨️ (0:32:37) The current weather screen \n⌨️ (0:40:17) Adding icons to the screen \n⌨️ (0:42:40) Components \n⌨️ (0:46:01) Reviewing what we have learnt so far \n⌨️ (0:48:52) Creating the upcoming weather component \n⌨️ (0:52:17) Introducing lists \n⌨️ (1:19:17) Implementing our list \n⌨️ (1:09:10) Key extractors\n⌨️ (1:11:41) Other FlatList props\n⌨️ (1:15:01) Styling our FlatList\n⌨️ (1:19:23) Images\n⌨️ (1:22:31) Using an image in the upcoming weather component\n⌨️ (1:24:10) ImageBackground\n⌨️ (1:26:05) Props\n⌨️ (1:35:17) Refactoring what we have done so far\n⌨️ (1:43:04) Implementing the city screen\n⌨️ (2:00:17) Refactoring the city screen\n⌨️ (2:15:32) Refactoring the current weather screen\n⌨️ (2:26:25) Introducing Navigation\n⌨️ (2:34:37) Implementing tabs in our app\n⌨️ (2:40:02) Styling our tabs\n⌨️ (2:47:27) Extracting the tabs\n⌨️ (3:06:55) State\n⌨️ (3:15:07) The useState hook\n⌨️ (3:19:24) Hooks\n⌨️ (3:23:24) The useEffect hook\n⌨️ (3:32:05) Adding a loading state\n⌨️ (3:38:31) Using the open weather map api\n⌨️ (3:39:31) Getting the users location\n⌨️ (3:47:36) Seting up fetching the api data\n⌨️ (3:52:38) Fetching the Api data\n⌨️ (4:01:17) Making our own hook\n⌨️ (4:05:17) Passing the data to our components\n⌨️ (4:08:42) Updating current weather to use the data\n⌨️ (4:14:32) Updating the upcoming weather to use the data\n⌨️ (4:18:17) Installing Moment\n⌨️ (4:21:17) Updating the city component\n⌨️ (4:25:53) Creating the error screen\n⌨️ (4:31:42) Some last refactoring\n⌨️ (4:33:59) Bonus material\n\n🎉 Thanks to our Champion and Sponsor supporters:\n👾 Nattira Maneerat\n👾 Heather Wcislo\n👾 Serhiy Kalinets\n👾 Erdeniz Unvan\n👾 Justin Hual\n👾 Agustín Kussrow\n👾 Otis Morgan\n\n--\n\nLearn to code for free and get a developer job: https://www.freecodecamp.org\n\nRead hundreds of articles on programming: https://freecodecamp.org/news",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/obH0Po_RdWk/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/obH0Po_RdWk/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/obH0Po_RdWk/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/obH0Po_RdWk/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/obH0Po_RdWk/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "freeCodeCamp.org",
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "React Native Course – Android and iOS App Development",
          "description": "Master React Native with this comprehensive course, covering everything from the basics of setup and components to advanced topics like navigation and fetching API data. Learn to build a weather app from scratch, complete with a sleek user interface and real-time data integration, while exploring concepts like state management, hooks, and styling.\n\n💻 Code: https://github.com/Em01/weather-app-demo\n\n✏️ Course created by @codecupdev \n🔗 Instagram: https://www.instagram.com/codecup_dev/\n🔗 Twitter: https://twitter.com/codecupdev\n\n❤️ Try interactive React courses we love, right in your browser: https://scrimba.com/freeCodeCamp-React (Made possible by a grant from our friends at Scrimba)\n\n⭐️ Contents ⭐️\n⌨️ (0:00:00) Introduction\n⌨️ (0:01:25) What is React Native?\n⌨️ (0:03:45) Expo\n⌨️ (0:04:22) Setup with Expo\n⌨️ (0:06:17) Setting up a custom app \n⌨️ (0:10:17) Setting up Android Studio \n⌨️ (0:12:03) The directory structure \n⌨️ (0:12:42) Setting up linting \n⌨️ (0:14:33) Setting up Prettier \n⌨️ (0:16:35) Debugging \n⌨️ (0:18:17) Native components \n⌨️ (0:19:00) Core components \n⌨️ (0:20:17) JSX \n⌨️ (0:21:29) Working with components \n⌨️ (0:21:57) What are components \n⌨️ (0:23:08) Creating our first component \n⌨️ (0:26:50) Styling basics \n⌨️ (0:31:17) Layout props \n⌨️ (0:32:37) The current weather screen \n⌨️ (0:40:17) Adding icons to the screen \n⌨️ (0:42:40) Components \n⌨️ (0:46:01) Reviewing what we have learnt so far \n⌨️ (0:48:52) Creating the upcoming weather component \n⌨️ (0:52:17) Introducing lists \n⌨️ (1:19:17) Implementing our list \n⌨️ (1:09:10) Key extractors\n⌨️ (1:11:41) Other FlatList props\n⌨️ (1:15:01) Styling our FlatList\n⌨️ (1:19:23) Images\n⌨️ (1:22:31) Using an image in the upcoming weather component\n⌨️ (1:24:10) ImageBackground\n⌨️ (1:26:05) Props\n⌨️ (1:35:17) Refactoring what we have done so far\n⌨️ (1:43:04) Implementing the city screen\n⌨️ (2:00:17) Refactoring the city screen\n⌨️ (2:15:32) Refactoring the current weather screen\n⌨️ (2:26:25) Introducing Navigation\n⌨️ (2:34:37) Implementing tabs in our app\n⌨️ (2:40:02) Styling our tabs\n⌨️ (2:47:27) Extracting the tabs\n⌨️ (3:06:55) State\n⌨️ (3:15:07) The useState hook\n⌨️ (3:19:24) Hooks\n⌨️ (3:23:24) The useEffect hook\n⌨️ (3:32:05) Adding a loading state\n⌨️ (3:38:31) Using the open weather map api\n⌨️ (3:39:31) Getting the users location\n⌨️ (3:47:36) Seting up fetching the api data\n⌨️ (3:52:38) Fetching the Api data\n⌨️ (4:01:17) Making our own hook\n⌨️ (4:05:17) Passing the data to our components\n⌨️ (4:08:42) Updating current weather to use the data\n⌨️ (4:14:32) Updating the upcoming weather to use the data\n⌨️ (4:18:17) Installing Moment\n⌨️ (4:21:17) Updating the city component\n⌨️ (4:25:53) Creating the error screen\n⌨️ (4:31:42) Some last refactoring\n⌨️ (4:33:59) Bonus material\n\n🎉 Thanks to our Champion and Sponsor supporters:\n👾 Nattira Maneerat\n👾 Heather Wcislo\n👾 Serhiy Kalinets\n👾 Erdeniz Unvan\n👾 Justin Hual\n👾 Agustín Kussrow\n👾 Otis Morgan\n\n--\n\nLearn to code for free and get a developer job: https://www.freecodecamp.org\n\nRead hundreds of articles on programming: https://freecodecamp.org/news"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT4H40M39S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "450052",
        "likeCount": "9396",
        "favoriteCount": "0",
        "commentCount": "277"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "hI3POtdhjjmoYbtLyVX24rFWfpk",
      "id": "9UKCv9T_rIo",
      "snippet": {
        "publishedAt": "2024-07-02T14:30:12Z",
        "channelId": "UC8butISFwT-Wl7EV0hUK0BQ",
        "title": "React Native & Expo Router Course – Build a Meditation App",
        "description": "Improve your React Native skills by building a meditation app using Expo. Learn to utilize TypeScript, React, NativeWind, React Native, and Expo to develop a simple mobile app.\n\n💻 GitHub: https://github.com/stevenGarciaDev/simple-meditation-app-expo-react-native\n\n✏️ Course developed by @StevenCodeCraft \n\n🚨 Important Update (Fix for Dependencies & Install Issues) 🚨\n\nIf you're having trouble installing dependencies or running the project, follow these steps:\n1) Ensure you're using the latest Expo-compatible versions by running this command in your terminal:\nexpo upgrade\n\n2) Fix dependency vulnerabilities & install issues:\nnpm audit\nnpm audit fix\n\n3) Clear the cache and try running the simulator again:\nnpx expo start --clear\n\nIf you are still having problems, please leave a reply to the pinned comment and the course creator, Steven, will respond to help you.\n\n❤️ Try interactive React courses we love, right in your browser: https://scrimba.com/freeCodeCamp-React (Made possible by a grant from our friends at Scrimba)\n\n⭐️ Contents ⭐️\n⌨️ (0:00:00) Simple Meditation App (Expo React Native)\n⌨️ (0:01:41) GitHub Repository Info\n⌨️ (0:02:42) Upcoming Courses\n⌨️ (0:03:21) Social Media and FitFuelPlanner\n⌨️ (0:03:45) Setup Local Development Environment\n⌨️ (0:14:53) Add static assets and define constant files\n⌨️ (0:18:38) Setup NativeWind\n⌨️ (0:21:14) Implement Initial Screen\n⌨️ (0:32:03) Splash Screen Image\n⌨️ (0:32:49) The useRouterHook\n⌨️ (0:34:22) Add AppGradient Component and Tabs directory\n⌨️ (0:39:06) The Meditation Index Screen\n⌨️ (0:47:47) Use FlatList on the Meditation Index Screen\n⌨️ (0:54:16) The Affirmations Index Screen\n⌨️ (1:02:38) The Affirmations Detail Screen\n⌨️ (1:15:22) The Meditation Detail Screen\n⌨️ (1:33:17) Meditation Audio/Song\n⌨️ (1:40:27) React Context and Modal Screen\n\n\n🎉 Thanks to our Champion and Sponsor supporters:\n👾 davthecoder\n👾 jedi-or-sith\n👾 南宮千影\n👾 Agustín Kussrow\n👾 Nattira Maneerat\n👾 Heather Wcislo\n👾 Serhiy Kalinets\n👾 Justin Hual\n👾 Otis Morgan \n👾 Oscar Rahnama\n\n--\n\nLearn to code for free and get a developer job: https://www.freecodecamp.org\n\nRead hundreds of articles on programming: https://freecodecamp.org/news",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/9UKCv9T_rIo/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/9UKCv9T_rIo/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/9UKCv9T_rIo/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/9UKCv9T_rIo/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/9UKCv9T_rIo/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "freeCodeCamp.org",
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "React Native & Expo Router Course – Build a Meditation App",
          "description": "Improve your React Native skills by building a meditation app using Expo. Learn to utilize TypeScript, React, NativeWind, React Native, and Expo to develop a simple mobile app.\n\n💻 GitHub: https://github.com/stevenGarciaDev/simple-meditation-app-expo-react-native\n\n✏️ Course developed by @StevenCodeCraft \n\n🚨 Important Update (Fix for Dependencies & Install Issues) 🚨\n\nIf you're having trouble installing dependencies or running the project, follow these steps:\n1) Ensure you're using the latest Expo-compatible versions by running this command in your terminal:\nexpo upgrade\n\n2) Fix dependency vulnerabilities & install issues:\nnpm audit\nnpm audit fix\n\n3) Clear the cache and try running the simulator again:\nnpx expo start --clear\n\nIf you are still having problems, please leave a reply to the pinned comment and the course creator, Steven, will respond to help you.\n\n❤️ Try interactive React courses we love, right in your browser: https://scrimba.com/freeCodeCamp-React (Made possible by a grant from our friends at Scrimba)\n\n⭐️ Contents ⭐️\n⌨️ (0:00:00) Simple Meditation App (Expo React Native)\n⌨️ (0:01:41) GitHub Repository Info\n⌨️ (0:02:42) Upcoming Courses\n⌨️ (0:03:21) Social Media and FitFuelPlanner\n⌨️ (0:03:45) Setup Local Development Environment\n⌨️ (0:14:53) Add static assets and define constant files\n⌨️ (0:18:38) Setup NativeWind\n⌨️ (0:21:14) Implement Initial Screen\n⌨️ (0:32:03) Splash Screen Image\n⌨️ (0:32:49) The useRouterHook\n⌨️ (0:34:22) Add AppGradient Component and Tabs directory\n⌨️ (0:39:06) The Meditation Index Screen\n⌨️ (0:47:47) Use FlatList on the Meditation Index Screen\n⌨️ (0:54:16) The Affirmations Index Screen\n⌨️ (1:02:38) The Affirmations Detail Screen\n⌨️ (1:15:22) The Meditation Detail Screen\n⌨️ (1:33:17) Meditation Audio/Song\n⌨️ (1:40:27) React Context and Modal Screen\n\n\n🎉 Thanks to our Champion and Sponsor supporters:\n👾 davthecoder\n👾 jedi-or-sith\n👾 南宮千影\n👾 Agustín Kussrow\n👾 Nattira Maneerat\n👾 Heather Wcislo\n👾 Serhiy Kalinets\n👾 Justin Hual\n👾 Otis Morgan \n👾 Oscar Rahnama\n\n--\n\nLearn to code for free and get a developer job: https://www.freecodecamp.org\n\nRead hundreds of articles on programming: https://freecodecamp.org/news"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT1H55M21S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "144797",
        "likeCount": "3030",
        "favoriteCount": "0",
        "commentCount": "112"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "5FYrUrOtgymQotcWwSgfOKZ3Spg",
      "id": "0-S5a0eXPoc",
      "snippet": {
        "publishedAt": "2020-05-11T16:00:11Z",
        "channelId": "UCWv7vMbMWH4-V0ZXdmDpPBA",
        "title": "React Native Tutorial for Beginners - Build a React Native App",
        "description": "Build amazing iOS & Android apps with React Native! 🚀 This beginner-friendly tutorial gets you started.\n\n❤️ Join this channel to get access to perks:\nhttps://www.youtube.com/channel/UCWv7vMbMWH4-V0ZXdmDpPBA/join\n\n🚀 Ready for a deep dive? \n- Check out my full course: https://mosh.link/react-native-course\n- Subscribe for more awesome content: https://goo.gl/6PYaGF\n\n✋ Stay connected:\n- Twitter: https://twitter.com/moshhamedani\n- Facebook: https://www.facebook.com/programmingwithmosh/\n- Instagram: https://www.instagram.com/codewithmosh.official/\n- LinkedIn: https://www.linkedin.com/school/codewithmosh/\n\n💡 Why React Native?\n- Build apps for both iOS & Android using your web development skills.\n- Faster development than native languages.\n- Huge developer community and resources.\n\n👉 This tutorial is perfect for you if:\n- You know basic React.\n- Want to break into mobile app development.\n- You value fast development and cross-platform compatibility.\n\n📕 Learn React\n- React Tutorial for Beginners: https://youtu.be/Ke90Tje7VS0\n- Mastering React Course: http://bit.ly/2KVl2A3\n\n🎁 Get the FREE goodies:\n- Layout Exercises PDF: https://bit.ly/3dzbKDZ\n- Layout Exercises Supplementary Materials: https://bit.ly/3fvqZQ9\n\n📖 TABLE OF CONTENT \n0:00:00 Introduction\n0:02:20 Prerequisites\n0:02:58 What is React Native?\n0:04:33 Expo\n0:06:19 Setting up the development environment \n0:09:17 Your First React Native App\n0:14:38 Running on an iOS simulator\n0:18:02 Running on an Android emulator\n0:26:48 Running on a physical device\n0:27:54 Logging\n0:29:16 Debugging with Chrome\n0:34:27 Debugging in VSCode\n0:41:39 Publishing\n0:46:30 Fundamental Concepts\n0:48:20 View\n0:51:08 Text\n0:53:50 Image\n0:59:25 Touchables\n1:04:21 Button\n1:06:01 Alert\n1:09:55 StyleSheet\n1:14:49 Platform-specific code\n1:18:06 Layouts\n1:18:43 Dimensions\n1:22:22 Detecting orientation changes\n1:27:39 Flexbox\n1:30:56 flexDirection\n1:32:48 justifyContent, alignItems and alignSelf \n1:37:22 flexWrap and alignContent\n1:40:22 flexBasis, flexGrow and flexShrink \n1:43:07 Absolute and Relative Positioning \n1:45:59 Exercises\n1:46:58 Welcome Screen\n1:57:55 View Image Screen\n2:02:51 Refactoring\n\n#reactnative #reactjs #javascript #coding #programming",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/0-S5a0eXPoc/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/0-S5a0eXPoc/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/0-S5a0eXPoc/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/0-S5a0eXPoc/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/0-S5a0eXPoc/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Programming with Mosh",
        "tags": [
          "react native",
          "react native tutorial",
          "react native app",
          "react native tutorial for beginners",
          "react native crash course",
          "react native project",
          "react native app tutorial",
          "react",
          "javascript",
          "mobile app development",
          "tutorial",
          "react native for beginners",
          "app development",
          "react-native",
          "programming",
          "react native course",
          "code with mosh",
          "programming with mosh",
          "mosh hamedani",
          "learn react native",
          "react native 2020",
          "learn react",
          "reactnative"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "React Native Tutorial for Beginners - Build a React Native App",
          "description": "Build amazing iOS & Android apps with React Native! 🚀 This beginner-friendly tutorial gets you started.\n\n❤️ Join this channel to get access to perks:\nhttps://www.youtube.com/channel/UCWv7vMbMWH4-V0ZXdmDpPBA/join\n\n🚀 Ready for a deep dive? \n- Check out my full course: https://mosh.link/react-native-course\n- Subscribe for more awesome content: https://goo.gl/6PYaGF\n\n✋ Stay connected:\n- Twitter: https://twitter.com/moshhamedani\n- Facebook: https://www.facebook.com/programmingwithmosh/\n- Instagram: https://www.instagram.com/codewithmosh.official/\n- LinkedIn: https://www.linkedin.com/school/codewithmosh/\n\n💡 Why React Native?\n- Build apps for both iOS & Android using your web development skills.\n- Faster development than native languages.\n- Huge developer community and resources.\n\n👉 This tutorial is perfect for you if:\n- You know basic React.\n- Want to break into mobile app development.\n- You value fast development and cross-platform compatibility.\n\n📕 Learn React\n- React Tutorial for Beginners: https://youtu.be/Ke90Tje7VS0\n- Mastering React Course: http://bit.ly/2KVl2A3\n\n🎁 Get the FREE goodies:\n- Layout Exercises PDF: https://bit.ly/3dzbKDZ\n- Layout Exercises Supplementary Materials: https://bit.ly/3fvqZQ9\n\n📖 TABLE OF CONTENT \n0:00:00 Introduction\n0:02:20 Prerequisites\n0:02:58 What is React Native?\n0:04:33 Expo\n0:06:19 Setting up the development environment \n0:09:17 Your First React Native App\n0:14:38 Running on an iOS simulator\n0:18:02 Running on an Android emulator\n0:26:48 Running on a physical device\n0:27:54 Logging\n0:29:16 Debugging with Chrome\n0:34:27 Debugging in VSCode\n0:41:39 Publishing\n0:46:30 Fundamental Concepts\n0:48:20 View\n0:51:08 Text\n0:53:50 Image\n0:59:25 Touchables\n1:04:21 Button\n1:06:01 Alert\n1:09:55 StyleSheet\n1:14:49 Platform-specific code\n1:18:06 Layouts\n1:18:43 Dimensions\n1:22:22 Detecting orientation changes\n1:27:39 Flexbox\n1:30:56 flexDirection\n1:32:48 justifyContent, alignItems and alignSelf \n1:37:22 flexWrap and alignContent\n1:40:22 flexBasis, flexGrow and flexShrink \n1:43:07 Absolute and Relative Positioning \n1:45:59 Exercises\n1:46:58 Welcome Screen\n1:57:55 View Image Screen\n2:02:51 Refactoring\n\n#reactnative #reactjs #javascript #coding #programming"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT2H6M30S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "true",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "3580574",
        "likeCount": "54806",
        "favoriteCount": "0",
        "commentCount": "2055"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "pflzTgyXqww-wEPheLFDBpClX0k",
      "id": "Bvwq_S0n2pk",
      "snippet": {
        "publishedAt": "2024-01-03T14:09:25Z",
        "channelId": "UC8butISFwT-Wl7EV0hUK0BQ",
        "title": "Full Stack React Developer Course with Appwrite",
        "description": "In this React course, you'll not only learn the nuances of React and its internal workings but also immerse yourself in building a variety of projects to understand the practical applications of React features. This course uniquely balances a project-focused approach with comprehensive theoretical knowledge, ensuring a thorough understanding of each concept. By the end of this course, not only will you have a bunch of projects for your portfolio, but you'll also gain hands-on experience in creating a full-stack application using Appwrite, integrating advanced tools like Redux-Toolkit and Tailwind to craft production-grade applications.\n\n💻 Code: https://github.com/hiteshchoudhary/react-english\n\n✏️ Course created by @HiteshCodeLab \n\n❤️ Try interactive Full Stack courses we love, right in your browser: https://scrimba.com/freeCodeCamp-Fullstack (Made possible by a grant from our friends at Scrimba)\n\n⭐️ Contents ⭐️\n⌨️ (00:00:00) React Roadmap\n⌨️ (00:20:05) Create react projects\n⌨️ (00:42:37) Understand the react flow and structure\n⌨️ (01:09:15) Create your own react library and JSX\n⌨️ (01:40:45) Why you need hooks and project\n⌨️ (02:00:12) Virtual DOM, Fibre and reconciliation\n⌨️ (02:13:55) Tailwind and Props in reactjs\n⌨️ (02:40:33) Building a react project . bgChanger\n⌨️ (02:58:20) useEffect, useRef and useCallback with 1 project\n⌨️ (03:38:37) Custom hooks in react . currency Project\n⌨️ (04:31:08) React router crash course\n⌨️ (05:27:02) Context API in react . get the concept\n⌨️ (05:56:01) Build a dark mode light mode in reactjs with context api\n⌨️ (06:25:21) Context API with local Storage\n⌨️ (07:33:39) Building a full stack project with react and appwrite\n⌨️ (07:40:51) Exploring the new docs of appwrite\n⌨️ (08:07:18) All that you need to know about Appwrite Auth\n⌨️ (08:28:53) Appwrite Databases, Query and Storage - All that you need\n⌨️ (09:05:55) Setting up redux store and protecing pages in react\n⌨️ (09:49:08) Debugging for protected routes\n⌨️ (09:52:43) Learn to create production components\n⌨️ (10:18:44) React hook form and TinyMCE editor in react\n⌨️ (11:30:09) Parsing HTML in react components\n⌨️ (12:07:47) Prepare all pages with components\n⌨️ (12:27:55) Debugging the mega project\n\n🎉 Thanks to our Champion and Sponsor supporters:\n👾 davthecoder\n👾 jedi-or-sith\n👾 南宮千影\n👾 Agustín Kussrow\n👾 Nattira Maneerat\n👾 Heather Wcislo\n👾 Serhiy Kalinets\n👾 Justin Hual\n👾 Otis Morgan \n👾 Oscar Rahnama\n\n--\n\nLearn to code for free and get a developer job: https://www.freecodecamp.org\n\nRead hundreds of articles on programming: https://freecodecamp.org/news",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/Bvwq_S0n2pk/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/Bvwq_S0n2pk/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/Bvwq_S0n2pk/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/Bvwq_S0n2pk/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/Bvwq_S0n2pk/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "freeCodeCamp.org",
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "Full Stack React Developer Course with Appwrite",
          "description": "In this React course, you'll not only learn the nuances of React and its internal workings but also immerse yourself in building a variety of projects to understand the practical applications of React features. This course uniquely balances a project-focused approach with comprehensive theoretical knowledge, ensuring a thorough understanding of each concept. By the end of this course, not only will you have a bunch of projects for your portfolio, but you'll also gain hands-on experience in creating a full-stack application using Appwrite, integrating advanced tools like Redux-Toolkit and Tailwind to craft production-grade applications.\n\n💻 Code: https://github.com/hiteshchoudhary/react-english\n\n✏️ Course created by @HiteshCodeLab \n\n❤️ Try interactive Full Stack courses we love, right in your browser: https://scrimba.com/freeCodeCamp-Fullstack (Made possible by a grant from our friends at Scrimba)\n\n⭐️ Contents ⭐️\n⌨️ (00:00:00) React Roadmap\n⌨️ (00:20:05) Create react projects\n⌨️ (00:42:37) Understand the react flow and structure\n⌨️ (01:09:15) Create your own react library and JSX\n⌨️ (01:40:45) Why you need hooks and project\n⌨️ (02:00:12) Virtual DOM, Fibre and reconciliation\n⌨️ (02:13:55) Tailwind and Props in reactjs\n⌨️ (02:40:33) Building a react project . bgChanger\n⌨️ (02:58:20) useEffect, useRef and useCallback with 1 project\n⌨️ (03:38:37) Custom hooks in react . currency Project\n⌨️ (04:31:08) React router crash course\n⌨️ (05:27:02) Context API in react . get the concept\n⌨️ (05:56:01) Build a dark mode light mode in reactjs with context api\n⌨️ (06:25:21) Context API with local Storage\n⌨️ (07:33:39) Building a full stack project with react and appwrite\n⌨️ (07:40:51) Exploring the new docs of appwrite\n⌨️ (08:07:18) All that you need to know about Appwrite Auth\n⌨️ (08:28:53) Appwrite Databases, Query and Storage - All that you need\n⌨️ (09:05:55) Setting up redux store and protecing pages in react\n⌨️ (09:49:08) Debugging for protected routes\n⌨️ (09:52:43) Learn to create production components\n⌨️ (10:18:44) React hook form and TinyMCE editor in react\n⌨️ (11:30:09) Parsing HTML in react components\n⌨️ (12:07:47) Prepare all pages with components\n⌨️ (12:27:55) Debugging the mega project\n\n🎉 Thanks to our Champion and Sponsor supporters:\n👾 davthecoder\n👾 jedi-or-sith\n👾 南宮千影\n👾 Agustín Kussrow\n👾 Nattira Maneerat\n👾 Heather Wcislo\n👾 Serhiy Kalinets\n👾 Justin Hual\n👾 Otis Morgan \n👾 Oscar Rahnama\n\n--\n\nLearn to code for free and get a developer job: https://www.freecodecamp.org\n\nRead hundreds of articles on programming: https://freecodecamp.org/news"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT12H40M11S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "true",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "379563",
        "likeCount": "10259",
        "favoriteCount": "0",
        "commentCount": "444"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "y3tUuT-09YbRst-9PJFJKZwDFEE",
      "id": "J2j1yk-34OY",
      "snippet": {
        "publishedAt": "2025-04-09T07:15:02Z",
        "channelId": "UCW5YeuERMmlnqo4oq8vwUpg",
        "title": "Complete React Native Tutorial #1 - Introduction & Setup (Expo)",
        "description": "In this complete React Native tutorial, you'll learn how to develop native apps from the ground up, using React Native and Expo. You'll learn about native components, routing, navigation, styling, authentication and a lot more too. \n\n🔥🥷🏼 Get instant access to ALL premium courses on NetNinja.dev:\nhttps://netninja.dev/\n\n🔥🥷🏼 Get instant access to This Course on NetNinja.dev:\nhttps://netninja.dev/p/complete-react-native\n\n🔗👇 Sign up to Appwrite & Get $50 Free Credit:\nhttps://apwr.dev/netninja050\n\n📂🥷🏼 Access the course files on GitHub:\nhttps://github.com/iamshaunjp/Complete-React-Native-Tutorial\n\n🧠🥷🏼 React Course: \nhttps://netninja.dev/p/build-websites-with-react-firebase\n\n🧠🥷🏼 React Context and Hooks Course: \nhttps://www.youtube.com/watch?v=6RhOzQciVwI&list=PL4cUxeGkcC9hNokByJilPg5g9m2APUePI\n\n🔗👇 Install Node.js: \nhttps://nodejs.org/en\n\n🔗👇 React Native Docs:\nhttps://reactnative.dev/docs/getting-started\n\n🔗👇 Expo Docs:\nhttps://docs.expo.dev/\n\n🔗👇 Appwrite docs:\nhttps://appwrite.io/docs",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/J2j1yk-34OY/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/J2j1yk-34OY/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/J2j1yk-34OY/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/J2j1yk-34OY/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/J2j1yk-34OY/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Net Ninja",
        "tags": [
          "react native",
          "react native tutorial",
          "react",
          "react for mobile",
          "mobile development",
          "app development",
          "react native crash course",
          "tutorial",
          "crash course",
          "react native vs flutter",
          "mobile web dev"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "Complete React Native Tutorial #1 - Introduction & Setup (Expo)",
          "description": "In this complete React Native tutorial, you'll learn how to develop native apps from the ground up, using React Native and Expo. You'll learn about native components, routing, navigation, styling, authentication and a lot more too. \n\n🔥🥷🏼 Get instant access to ALL premium courses on NetNinja.dev:\nhttps://netninja.dev/\n\n🔥🥷🏼 Get instant access to This Course on NetNinja.dev:\nhttps://netninja.dev/p/complete-react-native\n\n🔗👇 Sign up to Appwrite & Get $50 Free Credit:\nhttps://apwr.dev/netninja050\n\n📂🥷🏼 Access the course files on GitHub:\nhttps://github.com/iamshaunjp/Complete-React-Native-Tutorial\n\n🧠🥷🏼 React Course: \nhttps://netninja.dev/p/build-websites-with-react-firebase\n\n🧠🥷🏼 React Context and Hooks Course: \nhttps://www.youtube.com/watch?v=6RhOzQciVwI&list=PL4cUxeGkcC9hNokByJilPg5g9m2APUePI\n\n🔗👇 Install Node.js: \nhttps://nodejs.org/en\n\n🔗👇 React Native Docs:\nhttps://reactnative.dev/docs/getting-started\n\n🔗👇 Expo Docs:\nhttps://docs.expo.dev/\n\n🔗👇 Appwrite docs:\nhttps://appwrite.io/docs"
        },
        "defaultAudioLanguage": "en-GB"
      },
      "contentDetails": {
        "duration": "PT20M44S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "172441",
        "likeCount": "3243",
        "favoriteCount": "0",
        "commentCount": "201"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "enTVIXytCGYhE0QEOf_DFjfghek",
      "id": "f8Z9JyB2EIE",
      "snippet": {
        "publishedAt": "2025-03-07T16:12:02Z",
        "channelId": "UCmXmlB4-HJytD7wek0Uo97A",
        "title": "React Native Course for Beginners in 2025 | Build a Full Stack React Native App",
        "description": "Get hands-on with React Native and Expo in this crash course! Build a mobile movie app from scratch, and learn essential skills for mobile development along the way.\n\n⭐ Join JS Mastery Pro: https://jsm.dev/reactnative25-jsmpro\n💎 Become a Top 1% Next.js Developer: https://jsm.dev/reactnative25-nextjs\n\n📁 Free Video Kit (Code, Design, Repo, Guide): https://jsm.dev/reactnative25-kit\n📘 React Native Pro Course Waitlist: https://jsm.dev/reactnative25-waitlist\n\nAppwrite: https://jsm.dev/reactnative25-appwrite\nWebStorm: https://jsm.dev/reactnative25-webstorm\n\nRate us on TrustPilot: https://jsm.dev/trustpilot\n\nhttps://discord.com/invite/n6EdbFJ https://twitter.com/jsmasterypro https://instagram.com/javascriptmastery https://linkedin.com/company/javascriptmastery\n\nBusiness Inquiries: contact@jsmastery.pro\n\nTime Stamps 👇\n00:00:00 — Intro\n00:02:12 — Why React Native?\n00:06:00 — React Native Fundamentals\n00:16:34 — Project Overview\n00:18:34 — Intro & Setup\n00:27:01— Setup Styling\n00:35:56 — Routing & Navigation\n00:58:28 — Customize App Title & Icon\n01:00:41 — Home Screen UI\n01:09:39 — TMDB API\n01:19:06 — Custom Hook\n01:25:38 — Fetch & Display Movies\n01:45:59 — Develop Search Screen\n02:04:36 — Appwrite Setup\n02:22:01 — Show Trending Movies\n02:38:50 — Hide StatusBar\n02:41:16 — Movie Details\n03:02:09 — Optimization",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/f8Z9JyB2EIE/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/f8Z9JyB2EIE/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/f8Z9JyB2EIE/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/f8Z9JyB2EIE/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/f8Z9JyB2EIE/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "JavaScript Mastery",
        "tags": [
          "javascript",
          "javascript mastery",
          "js mastery",
          "master javascript",
          "react native",
          "react native tutorial",
          "react native expo",
          "react native expo router",
          "react native expo crash course",
          "react native tutorial for beginners",
          "react native course",
          "react native app",
          "react native course 2024",
          "expo 52",
          "expo 52 sdk",
          "app development",
          "react native mobile apps",
          "react native mobile app development tutorial",
          "expo",
          "expo router",
          "expo tutorial",
          "expo react native",
          "expo react native tutorial"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "React Native Course for Beginners in 2025 | Build a Full Stack React Native App",
          "description": "Get hands-on with React Native and Expo in this crash course! Build a mobile movie app from scratch, and learn essential skills for mobile development along the way.\n\n⭐ Join JS Mastery Pro: https://jsm.dev/reactnative25-jsmpro\n💎 Become a Top 1% Next.js Developer: https://jsm.dev/reactnative25-nextjs\n\n📁 Free Video Kit (Code, Design, Repo, Guide): https://jsm.dev/reactnative25-kit\n📘 React Native Pro Course Waitlist: https://jsm.dev/reactnative25-waitlist\n\nAppwrite: https://jsm.dev/reactnative25-appwrite\nWebStorm: https://jsm.dev/reactnative25-webstorm\n\nRate us on TrustPilot: https://jsm.dev/trustpilot\n\nhttps://discord.com/invite/n6EdbFJ https://twitter.com/jsmasterypro https://instagram.com/javascriptmastery https://linkedin.com/company/javascriptmastery\n\nBusiness Inquiries: contact@jsmastery.pro\n\nTime Stamps 👇\n00:00:00 — Intro\n00:02:12 — Why React Native?\n00:06:00 — React Native Fundamentals\n00:16:34 — Project Overview\n00:18:34 — Intro & Setup\n00:27:01— Setup Styling\n00:35:56 — Routing & Navigation\n00:58:28 — Customize App Title & Icon\n01:00:41 — Home Screen UI\n01:09:39 — TMDB API\n01:19:06 — Custom Hook\n01:25:38 — Fetch & Display Movies\n01:45:59 — Develop Search Screen\n02:04:36 — Appwrite Setup\n02:22:01 — Show Trending Movies\n02:38:50 — Hide StatusBar\n02:41:16 — Movie Details\n03:02:09 — Optimization"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT3H6M19S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "1551467",
        "likeCount": "18866",
        "favoriteCount": "0",
        "commentCount": "1106"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "u_UZzmfB58-65nYDusStan3-plg",
      "id": "sm5Y7Vtuihg",
      "snippet": {
        "publishedAt": "2024-12-30T14:26:43Z",
        "channelId": "UC8butISFwT-Wl7EV0hUK0BQ",
        "title": "React Native Full Course for Beginners",
        "description": "This React Native Course for beginners from @DaveGrayTeachesCode is an all-in-one tutorial full of over 4 hours of React Native code and instruction to help you learn the basics of mobile app development. \n\n🔗 Course Resources: https://github.com/gitdagray/react-native-course\n\n❤️ Try interactive React courses we love, right in your browser: https://scrimba.com/freeCodeCamp-React (Made possible by a grant from our friends at Scrimba)\n\n⭐️ Contents ⭐️\n(0:00:00) Intro\n(0:01:08) Chapter 1: Start Here\n(0:21:47) Chapter 2: Build an App\n(0:43:06) Chapter 3: Navigation\n(1:17:25) Chapter 4: List Views\n(2:05:47) Chapter 5: CRUD App\n(2:42:40) Chapter 6: Data Storage\n(3:20:20) Chapter 7: Dynamic Routing\n(4:02:34) Chapter 8: EAS Development Builds\n\n🎉 Thanks to our Champion and Sponsor supporters:\n👾 Drake Milly\n👾 Ulises Moralez\n👾 Goddard Tan\n👾 David MG\n👾 Matthew Springman\n👾 Claudio\n👾 Oscar R.\n👾 jedi-or-sith\n👾 Nattira Maneerat\n👾 Justin Hual\n\n--\n\nLearn to code for free and get a developer job: https://www.freecodecamp.org\n\nRead hundreds of articles on programming: https://freecodecamp.org/news",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/sm5Y7Vtuihg/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/sm5Y7Vtuihg/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/sm5Y7Vtuihg/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/sm5Y7Vtuihg/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/sm5Y7Vtuihg/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "freeCodeCamp.org",
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "React Native Full Course for Beginners",
          "description": "This React Native Course for beginners from @DaveGrayTeachesCode is an all-in-one tutorial full of over 4 hours of React Native code and instruction to help you learn the basics of mobile app development. \n\n🔗 Course Resources: https://github.com/gitdagray/react-native-course\n\n❤️ Try interactive React courses we love, right in your browser: https://scrimba.com/freeCodeCamp-React (Made possible by a grant from our friends at Scrimba)\n\n⭐️ Contents ⭐️\n(0:00:00) Intro\n(0:01:08) Chapter 1: Start Here\n(0:21:47) Chapter 2: Build an App\n(0:43:06) Chapter 3: Navigation\n(1:17:25) Chapter 4: List Views\n(2:05:47) Chapter 5: CRUD App\n(2:42:40) Chapter 6: Data Storage\n(3:20:20) Chapter 7: Dynamic Routing\n(4:02:34) Chapter 8: EAS Development Builds\n\n🎉 Thanks to our Champion and Sponsor supporters:\n👾 Drake Milly\n👾 Ulises Moralez\n👾 Goddard Tan\n👾 David MG\n👾 Matthew Springman\n👾 Claudio\n👾 Oscar R.\n👾 jedi-or-sith\n👾 Nattira Maneerat\n👾 Justin Hual\n\n--\n\nLearn to code for free and get a developer job: https://www.freecodecamp.org\n\nRead hundreds of articles on programming: https://freecodecamp.org/news"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT4H23M53S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "310675",
        "likeCount": "6782",
        "favoriteCount": "0",
        "commentCount": "271"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "7L0DvGcjI5VwoLR4SIS-s-hWFQ8",
      "id": "JKccS9k56_I",
      "snippet": {
        "publishedAt": "2024-12-31T14:00:19Z",
        "channelId": "UCc7gpqMnnOSbU_F2-5MVVZw",
        "title": "React Native Full Course for Beginners | Build Your First Mobile App in 4 Hours!",
        "description": "Ready to build your first mobile app? 🚀 In this 4-hour beginner-friendly React Native course, I’ll teach you step-by-step how to create amazing cross-platform apps!\n\nNo experience? No problem! Learn the basics, master components, state, and props, and get started with real mobile development.\n\nReact Native powers apps like Instagram and Airbnb—now it’s your turn! Let’s make coding fun and simple.\n\n\n\nMachine Requirements for React Native CLI\n\n\n1. Operating System:\nWindows: Windows 10 or newer (64-bit).\nmacOS: macOS 11 (Big Sur) or newer (required for\niOS app development).\nLinux: Any modern distribution like Ubuntu or Fedora.\n\n\n2. Hardware:\nProcessor: 2 GHz or faster multi-core processor.\nRAM: Minimum 8 GB (16 GB recommended for\nsmooth performance).\nDisk Space: At least 30 GB free for tools, SDKs, and\ndependencies.\n\n\nDon’t forget to like, share, and subscribe for more awesome tutorials!\n\nJoin our General Discussion on Discord - https://discord.gg/sAaqkAfpmN\n\nVisit our Website - https://sheryians.com/\n\nInstructor in this video: Muskan Rai\n\nDon't forget to LIKE 👍 this video, SUBSCRIBE 🔔 for more DSA tutorials, and COMMENT below if you have any questions or suggestions! 🚀\n\nOur Website - https://sheryians.com/\n\nSocials:\n📷 Instagram:  https://www.instagram.com/sheryians_coding_school/\n📘 Facebook: https://www.facebook.com/sheryians.community\n💌 Telegram: https://t.me/sheryiansCommunity\n💼 LinkedIn:  https://in.linkedin.com/company/the-sheryians-coding-school\n🎮 Discord: https://discord.gg/Au3TquBarQ\nPeace out ✌\n\n#sheryianscodingschool #sheryians #code #coding #jobs #reactjs  #mernstack #mern #web #reactjscourse #tutorial  #creativewebdevelopment #webdevelopment #functionalwebdevelopment #thebasics #mernstack #jslogic #javascriptlogics\n\n\n-----------------------------------------------------------------------------------------------------------------------------------------\nTimestamps : \n\n0:00 - 04:40 - Introduction\n04:41 - 06:26 - What is React Native ? \n06:27 - 09:20 - Expo cli vs React Native cli\n09:21 - 38:34 - Windows Setup\n38:35 - 52:53 - Mac Setup\n52:54 - 01:06:57 - Fundamental Concepts\n01:06:58 - 01:58:34 - Styling\n01:58:35 - 02:00:58 - Scroll View \n02:00:59 - 02:16:57 - FlatList \n02:16:58 - 02:34:50 - Handling User Input\n02:34:51 - 03:06:45 - Stack Navigation\n03:06:46 - 03:24:23 - Tab Navigation\n03:24:24 - 03:25:41 - Project Preview\n03:25:42 - 04:20:45 - Project Making\n04:20:46 - 04:21:13 - Outro",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/JKccS9k56_I/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/JKccS9k56_I/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/JKccS9k56_I/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/JKccS9k56_I/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/JKccS9k56_I/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Sheryians Coding School",
        "tags": [
          "sheryians",
          "sheryians coding school",
          "web development",
          "web development projects",
          "coding",
          "code",
          "programming",
          "js",
          "animation",
          "internship",
          "web animation",
          "coding journey",
          "mernstack",
          "reactjs",
          "reactjstutorial",
          "mernstacktutorial",
          "reactjscrashcourse",
          "reactjscourse",
          "project",
          "html",
          "css",
          "javascript",
          "react js tutorial",
          "react",
          "react js",
          "react js project",
          "sheryians react",
          "next",
          "localstorage in react js",
          "three js",
          "job",
          "sarthak sharma",
          "Harsh Sharma"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "React Native Full Course for Beginners | Build Your First Mobile App in 4 Hours!",
          "description": "Ready to build your first mobile app? 🚀 In this 4-hour beginner-friendly React Native course, I’ll teach you step-by-step how to create amazing cross-platform apps!\n\nNo experience? No problem! Learn the basics, master components, state, and props, and get started with real mobile development.\n\nReact Native powers apps like Instagram and Airbnb—now it’s your turn! Let’s make coding fun and simple.\n\n\n\nMachine Requirements for React Native CLI\n\n\n1. Operating System:\nWindows: Windows 10 or newer (64-bit).\nmacOS: macOS 11 (Big Sur) or newer (required for\niOS app development).\nLinux: Any modern distribution like Ubuntu or Fedora.\n\n\n2. Hardware:\nProcessor: 2 GHz or faster multi-core processor.\nRAM: Minimum 8 GB (16 GB recommended for\nsmooth performance).\nDisk Space: At least 30 GB free for tools, SDKs, and\ndependencies.\n\n\nDon’t forget to like, share, and subscribe for more awesome tutorials!\n\nJoin our General Discussion on Discord - https://discord.gg/sAaqkAfpmN\n\nVisit our Website - https://sheryians.com/\n\nInstructor in this video: Muskan Rai\n\nDon't forget to LIKE 👍 this video, SUBSCRIBE 🔔 for more DSA tutorials, and COMMENT below if you have any questions or suggestions! 🚀\n\nOur Website - https://sheryians.com/\n\nSocials:\n📷 Instagram:  https://www.instagram.com/sheryians_coding_school/\n📘 Facebook: https://www.facebook.com/sheryians.community\n💌 Telegram: https://t.me/sheryiansCommunity\n💼 LinkedIn:  https://in.linkedin.com/company/the-sheryians-coding-school\n🎮 Discord: https://discord.gg/Au3TquBarQ\nPeace out ✌\n\n#sheryianscodingschool #sheryians #code #coding #jobs #reactjs  #mernstack #mern #web #reactjscourse #tutorial  #creativewebdevelopment #webdevelopment #functionalwebdevelopment #thebasics #mernstack #jslogic #javascriptlogics\n\n\n-----------------------------------------------------------------------------------------------------------------------------------------\nTimestamps : \n\n0:00 - 04:40 - Introduction\n04:41 - 06:26 - What is React Native ? \n06:27 - 09:20 - Expo cli vs React Native cli\n09:21 - 38:34 - Windows Setup\n38:35 - 52:53 - Mac Setup\n52:54 - 01:06:57 - Fundamental Concepts\n01:06:58 - 01:58:34 - Styling\n01:58:35 - 02:00:58 - Scroll View \n02:00:59 - 02:16:57 - FlatList \n02:16:58 - 02:34:50 - Handling User Input\n02:34:51 - 03:06:45 - Stack Navigation\n03:06:46 - 03:24:23 - Tab Navigation\n03:24:24 - 03:25:41 - Project Preview\n03:25:42 - 04:20:45 - Project Making\n04:20:46 - 04:21:13 - Outro"
        },
        "defaultAudioLanguage": "en-IN"
      },
      "contentDetails": {
        "duration": "PT4H21M14S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "361167",
        "likeCount": "8603",
        "favoriteCount": "0",
        "commentCount": "1742"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "prpO5orG0Le2HqO_3lTMmNg8_n4",
      "id": "TtPXvEcE11E",
      "snippet": {
        "publishedAt": "2025-09-15T21:40:30Z",
        "channelId": "UCB6dvaWu0N8uVq2yKsZ5s5g",
        "title": "React Tutorial Full Course - Beginner to Pro (React 19, 2025)",
        "description": "In this React tutorial and React full course, build websites and projects with React.\nReact Premium Course: https://courses.supersimple.dev/courses/react\nFrontend Bundle (React, JS, HTML CSS): https://courses.supersimple.dev/bundles/frontend-bundle\nMembership: https://youtube.com/@SuperSimpleDev/join\nor https://member.supersimple.dev (10% OFF the USD price)\n\nLinks in this course: https://github.com/SuperSimpleDev/react-course/blob/main/1-links.md\nExercise solutions: https://github.com/SuperSimpleDev/react-course/tree/main/1-exercise-solutions\nCopy of the code: https://github.com/SuperSimpleDev/react-course/tree/main/2-copy-of-code\nTroubleshooting: https://github.com/SuperSimpleDev/react-course/blob/main/2-troubleshooting.md\n\n🎓 Premium Courses (get a certificate, better learning experience, support SuperSimpleDev ❤️)\nFrontend Bundle (React, JS, HTML CSS): https://courses.supersimple.dev/bundles/frontend-bundle\nReact Premium Course: https://courses.supersimple.dev/courses/react\nJavaScript Premium Course: https://courses.supersimple.dev/courses/javascript\nHTML CSS Premium Course: https://courses.supersimple.dev/courses/html-css\n\nSections:\n0:00 Intro\n1:20 1. React Basics, JSX\n40:16 2. Components, Props, Start the Chatbot Project\n1:36:49 3. State, Event Handlers, Chatbot Project Features\n2:42:41 4. CSS with React, Hooks, Finish Chatbot Project\n3:48:49 5. Proper React Setup with Vite\n4:59:29 6. React Router, Git, Start the Ecommerce Project\n6:09:59 7. React with Backend, Data Fetching, Load Ecommerce Project Data\n8:00:58 8. Data Mutation, Update Ecommerce Project Data\n8:50:10 9. Automated Tests in React with Vitest\n9:50:31 10. Deploy React to the Internet, Intro to AWS\n10:41:06 11. React 19 Updates\n10:50:13 TypeScript with React\n11:24:12 AI with React\n11:31:09 Conclusion and Next Steps\n\nAdditional information:\nThis React tutorial and React full course is a project based series of React tutorials for software engineers. Each React tutorial builds on a project and provides some React exercises to practice what we learned. By the end, we'll learn how to create complex websites and projects with React, JavaScript, HTML, and CSS, which will help you become a web developer and software engineer.\n\n#react #supersimpledev #reactcourse #reacttutorial #reactjs  #javascript #html #css #webdevelopment #webdeveloper #softwaredeveloper  #softwaredevelopment #coding #codingtutorial #softwareengineer #softwareengineering #learntocode",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/TtPXvEcE11E/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/TtPXvEcE11E/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/TtPXvEcE11E/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/TtPXvEcE11E/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/TtPXvEcE11E/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "SuperSimpleDev",
        "tags": [
          "supersimpledev",
          "react tutorial",
          "react course",
          "reactjs",
          "reactjs tutorial",
          "reactjs course",
          "javascript",
          "javascript course",
          "javascript tutorial"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "React Tutorial Full Course - Beginner to Pro (React 19, 2025)",
          "description": "In this React tutorial and React full course, build websites and projects with React.\nReact Premium Course: https://courses.supersimple.dev/courses/react\nFrontend Bundle (React, JS, HTML CSS): https://courses.supersimple.dev/bundles/frontend-bundle\nMembership: https://youtube.com/@SuperSimpleDev/join\nor https://member.supersimple.dev (10% OFF the USD price)\n\nLinks in this course: https://github.com/SuperSimpleDev/react-course/blob/main/1-links.md\nExercise solutions: https://github.com/SuperSimpleDev/react-course/tree/main/1-exercise-solutions\nCopy of the code: https://github.com/SuperSimpleDev/react-course/tree/main/2-copy-of-code\nTroubleshooting: https://github.com/SuperSimpleDev/react-course/blob/main/2-troubleshooting.md\n\n🎓 Premium Courses (get a certificate, better learning experience, support SuperSimpleDev ❤️)\nFrontend Bundle (React, JS, HTML CSS): https://courses.supersimple.dev/bundles/frontend-bundle\nReact Premium Course: https://courses.supersimple.dev/courses/react\nJavaScript Premium Course: https://courses.supersimple.dev/courses/javascript\nHTML CSS Premium Course: https://courses.supersimple.dev/courses/html-css\n\nSections:\n0:00 Intro\n1:20 1. React Basics, JSX\n40:16 2. Components, Props, Start the Chatbot Project\n1:36:49 3. State, Event Handlers, Chatbot Project Features\n2:42:41 4. CSS with React, Hooks, Finish Chatbot Project\n3:48:49 5. Proper React Setup with Vite\n4:59:29 6. React Router, Git, Start the Ecommerce Project\n6:09:59 7. React with Backend, Data Fetching, Load Ecommerce Project Data\n8:00:58 8. Data Mutation, Update Ecommerce Project Data\n8:50:10 9. Automated Tests in React with Vitest\n9:50:31 10. Deploy React to the Internet, Intro to AWS\n10:41:06 11. React 19 Updates\n10:50:13 TypeScript with React\n11:24:12 AI with React\n11:31:09 Conclusion and Next Steps\n\nAdditional information:\nThis React tutorial and React full course is a project based series of React tutorials for software engineers. Each React tutorial builds on a project and provides some React exercises to practice what we learned. By the end, we'll learn how to create complex websites and projects with React, JavaScript, HTML, and CSS, which will help you become a web developer and software engineer.\n\n#react #supersimpledev #reactcourse #reacttutorial #reactjs  #javascript #html #css #webdevelopment #webdeveloper #softwaredeveloper  #softwaredevelopment #coding #codingtutorial #softwareengineer #softwareengineering #learntocode"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT11H32M4S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "206120",
        "likeCount": "6498",
        "favoriteCount": "0",
        "commentCount": "747"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "enTVIXytCGYhE0QEOf_DFjfghek",
      "id": "f8Z9JyB2EIE",
      "snippet": {
        "publishedAt": "2025-03-07T16:12:02Z",
        "channelId": "UCmXmlB4-HJytD7wek0Uo97A",
        "title": "React Native Course for Beginners in 2025 | Build a Full Stack React Native App",
        "description": "Get hands-on with React Native and Expo in this crash course! Build a mobile movie app from scratch, and learn essential skills for mobile development along the way.\n\n⭐ Join JS Mastery Pro: https://jsm.dev/reactnative25-jsmpro\n💎 Become a Top 1% Next.js Developer: https://jsm.dev/reactnative25-nextjs\n\n📁 Free Video Kit (Code, Design, Repo, Guide): https://jsm.dev/reactnative25-kit\n📘 React Native Pro Course Waitlist: https://jsm.dev/reactnative25-waitlist\n\nAppwrite: https://jsm.dev/reactnative25-appwrite\nWebStorm: https://jsm.dev/reactnative25-webstorm\n\nRate us on TrustPilot: https://jsm.dev/trustpilot\n\nhttps://discord.com/invite/n6EdbFJ https://twitter.com/jsmasterypro https://instagram.com/javascriptmastery https://linkedin.com/company/javascriptmastery\n\nBusiness Inquiries: contact@jsmastery.pro\n\nTime Stamps 👇\n00:00:00 — Intro\n00:02:12 — Why React Native?\n00:06:00 — React Native Fundamentals\n00:16:34 — Project Overview\n00:18:34 — Intro & Setup\n00:27:01— Setup Styling\n00:35:56 — Routing & Navigation\n00:58:28 — Customize App Title & Icon\n01:00:41 — Home Screen UI\n01:09:39 — TMDB API\n01:19:06 — Custom Hook\n01:25:38 — Fetch & Display Movies\n01:45:59 — Develop Search Screen\n02:04:36 — Appwrite Setup\n02:22:01 — Show Trending Movies\n02:38:50 — Hide StatusBar\n02:41:16 — Movie Details\n03:02:09 — Optimization",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/f8Z9JyB2EIE/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/f8Z9JyB2EIE/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/f8Z9JyB2EIE/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/f8Z9JyB2EIE/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/f8Z9JyB2EIE/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "JavaScript Mastery",
        "tags": [
          "javascript",
          "javascript mastery",
          "js mastery",
          "master javascript",
          "react native",
          "react native tutorial",
          "react native expo",
          "react native expo router",
          "react native expo crash course",
          "react native tutorial for beginners",
          "react native course",
          "react native app",
          "react native course 2024",
          "expo 52",
          "expo 52 sdk",
          "app development",
          "react native mobile apps",
          "react native mobile app development tutorial",
          "expo",
          "expo router",
          "expo tutorial",
          "expo react native",
          "expo react native tutorial"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "React Native Course for Beginners in 2025 | Build a Full Stack React Native App",
          "description": "Get hands-on with React Native and Expo in this crash course! Build a mobile movie app from scratch, and learn essential skills for mobile development along the way.\n\n⭐ Join JS Mastery Pro: https://jsm.dev/reactnative25-jsmpro\n💎 Become a Top 1% Next.js Developer: https://jsm.dev/reactnative25-nextjs\n\n📁 Free Video Kit (Code, Design, Repo, Guide): https://jsm.dev/reactnative25-kit\n📘 React Native Pro Course Waitlist: https://jsm.dev/reactnative25-waitlist\n\nAppwrite: https://jsm.dev/reactnative25-appwrite\nWebStorm: https://jsm.dev/reactnative25-webstorm\n\nRate us on TrustPilot: https://jsm.dev/trustpilot\n\nhttps://discord.com/invite/n6EdbFJ https://twitter.com/jsmasterypro https://instagram.com/javascriptmastery https://linkedin.com/company/javascriptmastery\n\nBusiness Inquiries: contact@jsmastery.pro\n\nTime Stamps 👇\n00:00:00 — Intro\n00:02:12 — Why React Native?\n00:06:00 — React Native Fundamentals\n00:16:34 — Project Overview\n00:18:34 — Intro & Setup\n00:27:01— Setup Styling\n00:35:56 — Routing & Navigation\n00:58:28 — Customize App Title & Icon\n01:00:41 — Home Screen UI\n01:09:39 — TMDB API\n01:19:06 — Custom Hook\n01:25:38 — Fetch & Display Movies\n01:45:59 — Develop Search Screen\n02:04:36 — Appwrite Setup\n02:22:01 — Show Trending Movies\n02:38:50 — Hide StatusBar\n02:41:16 — Movie Details\n03:02:09 — Optimization"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT3H6M19S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "1551467",
        "likeCount": "18866",
        "favoriteCount": "0",
        "commentCount": "1106"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "prpO5orG0Le2HqO_3lTMmNg8_n4",
      "id": "TtPXvEcE11E",
      "snippet": {
        "publishedAt": "2025-09-15T21:40:30Z",
        "channelId": "UCB6dvaWu0N8uVq2yKsZ5s5g",
        "title": "React Tutorial Full Course - Beginner to Pro (React 19, 2025)",
        "description": "In this React tutorial and React full course, build websites and projects with React.\nReact Premium Course: https://courses.supersimple.dev/courses/react\nFrontend Bundle (React, JS, HTML CSS): https://courses.supersimple.dev/bundles/frontend-bundle\nMembership: https://youtube.com/@SuperSimpleDev/join\nor https://member.supersimple.dev (10% OFF the USD price)\n\nLinks in this course: https://github.com/SuperSimpleDev/react-course/blob/main/1-links.md\nExercise solutions: https://github.com/SuperSimpleDev/react-course/tree/main/1-exercise-solutions\nCopy of the code: https://github.com/SuperSimpleDev/react-course/tree/main/2-copy-of-code\nTroubleshooting: https://github.com/SuperSimpleDev/react-course/blob/main/2-troubleshooting.md\n\n🎓 Premium Courses (get a certificate, better learning experience, support SuperSimpleDev ❤️)\nFrontend Bundle (React, JS, HTML CSS): https://courses.supersimple.dev/bundles/frontend-bundle\nReact Premium Course: https://courses.supersimple.dev/courses/react\nJavaScript Premium Course: https://courses.supersimple.dev/courses/javascript\nHTML CSS Premium Course: https://courses.supersimple.dev/courses/html-css\n\nSections:\n0:00 Intro\n1:20 1. React Basics, JSX\n40:16 2. Components, Props, Start the Chatbot Project\n1:36:49 3. State, Event Handlers, Chatbot Project Features\n2:42:41 4. CSS with React, Hooks, Finish Chatbot Project\n3:48:49 5. Proper React Setup with Vite\n4:59:29 6. React Router, Git, Start the Ecommerce Project\n6:09:59 7. React with Backend, Data Fetching, Load Ecommerce Project Data\n8:00:58 8. Data Mutation, Update Ecommerce Project Data\n8:50:10 9. Automated Tests in React with Vitest\n9:50:31 10. Deploy React to the Internet, Intro to AWS\n10:41:06 11. React 19 Updates\n10:50:13 TypeScript with React\n11:24:12 AI with React\n11:31:09 Conclusion and Next Steps\n\nAdditional information:\nThis React tutorial and React full course is a project based series of React tutorials for software engineers. Each React tutorial builds on a project and provides some React exercises to practice what we learned. By the end, we'll learn how to create complex websites and projects with React, JavaScript, HTML, and CSS, which will help you become a web developer and software engineer.\n\n#react #supersimpledev #reactcourse #reacttutorial #reactjs  #javascript #html #css #webdevelopment #webdeveloper #softwaredeveloper  #softwaredevelopment #coding #codingtutorial #softwareengineer #softwareengineering #learntocode",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/TtPXvEcE11E/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/TtPXvEcE11E/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/TtPXvEcE11E/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/TtPXvEcE11E/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/TtPXvEcE11E/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "SuperSimpleDev",
        "tags": [
          "supersimpledev",
          "react tutorial",
          "react course",
          "reactjs",
          "reactjs tutorial",
          "reactjs course",
          "javascript",
          "javascript course",
          "javascript tutorial"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "React Tutorial Full Course - Beginner to Pro (React 19, 2025)",
          "description": "In this React tutorial and React full course, build websites and projects with React.\nReact Premium Course: https://courses.supersimple.dev/courses/react\nFrontend Bundle (React, JS, HTML CSS): https://courses.supersimple.dev/bundles/frontend-bundle\nMembership: https://youtube.com/@SuperSimpleDev/join\nor https://member.supersimple.dev (10% OFF the USD price)\n\nLinks in this course: https://github.com/SuperSimpleDev/react-course/blob/main/1-links.md\nExercise solutions: https://github.com/SuperSimpleDev/react-course/tree/main/1-exercise-solutions\nCopy of the code: https://github.com/SuperSimpleDev/react-course/tree/main/2-copy-of-code\nTroubleshooting: https://github.com/SuperSimpleDev/react-course/blob/main/2-troubleshooting.md\n\n🎓 Premium Courses (get a certificate, better learning experience, support SuperSimpleDev ❤️)\nFrontend Bundle (React, JS, HTML CSS): https://courses.supersimple.dev/bundles/frontend-bundle\nReact Premium Course: https://courses.supersimple.dev/courses/react\nJavaScript Premium Course: https://courses.supersimple.dev/courses/javascript\nHTML CSS Premium Course: https://courses.supersimple.dev/courses/html-css\n\nSections:\n0:00 Intro\n1:20 1. React Basics, JSX\n40:16 2. Components, Props, Start the Chatbot Project\n1:36:49 3. State, Event Handlers, Chatbot Project Features\n2:42:41 4. CSS with React, Hooks, Finish Chatbot Project\n3:48:49 5. Proper React Setup with Vite\n4:59:29 6. React Router, Git, Start the Ecommerce Project\n6:09:59 7. React with Backend, Data Fetching, Load Ecommerce Project Data\n8:00:58 8. Data Mutation, Update Ecommerce Project Data\n8:50:10 9. Automated Tests in React with Vitest\n9:50:31 10. Deploy React to the Internet, Intro to AWS\n10:41:06 11. React 19 Updates\n10:50:13 TypeScript with React\n11:24:12 AI with React\n11:31:09 Conclusion and Next Steps\n\nAdditional information:\nThis React tutorial and React full course is a project based series of React tutorials for software engineers. Each React tutorial builds on a project and provides some React exercises to practice what we learned. By the end, we'll learn how to create complex websites and projects with React, JavaScript, HTML, and CSS, which will help you become a web developer and software engineer.\n\n#react #supersimpledev #reactcourse #reacttutorial #reactjs  #javascript #html #css #webdevelopment #webdeveloper #softwaredeveloper  #softwaredevelopment #coding #codingtutorial #softwareengineer #softwareengineering #learntocode"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT11H32M4S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "206120",
        "likeCount": "6498",
        "favoriteCount": "0",
        "commentCount": "747"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "5FYrUrOtgymQotcWwSgfOKZ3Spg",
      "id": "0-S5a0eXPoc",
      "snippet": {
        "publishedAt": "2020-05-11T16:00:11Z",
        "channelId": "UCWv7vMbMWH4-V0ZXdmDpPBA",
        "title": "React Native Tutorial for Beginners - Build a React Native App",
        "description": "Build amazing iOS & Android apps with React Native! 🚀 This beginner-friendly tutorial gets you started.\n\n❤️ Join this channel to get access to perks:\nhttps://www.youtube.com/channel/UCWv7vMbMWH4-V0ZXdmDpPBA/join\n\n🚀 Ready for a deep dive? \n- Check out my full course: https://mosh.link/react-native-course\n- Subscribe for more awesome content: https://goo.gl/6PYaGF\n\n✋ Stay connected:\n- Twitter: https://twitter.com/moshhamedani\n- Facebook: https://www.facebook.com/programmingwithmosh/\n- Instagram: https://www.instagram.com/codewithmosh.official/\n- LinkedIn: https://www.linkedin.com/school/codewithmosh/\n\n💡 Why React Native?\n- Build apps for both iOS & Android using your web development skills.\n- Faster development than native languages.\n- Huge developer community and resources.\n\n👉 This tutorial is perfect for you if:\n- You know basic React.\n- Want to break into mobile app development.\n- You value fast development and cross-platform compatibility.\n\n📕 Learn React\n- React Tutorial for Beginners: https://youtu.be/Ke90Tje7VS0\n- Mastering React Course: http://bit.ly/2KVl2A3\n\n🎁 Get the FREE goodies:\n- Layout Exercises PDF: https://bit.ly/3dzbKDZ\n- Layout Exercises Supplementary Materials: https://bit.ly/3fvqZQ9\n\n📖 TABLE OF CONTENT \n0:00:00 Introduction\n0:02:20 Prerequisites\n0:02:58 What is React Native?\n0:04:33 Expo\n0:06:19 Setting up the development environment \n0:09:17 Your First React Native App\n0:14:38 Running on an iOS simulator\n0:18:02 Running on an Android emulator\n0:26:48 Running on a physical device\n0:27:54 Logging\n0:29:16 Debugging with Chrome\n0:34:27 Debugging in VSCode\n0:41:39 Publishing\n0:46:30 Fundamental Concepts\n0:48:20 View\n0:51:08 Text\n0:53:50 Image\n0:59:25 Touchables\n1:04:21 Button\n1:06:01 Alert\n1:09:55 StyleSheet\n1:14:49 Platform-specific code\n1:18:06 Layouts\n1:18:43 Dimensions\n1:22:22 Detecting orientation changes\n1:27:39 Flexbox\n1:30:56 flexDirection\n1:32:48 justifyContent, alignItems and alignSelf \n1:37:22 flexWrap and alignContent\n1:40:22 flexBasis, flexGrow and flexShrink \n1:43:07 Absolute and Relative Positioning \n1:45:59 Exercises\n1:46:58 Welcome Screen\n1:57:55 View Image Screen\n2:02:51 Refactoring\n\n#reactnative #reactjs #javascript #coding #programming",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/0-S5a0eXPoc/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/0-S5a0eXPoc/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/0-S5a0eXPoc/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/0-S5a0eXPoc/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/0-S5a0eXPoc/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Programming with Mosh",
        "tags": [
          "react native",
          "react native tutorial",
          "react native app",
          "react native tutorial for beginners",
          "react native crash course",
          "react native project",
          "react native app tutorial",
          "react",
          "javascript",
          "mobile app development",
          "tutorial",
          "react native for beginners",
          "app development",
          "react-native",
          "programming",
          "react native course",
          "code with mosh",
          "programming with mosh",
          "mosh hamedani",
          "learn react native",
          "react native 2020",
          "learn react",
          "reactnative"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "React Native Tutorial for Beginners - Build a React Native App",
          "description": "Build amazing iOS & Android apps with React Native! 🚀 This beginner-friendly tutorial gets you started.\n\n❤️ Join this channel to get access to perks:\nhttps://www.youtube.com/channel/UCWv7vMbMWH4-V0ZXdmDpPBA/join\n\n🚀 Ready for a deep dive? \n- Check out my full course: https://mosh.link/react-native-course\n- Subscribe for more awesome content: https://goo.gl/6PYaGF\n\n✋ Stay connected:\n- Twitter: https://twitter.com/moshhamedani\n- Facebook: https://www.facebook.com/programmingwithmosh/\n- Instagram: https://www.instagram.com/codewithmosh.official/\n- LinkedIn: https://www.linkedin.com/school/codewithmosh/\n\n💡 Why React Native?\n- Build apps for both iOS & Android using your web development skills.\n- Faster development than native languages.\n- Huge developer community and resources.\n\n👉 This tutorial is perfect for you if:\n- You know basic React.\n- Want to break into mobile app development.\n- You value fast development and cross-platform compatibility.\n\n📕 Learn React\n- React Tutorial for Beginners: https://youtu.be/Ke90Tje7VS0\n- Mastering React Course: http://bit.ly/2KVl2A3\n\n🎁 Get the FREE goodies:\n- Layout Exercises PDF: https://bit.ly/3dzbKDZ\n- Layout Exercises Supplementary Materials: https://bit.ly/3fvqZQ9\n\n📖 TABLE OF CONTENT \n0:00:00 Introduction\n0:02:20 Prerequisites\n0:02:58 What is React Native?\n0:04:33 Expo\n0:06:19 Setting up the development environment \n0:09:17 Your First React Native App\n0:14:38 Running on an iOS simulator\n0:18:02 Running on an Android emulator\n0:26:48 Running on a physical device\n0:27:54 Logging\n0:29:16 Debugging with Chrome\n0:34:27 Debugging in VSCode\n0:41:39 Publishing\n0:46:30 Fundamental Concepts\n0:48:20 View\n0:51:08 Text\n0:53:50 Image\n0:59:25 Touchables\n1:04:21 Button\n1:06:01 Alert\n1:09:55 StyleSheet\n1:14:49 Platform-specific code\n1:18:06 Layouts\n1:18:43 Dimensions\n1:22:22 Detecting orientation changes\n1:27:39 Flexbox\n1:30:56 flexDirection\n1:32:48 justifyContent, alignItems and alignSelf \n1:37:22 flexWrap and alignContent\n1:40:22 flexBasis, flexGrow and flexShrink \n1:43:07 Absolute and Relative Positioning \n1:45:59 Exercises\n1:46:58 Welcome Screen\n1:57:55 View Image Screen\n2:02:51 Refactoring\n\n#reactnative #reactjs #javascript #coding #programming"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT2H6M30S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "true",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "3580574",
        "likeCount": "54806",
        "favoriteCount": "0",
        "commentCount": "2055"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "u_UZzmfB58-65nYDusStan3-plg",
      "id": "sm5Y7Vtuihg",
      "snippet": {
        "publishedAt": "2024-12-30T14:26:43Z",
        "channelId": "UC8butISFwT-Wl7EV0hUK0BQ",
        "title": "React Native Full Course for Beginners",
        "description": "This React Native Course for beginners from @DaveGrayTeachesCode is an all-in-one tutorial full of over 4 hours of React Native code and instruction to help you learn the basics of mobile app development. \n\n🔗 Course Resources: https://github.com/gitdagray/react-native-course\n\n❤️ Try interactive React courses we love, right in your browser: https://scrimba.com/freeCodeCamp-React (Made possible by a grant from our friends at Scrimba)\n\n⭐️ Contents ⭐️\n(0:00:00) Intro\n(0:01:08) Chapter 1: Start Here\n(0:21:47) Chapter 2: Build an App\n(0:43:06) Chapter 3: Navigation\n(1:17:25) Chapter 4: List Views\n(2:05:47) Chapter 5: CRUD App\n(2:42:40) Chapter 6: Data Storage\n(3:20:20) Chapter 7: Dynamic Routing\n(4:02:34) Chapter 8: EAS Development Builds\n\n🎉 Thanks to our Champion and Sponsor supporters:\n👾 Drake Milly\n👾 Ulises Moralez\n👾 Goddard Tan\n👾 David MG\n👾 Matthew Springman\n👾 Claudio\n👾 Oscar R.\n👾 jedi-or-sith\n👾 Nattira Maneerat\n👾 Justin Hual\n\n--\n\nLearn to code for free and get a developer job: https://www.freecodecamp.org\n\nRead hundreds of articles on programming: https://freecodecamp.org/news",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/sm5Y7Vtuihg/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/sm5Y7Vtuihg/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/sm5Y7Vtuihg/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/sm5Y7Vtuihg/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/sm5Y7Vtuihg/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "freeCodeCamp.org",
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "React Native Full Course for Beginners",
          "description": "This React Native Course for beginners from @DaveGrayTeachesCode is an all-in-one tutorial full of over 4 hours of React Native code and instruction to help you learn the basics of mobile app development. \n\n🔗 Course Resources: https://github.com/gitdagray/react-native-course\n\n❤️ Try interactive React courses we love, right in your browser: https://scrimba.com/freeCodeCamp-React (Made possible by a grant from our friends at Scrimba)\n\n⭐️ Contents ⭐️\n(0:00:00) Intro\n(0:01:08) Chapter 1: Start Here\n(0:21:47) Chapter 2: Build an App\n(0:43:06) Chapter 3: Navigation\n(1:17:25) Chapter 4: List Views\n(2:05:47) Chapter 5: CRUD App\n(2:42:40) Chapter 6: Data Storage\n(3:20:20) Chapter 7: Dynamic Routing\n(4:02:34) Chapter 8: EAS Development Builds\n\n🎉 Thanks to our Champion and Sponsor supporters:\n👾 Drake Milly\n👾 Ulises Moralez\n👾 Goddard Tan\n👾 David MG\n👾 Matthew Springman\n👾 Claudio\n👾 Oscar R.\n👾 jedi-or-sith\n👾 Nattira Maneerat\n👾 Justin Hual\n\n--\n\nLearn to code for free and get a developer job: https://www.freecodecamp.org\n\nRead hundreds of articles on programming: https://freecodecamp.org/news"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT4H23M53S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "310675",
        "likeCount": "6782",
        "favoriteCount": "0",
        "commentCount": "271"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "5fJm4hXba1Og71tgqKN8nV67f6o",
      "id": "BTfcnxXevm0",
      "snippet": {
        "publishedAt": "2025-08-08T13:40:08Z",
        "channelId": "UCmXmlB4-HJytD7wek0Uo97A",
        "title": "Build and Deploy 3 Full-Stack React Native Apps That'll Get You Hired | Full 10-Hour Course",
        "description": "Kick off your iOS/Android mobile development with React Native and Expo by creating a mobile movie app, a Real Estate app with Google Authentication and dynamic routing, and a Food Delivery app featuring search, filters, cart, smooth navigation, and scalable backend.\n\n💫 Set up Appwrite: https://jsm.dev/rn25-appwrite\n\n⭐ Join JS Mastery Pro: https://jsm.dev/rn25-jsm\n💎 Become a Top 1% Next.js Developer: https://jsm.dev/rn25-nextjs\n📙 Complete Path to JavaScript Mastery Course: https://jsm.dev/rn25-cpjsm\n\n📘 React Native Pro Course Waitlist: https://jsm.dev/rn25-course\n📘 TailwindCSS Pro Course Waitlist: https://jsm.dev/rn25-tailwind\n📘 Backend Pro Course Waitlist: https://jsm.dev/rn25-backend\n📘 React Pro Course Waitlist: https://jsm.dev/rn25-react\n\n📁 FREE Video Kits (Code, Figma, Assets)\n1st - Movie App: https://jsm.dev/rn25-movie\n2nd - Real Estate: https://jsm.dev/rn25-restate\n3rd - Food Delivery: https://jsm.dev/rn25-food\n\nSentry: https://jsm.dev/rn25-sentry\nWebStorm: https://jsm.dev/rn25-webstorm\nJunie: https://jsm.dev/rn25-junie\n\nRate us on TrustPilot: https://jsm.dev/trustpilot\n\nhttps://discord.com/invite/n6EdbFJ https://twitter.com/jsmasterypro https://instagram.com/javascriptmastery https://linkedin.com/company/javascriptmastery\n\nBusiness Inquiries: contact@jsmastery.pro\n\nTime Stamps: \n00:00:00 — Introduction \n00:06:19 — #1 Crash Course & Movie App\n00:08:31 — Why React Native?\n00:12:19 — React Native Fundamentals\n00:22:53 — Project Overview (Movie App)\n00:24:53 — Intro & Setup\n00:33:20 — Setup Styling\n00:42:15 — Routing & Navigation\n01:04:47 — Customize App Title & Icon\n01:07:00 — Home Screen UI\n01:15:58 — TMDB API\n01:25:25 — Custom Hook\n01:31:57 — Fetch & Display Movies\n01:52:18 — Develop Search Screen\n02:10:55 — Appwrite Setup\n02:28:20 — Show Trending Movies\n02:45:09 — Hide StatusBar\n02:47:35 — Movie Details\n03:08:28 — Optimization\n\n03:12:37 — #2 Real Estate App\n03:15:20 — Project Setup\n03:25:20 — Setup Routes\n03:31:12 — Setup Nativewind\n03:37:04 — Setup Fonts and Assets\n03:49:04 — Develop Sign In Screen\n03:57:10 — Setup Appwrite & Google oAuth\n04:02:39 — Setup SDK & Auth functions\n04:12:34 — Integrate Authentication\n04:28:25 — Implement Tabs Navigation\n04:35:29 — Profile Screen\n04:49:57 — Implement Home screen UI\n05:25:07 — Home Screen Lists\n05:33:04 — Appwrite DB Setup\n05:44:59 — Database Seed\n05:55:20 — Fetch Properties\n06:00:41 — Display Data\n06:15:15 — Explore Screen\n06:22:20 — Details Screen\n\n06:27:16 — #3 Food Delivery App\n06:29:26 — Project Setup\n06:39:12 — NativeWind Setup\n06:58:55 — Home Screen\n07:22:19 — Routing\n07:31:45 — Setup Appwrite\n07:35:25 — Auth Screens\n08:03:17 — Auth Functionality\n08:21:59 — Sentry\n08:33:46 — Store\n08:46:40 — Tab Navigation\n08:56:41 — Database Architecture\n09:09:20 — Seed Database\n09:16:57 — Search Screen\n09:34:39 — Menu Item Component\n09:40:32 — Search and Filtering\n10:05:21 — Cart Store\n10:23:45 — Next Steps",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/BTfcnxXevm0/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/BTfcnxXevm0/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/BTfcnxXevm0/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/BTfcnxXevm0/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/BTfcnxXevm0/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "JavaScript Mastery",
        "tags": [
          "javascript",
          "javascript mastery",
          "js mastery",
          "master javascript",
          "React Native tutorial",
          "React Native Expo tutorial",
          "React Native mobile app development",
          "iOS app development with React Native",
          "Android app development with React Native",
          "build mobile apps with React Native",
          "React Native movie app tutorial",
          "React Native real estate app tutorial",
          "React Native search and filters",
          "scalable backend for React Native apps",
          "React Native full course",
          "React Native UI/UX design"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "Build and Deploy 3 Full-Stack React Native Apps That'll Get You Hired | Full 10-Hour Course",
          "description": "Kick off your iOS/Android mobile development with React Native and Expo by creating a mobile movie app, a Real Estate app with Google Authentication and dynamic routing, and a Food Delivery app featuring search, filters, cart, smooth navigation, and scalable backend.\n\n💫 Set up Appwrite: https://jsm.dev/rn25-appwrite\n\n⭐ Join JS Mastery Pro: https://jsm.dev/rn25-jsm\n💎 Become a Top 1% Next.js Developer: https://jsm.dev/rn25-nextjs\n📙 Complete Path to JavaScript Mastery Course: https://jsm.dev/rn25-cpjsm\n\n📘 React Native Pro Course Waitlist: https://jsm.dev/rn25-course\n📘 TailwindCSS Pro Course Waitlist: https://jsm.dev/rn25-tailwind\n📘 Backend Pro Course Waitlist: https://jsm.dev/rn25-backend\n📘 React Pro Course Waitlist: https://jsm.dev/rn25-react\n\n📁 FREE Video Kits (Code, Figma, Assets)\n1st - Movie App: https://jsm.dev/rn25-movie\n2nd - Real Estate: https://jsm.dev/rn25-restate\n3rd - Food Delivery: https://jsm.dev/rn25-food\n\nSentry: https://jsm.dev/rn25-sentry\nWebStorm: https://jsm.dev/rn25-webstorm\nJunie: https://jsm.dev/rn25-junie\n\nRate us on TrustPilot: https://jsm.dev/trustpilot\n\nhttps://discord.com/invite/n6EdbFJ https://twitter.com/jsmasterypro https://instagram.com/javascriptmastery https://linkedin.com/company/javascriptmastery\n\nBusiness Inquiries: contact@jsmastery.pro\n\nTime Stamps: \n00:00:00 — Introduction \n00:06:19 — #1 Crash Course & Movie App\n00:08:31 — Why React Native?\n00:12:19 — React Native Fundamentals\n00:22:53 — Project Overview (Movie App)\n00:24:53 — Intro & Setup\n00:33:20 — Setup Styling\n00:42:15 — Routing & Navigation\n01:04:47 — Customize App Title & Icon\n01:07:00 — Home Screen UI\n01:15:58 — TMDB API\n01:25:25 — Custom Hook\n01:31:57 — Fetch & Display Movies\n01:52:18 — Develop Search Screen\n02:10:55 — Appwrite Setup\n02:28:20 — Show Trending Movies\n02:45:09 — Hide StatusBar\n02:47:35 — Movie Details\n03:08:28 — Optimization\n\n03:12:37 — #2 Real Estate App\n03:15:20 — Project Setup\n03:25:20 — Setup Routes\n03:31:12 — Setup Nativewind\n03:37:04 — Setup Fonts and Assets\n03:49:04 — Develop Sign In Screen\n03:57:10 — Setup Appwrite & Google oAuth\n04:02:39 — Setup SDK & Auth functions\n04:12:34 — Integrate Authentication\n04:28:25 — Implement Tabs Navigation\n04:35:29 — Profile Screen\n04:49:57 — Implement Home screen UI\n05:25:07 — Home Screen Lists\n05:33:04 — Appwrite DB Setup\n05:44:59 — Database Seed\n05:55:20 — Fetch Properties\n06:00:41 — Display Data\n06:15:15 — Explore Screen\n06:22:20 — Details Screen\n\n06:27:16 — #3 Food Delivery App\n06:29:26 — Project Setup\n06:39:12 — NativeWind Setup\n06:58:55 — Home Screen\n07:22:19 — Routing\n07:31:45 — Setup Appwrite\n07:35:25 — Auth Screens\n08:03:17 — Auth Functionality\n08:21:59 — Sentry\n08:33:46 — Store\n08:46:40 — Tab Navigation\n08:56:41 — Database Architecture\n09:09:20 — Seed Database\n09:16:57 — Search Screen\n09:34:39 — Menu Item Component\n09:40:32 — Search and Filtering\n10:05:21 — Cart Store\n10:23:45 — Next Steps"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT10H28M",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "390582",
        "likeCount": "5579",
        "favoriteCount": "0",
        "commentCount": "330"
      }
    }
  ],
  "pageInfo": {
    "totalResults": 20,
    "resultsPerPage": 20
  }
}
","status":200,"url":"https://www.googleapis.com/youtube/v3/videos?part=snippet%2CcontentDetails%2Cstatistics&id=0-S5a0eXPoc%2Cf8Z9JyB2EIE%2CSqcY0GlETPk%2CJKccS9k56_I%2CJ50gwzwLvAk%2Csm5Y7Vtuihg%2CobH0Po_RdWk%2C9UKCv9T_rIo%2C0-S5a0eXPoc%2CBvwq_S0n2pk%2CJ2j1yk-34OY%2Cf8Z9JyB2EIE%2Csm5Y7Vtuihg%2CJKccS9k56_I%2CTtPXvEcE11E%2Cf8Z9JyB2EIE%2CTtPXvEcE11E%2C0-S5a0eXPoc%2Csm5Y7Vtuihg%2CBTfcnxXevm0&key=AIzaSyAeZAsOW2kBeNqsdozdSNpajJeUOXsJ2fs"},"revalidate":3600,"tags":[]}