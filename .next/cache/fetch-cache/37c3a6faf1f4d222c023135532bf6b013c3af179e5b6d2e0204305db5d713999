{"kind":"FETCH","data":{"headers":{"content-encoding":"gzip","content-type":"application/json; charset=UTF-8","date":"Thu, 23 Oct 2025 10:53:35 GMT","server":"scaffolding on HTTPServer2","transfer-encoding":"chunked","vary":"Origin, X-Origin, Referer","x-content-type-options":"nosniff","x-frame-options":"SAMEORIGIN","x-xss-protection":"0"},"body":"ewogICJraW5kIjogInlvdXR1YmUjdmlkZW9MaXN0UmVzcG9uc2UiLAogICJldGFnIjogIm9LakIwb1dIbW9VeGRGT3B6ZjdhVjVlX3lKbyIsCiAgIml0ZW1zIjogWwogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgImV0YWciOiAiM0x4RTBtT0IxSksxaUpYMkJKcm5QUHlzeVc0IiwKICAgICAgImlkIjogIjROZmlHa1dHRkVZIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMjUtMTAtMDNUMTM6MzA6MDZaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDRnRfSUJ5RjVRaXZEMHJZVkRZUUJLUSIsCiAgICAgICAgInRpdGxlIjogIkRheS0zMy8xMDAgQWRtaW4gUGFuZWwgTGF5b3V0IFJlc3BvbnNpdmUgUmVhY3QgfHwgUmVhY3QgTmV4dEpTIFR1dG9yaWFsIGZvciBCZWdpbm5lcnMgaW4gSGluZGkiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJTb3VyY2UgY29kZVxuaHR0cHM6Ly9jb2RpbmdvdHQuY29tXG5cbldoYXRzIGFwcCBncm91cFxuaHR0cHM6Ly9jaGF0LndoYXRzYXBwLmNvbS9GR21sRnRhZ0ZtOTU5QkxOQXpqRXNlXG5cbkZvbGxvdyB1cyBvbiBJbnN0YWdyYW1cbmh0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vY29kaW5nb3R0X3N5c3RlbXM/aWdzaD1NV28wWld4MWFuZGlZbkJ2Y0E9PVxuXG5LZXl3b3Jkc1xucmVhY3QgbmV4dGpzIHR1dG9yaWFsXG5cbm5leHRqcyByZWFjdCB0dXRvcmlhbFxuXG5uZXh0anMgMTQgdHV0b3JpYWwgKHVzZSBsYXRlc3QgdmVyc2lvbiBudW1iZXIsIGUuZy4sIDE0IG9yIDEzKVxuXG5uZXh0anMgY3Jhc2ggY291cnNlXG5cbnJlYWN0IG5leHRqcyBmdWxsIGNvdXJzZVxuXG5uZXh0anMgYmVnaW5uZXJzIHR1dG9yaWFsXG5cbmxlYXJuIG5leHRqcyBzdGVwIGJ5IHN0ZXBcblxubmV4dGpzIGZvciBiZWdpbm5lcnNcblxubmV4dGpzIHR1dG9yaWFsIDIwMjVcblxubmV4dGpzIHJlYWN0IGV4cGxhaW5lZFxuXG5yZWFjdCBuZXh0anMgcHJvamVjdCB0dXRvcmlhbFxuXG5uZXh0anMgYXBwIHJvdXRlciB0dXRvcmlhbFxuXG5uZXh0anMgdnMgcmVhY3QgdHV0b3JpYWxcblxucmVhY3QgbmV4dGpzIHdlYnNpdGUgdHV0b3JpYWxcblxuYnVpbGQgd2Vic2l0ZSB3aXRoIG5leHRqc1xuXG5uZXh0anMgdHV0b3JpYWwgaW4gaGluZGkgKGlmIHRhcmdldGluZyBJbmRpYW4gYXVkaWVuY2UpXG5cbm5leHRqcyBhdXRoZW50aWNhdGlvbiB0dXRvcmlhbFxuXG5uZXh0anMgYXBpIHR1dG9yaWFsXG5cbm5leHRqcyByZWFjdCBiZXN0IHByYWN0aWNlc1xuXG5uZXh0anMgbWFkZSBlYXN5XG5cbnJlYWN0IG5leHRqcyBjcmFzaCBjb3Vyc2UgMjAyNVxuXG5uZXh0anMgZnVsbCBzdGFjayB0dXRvcmlhbFxuXG5idWlsZCBhbmQgZGVwbG95IG5leHRqcyBhcHBcblxubmV4dGpzIHVsdGltYXRlIGd1aWRlXG5cbm1hc3RlciBuZXh0anMgaW4gMSBob3VyXG5cbm5leHRqcyByb2FkbWFwIDIwMjVcblxubmV4dGpzIHNlbyB0dXRvcmlhbFxuXG5uZXh0anMgZGVwbG95bWVudCB0dXRvcmlhbFxuU2F1cmF2IHNpciBsaW5rZWRpblxuaHR0cHM6Ly93d3cubGlua2VkaW4uY29tL2luL2VyLXNhdXJhdi00MzE4YWEyMWIiLAogICAgICAgICJ0aHVtYm5haWxzIjogewogICAgICAgICAgImRlZmF1bHQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS80TmZpR2tXR0ZFWS9kZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgICAgICAgImhlaWdodCI6IDkwCiAgICAgICAgICB9LAogICAgICAgICAgIm1lZGl1bSI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpLzROZmlHa1dHRkVZL21xZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAzMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiAxODAKICAgICAgICAgIH0sCiAgICAgICAgICAiaGlnaCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpLzROZmlHa1dHRkVZL2hxZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA0ODAsCiAgICAgICAgICAgICJoZWlnaHQiOiAzNjAKICAgICAgICAgIH0sCiAgICAgICAgICAic3RhbmRhcmQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS80TmZpR2tXR0ZFWS9zZGRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNjQwLAogICAgICAgICAgICAiaGVpZ2h0IjogNDgwCiAgICAgICAgICB9LAogICAgICAgICAgIm1heHJlcyI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpLzROZmlHa1dHRkVZL21heHJlc2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTI4MCwKICAgICAgICAgICAgImhlaWdodCI6IDcyMAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImNoYW5uZWxUaXRsZSI6ICJDb2RpbmdPdHQiLAogICAgICAgICJ0YWdzIjogWwogICAgICAgICAgInJlYWN0IG5leHRqcyB0dXRvcmlhbCIsCiAgICAgICAgICAibmV4dGpzIHJlYWN0IHR1dG9yaWFsIiwKICAgICAgICAgICJuZXh0anMgMTQgdHV0b3JpYWwiLAogICAgICAgICAgIm5leHRqcyBjcmFzaCBjb3Vyc2UiLAogICAgICAgICAgInJlYWN0IG5leHRqcyBmdWxsIGNvdXJzZSIsCiAgICAgICAgICAibmV4dGpzIGJlZ2lubmVycyB0dXRvcmlhbCIsCiAgICAgICAgICAibGVhcm4gbmV4dGpzIHN0ZXAgYnkgc3RlcCIsCiAgICAgICAgICAibmV4dGpzIHJlYWN0IGV4cGxhaW5lZCIsCiAgICAgICAgICAicmVhY3QgbmV4dGpzIHByb2plY3QgdHV0b3JpYWwiLAogICAgICAgICAgIm5leHRqcyB2cyByZWFjdCB0dXRvcmlhbCIsCiAgICAgICAgICAicmVhY3QgbmV4dGpzIHdlYnNpdGUgdHV0b3JpYWwiLAogICAgICAgICAgIm5leHRqcyB0dXRvcmlhbCBpbiBoaW5kaSIsCiAgICAgICAgICAibmV4dGpzIGF1dGhlbnRpY2F0aW9uIHR1dG9yaWFsIiwKICAgICAgICAgICJyZWFjdCBuZXh0anMgY3Jhc2ggY291cnNlIDIwMjUiLAogICAgICAgICAgIm5leHRqcyBmdWxsIHN0YWNrIHR1dG9yaWFsIiwKICAgICAgICAgICJidWlsZCBhbmQgZGVwbG95IG5leHRqcyBhcHAiLAogICAgICAgICAgIm5leHRqcyByb2FkbWFwIDIwMjUiLAogICAgICAgICAgIm5leHRqcyBzZW8gdHV0b3JpYWwiCiAgICAgICAgXSwKICAgICAgICAiY2F0ZWdvcnlJZCI6ICIyNyIsCiAgICAgICAgImxpdmVCcm9hZGNhc3RDb250ZW50IjogIm5vbmUiLAogICAgICAgICJkZWZhdWx0TGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICJsb2NhbGl6ZWQiOiB7CiAgICAgICAgICAidGl0bGUiOiAiRGF5LTMzLzEwMCBBZG1pbiBQYW5lbCBMYXlvdXQgUmVzcG9uc2l2ZSBSZWFjdCB8fCBSZWFjdCBOZXh0SlMgVHV0b3JpYWwgZm9yIEJlZ2lubmVycyBpbiBIaW5kaSIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiU291cmNlIGNvZGVcbmh0dHBzOi8vY29kaW5nb3R0LmNvbVxuXG5XaGF0cyBhcHAgZ3JvdXBcbmh0dHBzOi8vY2hhdC53aGF0c2FwcC5jb20vRkdtbEZ0YWdGbTk1OUJMTkF6akVzZVxuXG5Gb2xsb3cgdXMgb24gSW5zdGFncmFtXG5odHRwczovL3d3dy5pbnN0YWdyYW0uY29tL2NvZGluZ290dF9zeXN0ZW1zP2lnc2g9TVdvMFpXeDFhbmRpWW5CdmNBPT1cblxuS2V5d29yZHNcbnJlYWN0IG5leHRqcyB0dXRvcmlhbFxuXG5uZXh0anMgcmVhY3QgdHV0b3JpYWxcblxubmV4dGpzIDE0IHR1dG9yaWFsICh1c2UgbGF0ZXN0IHZlcnNpb24gbnVtYmVyLCBlLmcuLCAxNCBvciAxMylcblxubmV4dGpzIGNyYXNoIGNvdXJzZVxuXG5yZWFjdCBuZXh0anMgZnVsbCBjb3Vyc2VcblxubmV4dGpzIGJlZ2lubmVycyB0dXRvcmlhbFxuXG5sZWFybiBuZXh0anMgc3RlcCBieSBzdGVwXG5cbm5leHRqcyBmb3IgYmVnaW5uZXJzXG5cbm5leHRqcyB0dXRvcmlhbCAyMDI1XG5cbm5leHRqcyByZWFjdCBleHBsYWluZWRcblxucmVhY3QgbmV4dGpzIHByb2plY3QgdHV0b3JpYWxcblxubmV4dGpzIGFwcCByb3V0ZXIgdHV0b3JpYWxcblxubmV4dGpzIHZzIHJlYWN0IHR1dG9yaWFsXG5cbnJlYWN0IG5leHRqcyB3ZWJzaXRlIHR1dG9yaWFsXG5cbmJ1aWxkIHdlYnNpdGUgd2l0aCBuZXh0anNcblxubmV4dGpzIHR1dG9yaWFsIGluIGhpbmRpIChpZiB0YXJnZXRpbmcgSW5kaWFuIGF1ZGllbmNlKVxuXG5uZXh0anMgYXV0aGVudGljYXRpb24gdHV0b3JpYWxcblxubmV4dGpzIGFwaSB0dXRvcmlhbFxuXG5uZXh0anMgcmVhY3QgYmVzdCBwcmFjdGljZXNcblxubmV4dGpzIG1hZGUgZWFzeVxuXG5yZWFjdCBuZXh0anMgY3Jhc2ggY291cnNlIDIwMjVcblxubmV4dGpzIGZ1bGwgc3RhY2sgdHV0b3JpYWxcblxuYnVpbGQgYW5kIGRlcGxveSBuZXh0anMgYXBwXG5cbm5leHRqcyB1bHRpbWF0ZSBndWlkZVxuXG5tYXN0ZXIgbmV4dGpzIGluIDEgaG91clxuXG5uZXh0anMgcm9hZG1hcCAyMDI1XG5cbm5leHRqcyBzZW8gdHV0b3JpYWxcblxubmV4dGpzIGRlcGxveW1lbnQgdHV0b3JpYWxcblNhdXJhdiBzaXIgbGlua2VkaW5cbmh0dHBzOi8vd3d3LmxpbmtlZGluLmNvbS9pbi9lci1zYXVyYXYtNDMxOGFhMjFiIgogICAgICAgIH0sCiAgICAgICAgImRlZmF1bHRBdWRpb0xhbmd1YWdlIjogImhpIgogICAgICB9LAogICAgICAiY29udGVudERldGFpbHMiOiB7CiAgICAgICAgImR1cmF0aW9uIjogIlBUMTlNMjBTIiwKICAgICAgICAiZGltZW5zaW9uIjogIjJkIiwKICAgICAgICAiZGVmaW5pdGlvbiI6ICJoZCIsCiAgICAgICAgImNhcHRpb24iOiAiZmFsc2UiLAogICAgICAgICJsaWNlbnNlZENvbnRlbnQiOiB0cnVlLAogICAgICAgICJjb250ZW50UmF0aW5nIjoge30sCiAgICAgICAgInByb2plY3Rpb24iOiAicmVjdGFuZ3VsYXIiCiAgICAgIH0sCiAgICAgICJzdGF0aXN0aWNzIjogewogICAgICAgICJ2aWV3Q291bnQiOiAiNDQzIiwKICAgICAgICAibGlrZUNvdW50IjogIjE4IiwKICAgICAgICAiZmF2b3JpdGVDb3VudCI6ICIwIiwKICAgICAgICAiY29tbWVudENvdW50IjogIjQiCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJraW5kIjogInlvdXR1YmUjdmlkZW8iLAogICAgICAiZXRhZyI6ICIzRDlKeUpudUI1bW1wVGNKRzNqMWY0b3RTaTgiLAogICAgICAiaWQiOiAiMWlDbjZoS0trT3MiLAogICAgICAic25pcHBldCI6IHsKICAgICAgICAicHVibGlzaGVkQXQiOiAiMjAyNS0wOS0yNlQxMzozMDowNloiLAogICAgICAgICJjaGFubmVsSWQiOiAiVUNGdF9JQnlGNVFpdkQwcllWRFlRQktRIiwKICAgICAgICAidGl0bGUiOiAiRGF5LTI2LzEwMCBCdWlsZCBSZWFjdCBXb3JsZGBzIFRpbWVyIHx8IFJlYWN0IE5leHRKUyBUdXRvcmlhbCBmb3IgQmVnaW5uZXJzIGluIEhpbmRpIiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiU291cmNlIGNvZGVcbmh0dHBzOi8vY29kaW5nb3R0LmNvbVxuXG5XaGF0cyBhcHAgZ3JvdXBcbmh0dHBzOi8vY2hhdC53aGF0c2FwcC5jb20vRkdtbEZ0YWdGbTk1OUJMTkF6akVzZVxuXG5Gb2xsb3cgdXMgb24gSW5zdGFncmFtXG5odHRwczovL3d3dy5pbnN0YWdyYW0uY29tL2NvZGluZ290dF9zeXN0ZW1zP2lnc2g9TVdvMFpXeDFhbmRpWW5CdmNBPT1cblxuS2V5d29yZHNcbnJlYWN0IG5leHRqcyB0dXRvcmlhbFxuXG5uZXh0anMgcmVhY3QgdHV0b3JpYWxcblxubmV4dGpzIDE0IHR1dG9yaWFsICh1c2UgbGF0ZXN0IHZlcnNpb24gbnVtYmVyLCBlLmcuLCAxNCBvciAxMylcblxubmV4dGpzIGNyYXNoIGNvdXJzZVxuXG5yZWFjdCBuZXh0anMgZnVsbCBjb3Vyc2VcblxubmV4dGpzIGJlZ2lubmVycyB0dXRvcmlhbFxuXG5sZWFybiBuZXh0anMgc3RlcCBieSBzdGVwXG5cbm5leHRqcyBmb3IgYmVnaW5uZXJzXG5cbm5leHRqcyB0dXRvcmlhbCAyMDI1XG5cbm5leHRqcyByZWFjdCBleHBsYWluZWRcblxucmVhY3QgbmV4dGpzIHByb2plY3QgdHV0b3JpYWxcblxubmV4dGpzIGFwcCByb3V0ZXIgdHV0b3JpYWxcblxubmV4dGpzIHZzIHJlYWN0IHR1dG9yaWFsXG5cbnJlYWN0IG5leHRqcyB3ZWJzaXRlIHR1dG9yaWFsXG5cbmJ1aWxkIHdlYnNpdGUgd2l0aCBuZXh0anNcblxubmV4dGpzIHR1dG9yaWFsIGluIGhpbmRpIChpZiB0YXJnZXRpbmcgSW5kaWFuIGF1ZGllbmNlKVxuXG5uZXh0anMgYXV0aGVudGljYXRpb24gdHV0b3JpYWxcblxubmV4dGpzIGFwaSB0dXRvcmlhbFxuXG5uZXh0anMgcmVhY3QgYmVzdCBwcmFjdGljZXNcblxubmV4dGpzIG1hZGUgZWFzeVxuXG5yZWFjdCBuZXh0anMgY3Jhc2ggY291cnNlIDIwMjVcblxubmV4dGpzIGZ1bGwgc3RhY2sgdHV0b3JpYWxcblxuYnVpbGQgYW5kIGRlcGxveSBuZXh0anMgYXBwXG5cbm5leHRqcyB1bHRpbWF0ZSBndWlkZVxuXG5tYXN0ZXIgbmV4dGpzIGluIDEgaG91clxuXG5uZXh0anMgcm9hZG1hcCAyMDI1XG5cbm5leHRqcyBzZW8gdHV0b3JpYWxcblxubmV4dGpzIGRlcGxveW1lbnQgdHV0b3JpYWxcblNhdXJhdiBzaXIgbGlua2VkaW5cbmh0dHBzOi8vd3d3LmxpbmtlZGluLmNvbS9pbi9lci1zYXVyYXYtNDMxOGFhMjFiIiwKICAgICAgICAidGh1bWJuYWlscyI6IHsKICAgICAgICAgICJkZWZhdWx0IjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvMWlDbjZoS0trT3MvZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiA5MAogICAgICAgICAgfSwKICAgICAgICAgICJtZWRpdW0iOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS8xaUNuNmhLS2tPcy9tcWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMzIwLAogICAgICAgICAgICAiaGVpZ2h0IjogMTgwCiAgICAgICAgICB9LAogICAgICAgICAgImhpZ2giOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS8xaUNuNmhLS2tPcy9ocWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNDgwLAogICAgICAgICAgICAiaGVpZ2h0IjogMzYwCiAgICAgICAgICB9LAogICAgICAgICAgInN0YW5kYXJkIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvMWlDbjZoS0trT3Mvc2RkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDY0MCwKICAgICAgICAgICAgImhlaWdodCI6IDQ4MAogICAgICAgICAgfSwKICAgICAgICAgICJtYXhyZXMiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS8xaUNuNmhLS2tPcy9tYXhyZXNkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyODAsCiAgICAgICAgICAgICJoZWlnaHQiOiA3MjAKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJjaGFubmVsVGl0bGUiOiAiQ29kaW5nT3R0IiwKICAgICAgICAidGFncyI6IFsKICAgICAgICAgICJyZWFjdCBuZXh0anMgdHV0b3JpYWwiLAogICAgICAgICAgIm5leHRqcyByZWFjdCB0dXRvcmlhbCIsCiAgICAgICAgICAibmV4dGpzIDE0IHR1dG9yaWFsIiwKICAgICAgICAgICJuZXh0anMgY3Jhc2ggY291cnNlIiwKICAgICAgICAgICJyZWFjdCBuZXh0anMgZnVsbCBjb3Vyc2UiLAogICAgICAgICAgIm5leHRqcyBiZWdpbm5lcnMgdHV0b3JpYWwiLAogICAgICAgICAgImxlYXJuIG5leHRqcyBzdGVwIGJ5IHN0ZXAiLAogICAgICAgICAgIm5leHRqcyByZWFjdCBleHBsYWluZWQiLAogICAgICAgICAgInJlYWN0IG5leHRqcyBwcm9qZWN0IHR1dG9yaWFsIiwKICAgICAgICAgICJuZXh0anMgdnMgcmVhY3QgdHV0b3JpYWwiLAogICAgICAgICAgInJlYWN0IG5leHRqcyB3ZWJzaXRlIHR1dG9yaWFsIiwKICAgICAgICAgICJuZXh0anMgdHV0b3JpYWwgaW4gaGluZGkiLAogICAgICAgICAgIm5leHRqcyBhdXRoZW50aWNhdGlvbiB0dXRvcmlhbCIsCiAgICAgICAgICAicmVhY3QgbmV4dGpzIGNyYXNoIGNvdXJzZSAyMDI1IiwKICAgICAgICAgICJuZXh0anMgZnVsbCBzdGFjayB0dXRvcmlhbCIsCiAgICAgICAgICAiYnVpbGQgYW5kIGRlcGxveSBuZXh0anMgYXBwIiwKICAgICAgICAgICJuZXh0anMgcm9hZG1hcCAyMDI1IiwKICAgICAgICAgICJuZXh0anMgc2VvIHR1dG9yaWFsIgogICAgICAgIF0sCiAgICAgICAgImNhdGVnb3J5SWQiOiAiMjciLAogICAgICAgICJsaXZlQnJvYWRjYXN0Q29udGVudCI6ICJub25lIiwKICAgICAgICAiZGVmYXVsdExhbmd1YWdlIjogImVuIiwKICAgICAgICAibG9jYWxpemVkIjogewogICAgICAgICAgInRpdGxlIjogIkRheS0yNi8xMDAgQnVpbGQgUmVhY3QgV29ybGRgcyBUaW1lciB8fCBSZWFjdCBOZXh0SlMgVHV0b3JpYWwgZm9yIEJlZ2lubmVycyBpbiBIaW5kaSIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiU291cmNlIGNvZGVcbmh0dHBzOi8vY29kaW5nb3R0LmNvbVxuXG5XaGF0cyBhcHAgZ3JvdXBcbmh0dHBzOi8vY2hhdC53aGF0c2FwcC5jb20vRkdtbEZ0YWdGbTk1OUJMTkF6akVzZVxuXG5Gb2xsb3cgdXMgb24gSW5zdGFncmFtXG5odHRwczovL3d3dy5pbnN0YWdyYW0uY29tL2NvZGluZ290dF9zeXN0ZW1zP2lnc2g9TVdvMFpXeDFhbmRpWW5CdmNBPT1cblxuS2V5d29yZHNcbnJlYWN0IG5leHRqcyB0dXRvcmlhbFxuXG5uZXh0anMgcmVhY3QgdHV0b3JpYWxcblxubmV4dGpzIDE0IHR1dG9yaWFsICh1c2UgbGF0ZXN0IHZlcnNpb24gbnVtYmVyLCBlLmcuLCAxNCBvciAxMylcblxubmV4dGpzIGNyYXNoIGNvdXJzZVxuXG5yZWFjdCBuZXh0anMgZnVsbCBjb3Vyc2VcblxubmV4dGpzIGJlZ2lubmVycyB0dXRvcmlhbFxuXG5sZWFybiBuZXh0anMgc3RlcCBieSBzdGVwXG5cbm5leHRqcyBmb3IgYmVnaW5uZXJzXG5cbm5leHRqcyB0dXRvcmlhbCAyMDI1XG5cbm5leHRqcyByZWFjdCBleHBsYWluZWRcblxucmVhY3QgbmV4dGpzIHByb2plY3QgdHV0b3JpYWxcblxubmV4dGpzIGFwcCByb3V0ZXIgdHV0b3JpYWxcblxubmV4dGpzIHZzIHJlYWN0IHR1dG9yaWFsXG5cbnJlYWN0IG5leHRqcyB3ZWJzaXRlIHR1dG9yaWFsXG5cbmJ1aWxkIHdlYnNpdGUgd2l0aCBuZXh0anNcblxubmV4dGpzIHR1dG9yaWFsIGluIGhpbmRpIChpZiB0YXJnZXRpbmcgSW5kaWFuIGF1ZGllbmNlKVxuXG5uZXh0anMgYXV0aGVudGljYXRpb24gdHV0b3JpYWxcblxubmV4dGpzIGFwaSB0dXRvcmlhbFxuXG5uZXh0anMgcmVhY3QgYmVzdCBwcmFjdGljZXNcblxubmV4dGpzIG1hZGUgZWFzeVxuXG5yZWFjdCBuZXh0anMgY3Jhc2ggY291cnNlIDIwMjVcblxubmV4dGpzIGZ1bGwgc3RhY2sgdHV0b3JpYWxcblxuYnVpbGQgYW5kIGRlcGxveSBuZXh0anMgYXBwXG5cbm5leHRqcyB1bHRpbWF0ZSBndWlkZVxuXG5tYXN0ZXIgbmV4dGpzIGluIDEgaG91clxuXG5uZXh0anMgcm9hZG1hcCAyMDI1XG5cbm5leHRqcyBzZW8gdHV0b3JpYWxcblxubmV4dGpzIGRlcGxveW1lbnQgdHV0b3JpYWxcblNhdXJhdiBzaXIgbGlua2VkaW5cbmh0dHBzOi8vd3d3LmxpbmtlZGluLmNvbS9pbi9lci1zYXVyYXYtNDMxOGFhMjFiIgogICAgICAgIH0sCiAgICAgICAgImRlZmF1bHRBdWRpb0xhbmd1YWdlIjogImVuIgogICAgICB9LAogICAgICAiY29udGVudERldGFpbHMiOiB7CiAgICAgICAgImR1cmF0aW9uIjogIlBUMTJNNDJTIiwKICAgICAgICAiZGltZW5zaW9uIjogIjJkIiwKICAgICAgICAiZGVmaW5pdGlvbiI6ICJoZCIsCiAgICAgICAgImNhcHRpb24iOiAiZmFsc2UiLAogICAgICAgICJsaWNlbnNlZENvbnRlbnQiOiB0cnVlLAogICAgICAgICJjb250ZW50UmF0aW5nIjoge30sCiAgICAgICAgInByb2plY3Rpb24iOiAicmVjdGFuZ3VsYXIiCiAgICAgIH0sCiAgICAgICJzdGF0aXN0aWNzIjogewogICAgICAgICJ2aWV3Q291bnQiOiAiMjcwIiwKICAgICAgICAibGlrZUNvdW50IjogIjExIiwKICAgICAgICAiZmF2b3JpdGVDb3VudCI6ICIwIiwKICAgICAgICAiY29tbWVudENvdW50IjogIjYiCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJraW5kIjogInlvdXR1YmUjdmlkZW8iLAogICAgICAiZXRhZyI6ICJGak9DRHVqaXhXbDNZRVFGT3E4Q0FHcUtpa3ciLAogICAgICAiaWQiOiAielFNMkhnTlRCQ3MiLAogICAgICAic25pcHBldCI6IHsKICAgICAgICAicHVibGlzaGVkQXQiOiAiMjAyNS0wOC0yNFQxNDowMTozM1oiLAogICAgICAgICJjaGFubmVsSWQiOiAiVUNlSkJ5RVc4bkxONmZvRFNMQ05nNmJ3IiwKICAgICAgICAidGl0bGUiOiAibjhuIENvbXBsZXRlIENvdXJzZSAoQmVnaW5uZXIgdG8gQWR2YW5jZWQpIHwgV2hhdHNBcHAgQXV0b21hdGlvbiBQcm9qZWN0IiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAi8J+kliBuOG4gQ29tcGxldGUgQ291cnNlIHdpdGggV2hhdHNBcHAgQXV0b21hdGlvbiDwn5qAXG5MZWFybiBzdGVwIGJ5IHN0ZXAgaG93IHRvIHNldCB1cCBuOG4sIGJ1aWxkIGFuIEFJIEFnZW50IHdpdGggR2VtaW5pIExMTSwgYW5kIGludGVncmF0ZSBpdCB3aXRoIFdoYXRzQXBwIOKAlCBhbGwgd2l0aG91dCBjb2RpbmchIFBlcmZlY3QgZm9yIGJlZ2lubmVycywgc3R1ZGVudHMsIGFuZCBhbnlvbmUgd2hvIHdhbnRzIHRvIGF1dG9tYXRlIHRhc2tzIGluIDIwMjUuXG5cbvCfk5ogQUlsIFJlc291cmNlczpcbvCfkYkgaHR0cHM6Ly90Lm1lL01hbmlzaERpZ2l0YWxBY2FkZW15LzMxXG5cbvCfk7ogUmVsYXRlZCBWaWRlb3MgWW914oCZbGwgTG92ZTpcbvCflLkgTWFrZSBXZWJBcHAgV2l0aG91dCBDb2Rpbmc6IFdoaWNoIE9uZSBXaW5zIHRoZSBUZWNoIFJhY2U/IOKGkiBodHRwczovL3lvdXR1LmJlL2dsa1l1M3pHMlNzP3NpPTdBMVE0SFRqaElGV3V1WXRcbvCflLkgTm90aW9uIFR1dG9yaWFsIDIwMjU6IFN0ZXAtYnktU3RlcCBHdWlkZSBpbiBIaW5kaSBmb3IgQmVnaW5uZXJzIOKGkiBodHRwczovL3lvdXR1LmJlL3JRNG9hLTlsamU4P3NpPUNzdy1zRWtPLVNXb2ZxZHlcbvCflLkg8J+YsSBTdHVkZW50cywgVXNlIFRoZXNlIDUgQUkgVG9vbHMgUmlnaHQgTm93ISAoQ29tcGxldGVseSBGUkVFKSDwn5SlIOKGkiBodHRwczovL3lvdXR1LmJlLzhEV0JTSVFjWTN3P3NpPTgwWEZaQTR0TXIyVlRiX2pcbvCflLkg8J+noCBDaGF0R1BUIFVwZGF0ZWQgVHV0b3JpYWwgMjAyNTogU3RlcC1ieS1TdGVwIEd1aWRlIGluIEhpbmRpIGZvciBCZWdpbm5lcnMg4oaSIGh0dHBzOi8veW91dHUuYmUvb0JrM3VldEhXNHc/c2k9ay1uR0c2SG04WjRUcGo5bFxuXG7wn5SlIEpvaW4gT3VyIENvbW11bml0eTpcbvCflJcgVGVsZWdyYW06IFtNYW5pc2ggRGlnaXRhbCBBY2FkZW15XSBodHRwczovL3QubWUvTWFuaXNoRGlnaXRhbEFjYWRlbXlcbvCflJcgSW5zdGFncmFtOiBbQG1vbmlzaF94cF0gaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS9tb25pc2hfeHAvIFxuXG7ij7AgQ2hhcHRlcnM6XG4wMDowMCAtIEludHJvICYgRGVtb1xuMDI6NDEgLSBDcmVhdGUgbjhuIEFjY291bnRcbjAzOjI2IC0gVHJpZ2dlciBTZXR1cFxuMDQ6NDYgLSBBZGQgQUkgQWdlbnRcbjA1OjE1IC0gQ29ubmVjdCBHZW1pbmkgTExNXG4wNjo1NyAtIEFkZCBNZW1vcnlcbjA4OjIxIC0gQWRkIFRvb2xzXG4xMTo1MSAtIEFnZW50IEluc3RydWN0aW9uc1xuMTM6MDkgLSBXaGF0c0FwcCBJbnRlZ3JhdGlvblxuMTc6NDcgLSBPdXRyb1xuXG7wn5SNIFdoYXQgWW914oCZbGwgTGVhcm4gaW4gVGhpcyBDb3Vyc2U6XG7inIUgSG93IHRvIHNldCB1cCBuOG4gZnJvbSBzY3JhdGNoIPCfm6DvuI9cbuKchSBIb3cgdG8gY3JlYXRlIGFuIEFJIEFnZW50IHVzaW5nIEdlbWluaSBMTE0g8J+kllxu4pyFIEFkZGluZyBtZW1vcnkgJiB0b29scyBmb3Igc21hcnRlciByZXNwb25zZXMg8J+SrFxu4pyFIFN0ZXAtYnktc3RlcCBndWlkZSB0byBpbnRlZ3JhdGUgV2hhdHNBcHAgYXV0b21hdGlvbiDwn5OyXG7inIUgQnVpbGQgYSByZWFsIHByb2plY3Qgd2l0aCBBSSArIG44biDwn5qAXG5cbvCflJYgSGFzaHRhZ3M6XG4jbjhuICNXaGF0c0FwcEF1dG9tYXRpb24gI0FJQWdlbnQgI05vQ29kZUFJICNBdXRvbWF0aW9uMjAyNSAjTWFuaXNoRGlnaXRhbEFjYWRlbXkgI0J1aWxkV2l0aEFJIiwKICAgICAgICAidGh1bWJuYWlscyI6IHsKICAgICAgICAgICJkZWZhdWx0IjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvelFNMkhnTlRCQ3MvZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiA5MAogICAgICAgICAgfSwKICAgICAgICAgICJtZWRpdW0iOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS96UU0ySGdOVEJDcy9tcWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMzIwLAogICAgICAgICAgICAiaGVpZ2h0IjogMTgwCiAgICAgICAgICB9LAogICAgICAgICAgImhpZ2giOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS96UU0ySGdOVEJDcy9ocWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNDgwLAogICAgICAgICAgICAiaGVpZ2h0IjogMzYwCiAgICAgICAgICB9LAogICAgICAgICAgInN0YW5kYXJkIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvelFNMkhnTlRCQ3Mvc2RkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDY0MCwKICAgICAgICAgICAgImhlaWdodCI6IDQ4MAogICAgICAgICAgfSwKICAgICAgICAgICJtYXhyZXMiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS96UU0ySGdOVEJDcy9tYXhyZXNkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyODAsCiAgICAgICAgICAgICJoZWlnaHQiOiA3MjAKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJjaGFubmVsVGl0bGUiOiAiTWFuaXNoIERpZ2l0YWwgQWNhZGVteSIsCiAgICAgICAgInRhZ3MiOiBbCiAgICAgICAgICAiTWFuaXNoIERpZ2l0YWwgQWNhZGVteSIsCiAgICAgICAgICAibjhuIHR1dG9yaWFsIiwKICAgICAgICAgICJuOG4gY29tcGxldGUgY291cnNlIiwKICAgICAgICAgICJuOG4gYXV0b21hdGlvbiIsCiAgICAgICAgICAibjhuIHdoYXRzYXBwIGludGVncmF0aW9uIiwKICAgICAgICAgICJ3aGF0c2FwcCBhdXRvbWF0aW9uIHdpdGggbjhuIiwKICAgICAgICAgICJuOG4gYWkgYWdlbnQiLAogICAgICAgICAgIm44biBnZW1pbmkgbGxtIHR1dG9yaWFsIiwKICAgICAgICAgICJubyBjb2RlIHdoYXRzYXBwIGF1dG9tYXRpb24iLAogICAgICAgICAgIm5vIGNvZGUgYWkgYXV0b21hdGlvbiIsCiAgICAgICAgICAibjhuIGZvciBiZWdpbm5lcnMiLAogICAgICAgICAgIm44biBzdGVwIGJ5IHN0ZXAgdHV0b3JpYWwiLAogICAgICAgICAgIm44biAyMDI1IHR1dG9yaWFsIiwKICAgICAgICAgICJuOG4gZnVsbCBjb3Vyc2Ugd2hhdHNhcHAgcHJvamVjdCIsCiAgICAgICAgICAid2hhdHNhcHAgYm90IHdpdGggbjhuIiwKICAgICAgICAgICJhaSBhdXRvbWF0aW9uIDIwMjUiLAogICAgICAgICAgIm5vIGNvZGUgYXV0b21hdGlvbiB0b29scyIsCiAgICAgICAgICAiYnVpbGQgYWkgYWdlbnQgd2l0aG91dCBjb2RpbmciLAogICAgICAgICAgIm44biB3b3JrZmxvdyBhdXRvbWF0aW9uIiwKICAgICAgICAgICJ3aGF0c2FwcCBjaGF0Ym90IHdpdGggYWkiCiAgICAgICAgXSwKICAgICAgICAiY2F0ZWdvcnlJZCI6ICIyOCIsCiAgICAgICAgImxpdmVCcm9hZGNhc3RDb250ZW50IjogIm5vbmUiLAogICAgICAgICJkZWZhdWx0TGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICJsb2NhbGl6ZWQiOiB7CiAgICAgICAgICAidGl0bGUiOiAibjhuIENvbXBsZXRlIENvdXJzZSAoQmVnaW5uZXIgdG8gQWR2YW5jZWQpIHwgV2hhdHNBcHAgQXV0b21hdGlvbiBQcm9qZWN0IiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICLwn6SWIG44biBDb21wbGV0ZSBDb3Vyc2Ugd2l0aCBXaGF0c0FwcCBBdXRvbWF0aW9uIPCfmoBcbkxlYXJuIHN0ZXAgYnkgc3RlcCBob3cgdG8gc2V0IHVwIG44biwgYnVpbGQgYW4gQUkgQWdlbnQgd2l0aCBHZW1pbmkgTExNLCBhbmQgaW50ZWdyYXRlIGl0IHdpdGggV2hhdHNBcHAg4oCUIGFsbCB3aXRob3V0IGNvZGluZyEgUGVyZmVjdCBmb3IgYmVnaW5uZXJzLCBzdHVkZW50cywgYW5kIGFueW9uZSB3aG8gd2FudHMgdG8gYXV0b21hdGUgdGFza3MgaW4gMjAyNS5cblxu8J+TmiBBSWwgUmVzb3VyY2VzOlxu8J+RiSBodHRwczovL3QubWUvTWFuaXNoRGlnaXRhbEFjYWRlbXkvMzFcblxu8J+TuiBSZWxhdGVkIFZpZGVvcyBZb3XigJlsbCBMb3ZlOlxu8J+UuSBNYWtlIFdlYkFwcCBXaXRob3V0IENvZGluZzogV2hpY2ggT25lIFdpbnMgdGhlIFRlY2ggUmFjZT8g4oaSIGh0dHBzOi8veW91dHUuYmUvZ2xrWXUzekcyU3M/c2k9N0ExUTRIVGpoSUZXdXVZdFxu8J+UuSBOb3Rpb24gVHV0b3JpYWwgMjAyNTogU3RlcC1ieS1TdGVwIEd1aWRlIGluIEhpbmRpIGZvciBCZWdpbm5lcnMg4oaSIGh0dHBzOi8veW91dHUuYmUvclE0b2EtOWxqZTg/c2k9Q3N3LXNFa08tU1dvZnFkeVxu8J+UuSDwn5ixIFN0dWRlbnRzLCBVc2UgVGhlc2UgNSBBSSBUb29scyBSaWdodCBOb3chIChDb21wbGV0ZWx5IEZSRUUpIPCflKUg4oaSIGh0dHBzOi8veW91dHUuYmUvOERXQlNJUWNZM3c/c2k9ODBYRlpBNHRNcjJWVGJfalxu8J+UuSDwn6egIENoYXRHUFQgVXBkYXRlZCBUdXRvcmlhbCAyMDI1OiBTdGVwLWJ5LVN0ZXAgR3VpZGUgaW4gSGluZGkgZm9yIEJlZ2lubmVycyDihpIgaHR0cHM6Ly95b3V0dS5iZS9vQmszdWV0SFc0dz9zaT1rLW5HRzZIbThaNFRwajlsXG5cbvCflKUgSm9pbiBPdXIgQ29tbXVuaXR5Olxu8J+UlyBUZWxlZ3JhbTogW01hbmlzaCBEaWdpdGFsIEFjYWRlbXldIGh0dHBzOi8vdC5tZS9NYW5pc2hEaWdpdGFsQWNhZGVteVxu8J+UlyBJbnN0YWdyYW06IFtAbW9uaXNoX3hwXSBodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL21vbmlzaF94cC8gXG5cbuKPsCBDaGFwdGVyczpcbjAwOjAwIC0gSW50cm8gJiBEZW1vXG4wMjo0MSAtIENyZWF0ZSBuOG4gQWNjb3VudFxuMDM6MjYgLSBUcmlnZ2VyIFNldHVwXG4wNDo0NiAtIEFkZCBBSSBBZ2VudFxuMDU6MTUgLSBDb25uZWN0IEdlbWluaSBMTE1cbjA2OjU3IC0gQWRkIE1lbW9yeVxuMDg6MjEgLSBBZGQgVG9vbHNcbjExOjUxIC0gQWdlbnQgSW5zdHJ1Y3Rpb25zXG4xMzowOSAtIFdoYXRzQXBwIEludGVncmF0aW9uXG4xNzo0NyAtIE91dHJvXG5cbvCflI0gV2hhdCBZb3XigJlsbCBMZWFybiBpbiBUaGlzIENvdXJzZTpcbuKchSBIb3cgdG8gc2V0IHVwIG44biBmcm9tIHNjcmF0Y2gg8J+boO+4j1xu4pyFIEhvdyB0byBjcmVhdGUgYW4gQUkgQWdlbnQgdXNpbmcgR2VtaW5pIExMTSDwn6SWXG7inIUgQWRkaW5nIG1lbW9yeSAmIHRvb2xzIGZvciBzbWFydGVyIHJlc3BvbnNlcyDwn5KsXG7inIUgU3RlcC1ieS1zdGVwIGd1aWRlIHRvIGludGVncmF0ZSBXaGF0c0FwcCBhdXRvbWF0aW9uIPCfk7JcbuKchSBCdWlsZCBhIHJlYWwgcHJvamVjdCB3aXRoIEFJICsgbjhuIPCfmoBcblxu8J+UliBIYXNodGFnczpcbiNuOG4gI1doYXRzQXBwQXV0b21hdGlvbiAjQUlBZ2VudCAjTm9Db2RlQUkgI0F1dG9tYXRpb24yMDI1ICNNYW5pc2hEaWdpdGFsQWNhZGVteSAjQnVpbGRXaXRoQUkiCiAgICAgICAgfSwKICAgICAgICAiZGVmYXVsdEF1ZGlvTGFuZ3VhZ2UiOiAiaGkiCiAgICAgIH0sCiAgICAgICJjb250ZW50RGV0YWlscyI6IHsKICAgICAgICAiZHVyYXRpb24iOiAiUFQxOE0zUyIsCiAgICAgICAgImRpbWVuc2lvbiI6ICIyZCIsCiAgICAgICAgImRlZmluaXRpb24iOiAiaGQiLAogICAgICAgICJjYXB0aW9uIjogImZhbHNlIiwKICAgICAgICAibGljZW5zZWRDb250ZW50IjogdHJ1ZSwKICAgICAgICAiY29udGVudFJhdGluZyI6IHt9LAogICAgICAgICJwcm9qZWN0aW9uIjogInJlY3Rhbmd1bGFyIgogICAgICB9LAogICAgICAic3RhdGlzdGljcyI6IHsKICAgICAgICAidmlld0NvdW50IjogIjI2ODkxMSIsCiAgICAgICAgImxpa2VDb3VudCI6ICIxMTg3NCIsCiAgICAgICAgImZhdm9yaXRlQ291bnQiOiAiMCIsCiAgICAgICAgImNvbW1lbnRDb3VudCI6ICIxMTE4IgogICAgICB9CiAgICB9LAogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgImV0YWciOiAiLWsxTzE3cGlwYU11RWpTLS1DTVdjcHU5RmNBIiwKICAgICAgImlkIjogIlJ2MmdRWDVGVmc4IiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMjUtMDctMTRUMDg6MzM6NTRaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDVUVKMWxlUmlRMzFhQW1YbzJnY2ZRdyIsCiAgICAgICAgInRpdGxlIjogIlNldHVwIGEgTmV4dC5qcywgVmVyY2VsIGFuZCBTdXBhYmFzZSBwcm9qZWN0IGluIG1pbnV0ZXMgfCBBSSBjb2RpbmcgVHV0b3JpYWwiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJHZXQgdGhlIFVsdGltYXRlIEFJIENvZGluZyBjb3Vyc2Ugd2l0aCBDdXJzb3I6IGh0dHBzOi8vd3d3LmJ1aWxkY2FtcC5pby9jb3Vyc2VzL2J1aWxkLWEtZnVsbC1zdGFjay1hcHAtd2l0aC1uZXh0anMtYW5kLWN1cnNvclxuXG5JcyB0aGlzIHRoZSBmYXN0ZXN0IHdheSB0byBnZXQgc3RhcnRlZCB3aXRoIHlvdXIgTmV4dC5qcywgVmVyY2VsIGFuZCBTdXBhYmFzZSBwcm9qZWN0PyBXaXRoaW4gNSBtaW51dGVzLCB5b3UnbGwgaGF2ZSBhIHNlY3VyZSBOZXh0LmpzIGFuZCBTdXBhYmFzZSBwcm9qZWN0IHVwIGFuZCBydW5uaW5nIGFuZCBjb25uZWN0ZWQgd2l0aCBHaXRIdWIgYW5kIFZlcmNlbC4gXG5cbjAwOjAwIC0gMDA6MzAg4oCTIEludHJvXG4wMTozNyAtIDAyOjI0IOKAkyBGbG93IGNoYXJ0XG4wMjoyNSAtIDA1OjAwIOKAkyBEZXBsb3lpbmcgU3VwYWJhc2UgdGVtcGxhdGVcbjA1OjAxIC0gMDU6NDkg4oCTIENsb25pbmcgJiBvcGVuaW5nIHByb2plY3RcbjA1OjUwIC0gMDY6MzQg4oCTIFN0YXJ0aW5nIHRoZSBzZXJ2ZXIgaW4gQ3Vyc29yXG4wNjozNSAtIDA3OjQwIOKAkyBBZGRpbmcgZW52IHZhcmlhYmxlc1xuMDc6NDEtIDA5OjI1IOKAkyBTaWduaW5nIHVwIGEgdXNlclxuXG49PT09PT09PT09XG5cbkxlYXJuIHRvIGJ1aWxkIGZ1bGwgc3RhY2sgYXBwcyBcbvCfkYkgaHR0cHM6Ly9idWlsZGNhbXAuaW9cblxuSm9pbiBvdXIgQUkgY29kaW5nIGNvbW11bml0eSBcbvCfkYkgaHR0cHM6Ly9jb21tdW5pdHkuYnVpbGRjYW1wLmlvXG5cbj09PT09PT09PT1cblxuRm9sbG93IEJ1aWxkY2FtcCBvbiBYXG7wn5CmIGh0dHBzOi8vdHdpdHRlci5jb20vYnVpbGRjYW1wXG5cbkZvbGxvdyBHcmVnb3J5IEpvaG4gb24gWFxu8J+QpiBodHRwczovL3R3aXR0ZXIuY29tL19ncmVnb3J5am9obiIsCiAgICAgICAgInRodW1ibmFpbHMiOiB7CiAgICAgICAgICAiZGVmYXVsdCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL1J2MmdRWDVGVmc4L2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTIwLAogICAgICAgICAgICAiaGVpZ2h0IjogOTAKICAgICAgICAgIH0sCiAgICAgICAgICAibWVkaXVtIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvUnYyZ1FYNUZWZzgvbXFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgICAgICAgImhlaWdodCI6IDE4MAogICAgICAgICAgfSwKICAgICAgICAgICJoaWdoIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvUnYyZ1FYNUZWZzgvaHFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgICAgICAgImhlaWdodCI6IDM2MAogICAgICAgICAgfSwKICAgICAgICAgICJzdGFuZGFyZCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL1J2MmdRWDVGVmc4L3NkZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA2NDAsCiAgICAgICAgICAgICJoZWlnaHQiOiA0ODAKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJjaGFubmVsVGl0bGUiOiAiQnVpbGRjYW1wIiwKICAgICAgICAidGFncyI6IFsKICAgICAgICAgICJncmVnb3J5IGpvaG4iLAogICAgICAgICAgImJvb3RjYW1wIiwKICAgICAgICAgICJhcHAgZGV2ZWxvcG1lbnQiLAogICAgICAgICAgImJ1aWxkY2FtcCIsCiAgICAgICAgICAic2FhcyIsCiAgICAgICAgICAiQUkgY29kaW5nIiwKICAgICAgICAgICJ2aWJlY29kaW5nIiwKICAgICAgICAgICJTYWFzIGFwcHMiLAogICAgICAgICAgIkdpdEh1YiIsCiAgICAgICAgICAiTmV4dC5qcyIsCiAgICAgICAgICAiU3VwYWJhc2UiLAogICAgICAgICAgIkRhdGFiYXNlIiwKICAgICAgICAgICJDdXJzb3IiLAogICAgICAgICAgIlZlcmNlbCIKICAgICAgICBdLAogICAgICAgICJjYXRlZ29yeUlkIjogIjI3IiwKICAgICAgICAibGl2ZUJyb2FkY2FzdENvbnRlbnQiOiAibm9uZSIsCiAgICAgICAgImRlZmF1bHRMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgImxvY2FsaXplZCI6IHsKICAgICAgICAgICJ0aXRsZSI6ICJTZXR1cCBhIE5leHQuanMsIFZlcmNlbCBhbmQgU3VwYWJhc2UgcHJvamVjdCBpbiBtaW51dGVzIHwgQUkgY29kaW5nIFR1dG9yaWFsIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJHZXQgdGhlIFVsdGltYXRlIEFJIENvZGluZyBjb3Vyc2Ugd2l0aCBDdXJzb3I6IGh0dHBzOi8vd3d3LmJ1aWxkY2FtcC5pby9jb3Vyc2VzL2J1aWxkLWEtZnVsbC1zdGFjay1hcHAtd2l0aC1uZXh0anMtYW5kLWN1cnNvclxuXG5JcyB0aGlzIHRoZSBmYXN0ZXN0IHdheSB0byBnZXQgc3RhcnRlZCB3aXRoIHlvdXIgTmV4dC5qcywgVmVyY2VsIGFuZCBTdXBhYmFzZSBwcm9qZWN0PyBXaXRoaW4gNSBtaW51dGVzLCB5b3UnbGwgaGF2ZSBhIHNlY3VyZSBOZXh0LmpzIGFuZCBTdXBhYmFzZSBwcm9qZWN0IHVwIGFuZCBydW5uaW5nIGFuZCBjb25uZWN0ZWQgd2l0aCBHaXRIdWIgYW5kIFZlcmNlbC4gXG5cbjAwOjAwIC0gMDA6MzAg4oCTIEludHJvXG4wMTozNyAtIDAyOjI0IOKAkyBGbG93IGNoYXJ0XG4wMjoyNSAtIDA1OjAwIOKAkyBEZXBsb3lpbmcgU3VwYWJhc2UgdGVtcGxhdGVcbjA1OjAxIC0gMDU6NDkg4oCTIENsb25pbmcgJiBvcGVuaW5nIHByb2plY3RcbjA1OjUwIC0gMDY6MzQg4oCTIFN0YXJ0aW5nIHRoZSBzZXJ2ZXIgaW4gQ3Vyc29yXG4wNjozNSAtIDA3OjQwIOKAkyBBZGRpbmcgZW52IHZhcmlhYmxlc1xuMDc6NDEtIDA5OjI1IOKAkyBTaWduaW5nIHVwIGEgdXNlclxuXG49PT09PT09PT09XG5cbkxlYXJuIHRvIGJ1aWxkIGZ1bGwgc3RhY2sgYXBwcyBcbvCfkYkgaHR0cHM6Ly9idWlsZGNhbXAuaW9cblxuSm9pbiBvdXIgQUkgY29kaW5nIGNvbW11bml0eSBcbvCfkYkgaHR0cHM6Ly9jb21tdW5pdHkuYnVpbGRjYW1wLmlvXG5cbj09PT09PT09PT1cblxuRm9sbG93IEJ1aWxkY2FtcCBvbiBYXG7wn5CmIGh0dHBzOi8vdHdpdHRlci5jb20vYnVpbGRjYW1wXG5cbkZvbGxvdyBHcmVnb3J5IEpvaG4gb24gWFxu8J+QpiBodHRwczovL3R3aXR0ZXIuY29tL19ncmVnb3J5am9obiIKICAgICAgICB9LAogICAgICAgICJkZWZhdWx0QXVkaW9MYW5ndWFnZSI6ICJlbi1HQiIKICAgICAgfSwKICAgICAgImNvbnRlbnREZXRhaWxzIjogewogICAgICAgICJkdXJhdGlvbiI6ICJQVDlNMjVTIiwKICAgICAgICAiZGltZW5zaW9uIjogIjJkIiwKICAgICAgICAiZGVmaW5pdGlvbiI6ICJoZCIsCiAgICAgICAgImNhcHRpb24iOiAiZmFsc2UiLAogICAgICAgICJsaWNlbnNlZENvbnRlbnQiOiBmYWxzZSwKICAgICAgICAiY29udGVudFJhdGluZyI6IHt9LAogICAgICAgICJwcm9qZWN0aW9uIjogInJlY3Rhbmd1bGFyIgogICAgICB9LAogICAgICAic3RhdGlzdGljcyI6IHsKICAgICAgICAidmlld0NvdW50IjogIjUzMTYiLAogICAgICAgICJsaWtlQ291bnQiOiAiMTM5IiwKICAgICAgICAiZmF2b3JpdGVDb3VudCI6ICIwIiwKICAgICAgICAiY29tbWVudENvdW50IjogIjIyIgogICAgICB9CiAgICB9LAogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgImV0YWciOiAicl9CRjJUNG1sNkZnZmwyN1dKMVVKNkdqTVVNIiwKICAgICAgImlkIjogIkNGNTJOLXc0YW5JIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMjUtMDctMDVUMTE6MzA6MjBaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDZVZNblNTaFBfSXZpd2trbnQ4M2N3dyIsCiAgICAgICAgInRpdGxlIjogIllvdXIgRmlyc3QgUHJvZ3JhbW1pbmcgTGFuZ3VhZ2UgaW4gdGhlIEFJIEVyYSBTaG91bGQgYmUuLi4iLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJEYXRhIFNjaWVuY2UgQ291cnNlOiBodHRwczovL3d3dy5jb2Rld2l0aGhhcnJ5LmNvbS9jb3Vyc2VzL3RoZS11bHRpbWF0ZS1qb2ItcmVhZHktZGF0YS1zY2llbmNlLWNvdXJzZVxuQ291cnNlIEN1cnJpY3VsdW06IGh0dHBzOi8vd3d3LmNvZGV3aXRoaGFycnkuY29tL2NvdXJzZXMvdGhlLXVsdGltYXRlLWpvYi1yZWFkeS1kYXRhLXNjaWVuY2UtY291cnNlXG5DaGVja291dCBDbGVyazogaHR0cHM6Ly9nby5jbGVyay5jb20vN2Myb2VSeFxuRGF0YSBTY2llbmNlIENvdXJzZSAoSW50ZXJuYXRpb25hbCBTdHVkZW50cyk6IGh0dHBzOi8vYnV5LnN0cmlwZS5jb20vOUI2NWtGMzc5MGpTMmtDZWlaMWdzMDRcblB5dGhvbiBVZGVteSBDb3Vyc2U6IGh0dHBzOi8vZ29oYXJyeS5pbi9weXRob25cblxu4p6h77iPIERvd25sb2FkIE5vdGVzIGFuZCBDaGVhdFNoZWV0czogaHR0cHM6Ly93d3cuY29kZXdpdGhoYXJyeS5jb20vbm90ZXMvXG7inqHvuI8gVWRlbXkgUHl0aG9uIENvdXJzZTogaHR0cHM6Ly9nb2hhcnJ5LmluL3B5dGhvblxu4p6h77iPIENoZWNrb3V0IERhdGEgU2NpZW5jZSBUaGUgVWx0aW1hdGUgSm9iIFJlYWR5IERhdGEgU2NpZW5jZSBDb3Vyc2U6IGh0dHBzOi8vd3d3LmNvZGV3aXRoaGFycnkuY29tL2NvdXJzZXMvdGhlLXVsdGltYXRlLWpvYi1yZWFkeS1kYXRhLXNjaWVuY2UtY291cnNlXG7inqHvuI8gRGF0YSBTY2llbmNlIChJbnRlcm5hdGlvbmFsIFN0dWRlbnRzKTogaHR0cHM6Ly9idXkuc3RyaXBlLmNvbS85QjY1a0YzNzkwalMya0NlaVoxZ3MwNFxu4p6h77iPIENhcmVlciBBZHZpY2U6XG5JZiB5b3UgYXJlIGludG8gY29sbGVnZSBhbmQgQy9DKysvSmF2YSBpcyBiZWluZyB0YXVnaHQsIHBsZWFzZSBjb250aW51ZSB3aXRoIGl0LiBIZXJlIGFyZSBteSByZXNwZWN0aXZlIHZpZGVvcy9wbGF5bGlzdHM6XG5MZWFybiBDIFByb2dyYW1taW5nOiBodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PWFaYjBpdTR1R3dBXG5MZWFybiBDKysgUHJvZ3JhbW1pbmc6IGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3BsYXlsaXN0P2xpc3Q9UEx1MFdfOWxJSTlhZ3BGVUFsUEZlX1ZOU2xYVzV1RTBZTCBcbkxlYXJuIEphdmEgUHJvZ3JhbW1pbmc6IGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3BsYXlsaXN0P2xpc3Q9UEx1MFdfOWxJSTlhZ1M2N1VpdHMwVW5KeXJZaVhoRFM2cVxuXG5CdXQgaWYgeW91IGFyZSBub3QgaW4gY29sbGVnZSBhbmQgd2FudCB0byBsZWFybiBwcm9ncmFtbWluZywgdGhlbiBJIHdvdWxkIHN1Z2dlc3QgeW91IHRvIHN0YXJ0IHdpdGggUHl0aG9uLiAgXG5cbkFsc28gaWYgeW91IGFyZSBhIGJlZ2lubmVyIGFuZCB3YW50IHRvIGxlYXJuIHByb2dyYW1taW5nLCBzdGFydCB3aXRoIFB5dGhvbi4gSXQgaXMgYmVnaW5uZXItZnJpZW5kbHkgYW5kIGhhcyBhIGxhcmdlIGNvbW11bml0eSBmb3Igc3VwcG9ydCBhbmQgYSBsb3Qgb2Ygam9icy4gSWYgeW91J3JlIHNlcmlvdXMgc3RhcnQgd2l0aCBteSBVZGVteSBjb3Vyc2UgaW4gRW5nbGlzaC4gSXRzIHVwZGF0ZWQgKyBoYXMgYSBsb3Qgb2YgcHJvamVjdHMuIEhlcmUgaXMgdGhlIGRpc2NvdW50ZWQgbGluayB3aGljaCB3aWxsIGdldCB5b3UgdGhpcyBjb3Vyc2UgZm9yIGxlc3MgdGhhbiDigrk0MDAtNTAwLiBJIHJlcXVlc3QgeW91IHRvIGxlYXZlIGEgcmV2aWV3IGlmIHlvdSBoYXZlIGVucm9sbGVkOiBcblVkZW15IENvdXJzZTogaHR0cHM6Ly9nb2hhcnJ5LmluL3B5dGhvblxuXG5BZnRlciB5b3UgZmluaXNoIHRoaXMgY291cnNlLCB5b3UgY2FuIHN0YXJ0IHdpdGggRGF0YSBTY2llbmNlLiBJdCBpcyBhIHZlcnkgcHJvZml0YWJsZSBmaWVsZCB0byBnZXQgaW50byBhbmQgaGFzIGEgbG90IG9mIGpvYiBvcHBvcnR1bml0aWVzLiBZb3UgY2FuIGxlYXJuIERhdGEgU2NpZW5jZSB0aHJvdWdoIG15IFwiVWx0aW1hdGUgSm9iIFJlYWR5IERhdGEgU2NpZW5jZSBDb3Vyc2VcIi4gSXQgaXMgYSBjb21wbGV0ZSBjb3Vyc2UgdGhhdCBjb3ZlcnMgZXZlcnl0aGluZyB5b3UgbmVlZCB0byBrbm93IHRvIGdldCBhIGpvYiBpbiBEYXRhIFNjaWVuY2UuIEhlcmUgaXMgdGhlIGRpc2NvdW50ZWQgbGluayB0byB0aGUgY291cnNlIHRoYXQgd2lsbCBnZXQgeW91IHRoaXMgY291cnNlIGZvciDigrkyODk5OlxuRGF0YSBTY2llbmNlIENvdXJzZTogaHR0cHM6Ly93d3cuY29kZXdpdGhoYXJyeS5jb20vY291cnNlcy90aGUtdWx0aW1hdGUtam9iLXJlYWR5LWRhdGEtc2NpZW5jZS1jb3Vyc2VcblxuSWYgeW91IGFyZSBsb29raW5nIGZvciBmcmVlIHJlc291cmNlcyB0byBsZWFybiBQeXRob24sIHlvdSBjYW4gc3RhcnQgd2l0aCBteSBQeXRob24gQ291cnNlIG9uIFlvdVR1YmUuIEl0IGlzIGEgY29tcGxldGUgY291cnNlIHRoYXQgY292ZXJzIGV2ZXJ5dGhpbmcgeW91IG5lZWQgdG8ga25vdyB0byBiZWNvbWUgYSBQeXRob24gZGV2ZWxvcGVyLiBJdHMgRnJlZSBhbmQgeW91IGNhbiBhY2Nlc3MgaXQgaGVyZTpcbjEwIEhvdXIgTG9uZyBQeXRob24gQ291cnNlIChWUyBDb2RlKTogaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1VcnNtRnhFSXA1a1xuMTAwIERheXMgb2YgQ29kZSBQbGF5bGlzdCB0aGF0IHVzZXMgUmVwbGl0OiBodHRwczovL3d3dy55b3V0dWJlLmNvbS9wbGF5bGlzdD9saXN0PVBMdTBXXzlsSUk5YWd3aDFYalJ0MjQyeElwSGhQVDJsbGdcblxuSWYgeW91IHdhbnQgdG8gbGVhcm4gd2ViIGRldmVsb3BtZW50LCB5b3UgY2FuIHN0YXJ0IHdpdGggbXkgU2lnbWEgV2ViIERldmVsb3BtZW50IENvdXJzZS4gSXQgaXMgYSBjb21wbGV0ZSBjb3Vyc2UgdGhhdCBjb3ZlcnMgZXZlcnl0aGluZyB5b3UgbmVlZCB0byBrbm93IHRvIGJlY29tZSBhIHdlYiBkZXZlbG9wZXIuIEl0cyBGcmVlIGFuZCB5b3UgY2FuIGFjY2VzcyBpdCBoZXJlOlxuV2ViIERldmVsb3BtZW50IENvdXJzZTogaHR0cHM6Ly93d3cueW91dHViZS5jb20vcGxheWxpc3Q/bGlzdD1QTHUwV185bElJOWFncTVUckg5WExJS1F2djBpYUYyWDN3XG5cbklmIHlvdSB3YW50IHRvIGxlYXJuIERhdGEgU3RydWN0dXJlcyBhbmQgQWxnb3JpdGhtcywgeW91IGNhbiBzdGFydCB3aXRoIG15IERhdGEgU3RydWN0dXJlcyBhbmQgQWxnb3JpdGhtcyBDb3Vyc2UuIEl0IGlzIGEgY29tcGxldGUgY291cnNlIHRoYXQgY292ZXJzIGV2ZXJ5dGhpbmcgeW91IG5lZWQgdG8ga25vdyB0byBiZWNvbWUgYSBnb29kIHByb2dyYW1tZXIuIEl0cyBGcmVlIGFuZCB5b3UgY2FuIGFjY2VzcyBpdCBoZXJlOlxuRGF0YSBTdHJ1Y3R1cmVzIGFuZCBBbGdvcml0aG1zIENvdXJzZTogaHR0cHM6Ly93d3cueW91dHViZS5jb20vcGxheWxpc3Q/bGlzdD1QTHUwV185bElJOWFoSWFwcFJQTjBNQ0FndE91M2xRalFpXG5cbuKeoe+4jyBPdGhlciBUdXRvcmlhbHM6XG5Xb3JkcHJlc3NbMy4yIEhyXTpodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PUdsTFJZbWw4bUNZJmxpc3Q9UEx1MFdfOWxJSTlhaEtaNDJ2ZzJ3OUVSUG1TaFliWUFCN1xuQW5ndWxhclsyIEhyXTpodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PTBMaEJ2cDhxcHJvJmxpc3Q9UEx1MFdfOWxJSTlhaEtaNDJ2ZzJ3OUVSUG1TaFliWUFCN1xuR1VJIERldmVsb3BtZW50IHdpdGggUHl0aG9uOiBodHRwczovL3d3dy55b3V0dWJlLmNvbS9wbGF5bGlzdD9saXN0PVBMdTBXXzlsSUk5YWpMY3FSY2o0UG9FaWhrdWtGX09UekFcbkxpbnV4WzEgSHJdOmh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9X3RDWS1jLXNQWmMmbGlzdD1QTHUwV185bElJOWFoS1o0MnZnMnc5RVJQbVNoWWJZQUI3XG5cbuKeoe+4jyBNb3JlIEFkdmlzZSBmcm9tIEhhcnJ5OlxuTWFueSBwZW9wbGUgc2F5IHRoYXQgaW4gdGhlIEFJIGVyYSAsIHByb2dyYW1taW5nIGlzIGRlYWQuIEJ1dCBJIGRvbid0IHRoaW5rIHNvLiBBSSBpcyBhIHRvb2wgdGhhdCBjYW4gaGVscCB5b3UgaW4geW91ciBwcm9ncmFtbWluZyBqb3VybmV5LiBCdXQgZG9udCBvdmVydXNlIGl0IGluIHRoZSAgYmVnaW5uaW5nLiBUcnkgdG8gbGVhcm4gYmFzaWNzIGZpcnN0IVxuQUkgY2FuIGhlbHAgeW91IHdyaXRlIGJldHRlciBjb2RlLCBkZWJ1ZyB5b3VyIGNvZGUsIGFuZCBldmVuIGhlbHAgeW91IGxlYXJuIG5ldyBwcm9ncmFtbWluZyBsYW5ndWFnZXMuIFNvIGRvbid0IGJlIGFmcmFpZCBvZiBBSSwgZW1icmFjZSBpdCBhbmQgdXNlIGl0IHRvIHlvdXIgYWR2YW50YWdlLiBUYWxrIHRvIENoYXRHUFQgZGFpbHkgYW5kIHlvdSB3aWxsIHJlYWxpemUgaG93IHF1aWNrbHkgeW91IGNhbiBsZWFybiBuZXcgdGhpbmdzIGFuZCBidWlsZCBzb2Z0d2FyZS4gV2hhdCBvdGhlcnMgdGhpbmsgaXMgYSBkaXNhZHZhbnRhZ2Ugd2lsbCBiZWNvbWUgeW91ciBhZHZhbnRhZ2UuXG5cbuKeoe+4jyBIb3N0aW5nXG5JZiB5b3Ugd2FudCB0byBob3N0IGEgd2Vic2l0ZSBvbiBhIFZQUyBhbmQgZ2V0ICQyMDAgaW4gY3JlZGl0cywgdXNlIG15IERpZ2l0YWxPY2VhbiBMaW5rXG5HZXQgRnJlZSAyMDAkIERpZ2l0YWxPY2VhbiBDcmVkaXRzIGhlcmU6IGh0dHBzOi8vbS5kby5jby9jLzJmMmFhMTAwYjdlZVxuXG7inqHvuI8gRm9sbG93IE1lIE9uIFNvY2lhbCBNZWRpYVxu4pa6IFdlYnNpdGUgKENyZWF0ZWQgVXNpbmcgTmV4dC5qcyk6IGh0dHBzOi8vd3d3LmNvZGV3aXRoaGFycnkuY29tXG7ilrogRmFjZWJvb2s6IGh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9Db2RlV2l0aEhhcnJ5XG7ilrogSW5zdGFncmFtOiBodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL0NvZGVXaXRoSGFycnkvIFxu4pa6IFR3aXR0ZXI6IGh0dHBzOi8vdHdpdHRlci5jb20vQ29kZVdpdGhIYXJyeVxu4pa6IEVuZ2xpc2ggY2hhbm5lbDogaHR0cHM6Ly93d3cueW91dHViZS5jb20vY2hhbm5lbC9VQzdidHFHMld3MF8yTHd1UXhwdm8ySFFcbkNvbW1lbnQgXCIjSGFycnlCaGFpXCIgaWYgeW91IHJlYWQgdGhpcyDwn5iJ8J+YiSIsCiAgICAgICAgInRodW1ibmFpbHMiOiB7CiAgICAgICAgICAiZGVmYXVsdCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL0NGNTJOLXc0YW5JL2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTIwLAogICAgICAgICAgICAiaGVpZ2h0IjogOTAKICAgICAgICAgIH0sCiAgICAgICAgICAibWVkaXVtIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvQ0Y1Mk4tdzRhbkkvbXFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgICAgICAgImhlaWdodCI6IDE4MAogICAgICAgICAgfSwKICAgICAgICAgICJoaWdoIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvQ0Y1Mk4tdzRhbkkvaHFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgICAgICAgImhlaWdodCI6IDM2MAogICAgICAgICAgfSwKICAgICAgICAgICJzdGFuZGFyZCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL0NGNTJOLXc0YW5JL3NkZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA2NDAsCiAgICAgICAgICAgICJoZWlnaHQiOiA0ODAKICAgICAgICAgIH0sCiAgICAgICAgICAibWF4cmVzIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvQ0Y1Mk4tdzRhbkkvbWF4cmVzZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjgwLAogICAgICAgICAgICAiaGVpZ2h0IjogNzIwCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiY2hhbm5lbFRpdGxlIjogIkNvZGVXaXRoSGFycnkiLAogICAgICAgICJjYXRlZ29yeUlkIjogIjI3IiwKICAgICAgICAibGl2ZUJyb2FkY2FzdENvbnRlbnQiOiAibm9uZSIsCiAgICAgICAgImRlZmF1bHRMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgImxvY2FsaXplZCI6IHsKICAgICAgICAgICJ0aXRsZSI6ICJZb3VyIEZpcnN0IFByb2dyYW1taW5nIExhbmd1YWdlIGluIHRoZSBBSSBFcmEgU2hvdWxkIGJlLi4uIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJEYXRhIFNjaWVuY2UgQ291cnNlOiBodHRwczovL3d3dy5jb2Rld2l0aGhhcnJ5LmNvbS9jb3Vyc2VzL3RoZS11bHRpbWF0ZS1qb2ItcmVhZHktZGF0YS1zY2llbmNlLWNvdXJzZVxuQ291cnNlIEN1cnJpY3VsdW06IGh0dHBzOi8vd3d3LmNvZGV3aXRoaGFycnkuY29tL2NvdXJzZXMvdGhlLXVsdGltYXRlLWpvYi1yZWFkeS1kYXRhLXNjaWVuY2UtY291cnNlXG5DaGVja291dCBDbGVyazogaHR0cHM6Ly9nby5jbGVyay5jb20vN2Myb2VSeFxuRGF0YSBTY2llbmNlIENvdXJzZSAoSW50ZXJuYXRpb25hbCBTdHVkZW50cyk6IGh0dHBzOi8vYnV5LnN0cmlwZS5jb20vOUI2NWtGMzc5MGpTMmtDZWlaMWdzMDRcblB5dGhvbiBVZGVteSBDb3Vyc2U6IGh0dHBzOi8vZ29oYXJyeS5pbi9weXRob25cblxu4p6h77iPIERvd25sb2FkIE5vdGVzIGFuZCBDaGVhdFNoZWV0czogaHR0cHM6Ly93d3cuY29kZXdpdGhoYXJyeS5jb20vbm90ZXMvXG7inqHvuI8gVWRlbXkgUHl0aG9uIENvdXJzZTogaHR0cHM6Ly9nb2hhcnJ5LmluL3B5dGhvblxu4p6h77iPIENoZWNrb3V0IERhdGEgU2NpZW5jZSBUaGUgVWx0aW1hdGUgSm9iIFJlYWR5IERhdGEgU2NpZW5jZSBDb3Vyc2U6IGh0dHBzOi8vd3d3LmNvZGV3aXRoaGFycnkuY29tL2NvdXJzZXMvdGhlLXVsdGltYXRlLWpvYi1yZWFkeS1kYXRhLXNjaWVuY2UtY291cnNlXG7inqHvuI8gRGF0YSBTY2llbmNlIChJbnRlcm5hdGlvbmFsIFN0dWRlbnRzKTogaHR0cHM6Ly9idXkuc3RyaXBlLmNvbS85QjY1a0YzNzkwalMya0NlaVoxZ3MwNFxu4p6h77iPIENhcmVlciBBZHZpY2U6XG5JZiB5b3UgYXJlIGludG8gY29sbGVnZSBhbmQgQy9DKysvSmF2YSBpcyBiZWluZyB0YXVnaHQsIHBsZWFzZSBjb250aW51ZSB3aXRoIGl0LiBIZXJlIGFyZSBteSByZXNwZWN0aXZlIHZpZGVvcy9wbGF5bGlzdHM6XG5MZWFybiBDIFByb2dyYW1taW5nOiBodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PWFaYjBpdTR1R3dBXG5MZWFybiBDKysgUHJvZ3JhbW1pbmc6IGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3BsYXlsaXN0P2xpc3Q9UEx1MFdfOWxJSTlhZ3BGVUFsUEZlX1ZOU2xYVzV1RTBZTCBcbkxlYXJuIEphdmEgUHJvZ3JhbW1pbmc6IGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3BsYXlsaXN0P2xpc3Q9UEx1MFdfOWxJSTlhZ1M2N1VpdHMwVW5KeXJZaVhoRFM2cVxuXG5CdXQgaWYgeW91IGFyZSBub3QgaW4gY29sbGVnZSBhbmQgd2FudCB0byBsZWFybiBwcm9ncmFtbWluZywgdGhlbiBJIHdvdWxkIHN1Z2dlc3QgeW91IHRvIHN0YXJ0IHdpdGggUHl0aG9uLiAgXG5cbkFsc28gaWYgeW91IGFyZSBhIGJlZ2lubmVyIGFuZCB3YW50IHRvIGxlYXJuIHByb2dyYW1taW5nLCBzdGFydCB3aXRoIFB5dGhvbi4gSXQgaXMgYmVnaW5uZXItZnJpZW5kbHkgYW5kIGhhcyBhIGxhcmdlIGNvbW11bml0eSBmb3Igc3VwcG9ydCBhbmQgYSBsb3Qgb2Ygam9icy4gSWYgeW91J3JlIHNlcmlvdXMgc3RhcnQgd2l0aCBteSBVZGVteSBjb3Vyc2UgaW4gRW5nbGlzaC4gSXRzIHVwZGF0ZWQgKyBoYXMgYSBsb3Qgb2YgcHJvamVjdHMuIEhlcmUgaXMgdGhlIGRpc2NvdW50ZWQgbGluayB3aGljaCB3aWxsIGdldCB5b3UgdGhpcyBjb3Vyc2UgZm9yIGxlc3MgdGhhbiDigrk0MDAtNTAwLiBJIHJlcXVlc3QgeW91IHRvIGxlYXZlIGEgcmV2aWV3IGlmIHlvdSBoYXZlIGVucm9sbGVkOiBcblVkZW15IENvdXJzZTogaHR0cHM6Ly9nb2hhcnJ5LmluL3B5dGhvblxuXG5BZnRlciB5b3UgZmluaXNoIHRoaXMgY291cnNlLCB5b3UgY2FuIHN0YXJ0IHdpdGggRGF0YSBTY2llbmNlLiBJdCBpcyBhIHZlcnkgcHJvZml0YWJsZSBmaWVsZCB0byBnZXQgaW50byBhbmQgaGFzIGEgbG90IG9mIGpvYiBvcHBvcnR1bml0aWVzLiBZb3UgY2FuIGxlYXJuIERhdGEgU2NpZW5jZSB0aHJvdWdoIG15IFwiVWx0aW1hdGUgSm9iIFJlYWR5IERhdGEgU2NpZW5jZSBDb3Vyc2VcIi4gSXQgaXMgYSBjb21wbGV0ZSBjb3Vyc2UgdGhhdCBjb3ZlcnMgZXZlcnl0aGluZyB5b3UgbmVlZCB0byBrbm93IHRvIGdldCBhIGpvYiBpbiBEYXRhIFNjaWVuY2UuIEhlcmUgaXMgdGhlIGRpc2NvdW50ZWQgbGluayB0byB0aGUgY291cnNlIHRoYXQgd2lsbCBnZXQgeW91IHRoaXMgY291cnNlIGZvciDigrkyODk5OlxuRGF0YSBTY2llbmNlIENvdXJzZTogaHR0cHM6Ly93d3cuY29kZXdpdGhoYXJyeS5jb20vY291cnNlcy90aGUtdWx0aW1hdGUtam9iLXJlYWR5LWRhdGEtc2NpZW5jZS1jb3Vyc2VcblxuSWYgeW91IGFyZSBsb29raW5nIGZvciBmcmVlIHJlc291cmNlcyB0byBsZWFybiBQeXRob24sIHlvdSBjYW4gc3RhcnQgd2l0aCBteSBQeXRob24gQ291cnNlIG9uIFlvdVR1YmUuIEl0IGlzIGEgY29tcGxldGUgY291cnNlIHRoYXQgY292ZXJzIGV2ZXJ5dGhpbmcgeW91IG5lZWQgdG8ga25vdyB0byBiZWNvbWUgYSBQeXRob24gZGV2ZWxvcGVyLiBJdHMgRnJlZSBhbmQgeW91IGNhbiBhY2Nlc3MgaXQgaGVyZTpcbjEwIEhvdXIgTG9uZyBQeXRob24gQ291cnNlIChWUyBDb2RlKTogaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1VcnNtRnhFSXA1a1xuMTAwIERheXMgb2YgQ29kZSBQbGF5bGlzdCB0aGF0IHVzZXMgUmVwbGl0OiBodHRwczovL3d3dy55b3V0dWJlLmNvbS9wbGF5bGlzdD9saXN0PVBMdTBXXzlsSUk5YWd3aDFYalJ0MjQyeElwSGhQVDJsbGdcblxuSWYgeW91IHdhbnQgdG8gbGVhcm4gd2ViIGRldmVsb3BtZW50LCB5b3UgY2FuIHN0YXJ0IHdpdGggbXkgU2lnbWEgV2ViIERldmVsb3BtZW50IENvdXJzZS4gSXQgaXMgYSBjb21wbGV0ZSBjb3Vyc2UgdGhhdCBjb3ZlcnMgZXZlcnl0aGluZyB5b3UgbmVlZCB0byBrbm93IHRvIGJlY29tZSBhIHdlYiBkZXZlbG9wZXIuIEl0cyBGcmVlIGFuZCB5b3UgY2FuIGFjY2VzcyBpdCBoZXJlOlxuV2ViIERldmVsb3BtZW50IENvdXJzZTogaHR0cHM6Ly93d3cueW91dHViZS5jb20vcGxheWxpc3Q/bGlzdD1QTHUwV185bElJOWFncTVUckg5WExJS1F2djBpYUYyWDN3XG5cbklmIHlvdSB3YW50IHRvIGxlYXJuIERhdGEgU3RydWN0dXJlcyBhbmQgQWxnb3JpdGhtcywgeW91IGNhbiBzdGFydCB3aXRoIG15IERhdGEgU3RydWN0dXJlcyBhbmQgQWxnb3JpdGhtcyBDb3Vyc2UuIEl0IGlzIGEgY29tcGxldGUgY291cnNlIHRoYXQgY292ZXJzIGV2ZXJ5dGhpbmcgeW91IG5lZWQgdG8ga25vdyB0byBiZWNvbWUgYSBnb29kIHByb2dyYW1tZXIuIEl0cyBGcmVlIGFuZCB5b3UgY2FuIGFjY2VzcyBpdCBoZXJlOlxuRGF0YSBTdHJ1Y3R1cmVzIGFuZCBBbGdvcml0aG1zIENvdXJzZTogaHR0cHM6Ly93d3cueW91dHViZS5jb20vcGxheWxpc3Q/bGlzdD1QTHUwV185bElJOWFoSWFwcFJQTjBNQ0FndE91M2xRalFpXG5cbuKeoe+4jyBPdGhlciBUdXRvcmlhbHM6XG5Xb3JkcHJlc3NbMy4yIEhyXTpodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PUdsTFJZbWw4bUNZJmxpc3Q9UEx1MFdfOWxJSTlhaEtaNDJ2ZzJ3OUVSUG1TaFliWUFCN1xuQW5ndWxhclsyIEhyXTpodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PTBMaEJ2cDhxcHJvJmxpc3Q9UEx1MFdfOWxJSTlhaEtaNDJ2ZzJ3OUVSUG1TaFliWUFCN1xuR1VJIERldmVsb3BtZW50IHdpdGggUHl0aG9uOiBodHRwczovL3d3dy55b3V0dWJlLmNvbS9wbGF5bGlzdD9saXN0PVBMdTBXXzlsSUk5YWpMY3FSY2o0UG9FaWhrdWtGX09UekFcbkxpbnV4WzEgSHJdOmh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9X3RDWS1jLXNQWmMmbGlzdD1QTHUwV185bElJOWFoS1o0MnZnMnc5RVJQbVNoWWJZQUI3XG5cbuKeoe+4jyBNb3JlIEFkdmlzZSBmcm9tIEhhcnJ5OlxuTWFueSBwZW9wbGUgc2F5IHRoYXQgaW4gdGhlIEFJIGVyYSAsIHByb2dyYW1taW5nIGlzIGRlYWQuIEJ1dCBJIGRvbid0IHRoaW5rIHNvLiBBSSBpcyBhIHRvb2wgdGhhdCBjYW4gaGVscCB5b3UgaW4geW91ciBwcm9ncmFtbWluZyBqb3VybmV5LiBCdXQgZG9udCBvdmVydXNlIGl0IGluIHRoZSAgYmVnaW5uaW5nLiBUcnkgdG8gbGVhcm4gYmFzaWNzIGZpcnN0IVxuQUkgY2FuIGhlbHAgeW91IHdyaXRlIGJldHRlciBjb2RlLCBkZWJ1ZyB5b3VyIGNvZGUsIGFuZCBldmVuIGhlbHAgeW91IGxlYXJuIG5ldyBwcm9ncmFtbWluZyBsYW5ndWFnZXMuIFNvIGRvbid0IGJlIGFmcmFpZCBvZiBBSSwgZW1icmFjZSBpdCBhbmQgdXNlIGl0IHRvIHlvdXIgYWR2YW50YWdlLiBUYWxrIHRvIENoYXRHUFQgZGFpbHkgYW5kIHlvdSB3aWxsIHJlYWxpemUgaG93IHF1aWNrbHkgeW91IGNhbiBsZWFybiBuZXcgdGhpbmdzIGFuZCBidWlsZCBzb2Z0d2FyZS4gV2hhdCBvdGhlcnMgdGhpbmsgaXMgYSBkaXNhZHZhbnRhZ2Ugd2lsbCBiZWNvbWUgeW91ciBhZHZhbnRhZ2UuXG5cbuKeoe+4jyBIb3N0aW5nXG5JZiB5b3Ugd2FudCB0byBob3N0IGEgd2Vic2l0ZSBvbiBhIFZQUyBhbmQgZ2V0ICQyMDAgaW4gY3JlZGl0cywgdXNlIG15IERpZ2l0YWxPY2VhbiBMaW5rXG5HZXQgRnJlZSAyMDAkIERpZ2l0YWxPY2VhbiBDcmVkaXRzIGhlcmU6IGh0dHBzOi8vbS5kby5jby9jLzJmMmFhMTAwYjdlZVxuXG7inqHvuI8gRm9sbG93IE1lIE9uIFNvY2lhbCBNZWRpYVxu4pa6IFdlYnNpdGUgKENyZWF0ZWQgVXNpbmcgTmV4dC5qcyk6IGh0dHBzOi8vd3d3LmNvZGV3aXRoaGFycnkuY29tXG7ilrogRmFjZWJvb2s6IGh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9Db2RlV2l0aEhhcnJ5XG7ilrogSW5zdGFncmFtOiBodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL0NvZGVXaXRoSGFycnkvIFxu4pa6IFR3aXR0ZXI6IGh0dHBzOi8vdHdpdHRlci5jb20vQ29kZVdpdGhIYXJyeVxu4pa6IEVuZ2xpc2ggY2hhbm5lbDogaHR0cHM6Ly93d3cueW91dHViZS5jb20vY2hhbm5lbC9VQzdidHFHMld3MF8yTHd1UXhwdm8ySFFcbkNvbW1lbnQgXCIjSGFycnlCaGFpXCIgaWYgeW91IHJlYWQgdGhpcyDwn5iJ8J+YiSIKICAgICAgICB9LAogICAgICAgICJkZWZhdWx0QXVkaW9MYW5ndWFnZSI6ICJoaSIKICAgICAgfSwKICAgICAgImNvbnRlbnREZXRhaWxzIjogewogICAgICAgICJkdXJhdGlvbiI6ICJQVDEyTTI5UyIsCiAgICAgICAgImRpbWVuc2lvbiI6ICIyZCIsCiAgICAgICAgImRlZmluaXRpb24iOiAiaGQiLAogICAgICAgICJjYXB0aW9uIjogImZhbHNlIiwKICAgICAgICAibGljZW5zZWRDb250ZW50IjogdHJ1ZSwKICAgICAgICAiY29udGVudFJhdGluZyI6IHt9LAogICAgICAgICJwcm9qZWN0aW9uIjogInJlY3Rhbmd1bGFyIgogICAgICB9LAogICAgICAic3RhdGlzdGljcyI6IHsKICAgICAgICAidmlld0NvdW50IjogIjgyMzIwOCIsCiAgICAgICAgImxpa2VDb3VudCI6ICIyOTA4NyIsCiAgICAgICAgImZhdm9yaXRlQ291bnQiOiAiMCIsCiAgICAgICAgImNvbW1lbnRDb3VudCI6ICIyMDE4IgogICAgICB9CiAgICB9LAogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgImV0YWciOiAiUXVUemZlNGNqLXg4eWxZRlZSZ3pHeVppREdFIiwKICAgICAgImlkIjogIktLN3JGR0ZuNzUwIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMjUtMDctMDFUMTM6MDA6NDVaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDd2ZhQUh5NHpRVWIyQVBOT0dYVUNDQSIsCiAgICAgICAgInRpdGxlIjogIkNvbm5lY3QgTmV4dC5qcyB3aXRoIE15U1FM8J+UpUxpdmUgRmV0Y2ggRGF0YSAobXlzcWwyLCBBUEkgcm91dGVzKSIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIvCflKUgV2FudCB0byBjb25uZWN0IE5leHQuanMgd2l0aCBNeVNRTCB1c2luZyBteXNxbDIgYW5kIGZldGNoIGxpdmUgZGF0YSB1c2luZyBBUEkgcm91dGVzPyBJbiB0aGlzIGZ1bGwgdHV0b3JpYWwsIHlvdeKAmWxsIGxlYXJuIGhvdyB0byBzZXQgdXAgYSByZWFsIGRhdGFiYXNlIGNvbm5lY3Rpb24sIGZldGNoIGRhdGEgZnJvbSB5b3VyIE15U1FMIHRhYmxlcywgYW5kIGRpc3BsYXkgaXQgZHluYW1pY2FsbHkgaW4geW91ciBOZXh0LmpzIGFwcC4gV2hldGhlciB5b3UncmUgYnVpbGRpbmcgYSBmdWxsLXN0YWNrIGFwcCBvciBhIHBlcnNvbmFsIHByb2plY3QsIHRoaXMgc3RlcC1ieS1zdGVwIGd1aWRlIHdpbGwgaGVscCB5b3UgbWFzdGVyIGRhdGFiYXNlIGludGVncmF0aW9uIHVzaW5nIE5leHQuanMgMTUgYW5kIG15c3FsMiBwYWNrYWdlLlxuXG7wn5mPIEdldCBNeVNRTCBMaXZlIFJlY29yZGVkIFZpZGVvcyBIZXJlOiBodHRwczovL2tvZHlmaWVyLmNvbS9teXNxbC1saXZlLWNsYXNzLXJlY29yZGVkLXZpZGVvcy5waHBcblxu8J+SuCBHZXQgU291cmNlIENvZGUgZm9yIEZyZWUhIEdyYWIgTm93IC0gaHR0cHM6Ly93d3cudGhhcGF0ZWNobmljYWwuY29tLzIwMjUvMDYvbmV4dGpzLXNlcmllcy1pbi0yMDI1Lmh0bWxcblxu8J+SuCBHZXQgQWxsIE15IFlvdVR1YmUgVmlkZW9zJyBTb3VyY2UgQ29kZSBmb3IganVzdCDigrkxOTkhIEdyYWIgTm93IC0gaHR0cHM6Ly90aGFwYXRlY2huaWNhbC5zaG9wL3NvdXJjZS1jb2RlXG5cblxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG7wn5qAIEJvb3N0IFlvdXIgU2tpbGxzIHdpdGggdGhlc2UgUHJlLVJlcXVpc2l0ZSBWaWRlb3M6XG5cbvCflJcgQmVzdCBIVE1MIENvdXJzZSAtIGh0dHBzOi8veW91dHUuYmUvNWNjcV9uTEhuZUVcbvCflJcgQmVzdCBDU1MgQ291cnNlICAtIGh0dHBzOi8veW91dHUuYmUvTVNJQ0ZsalJjYjRcbvCflJcgSmF2YVNjcmlwdCBCYXNpY3MgQ291cnNlIFBhcnQgMSAtIGh0dHBzOi8veW91dHUuYmUvMTNnTEI2aERIUjhcbvCflJcgSmF2YVNjcmlwdCBBZHZhbmNlZCBDb3Vyc2UgUGFydCAyIC0gaHR0cHM6Ly95b3V0dS5iZS9Zd3NPQ044d29BOFxuXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbvCfkrggQnVpbGQgWW91ciBPd24gRS1jb21tZXJjZSBXZWJzaXRlIGZvciBGcmVlISAtIGh0dHBzOi8vd3d3LnRoYXBhdGVjaG5pY2FsLmNvbS8yMDI0LzAzL2J1aWxkLWNvbXBsZXRlLWVjb21tZXJjZS13ZWJzaXRlLXVzaW5nLmh0bWxcblxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG7inIzvuI8gSm9pbiBVcyFcblxu8J+agCBCZWNvbWUgYSBNZW1iZXI6IFVubG9jayBwZXJrcywgZnJlZSBzb3VyY2UgY29kZSwgYW5kIG1vcmUgSm9pbiBOb3cgOiBodHRwczovL3d3dy55b3V0dWJlLmNvbS9jaGFubmVsL1VDd2ZhQUh5NHpRVWIyQVBOT0dYVUNDQS9qb2luXG7wn5O3IENvbm5lY3Qgb24gSW5zdGFncmFtOiAgaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS90aGFwYXRlY2huaWNhbFxu8J+XqO+4jyBKb2luIE91ciBEaXNjb3JkIFNlcnZlcjogSGFuZyBvdXQgd2l0aCBmZWxsb3cgcHJvZ3JhbW1lcnMgRGlzY29yZCBMaW5rOiBodHRwczovL2Rpc2NvcmQuZ2cvTWRTY21Dc3VhNlxuXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxu4oybVElNRUxJTkXij7NcbjA6MDAg4oCTIEludHJvZHVjdGlvbjogQ29ubmVjdGluZyBOZXh0LmpzIHdpdGggTXlTUUxcblxuMDo0NSDigJMgV2h5IHVzZSB0aGUgbXlzcWwyIHBhY2thZ2VcblxuMDo1NiDigJMgTWVudGlvbiBwcmVtaXVtIHJlY29yZGVkIE15U1FMIHZpZGVvcyAoY2FsbOKAkXRv4oCRYWN0aW9uKVxuXG4yOjE1IOKAkyBJbnN0YWxsaW5nIG15c3FsMiBpbiB5b3VyIE5leHQuanMgYXBwXG5cbjI6NTAg4oCTIFByb2plY3QgZm9sZGVyIHN0cnVjdHVyZSAoZGIsIEFQSSByb3V0ZXMpXG5cbjM6MjUg4oCTIENyZWF0aW5nIGEgZGF0YWJhc2UgY29ubmVjdGlvbiB1dGlsaXR5XG5cbjU6MTUg4oCTIEV4cGxhaW5pbmcgcm9vdCBwYXNzd29yZCAmIERCIGNyZWF0aW9uXG5cbjU6NTAg4oCTIE15U1FMIGJhc2ljczogdGFibGVzIGFuZCBkYXRhIGluc2VydGlvblxuXG44OjU4IOKAkyBDaGVja2luZyBmb3Igc3VjY2Vzc2Z1bCBEQiBjb25uZWN0aW9uXG5cbjEwOjMwIOKAkyBGZXRjaGluZyDigJxkb2N0b3Jz4oCdIGRhdGEgdmlhIE5leHQuanMgQVBJXG5cbjE0OjAwIOKAkyBNYXBwaW5nIGRvY3RvciByZWNvcmRzIGFuZCBkaXNwbGF5aW5nIFVJXG5cbjE1OjE1IOKAkyBPdmVydmlldzogTXlTUUwgY2xhc3NlcyAmIGNvZGUgc3RydWN0dXJlIiwKICAgICAgICAidGh1bWJuYWlscyI6IHsKICAgICAgICAgICJkZWZhdWx0IjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvS0s3ckZHRm43NTAvZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiA5MAogICAgICAgICAgfSwKICAgICAgICAgICJtZWRpdW0iOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9LSzdyRkdGbjc1MC9tcWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMzIwLAogICAgICAgICAgICAiaGVpZ2h0IjogMTgwCiAgICAgICAgICB9LAogICAgICAgICAgImhpZ2giOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9LSzdyRkdGbjc1MC9ocWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNDgwLAogICAgICAgICAgICAiaGVpZ2h0IjogMzYwCiAgICAgICAgICB9LAogICAgICAgICAgInN0YW5kYXJkIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvS0s3ckZHRm43NTAvc2RkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDY0MCwKICAgICAgICAgICAgImhlaWdodCI6IDQ4MAogICAgICAgICAgfSwKICAgICAgICAgICJtYXhyZXMiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9LSzdyRkdGbjc1MC9tYXhyZXNkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyODAsCiAgICAgICAgICAgICJoZWlnaHQiOiA3MjAKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJjaGFubmVsVGl0bGUiOiAiVGhhcGEgVGVjaG5pY2FsIiwKICAgICAgICAidGFncyI6IFsKICAgICAgICAgICJ0aGFwYXRlY2huaWNhbCIsCiAgICAgICAgICAiQ29ubmVjdCBOZXh0LmpzIHdpdGggTXlTUUwiLAogICAgICAgICAgIk5leHQuanMgTXlTUUwgdHV0b3JpYWwiLAogICAgICAgICAgIm15c3FsMiBOZXh0LmpzIiwKICAgICAgICAgICJOZXh0LmpzIG15c3FsMiBleGFtcGxlIiwKICAgICAgICAgICJOZXh0LmpzIEFQSSBNeVNRTCIsCiAgICAgICAgICAiTmV4dC5qcyBmZXRjaCBkYXRhIE15U1FMIiwKICAgICAgICAgICJOZXh0LmpzIGRhdGFiYXNlIGNvbm5lY3Rpb24iLAogICAgICAgICAgIk5leHQuanMgTXlTUUwgY29ubmVjdGlvbiIsCiAgICAgICAgICAiTmV4dC5qcyBteXNxbDIgc2V0dXAiLAogICAgICAgICAgIk5leHQuanMgbXlzcWwyIGRhdGFiYXNlIiwKICAgICAgICAgICJOZXh0LmpzIG15c3FsMiBjb25uZWN0aW9uIiwKICAgICAgICAgICJOZXh0LmpzIE15U1FMIGZ1bGwgc3RhY2siLAogICAgICAgICAgIk5leHQuanMgTXlTUUwgYXBpIHJvdXRlIiwKICAgICAgICAgICJOZXh0LmpzIGJhY2tlbmQgTXlTUUwiLAogICAgICAgICAgIk5leHQuanMgbXlzcWwyIHByb21pc2UiLAogICAgICAgICAgIk5leHQuanMgKyBNeVNRTCBDUlVEIiwKICAgICAgICAgICJOZXh0LmpzIG15c3FsMiB0dXRvcmlhbCIsCiAgICAgICAgICAiTXlTUUwgcm9vdCBwYXNzd29yZCBOZXh0LmpzIiwKICAgICAgICAgICJteXNxbDIgTmV4dC5qcyBpbnN0YWxsIgogICAgICAgIF0sCiAgICAgICAgImNhdGVnb3J5SWQiOiAiMjciLAogICAgICAgICJsaXZlQnJvYWRjYXN0Q29udGVudCI6ICJub25lIiwKICAgICAgICAiZGVmYXVsdExhbmd1YWdlIjogImVuIiwKICAgICAgICAibG9jYWxpemVkIjogewogICAgICAgICAgInRpdGxlIjogIkNvbm5lY3QgTmV4dC5qcyB3aXRoIE15U1FM8J+UpUxpdmUgRmV0Y2ggRGF0YSAobXlzcWwyLCBBUEkgcm91dGVzKSIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAi8J+UpSBXYW50IHRvIGNvbm5lY3QgTmV4dC5qcyB3aXRoIE15U1FMIHVzaW5nIG15c3FsMiBhbmQgZmV0Y2ggbGl2ZSBkYXRhIHVzaW5nIEFQSSByb3V0ZXM/IEluIHRoaXMgZnVsbCB0dXRvcmlhbCwgeW914oCZbGwgbGVhcm4gaG93IHRvIHNldCB1cCBhIHJlYWwgZGF0YWJhc2UgY29ubmVjdGlvbiwgZmV0Y2ggZGF0YSBmcm9tIHlvdXIgTXlTUUwgdGFibGVzLCBhbmQgZGlzcGxheSBpdCBkeW5hbWljYWxseSBpbiB5b3VyIE5leHQuanMgYXBwLiBXaGV0aGVyIHlvdSdyZSBidWlsZGluZyBhIGZ1bGwtc3RhY2sgYXBwIG9yIGEgcGVyc29uYWwgcHJvamVjdCwgdGhpcyBzdGVwLWJ5LXN0ZXAgZ3VpZGUgd2lsbCBoZWxwIHlvdSBtYXN0ZXIgZGF0YWJhc2UgaW50ZWdyYXRpb24gdXNpbmcgTmV4dC5qcyAxNSBhbmQgbXlzcWwyIHBhY2thZ2UuXG5cbvCfmY8gR2V0IE15U1FMIExpdmUgUmVjb3JkZWQgVmlkZW9zIEhlcmU6IGh0dHBzOi8va29keWZpZXIuY29tL215c3FsLWxpdmUtY2xhc3MtcmVjb3JkZWQtdmlkZW9zLnBocFxuXG7wn5K4IEdldCBTb3VyY2UgQ29kZSBmb3IgRnJlZSEgR3JhYiBOb3cgLSBodHRwczovL3d3dy50aGFwYXRlY2huaWNhbC5jb20vMjAyNS8wNi9uZXh0anMtc2VyaWVzLWluLTIwMjUuaHRtbFxuXG7wn5K4IEdldCBBbGwgTXkgWW91VHViZSBWaWRlb3MnIFNvdXJjZSBDb2RlIGZvciBqdXN0IOKCuTE5OSEgR3JhYiBOb3cgLSBodHRwczovL3RoYXBhdGVjaG5pY2FsLnNob3Avc291cmNlLWNvZGVcblxuXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbvCfmoAgQm9vc3QgWW91ciBTa2lsbHMgd2l0aCB0aGVzZSBQcmUtUmVxdWlzaXRlIFZpZGVvczpcblxu8J+UlyBCZXN0IEhUTUwgQ291cnNlIC0gaHR0cHM6Ly95b3V0dS5iZS81Y2NxX25MSG5lRVxu8J+UlyBCZXN0IENTUyBDb3Vyc2UgIC0gaHR0cHM6Ly95b3V0dS5iZS9NU0lDRmxqUmNiNFxu8J+UlyBKYXZhU2NyaXB0IEJhc2ljcyBDb3Vyc2UgUGFydCAxIC0gaHR0cHM6Ly95b3V0dS5iZS8xM2dMQjZoREhSOFxu8J+UlyBKYXZhU2NyaXB0IEFkdmFuY2VkIENvdXJzZSBQYXJ0IDIgLSBodHRwczovL3lvdXR1LmJlL1l3c09DTjh3b0E4XG5cbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxu8J+SuCBCdWlsZCBZb3VyIE93biBFLWNvbW1lcmNlIFdlYnNpdGUgZm9yIEZyZWUhIC0gaHR0cHM6Ly93d3cudGhhcGF0ZWNobmljYWwuY29tLzIwMjQvMDMvYnVpbGQtY29tcGxldGUtZWNvbW1lcmNlLXdlYnNpdGUtdXNpbmcuaHRtbFxuXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbuKcjO+4jyBKb2luIFVzIVxuXG7wn5qAIEJlY29tZSBhIE1lbWJlcjogVW5sb2NrIHBlcmtzLCBmcmVlIHNvdXJjZSBjb2RlLCBhbmQgbW9yZSBKb2luIE5vdyA6IGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2NoYW5uZWwvVUN3ZmFBSHk0elFVYjJBUE5PR1hVQ0NBL2pvaW5cbvCfk7cgQ29ubmVjdCBvbiBJbnN0YWdyYW06ICBodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL3RoYXBhdGVjaG5pY2FsXG7wn5eo77iPIEpvaW4gT3VyIERpc2NvcmQgU2VydmVyOiBIYW5nIG91dCB3aXRoIGZlbGxvdyBwcm9ncmFtbWVycyBEaXNjb3JkIExpbms6IGh0dHBzOi8vZGlzY29yZC5nZy9NZFNjbUNzdWE2XG5cbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG7ijJtUSU1FTElOReKPs1xuMDowMCDigJMgSW50cm9kdWN0aW9uOiBDb25uZWN0aW5nIE5leHQuanMgd2l0aCBNeVNRTFxuXG4wOjQ1IOKAkyBXaHkgdXNlIHRoZSBteXNxbDIgcGFja2FnZVxuXG4wOjU2IOKAkyBNZW50aW9uIHByZW1pdW0gcmVjb3JkZWQgTXlTUUwgdmlkZW9zIChjYWxs4oCRdG/igJFhY3Rpb24pXG5cbjI6MTUg4oCTIEluc3RhbGxpbmcgbXlzcWwyIGluIHlvdXIgTmV4dC5qcyBhcHBcblxuMjo1MCDigJMgUHJvamVjdCBmb2xkZXIgc3RydWN0dXJlIChkYiwgQVBJIHJvdXRlcylcblxuMzoyNSDigJMgQ3JlYXRpbmcgYSBkYXRhYmFzZSBjb25uZWN0aW9uIHV0aWxpdHlcblxuNToxNSDigJMgRXhwbGFpbmluZyByb290IHBhc3N3b3JkICYgREIgY3JlYXRpb25cblxuNTo1MCDigJMgTXlTUUwgYmFzaWNzOiB0YWJsZXMgYW5kIGRhdGEgaW5zZXJ0aW9uXG5cbjg6NTgg4oCTIENoZWNraW5nIGZvciBzdWNjZXNzZnVsIERCIGNvbm5lY3Rpb25cblxuMTA6MzAg4oCTIEZldGNoaW5nIOKAnGRvY3RvcnPigJ0gZGF0YSB2aWEgTmV4dC5qcyBBUElcblxuMTQ6MDAg4oCTIE1hcHBpbmcgZG9jdG9yIHJlY29yZHMgYW5kIGRpc3BsYXlpbmcgVUlcblxuMTU6MTUg4oCTIE92ZXJ2aWV3OiBNeVNRTCBjbGFzc2VzICYgY29kZSBzdHJ1Y3R1cmUiCiAgICAgICAgfSwKICAgICAgICAiZGVmYXVsdEF1ZGlvTGFuZ3VhZ2UiOiAiZW4iCiAgICAgIH0sCiAgICAgICJjb250ZW50RGV0YWlscyI6IHsKICAgICAgICAiZHVyYXRpb24iOiAiUFQxNk03UyIsCiAgICAgICAgImRpbWVuc2lvbiI6ICIyZCIsCiAgICAgICAgImRlZmluaXRpb24iOiAiaGQiLAogICAgICAgICJjYXB0aW9uIjogImZhbHNlIiwKICAgICAgICAibGljZW5zZWRDb250ZW50IjogdHJ1ZSwKICAgICAgICAiY29udGVudFJhdGluZyI6IHt9LAogICAgICAgICJwcm9qZWN0aW9uIjogInJlY3Rhbmd1bGFyIgogICAgICB9LAogICAgICAic3RhdGlzdGljcyI6IHsKICAgICAgICAidmlld0NvdW50IjogIjQwMzciLAogICAgICAgICJsaWtlQ291bnQiOiAiMTQxIiwKICAgICAgICAiZmF2b3JpdGVDb3VudCI6ICIwIiwKICAgICAgICAiY29tbWVudENvdW50IjogIjI5IgogICAgICB9CiAgICB9LAogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgImV0YWciOiAiQ2FfbzdFQ2VaT0h3eGluUHhER3N2MEFLMVJvIiwKICAgICAgImlkIjogIk1WbktYZktmMFZZIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMjUtMDYtMjdUMTY6MDA6NDBaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDN0ZkaEdJNkxidEtVVEhIVzB0LUYwdyIsCiAgICAgICAgInRpdGxlIjogIlJlYWN0IEpTIHZzIE5leHQgSlMgaW4gSGluZGkiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJSZWFjdCBKUyB2cyBOZXh0IEpTIC0gV2hhdOKAmXMgdGhlIERpZmZlcmVuY2U/IHwgTXVzdCBXYXRjaCBmb3IgRXZlcnkgRGV2ZWxvcGVyIHwgcmVhY3QganMgdnMgbmV4dCBqcyBwZXJmb3JtYW5jZSB8IG5leHQganMgYW5kIHJlYWN0IGRpZmZlcmVuY2UgfCBuZXh0IGpzIHZzIHJlYWN0IHNwZWVkIHwgZGlmZmVyZW5jZSBiZXR3ZWVuIHJlYWN0IGFuZCBuZXh0anMgfCB3aGljaCBpcyBiZXN0IG5leHQganMgb3IgcmVhY3QganMgfCBuZXh0IGpzIHZzIHJlYWN0IHN5bnRheFxuXG5cbkdyb3cgJiBzdGF5IGNvbm5lY3RlZCB3aXRoIG1lIVxu8J+RiSBTdWJzY3JpYmUgdG8gVGVjaGllQmlwaW46IGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL0BUZWNoaWVCaXBpblxu8J+RiSBGb2xsb3cgbWUgSW5zdGFncmFtIC0gaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS90ZWNoaWViaXBpblxu8J+RiSBGb2xsb3cgbWUgb24gTGlua2VkaW4uIC0gaHR0cHM6Ly93d3cubGlua2VkaW4uY29tL2luL3RlY2hpZS1iaXBpbi1zaGFybWFcbvCfkYkgRm9sbG93IG1lIG9uIFBpbnRlcmVzdCAtIGh0dHBzOi8vaW4ucGludGVyZXN0LmNvbS9UZWNoaWVCaXBpblxu8J+RiSBGb2xsb3cgbWUgb24gU25hcGNoYXQgLSBodHRwczovL3d3dy5zbmFwY2hhdC5jb20vYWRkL3RlY2hpZWJpcGluXG7wn5GJIEZvbGxvdyBtZSBvbiBYIC0gaHR0cHM6Ly93d3cudHdpdHRlci5jb20vVGVjaGllQmlwaW5cbvCfkYkgRm9sbG93IG1lIG9uIFRocmVhZHMgLSBodHRwczovL3d3dy50aHJlYWRzLm5ldC9AdGVjaGllYmlwaW5cblxuI25leHRqcyAjcmVhY3RqcyAjcHJvZ3JhbW1pbmcgI2NvZGluZyAjamF2YXNjcmlwdCAjdHlwZXNjcmlwdCAjdGVjaGllYmlwaW4iLAogICAgICAgICJ0aHVtYm5haWxzIjogewogICAgICAgICAgImRlZmF1bHQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9NVm5LWGZLZjBWWS9kZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgICAgICAgImhlaWdodCI6IDkwCiAgICAgICAgICB9LAogICAgICAgICAgIm1lZGl1bSI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL01WbktYZktmMFZZL21xZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAzMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiAxODAKICAgICAgICAgIH0sCiAgICAgICAgICAiaGlnaCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL01WbktYZktmMFZZL2hxZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA0ODAsCiAgICAgICAgICAgICJoZWlnaHQiOiAzNjAKICAgICAgICAgIH0sCiAgICAgICAgICAic3RhbmRhcmQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9NVm5LWGZLZjBWWS9zZGRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNjQwLAogICAgICAgICAgICAiaGVpZ2h0IjogNDgwCiAgICAgICAgICB9LAogICAgICAgICAgIm1heHJlcyI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL01WbktYZktmMFZZL21heHJlc2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTI4MCwKICAgICAgICAgICAgImhlaWdodCI6IDcyMAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImNoYW5uZWxUaXRsZSI6ICJUZWNoaWUgQmlwaW4gU2hhcm1hIiwKICAgICAgICAidGFncyI6IFsKICAgICAgICAgICJ0ZWNoaWUgdmlwaW4iLAogICAgICAgICAgIm5leHRqcyIsCiAgICAgICAgICAicmVhY3QganMiLAogICAgICAgICAgIm5leHQganMiCiAgICAgICAgXSwKICAgICAgICAiY2F0ZWdvcnlJZCI6ICIyNyIsCiAgICAgICAgImxpdmVCcm9hZGNhc3RDb250ZW50IjogIm5vbmUiLAogICAgICAgICJkZWZhdWx0TGFuZ3VhZ2UiOiAiZW4tSU4iLAogICAgICAgICJsb2NhbGl6ZWQiOiB7CiAgICAgICAgICAidGl0bGUiOiAiUmVhY3QgSlMgdnMgTmV4dCBKUyBpbiBIaW5kaSIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiUmVhY3QgSlMgdnMgTmV4dCBKUyAtIFdoYXTigJlzIHRoZSBEaWZmZXJlbmNlPyB8IE11c3QgV2F0Y2ggZm9yIEV2ZXJ5IERldmVsb3BlciB8IHJlYWN0IGpzIHZzIG5leHQganMgcGVyZm9ybWFuY2UgfCBuZXh0IGpzIGFuZCByZWFjdCBkaWZmZXJlbmNlIHwgbmV4dCBqcyB2cyByZWFjdCBzcGVlZCB8IGRpZmZlcmVuY2UgYmV0d2VlbiByZWFjdCBhbmQgbmV4dGpzIHwgd2hpY2ggaXMgYmVzdCBuZXh0IGpzIG9yIHJlYWN0IGpzIHwgbmV4dCBqcyB2cyByZWFjdCBzeW50YXhcblxuXG5Hcm93ICYgc3RheSBjb25uZWN0ZWQgd2l0aCBtZSFcbvCfkYkgU3Vic2NyaWJlIHRvIFRlY2hpZUJpcGluOiBodHRwczovL3d3dy55b3V0dWJlLmNvbS9AVGVjaGllQmlwaW5cbvCfkYkgRm9sbG93IG1lIEluc3RhZ3JhbSAtIGh0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vdGVjaGllYmlwaW5cbvCfkYkgRm9sbG93IG1lIG9uIExpbmtlZGluLiAtIGh0dHBzOi8vd3d3LmxpbmtlZGluLmNvbS9pbi90ZWNoaWUtYmlwaW4tc2hhcm1hXG7wn5GJIEZvbGxvdyBtZSBvbiBQaW50ZXJlc3QgLSBodHRwczovL2luLnBpbnRlcmVzdC5jb20vVGVjaGllQmlwaW5cbvCfkYkgRm9sbG93IG1lIG9uIFNuYXBjaGF0IC0gaHR0cHM6Ly93d3cuc25hcGNoYXQuY29tL2FkZC90ZWNoaWViaXBpblxu8J+RiSBGb2xsb3cgbWUgb24gWCAtIGh0dHBzOi8vd3d3LnR3aXR0ZXIuY29tL1RlY2hpZUJpcGluXG7wn5GJIEZvbGxvdyBtZSBvbiBUaHJlYWRzIC0gaHR0cHM6Ly93d3cudGhyZWFkcy5uZXQvQHRlY2hpZWJpcGluXG5cbiNuZXh0anMgI3JlYWN0anMgI3Byb2dyYW1taW5nICNjb2RpbmcgI2phdmFzY3JpcHQgI3R5cGVzY3JpcHQgI3RlY2hpZWJpcGluIgogICAgICAgIH0sCiAgICAgICAgImRlZmF1bHRBdWRpb0xhbmd1YWdlIjogImhpIgogICAgICB9LAogICAgICAiY29udGVudERldGFpbHMiOiB7CiAgICAgICAgImR1cmF0aW9uIjogIlBUNE0zN1MiLAogICAgICAgICJkaW1lbnNpb24iOiAiMmQiLAogICAgICAgICJkZWZpbml0aW9uIjogImhkIiwKICAgICAgICAiY2FwdGlvbiI6ICJmYWxzZSIsCiAgICAgICAgImxpY2Vuc2VkQ29udGVudCI6IGZhbHNlLAogICAgICAgICJjb250ZW50UmF0aW5nIjoge30sCiAgICAgICAgInByb2plY3Rpb24iOiAicmVjdGFuZ3VsYXIiCiAgICAgIH0sCiAgICAgICJzdGF0aXN0aWNzIjogewogICAgICAgICJ2aWV3Q291bnQiOiAiODY2MSIsCiAgICAgICAgImxpa2VDb3VudCI6ICI0OSIsCiAgICAgICAgImZhdm9yaXRlQ291bnQiOiAiMCIsCiAgICAgICAgImNvbW1lbnRDb3VudCI6ICI2IgogICAgICB9CiAgICB9LAogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgImV0YWciOiAiMGUzMnlHVlN1ZUhvc3BqQVBwRS1oNnJOV0J3IiwKICAgICAgImlkIjogInB1Rm16SkFsTzdFIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMjUtMDYtMjNUMTA6MzA6NDBaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDd2ZhQUh5NHpRVWIyQVBOT0dYVUNDQSIsCiAgICAgICAgInRpdGxlIjogIiMxOTogTmV4dC5qcyBDYXRjaOKAkUFsbCBTZWdtZW50cyBFeHBsYWluZWQg4oCTIER5bmFtaWMgTmVzdGVkIFJvdXRpbmcgVHV0b3JpYWwgaW4gSGluZGkiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJMZWFybiBob3cgdG8gdXNlIE5leHQuanMgY2F0Y2jigJFhbGwgc2VnbWVudHMgKFsuLi5zbHVnXSkgZm9yIGR5bmFtaWMsIG5lc3RlZCByb3V0aW5nIGluIG1vZGVybiB3ZWIgYXBwcyEgXG5cbvCfkrggR2V0IFNvdXJjZSBDb2RlIGZvciBGcmVlISBHcmFiIE5vdyAtIGh0dHBzOi8vd3d3LnRoYXBhdGVjaG5pY2FsLmNvbS8yMDI1LzA2L25leHRqcy1zZXJpZXMtaW4tMjAyNS5odG1sXG5cbvCfkrggR2V0IEFsbCBNeSBZb3VUdWJlIFZpZGVvcycgU291cmNlIENvZGUgZm9yIGp1c3Qg4oK5MTk5ISBHcmFiIE5vdyAtIGh0dHBzOi8vdGhhcGF0ZWNobmljYWwuc2hvcC9zb3VyY2UtY29kZVxuXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbvCfmoAgQm9vc3QgWW91ciBTa2lsbHMgd2l0aCB0aGVzZSBQcmUtUmVxdWlzaXRlIFZpZGVvczpcblxu8J+UlyBCZXN0IEhUTUwgQ291cnNlIC0gaHR0cHM6Ly95b3V0dS5iZS81Y2NxX25MSG5lRVxu8J+UlyBCZXN0IENTUyBDb3Vyc2UgIC0gaHR0cHM6Ly95b3V0dS5iZS9NU0lDRmxqUmNiNFxu8J+UlyBKYXZhU2NyaXB0IEJhc2ljcyBDb3Vyc2UgUGFydCAxIC0gaHR0cHM6Ly95b3V0dS5iZS8xM2dMQjZoREhSOFxu8J+UlyBKYXZhU2NyaXB0IEFkdmFuY2VkIENvdXJzZSBQYXJ0IDIgLSBodHRwczovL3lvdXR1LmJlL1l3c09DTjh3b0E4XG5cbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxu8J+SuCBCdWlsZCBZb3VyIE93biBFLWNvbW1lcmNlIFdlYnNpdGUgZm9yIEZyZWUhIC0gaHR0cHM6Ly93d3cudGhhcGF0ZWNobmljYWwuY29tLzIwMjQvMDMvYnVpbGQtY29tcGxldGUtZWNvbW1lcmNlLXdlYnNpdGUtdXNpbmcuaHRtbFxuXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbuKcjO+4jyBKb2luIFVzIVxuXG7wn5qAIEJlY29tZSBhIE1lbWJlcjogVW5sb2NrIHBlcmtzLCBmcmVlIHNvdXJjZSBjb2RlLCBhbmQgbW9yZSBKb2luIE5vdyA6IGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2NoYW5uZWwvVUN3ZmFBSHk0elFVYjJBUE5PR1hVQ0NBL2pvaW5cbvCfk7cgQ29ubmVjdCBvbiBJbnN0YWdyYW06ICBodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL3RoYXBhdGVjaG5pY2FsXG7wn5eo77iPIEpvaW4gT3VyIERpc2NvcmQgU2VydmVyOiBIYW5nIG91dCB3aXRoIGZlbGxvdyBwcm9ncmFtbWVycyBEaXNjb3JkIExpbms6IGh0dHBzOi8vZGlzY29yZC5nZy9NZFNjbUNzdWE2XG5cbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG7ijJtUSU1FTElOReKPs1xuMDA6MDAg4oCTIElOVFJPIFRPIENBVENIIEFMTCBTRUdNRU5UXG5cbjAwOjM1IOKAkyBXaGF0IGlzIGNhdGNo4oCRYWxsIHNlZ21lbnQ/XG4wMToyOCDigJMgQWR2YW50YWdlcyBvZiBjYXRjaOKAkWFsbCBzZWdtZW50XG4wMzozMCDigJMgQ3JlYXRlIGNhdGNo4oCRYWxsIHNlZ21lbnQgZm9sZGVyIHN0cnVjdHVyZVxuMDQ6MjAg4oCTIEhvdyB0byBnZXQgY2F0Y2jigJFhbGwgc2VnbWVudCBkYXRhIChwYXJhbXMuc2x1ZylcbjA3OjIwIOKAkyBBbm90aGVyIGV4YW1wbGUgb2YgY2F0Y2jigJFhbGwgc2VnbWVudCBpbiBhY3Rpb25cbjA4OjE1IOKAkyBSZWNhcDogdW5kZXJzdGFuZGluZyBjYXRjaOKAkWFsbCBzZWdtZW50XG4wOTowMiDigJMgTmV4dCB2aWRlbyBzbmVha+KAkXBlZWsgLyB1cGRhdGUiLAogICAgICAgICJ0aHVtYm5haWxzIjogewogICAgICAgICAgImRlZmF1bHQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9wdUZtekpBbE83RS9kZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgICAgICAgImhlaWdodCI6IDkwCiAgICAgICAgICB9LAogICAgICAgICAgIm1lZGl1bSI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL3B1Rm16SkFsTzdFL21xZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAzMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiAxODAKICAgICAgICAgIH0sCiAgICAgICAgICAiaGlnaCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL3B1Rm16SkFsTzdFL2hxZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA0ODAsCiAgICAgICAgICAgICJoZWlnaHQiOiAzNjAKICAgICAgICAgIH0sCiAgICAgICAgICAic3RhbmRhcmQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9wdUZtekpBbE83RS9zZGRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNjQwLAogICAgICAgICAgICAiaGVpZ2h0IjogNDgwCiAgICAgICAgICB9LAogICAgICAgICAgIm1heHJlcyI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL3B1Rm16SkFsTzdFL21heHJlc2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTI4MCwKICAgICAgICAgICAgImhlaWdodCI6IDcyMAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImNoYW5uZWxUaXRsZSI6ICJUaGFwYSBUZWNobmljYWwiLAogICAgICAgICJ0YWdzIjogWwogICAgICAgICAgIk5leHQuanMgY2F0Y2ggYWxsIHNlZ21lbnRzIiwKICAgICAgICAgICJjYXRjaCBhbGwgcm91dGluZyBOZXh0LmpzIHR1dG9yaWFsIiwKICAgICAgICAgICJOZXh0LmpzIG5lc3RlZCBkeW5hbWljIHJvdXRlcyIsCiAgICAgICAgICAiWy4uLnNsdWddIE5leHQuanMgZXhhbXBsZSIsCiAgICAgICAgICAiRHluYW1pYyBuZXN0ZWQgcm91dGluZyBOZXh0LmpzIiwKICAgICAgICAgICJOZXh0LmpzIGNhdGNoLWFsbCByb3V0ZSIsCiAgICAgICAgICAiTmV4dC5qcyBhcHAgcm91dGVyIGNhdGNoIGFsbCIsCiAgICAgICAgICAiTmV4dC5qcyBkeW5hbWljIHJvdXRpbmcgZXhwbGFpbmVkIiwKICAgICAgICAgICJob3cgdG8gdXNlIGNhdGNoLWFsbCBpbiBOZXh0LmpzIiwKICAgICAgICAgICJOZXh0LmpzIHBhcmFtcy5zbHVnIHR1dG9yaWFsIiwKICAgICAgICAgICJOZXh0LmpzIGR5bmFtaWMgc2VnbWVudCBuZXN0ZWQiLAogICAgICAgICAgIk5leHQuanMgY2F0Y2ggYWxsIHNlZ21lbnRzIDIwMjUiLAogICAgICAgICAgIk5leHQuanMgZHluYW1pYyBwYXRoIHNlZ21lbnRzIiwKICAgICAgICAgICJF4oCRY29tbWVyY2UgbmVzdGVkIHJvdXRpbmcgTmV4dC5qcyIsCiAgICAgICAgICAiTmV4dC5qcyBkeW5hbWljIHJvdXRpbmcgdHV0b3JpYWwiLAogICAgICAgICAgIm5leHQuanMiCiAgICAgICAgXSwKICAgICAgICAiY2F0ZWdvcnlJZCI6ICIyNyIsCiAgICAgICAgImxpdmVCcm9hZGNhc3RDb250ZW50IjogIm5vbmUiLAogICAgICAgICJkZWZhdWx0TGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICJsb2NhbGl6ZWQiOiB7CiAgICAgICAgICAidGl0bGUiOiAiIzE5OiBOZXh0LmpzIENhdGNo4oCRQWxsIFNlZ21lbnRzIEV4cGxhaW5lZCDigJMgRHluYW1pYyBOZXN0ZWQgUm91dGluZyBUdXRvcmlhbCBpbiBIaW5kaSIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiTGVhcm4gaG93IHRvIHVzZSBOZXh0LmpzIGNhdGNo4oCRYWxsIHNlZ21lbnRzIChbLi4uc2x1Z10pIGZvciBkeW5hbWljLCBuZXN0ZWQgcm91dGluZyBpbiBtb2Rlcm4gd2ViIGFwcHMhIFxuXG7wn5K4IEdldCBTb3VyY2UgQ29kZSBmb3IgRnJlZSEgR3JhYiBOb3cgLSBodHRwczovL3d3dy50aGFwYXRlY2huaWNhbC5jb20vMjAyNS8wNi9uZXh0anMtc2VyaWVzLWluLTIwMjUuaHRtbFxuXG7wn5K4IEdldCBBbGwgTXkgWW91VHViZSBWaWRlb3MnIFNvdXJjZSBDb2RlIGZvciBqdXN0IOKCuTE5OSEgR3JhYiBOb3cgLSBodHRwczovL3RoYXBhdGVjaG5pY2FsLnNob3Avc291cmNlLWNvZGVcblxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG7wn5qAIEJvb3N0IFlvdXIgU2tpbGxzIHdpdGggdGhlc2UgUHJlLVJlcXVpc2l0ZSBWaWRlb3M6XG5cbvCflJcgQmVzdCBIVE1MIENvdXJzZSAtIGh0dHBzOi8veW91dHUuYmUvNWNjcV9uTEhuZUVcbvCflJcgQmVzdCBDU1MgQ291cnNlICAtIGh0dHBzOi8veW91dHUuYmUvTVNJQ0ZsalJjYjRcbvCflJcgSmF2YVNjcmlwdCBCYXNpY3MgQ291cnNlIFBhcnQgMSAtIGh0dHBzOi8veW91dHUuYmUvMTNnTEI2aERIUjhcbvCflJcgSmF2YVNjcmlwdCBBZHZhbmNlZCBDb3Vyc2UgUGFydCAyIC0gaHR0cHM6Ly95b3V0dS5iZS9Zd3NPQ044d29BOFxuXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbvCfkrggQnVpbGQgWW91ciBPd24gRS1jb21tZXJjZSBXZWJzaXRlIGZvciBGcmVlISAtIGh0dHBzOi8vd3d3LnRoYXBhdGVjaG5pY2FsLmNvbS8yMDI0LzAzL2J1aWxkLWNvbXBsZXRlLWVjb21tZXJjZS13ZWJzaXRlLXVzaW5nLmh0bWxcblxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG7inIzvuI8gSm9pbiBVcyFcblxu8J+agCBCZWNvbWUgYSBNZW1iZXI6IFVubG9jayBwZXJrcywgZnJlZSBzb3VyY2UgY29kZSwgYW5kIG1vcmUgSm9pbiBOb3cgOiBodHRwczovL3d3dy55b3V0dWJlLmNvbS9jaGFubmVsL1VDd2ZhQUh5NHpRVWIyQVBOT0dYVUNDQS9qb2luXG7wn5O3IENvbm5lY3Qgb24gSW5zdGFncmFtOiAgaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS90aGFwYXRlY2huaWNhbFxu8J+XqO+4jyBKb2luIE91ciBEaXNjb3JkIFNlcnZlcjogSGFuZyBvdXQgd2l0aCBmZWxsb3cgcHJvZ3JhbW1lcnMgRGlzY29yZCBMaW5rOiBodHRwczovL2Rpc2NvcmQuZ2cvTWRTY21Dc3VhNlxuXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxu4oybVElNRUxJTkXij7NcbjAwOjAwIOKAkyBJTlRSTyBUTyBDQVRDSCBBTEwgU0VHTUVOVFxuXG4wMDozNSDigJMgV2hhdCBpcyBjYXRjaOKAkWFsbCBzZWdtZW50P1xuMDE6Mjgg4oCTIEFkdmFudGFnZXMgb2YgY2F0Y2jigJFhbGwgc2VnbWVudFxuMDM6MzAg4oCTIENyZWF0ZSBjYXRjaOKAkWFsbCBzZWdtZW50IGZvbGRlciBzdHJ1Y3R1cmVcbjA0OjIwIOKAkyBIb3cgdG8gZ2V0IGNhdGNo4oCRYWxsIHNlZ21lbnQgZGF0YSAocGFyYW1zLnNsdWcpXG4wNzoyMCDigJMgQW5vdGhlciBleGFtcGxlIG9mIGNhdGNo4oCRYWxsIHNlZ21lbnQgaW4gYWN0aW9uXG4wODoxNSDigJMgUmVjYXA6IHVuZGVyc3RhbmRpbmcgY2F0Y2jigJFhbGwgc2VnbWVudFxuMDk6MDIg4oCTIE5leHQgdmlkZW8gc25lYWvigJFwZWVrIC8gdXBkYXRlIgogICAgICAgIH0sCiAgICAgICAgImRlZmF1bHRBdWRpb0xhbmd1YWdlIjogImVuIgogICAgICB9LAogICAgICAiY29udGVudERldGFpbHMiOiB7CiAgICAgICAgImR1cmF0aW9uIjogIlBUOU01OVMiLAogICAgICAgICJkaW1lbnNpb24iOiAiMmQiLAogICAgICAgICJkZWZpbml0aW9uIjogImhkIiwKICAgICAgICAiY2FwdGlvbiI6ICJmYWxzZSIsCiAgICAgICAgImxpY2Vuc2VkQ29udGVudCI6IHRydWUsCiAgICAgICAgImNvbnRlbnRSYXRpbmciOiB7fSwKICAgICAgICAicHJvamVjdGlvbiI6ICJyZWN0YW5ndWxhciIKICAgICAgfSwKICAgICAgInN0YXRpc3RpY3MiOiB7CiAgICAgICAgInZpZXdDb3VudCI6ICIzMjc0IiwKICAgICAgICAibGlrZUNvdW50IjogIjE3NCIsCiAgICAgICAgImZhdm9yaXRlQ291bnQiOiAiMCIsCiAgICAgICAgImNvbW1lbnRDb3VudCI6ICIyMiIKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImtpbmQiOiAieW91dHViZSN2aWRlbyIsCiAgICAgICJldGFnIjogIjJETnEydFg4dnBncEtsVDFNVjQ2bTJ1TlpmZyIsCiAgICAgICJpZCI6ICJLQlNZdXRFRGtndyIsCiAgICAgICJzbmlwcGV0IjogewogICAgICAgICJwdWJsaXNoZWRBdCI6ICIyMDI1LTA2LTA2VDEwOjMwOjA5WiIsCiAgICAgICAgImNoYW5uZWxJZCI6ICJVQ3dmYUFIeTR6UVViMkFQTk9HWFVDQ0EiLAogICAgICAgICJ0aXRsZSI6ICJOZXh0LmpzIEFwcCBSb3V0ZXIgRXhwbGFpbmVkOiBOZXN0ZWQgUm91dGVzICYgTGF5b3V0cyBNYWRlIEVhc3kgaW4gSGluZGkiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICLwn5SlIFdlbGNvbWUgdG8gTmV4dC5qcyBUdXRvcmlhbCBpbiBIaW5kaSAtIEFwcCBSb3V0ZXIgRXhwbGFpbmVkOiBOZXN0ZWQgUm91dGVzICYgTGF5b3V0c1xu8J+SuCBHZXQgU291cmNlIENvZGUgZm9yIEZyZWUhIEdyYWIgTm93IC0gaHR0cHM6Ly93d3cudGhhcGF0ZWNobmljYWwuY29tLzIwMjUvMDYvbmV4dGpzLXNlcmllcy1pbi0yMDI1Lmh0bWxcblxuSW4gdGhpcyB2aWRlbywgd2XigJlsbCBleHBsb3JlIHRoZSBwb3dlcmZ1bCBBcHAgUm91dGVyIGluIE5leHQuanMgd2l0aCByZWFsLXRpbWUgZXhhbXBsZXMhIFlvdSdsbCBsZWFybiBob3cgcm91dGluZyB3b3JrcyB1c2luZyB0aGUgYXBwLyBmb2xkZXIsIGhvdyB0byBjcmVhdGUgbmV3IHBhZ2VzIGxpa2Ugc2VydmljZXMgYW5kIGNvbnRhY3QsIGFuZCBob3cgbmVzdGVkIHJvdXRlcyBhbmQgbmVzdGVkIGxheW91dHMgaGVscCBidWlsZCBzY2FsYWJsZSBhcHBzLlxuXG5XZSdsbCBicmVhayBpdCBkb3duIHN0ZXAtYnktc3RlcCB3aXRoIGxpdmUgY29kaW5nIHNvIHlvdSBjYW4gY29uZmlkZW50bHkgdXNlIHJvdXRpbmcgaW4geW91ciBvd24gcHJvamVjdHMuIFRoaXMgaXMgcGFydCBvZiBvdXIgV29ybGQgQmVzdCBSZWFjdCB2MTkgU2VyaWVzIGluIEhpbmRpIOKAkyBzbyBtYWtlIHN1cmUgdG8gc3Vic2NyaWJlIGFuZCBmb2xsb3cgdGhlIGZ1bGwgcGxheWxpc3QhXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbvCfmoAgQm9vc3QgWW91ciBTa2lsbHMgd2l0aCB0aGVzZSBQcmUtUmVxdWlzaXRlIFZpZGVvczpcblxu8J+UlyBCZXN0IEhUTUwgQ291cnNlIC0gaHR0cHM6Ly95b3V0dS5iZS81Y2NxX25MSG5lRVxu8J+UlyBCZXN0IENTUyBDb3Vyc2UgIC0gaHR0cHM6Ly95b3V0dS5iZS9NU0lDRmxqUmNiNFxu8J+UlyBKYXZhU2NyaXB0IEJhc2ljcyBDb3Vyc2UgUGFydCAxIC0gaHR0cHM6Ly95b3V0dS5iZS8xM2dMQjZoREhSOFxu8J+UlyBKYXZhU2NyaXB0IEFkdmFuY2VkIENvdXJzZSBQYXJ0IDIgLSBodHRwczovL3lvdXR1LmJlL1l3c09DTjh3b0E4XG5cbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxu8J+SuCBCdWlsZCBZb3VyIE93biBFLWNvbW1lcmNlIFdlYnNpdGUgZm9yIEZyZWUhIC0gaHR0cHM6Ly93d3cudGhhcGF0ZWNobmljYWwuY29tLzIwMjQvMDMvYnVpbGQtY29tcGxldGUtZWNvbW1lcmNlLXdlYnNpdGUtdXNpbmcuaHRtbFxuXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbuKcjO+4jyBKb2luIFVzIVxuXG7wn5qAIEJlY29tZSBhIE1lbWJlcjogVW5sb2NrIHBlcmtzLCBmcmVlIHNvdXJjZSBjb2RlLCBhbmQgbW9yZSBKb2luIE5vdyA6IGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2NoYW5uZWwvVUN3ZmFBSHk0elFVYjJBUE5PR1hVQ0NBL2pvaW5cbvCfk7cgQ29ubmVjdCBvbiBJbnN0YWdyYW06ICBodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL3RoYXBhdGVjaG5pY2FsXG7wn5eo77iPIEpvaW4gT3VyIERpc2NvcmQgU2VydmVyOiBIYW5nIG91dCB3aXRoIGZlbGxvdyBwcm9ncmFtbWVycyBEaXNjb3JkIExpbms6IGh0dHBzOi8vZGlzY29yZC5nZy9NZFNjbUNzdWE2XG5cbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG7ijJtUSU1FTElOReKPs1xuMDowMCBJbnRybyB0byBSb3V0aW5nIGluIE5leHQuanMgIFxuMToxMCBVbmRlcnN0YW5kaW5nIHRoZSBhcHAgRm9sZGVyIGluIE5leHQuanMgIFxuMzowMSBDcmVhdGluZyB0aGUgU2VydmljZXMgUm91dGUgIFxuNjoxMiBDcmVhdGluZyBhIENvbnRhY3QgUGFnZSAgXG42OjU1IE5lc3RlZCBSb3V0ZSBpbiBOZXh0LmpzICBcbjg6MjIgTGF5b3V0IGluIE5leHQuanMgIFxuOTozNSBOZXN0ZWQgTGF5b3V0IGluIE5leHQuanMgIFxuMTE6MzAgUXVpY2sgUmVjYXAgb2YgV2hhdCBXZSBCdWlsdCAgXG4xMjoxMCBTaGFyaW5nIEdyb3VwIFBpYyBvbiBJbnN0YWdyYW0iLAogICAgICAgICJ0aHVtYm5haWxzIjogewogICAgICAgICAgImRlZmF1bHQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9LQlNZdXRFRGtndy9kZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgICAgICAgImhlaWdodCI6IDkwCiAgICAgICAgICB9LAogICAgICAgICAgIm1lZGl1bSI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL0tCU1l1dEVEa2d3L21xZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAzMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiAxODAKICAgICAgICAgIH0sCiAgICAgICAgICAiaGlnaCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL0tCU1l1dEVEa2d3L2hxZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA0ODAsCiAgICAgICAgICAgICJoZWlnaHQiOiAzNjAKICAgICAgICAgIH0sCiAgICAgICAgICAic3RhbmRhcmQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9LQlNZdXRFRGtndy9zZGRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNjQwLAogICAgICAgICAgICAiaGVpZ2h0IjogNDgwCiAgICAgICAgICB9LAogICAgICAgICAgIm1heHJlcyI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL0tCU1l1dEVEa2d3L21heHJlc2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTI4MCwKICAgICAgICAgICAgImhlaWdodCI6IDcyMAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImNoYW5uZWxUaXRsZSI6ICJUaGFwYSBUZWNobmljYWwiLAogICAgICAgICJ0YWdzIjogWwogICAgICAgICAgInRoYXBhdGVjaG5pY2FsIiwKICAgICAgICAgICJuZXh0LmpzIHJvdXRpbmcgZXhwbGFpbmVkIiwKICAgICAgICAgICJuZXh0LmpzIGFwcCBmb2xkZXIgdHV0b3JpYWwiLAogICAgICAgICAgIm5leHQuanMgbmVzdGVkIHJvdXRlcyIsCiAgICAgICAgICAibmV4dC5qcyBsYXlvdXQgZXhhbXBsZSIsCiAgICAgICAgICAibmV4dC5qcyBhcHAgcm91dGVyIGhpbmRpIiwKICAgICAgICAgICJob3cgcm91dGluZyB3b3JrcyBpbiBuZXh0LmpzIiwKICAgICAgICAgICJuZXh0LmpzIDE0IGFwcCBmb2xkZXIiLAogICAgICAgICAgIm5leHQuanMgdHV0b3JpYWwgZm9yIGJlZ2lubmVycyIsCiAgICAgICAgICAibmV4dC5qcyBjb250YWN0IHBhZ2UiLAogICAgICAgICAgIm5lc3RlZCBsYXlvdXQgbmV4dC5qcyIsCiAgICAgICAgICAibGF5b3V0IGluIG5leHQuanMgZXhwbGFpbmVkIiwKICAgICAgICAgICJhcHAgZGlyZWN0b3J5IG5leHQuanMiLAogICAgICAgICAgInJvdXRpbmcgaW4gcmVhY3QgdnMgbmV4dC5qcyIsCiAgICAgICAgICAibmV4dC5qcyBkeW5hbWljIHJvdXRlcyIsCiAgICAgICAgICAiZmlsZS1iYXNlZCByb3V0aW5nIG5leHQuanMiLAogICAgICAgICAgIm5leHQuanMgbGF5b3V0IGNvbXBvbmVudCIsCiAgICAgICAgICAibmV4dC5qcyBuZXN0ZWQgcm91dGUgdHV0b3JpYWwiCiAgICAgICAgXSwKICAgICAgICAiY2F0ZWdvcnlJZCI6ICIyNyIsCiAgICAgICAgImxpdmVCcm9hZGNhc3RDb250ZW50IjogIm5vbmUiLAogICAgICAgICJkZWZhdWx0TGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICJsb2NhbGl6ZWQiOiB7CiAgICAgICAgICAidGl0bGUiOiAiTmV4dC5qcyBBcHAgUm91dGVyIEV4cGxhaW5lZDogTmVzdGVkIFJvdXRlcyAmIExheW91dHMgTWFkZSBFYXN5IGluIEhpbmRpIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICLwn5SlIFdlbGNvbWUgdG8gTmV4dC5qcyBUdXRvcmlhbCBpbiBIaW5kaSAtIEFwcCBSb3V0ZXIgRXhwbGFpbmVkOiBOZXN0ZWQgUm91dGVzICYgTGF5b3V0c1xu8J+SuCBHZXQgU291cmNlIENvZGUgZm9yIEZyZWUhIEdyYWIgTm93IC0gaHR0cHM6Ly93d3cudGhhcGF0ZWNobmljYWwuY29tLzIwMjUvMDYvbmV4dGpzLXNlcmllcy1pbi0yMDI1Lmh0bWxcblxuSW4gdGhpcyB2aWRlbywgd2XigJlsbCBleHBsb3JlIHRoZSBwb3dlcmZ1bCBBcHAgUm91dGVyIGluIE5leHQuanMgd2l0aCByZWFsLXRpbWUgZXhhbXBsZXMhIFlvdSdsbCBsZWFybiBob3cgcm91dGluZyB3b3JrcyB1c2luZyB0aGUgYXBwLyBmb2xkZXIsIGhvdyB0byBjcmVhdGUgbmV3IHBhZ2VzIGxpa2Ugc2VydmljZXMgYW5kIGNvbnRhY3QsIGFuZCBob3cgbmVzdGVkIHJvdXRlcyBhbmQgbmVzdGVkIGxheW91dHMgaGVscCBidWlsZCBzY2FsYWJsZSBhcHBzLlxuXG5XZSdsbCBicmVhayBpdCBkb3duIHN0ZXAtYnktc3RlcCB3aXRoIGxpdmUgY29kaW5nIHNvIHlvdSBjYW4gY29uZmlkZW50bHkgdXNlIHJvdXRpbmcgaW4geW91ciBvd24gcHJvamVjdHMuIFRoaXMgaXMgcGFydCBvZiBvdXIgV29ybGQgQmVzdCBSZWFjdCB2MTkgU2VyaWVzIGluIEhpbmRpIOKAkyBzbyBtYWtlIHN1cmUgdG8gc3Vic2NyaWJlIGFuZCBmb2xsb3cgdGhlIGZ1bGwgcGxheWxpc3QhXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbvCfmoAgQm9vc3QgWW91ciBTa2lsbHMgd2l0aCB0aGVzZSBQcmUtUmVxdWlzaXRlIFZpZGVvczpcblxu8J+UlyBCZXN0IEhUTUwgQ291cnNlIC0gaHR0cHM6Ly95b3V0dS5iZS81Y2NxX25MSG5lRVxu8J+UlyBCZXN0IENTUyBDb3Vyc2UgIC0gaHR0cHM6Ly95b3V0dS5iZS9NU0lDRmxqUmNiNFxu8J+UlyBKYXZhU2NyaXB0IEJhc2ljcyBDb3Vyc2UgUGFydCAxIC0gaHR0cHM6Ly95b3V0dS5iZS8xM2dMQjZoREhSOFxu8J+UlyBKYXZhU2NyaXB0IEFkdmFuY2VkIENvdXJzZSBQYXJ0IDIgLSBodHRwczovL3lvdXR1LmJlL1l3c09DTjh3b0E4XG5cbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxu8J+SuCBCdWlsZCBZb3VyIE93biBFLWNvbW1lcmNlIFdlYnNpdGUgZm9yIEZyZWUhIC0gaHR0cHM6Ly93d3cudGhhcGF0ZWNobmljYWwuY29tLzIwMjQvMDMvYnVpbGQtY29tcGxldGUtZWNvbW1lcmNlLXdlYnNpdGUtdXNpbmcuaHRtbFxuXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbuKcjO+4jyBKb2luIFVzIVxuXG7wn5qAIEJlY29tZSBhIE1lbWJlcjogVW5sb2NrIHBlcmtzLCBmcmVlIHNvdXJjZSBjb2RlLCBhbmQgbW9yZSBKb2luIE5vdyA6IGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2NoYW5uZWwvVUN3ZmFBSHk0elFVYjJBUE5PR1hVQ0NBL2pvaW5cbvCfk7cgQ29ubmVjdCBvbiBJbnN0YWdyYW06ICBodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL3RoYXBhdGVjaG5pY2FsXG7wn5eo77iPIEpvaW4gT3VyIERpc2NvcmQgU2VydmVyOiBIYW5nIG91dCB3aXRoIGZlbGxvdyBwcm9ncmFtbWVycyBEaXNjb3JkIExpbms6IGh0dHBzOi8vZGlzY29yZC5nZy9NZFNjbUNzdWE2XG5cbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG7ijJtUSU1FTElOReKPs1xuMDowMCBJbnRybyB0byBSb3V0aW5nIGluIE5leHQuanMgIFxuMToxMCBVbmRlcnN0YW5kaW5nIHRoZSBhcHAgRm9sZGVyIGluIE5leHQuanMgIFxuMzowMSBDcmVhdGluZyB0aGUgU2VydmljZXMgUm91dGUgIFxuNjoxMiBDcmVhdGluZyBhIENvbnRhY3QgUGFnZSAgXG42OjU1IE5lc3RlZCBSb3V0ZSBpbiBOZXh0LmpzICBcbjg6MjIgTGF5b3V0IGluIE5leHQuanMgIFxuOTozNSBOZXN0ZWQgTGF5b3V0IGluIE5leHQuanMgIFxuMTE6MzAgUXVpY2sgUmVjYXAgb2YgV2hhdCBXZSBCdWlsdCAgXG4xMjoxMCBTaGFyaW5nIEdyb3VwIFBpYyBvbiBJbnN0YWdyYW0iCiAgICAgICAgfSwKICAgICAgICAiZGVmYXVsdEF1ZGlvTGFuZ3VhZ2UiOiAiZW4iCiAgICAgIH0sCiAgICAgICJjb250ZW50RGV0YWlscyI6IHsKICAgICAgICAiZHVyYXRpb24iOiAiUFQxM00zNVMiLAogICAgICAgICJkaW1lbnNpb24iOiAiMmQiLAogICAgICAgICJkZWZpbml0aW9uIjogImhkIiwKICAgICAgICAiY2FwdGlvbiI6ICJmYWxzZSIsCiAgICAgICAgImxpY2Vuc2VkQ29udGVudCI6IHRydWUsCiAgICAgICAgImNvbnRlbnRSYXRpbmciOiB7fSwKICAgICAgICAicHJvamVjdGlvbiI6ICJyZWN0YW5ndWxhciIKICAgICAgfSwKICAgICAgInN0YXRpc3RpY3MiOiB7CiAgICAgICAgInZpZXdDb3VudCI6ICIxMTg4MiIsCiAgICAgICAgImxpa2VDb3VudCI6ICI1MTkiLAogICAgICAgICJmYXZvcml0ZUNvdW50IjogIjAiLAogICAgICAgICJjb21tZW50Q291bnQiOiAiNjgiCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJraW5kIjogInlvdXR1YmUjdmlkZW8iLAogICAgICAiZXRhZyI6ICJxeHdEbnJ3YXk1cFQ5cnBsbzJuNUU3Qy1lRHMiLAogICAgICAiaWQiOiAiUFZIdjh4NG84UTAiLAogICAgICAic25pcHBldCI6IHsKICAgICAgICAicHVibGlzaGVkQXQiOiAiMjAyNS0wNi0wNVQxMDozMDoyMloiLAogICAgICAgICJjaGFubmVsSWQiOiAiVUN3ZmFBSHk0elFVYjJBUE5PR1hVQ0NBIiwKICAgICAgICAidGl0bGUiOiAiTmV4dC5qcyBUdXRvcmlhbCBpbiBIaW5kaSAjMzogQXBwIEZvbGRlciBTdHJ1Y3R1cmUgJiBMYXlvdXQuanMgaW4gTmV4dC5qcyIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIvCflKUgV2VsY29tZSB0byBOZXh0LmpzIFR1dG9yaWFsIGluIEhpbmRpIC0gQXBwIEZvbGRlciBTdHJ1Y3R1cmUgJiBMYXlvdXQuanMgaW4gTmV4dC5qc1xu8J+SuCBHZXQgU291cmNlIENvZGUgZm9yIEZyZWUhIEdyYWIgTm93IC0gaHR0cHM6Ly93d3cudGhhcGF0ZWNobmljYWwuY29tLzIwMjUvMDYvbmV4dGpzLXNlcmllcy1pbi0yMDI1Lmh0bWxcblxuSW4gdGhpcyB2aWRlbywgd2XigJlsbCBicmVhayBkb3duIHRoZSBOZXh0LmpzIEFwcCBSb3V0ZXIgc3RlcC1ieS1zdGVwIOKAlCBjb3ZlcmluZyBmb2xkZXIgc3RydWN0dXJlLCByb3V0aW5nLCBhbmQgdGhlIHBvd2VyZnVsIGxheW91dC5qcyBmaWxlLlxuXG5Zb3UnbGwgbGVhcm46XG7inIUgSG93IHRoZSBuZXcgYXBwLyBkaXJlY3Rvcnkgd29ya3NcbuKchSBXaGF0IGxheW91dC5qcyByZWFsbHkgZG9lcyBiZWhpbmQgdGhlIHNjZW5lc1xu4pyFIEhvdyByb3V0aW5nIHdvcmtzIHdpdGggcGFnZXMgbGlrZSAvYWJvdXRcbuKchSBBbmQgaG93IHRoZSBsYXlvdXQgd3JhcHMgeW91ciBlbnRpcmUgYXBwIHdpdGggZWFzZSFcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxu8J+agCBCb29zdCBZb3VyIFNraWxscyB3aXRoIHRoZXNlIFByZS1SZXF1aXNpdGUgVmlkZW9zOlxuXG7wn5SXIEJlc3QgSFRNTCBDb3Vyc2UgLSBodHRwczovL3lvdXR1LmJlLzVjY3FfbkxIbmVFXG7wn5SXIEJlc3QgQ1NTIENvdXJzZSAgLSBodHRwczovL3lvdXR1LmJlL01TSUNGbGpSY2I0XG7wn5SXIEphdmFTY3JpcHQgQmFzaWNzIENvdXJzZSBQYXJ0IDEgLSBodHRwczovL3lvdXR1LmJlLzEzZ0xCNmhESFI4XG7wn5SXIEphdmFTY3JpcHQgQWR2YW5jZWQgQ291cnNlIFBhcnQgMiAtIGh0dHBzOi8veW91dHUuYmUvWXdzT0NOOHdvQThcblxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG7wn5K4IEJ1aWxkIFlvdXIgT3duIEUtY29tbWVyY2UgV2Vic2l0ZSBmb3IgRnJlZSEgLSBodHRwczovL3d3dy50aGFwYXRlY2huaWNhbC5jb20vMjAyNC8wMy9idWlsZC1jb21wbGV0ZS1lY29tbWVyY2Utd2Vic2l0ZS11c2luZy5odG1sXG5cbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxu4pyM77iPIEpvaW4gVXMhXG5cbvCfmoAgQmVjb21lIGEgTWVtYmVyOiBVbmxvY2sgcGVya3MsIGZyZWUgc291cmNlIGNvZGUsIGFuZCBtb3JlIEpvaW4gTm93IDogaHR0cHM6Ly93d3cueW91dHViZS5jb20vY2hhbm5lbC9VQ3dmYUFIeTR6UVViMkFQTk9HWFVDQ0Evam9pblxu8J+TtyBDb25uZWN0IG9uIEluc3RhZ3JhbTogIGh0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vdGhhcGF0ZWNobmljYWxcbvCfl6jvuI8gSm9pbiBPdXIgRGlzY29yZCBTZXJ2ZXI6IEhhbmcgb3V0IHdpdGggZmVsbG93IHByb2dyYW1tZXJzIERpc2NvcmQgTGluazogaHR0cHM6Ly9kaXNjb3JkLmdnL01kU2NtQ3N1YTZcblxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbuKMm1RJTUVMSU5F4o+zXG4wOjAwIC0gSW50cm8gdG8gTmV4dC5qcyBBcHAgU3RydWN0dXJlIGFuZCBMYXlvdXRcbjE6MjAgLSBVbmRlcnN0YW5kaW5nIHRoZSBBcHAgRm9sZGVyIGluIE5leHQuanNcbjY6MzIgLSBXaGF0IGlzIGxheW91dC5qcyBpbiBOZXh0LmpzP1xuOTo0NSAtIFJld3JpdGluZyB0aGUgRnVsbCBsYXlvdXQuanMgd2l0aCBFeHBsYW5hdGlvblxuMTQ6MTAgLSBBYm91dCBQYWdlIFJvdXRlIGluIEFwcCBEaXJlY3RvcnlcbjE1OjM1IC0gSG93IExheW91dCBDb250ZW50IGFuZCBDaGlsZHJlbiBXb3JrIiwKICAgICAgICAidGh1bWJuYWlscyI6IHsKICAgICAgICAgICJkZWZhdWx0IjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvUFZIdjh4NG84UTAvZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiA5MAogICAgICAgICAgfSwKICAgICAgICAgICJtZWRpdW0iOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9QVkh2OHg0bzhRMC9tcWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMzIwLAogICAgICAgICAgICAiaGVpZ2h0IjogMTgwCiAgICAgICAgICB9LAogICAgICAgICAgImhpZ2giOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9QVkh2OHg0bzhRMC9ocWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNDgwLAogICAgICAgICAgICAiaGVpZ2h0IjogMzYwCiAgICAgICAgICB9LAogICAgICAgICAgInN0YW5kYXJkIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvUFZIdjh4NG84UTAvc2RkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDY0MCwKICAgICAgICAgICAgImhlaWdodCI6IDQ4MAogICAgICAgICAgfSwKICAgICAgICAgICJtYXhyZXMiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9QVkh2OHg0bzhRMC9tYXhyZXNkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyODAsCiAgICAgICAgICAgICJoZWlnaHQiOiA3MjAKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJjaGFubmVsVGl0bGUiOiAiVGhhcGEgVGVjaG5pY2FsIiwKICAgICAgICAidGFncyI6IFsKICAgICAgICAgICJ0aGFwYXRlY2huaWNhbCIsCiAgICAgICAgICAibmV4dC5qcyBsYXlvdXQgZXhwbGFpbmVkIiwKICAgICAgICAgICJuZXh0LmpzIGFwcCByb3V0ZXIiLAogICAgICAgICAgImxheW91dC5qcyBuZXh0LmpzIiwKICAgICAgICAgICJuZXh0LmpzIGZvbGRlciBzdHJ1Y3R1cmUiLAogICAgICAgICAgIm5leHQuanMgYXBwIGRpcmVjdG9yeSIsCiAgICAgICAgICAiaG93IGxheW91dCB3b3JrcyBpbiBuZXh0LmpzIiwKICAgICAgICAgICJuZXh0LmpzIHJvdXRpbmcgdHV0b3JpYWwiLAogICAgICAgICAgIm5leHQuanMgcGFnZS5qcyIsCiAgICAgICAgICAiYXBwIHJvdXRlciB2cyBwYWdlcyByb3V0ZXIiLAogICAgICAgICAgIm5leHRqcyBsYXlvdXQgY2hpbGRyZW4gcHJvcCIsCiAgICAgICAgICAibmV4dC5qcyBiZWdpbm5lciB0dXRvcmlhbCIsCiAgICAgICAgICAicmVhY3QgbmV4dC5qcyBsYXlvdXQiLAogICAgICAgICAgIm5leHQuanMgYWJvdXQgcGFnZSIsCiAgICAgICAgICAidGhhcGEgdGVjaG5pY2FsIG5leHQuanMiLAogICAgICAgICAgIm5leHQuanMgY291cnNlIGhpbmRpIiwKICAgICAgICAgICJuZXh0LmpzIHByb2plY3Qgc3RydWN0dXJlIiwKICAgICAgICAgICJuZXh0LmpzIHdpdGggcmVhY3QiLAogICAgICAgICAgImxheW91dCBpbiBhcHAgcm91dGVyIiwKICAgICAgICAgICJuZXh0LmpzIHJvdXRpbmcgYmFzaWNzIgogICAgICAgIF0sCiAgICAgICAgImNhdGVnb3J5SWQiOiAiMjciLAogICAgICAgICJsaXZlQnJvYWRjYXN0Q29udGVudCI6ICJub25lIiwKICAgICAgICAiZGVmYXVsdExhbmd1YWdlIjogImVuIiwKICAgICAgICAibG9jYWxpemVkIjogewogICAgICAgICAgInRpdGxlIjogIk5leHQuanMgVHV0b3JpYWwgaW4gSGluZGkgIzM6IEFwcCBGb2xkZXIgU3RydWN0dXJlICYgTGF5b3V0LmpzIGluIE5leHQuanMiLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIvCflKUgV2VsY29tZSB0byBOZXh0LmpzIFR1dG9yaWFsIGluIEhpbmRpIC0gQXBwIEZvbGRlciBTdHJ1Y3R1cmUgJiBMYXlvdXQuanMgaW4gTmV4dC5qc1xu8J+SuCBHZXQgU291cmNlIENvZGUgZm9yIEZyZWUhIEdyYWIgTm93IC0gaHR0cHM6Ly93d3cudGhhcGF0ZWNobmljYWwuY29tLzIwMjUvMDYvbmV4dGpzLXNlcmllcy1pbi0yMDI1Lmh0bWxcblxuSW4gdGhpcyB2aWRlbywgd2XigJlsbCBicmVhayBkb3duIHRoZSBOZXh0LmpzIEFwcCBSb3V0ZXIgc3RlcC1ieS1zdGVwIOKAlCBjb3ZlcmluZyBmb2xkZXIgc3RydWN0dXJlLCByb3V0aW5nLCBhbmQgdGhlIHBvd2VyZnVsIGxheW91dC5qcyBmaWxlLlxuXG5Zb3UnbGwgbGVhcm46XG7inIUgSG93IHRoZSBuZXcgYXBwLyBkaXJlY3Rvcnkgd29ya3NcbuKchSBXaGF0IGxheW91dC5qcyByZWFsbHkgZG9lcyBiZWhpbmQgdGhlIHNjZW5lc1xu4pyFIEhvdyByb3V0aW5nIHdvcmtzIHdpdGggcGFnZXMgbGlrZSAvYWJvdXRcbuKchSBBbmQgaG93IHRoZSBsYXlvdXQgd3JhcHMgeW91ciBlbnRpcmUgYXBwIHdpdGggZWFzZSFcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxu8J+agCBCb29zdCBZb3VyIFNraWxscyB3aXRoIHRoZXNlIFByZS1SZXF1aXNpdGUgVmlkZW9zOlxuXG7wn5SXIEJlc3QgSFRNTCBDb3Vyc2UgLSBodHRwczovL3lvdXR1LmJlLzVjY3FfbkxIbmVFXG7wn5SXIEJlc3QgQ1NTIENvdXJzZSAgLSBodHRwczovL3lvdXR1LmJlL01TSUNGbGpSY2I0XG7wn5SXIEphdmFTY3JpcHQgQmFzaWNzIENvdXJzZSBQYXJ0IDEgLSBodHRwczovL3lvdXR1LmJlLzEzZ0xCNmhESFI4XG7wn5SXIEphdmFTY3JpcHQgQWR2YW5jZWQgQ291cnNlIFBhcnQgMiAtIGh0dHBzOi8veW91dHUuYmUvWXdzT0NOOHdvQThcblxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG7wn5K4IEJ1aWxkIFlvdXIgT3duIEUtY29tbWVyY2UgV2Vic2l0ZSBmb3IgRnJlZSEgLSBodHRwczovL3d3dy50aGFwYXRlY2huaWNhbC5jb20vMjAyNC8wMy9idWlsZC1jb21wbGV0ZS1lY29tbWVyY2Utd2Vic2l0ZS11c2luZy5odG1sXG5cbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxu4pyM77iPIEpvaW4gVXMhXG5cbvCfmoAgQmVjb21lIGEgTWVtYmVyOiBVbmxvY2sgcGVya3MsIGZyZWUgc291cmNlIGNvZGUsIGFuZCBtb3JlIEpvaW4gTm93IDogaHR0cHM6Ly93d3cueW91dHViZS5jb20vY2hhbm5lbC9VQ3dmYUFIeTR6UVViMkFQTk9HWFVDQ0Evam9pblxu8J+TtyBDb25uZWN0IG9uIEluc3RhZ3JhbTogIGh0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vdGhhcGF0ZWNobmljYWxcbvCfl6jvuI8gSm9pbiBPdXIgRGlzY29yZCBTZXJ2ZXI6IEhhbmcgb3V0IHdpdGggZmVsbG93IHByb2dyYW1tZXJzIERpc2NvcmQgTGluazogaHR0cHM6Ly9kaXNjb3JkLmdnL01kU2NtQ3N1YTZcblxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbuKMm1RJTUVMSU5F4o+zXG4wOjAwIC0gSW50cm8gdG8gTmV4dC5qcyBBcHAgU3RydWN0dXJlIGFuZCBMYXlvdXRcbjE6MjAgLSBVbmRlcnN0YW5kaW5nIHRoZSBBcHAgRm9sZGVyIGluIE5leHQuanNcbjY6MzIgLSBXaGF0IGlzIGxheW91dC5qcyBpbiBOZXh0LmpzP1xuOTo0NSAtIFJld3JpdGluZyB0aGUgRnVsbCBsYXlvdXQuanMgd2l0aCBFeHBsYW5hdGlvblxuMTQ6MTAgLSBBYm91dCBQYWdlIFJvdXRlIGluIEFwcCBEaXJlY3RvcnlcbjE1OjM1IC0gSG93IExheW91dCBDb250ZW50IGFuZCBDaGlsZHJlbiBXb3JrIgogICAgICAgIH0sCiAgICAgICAgImRlZmF1bHRBdWRpb0xhbmd1YWdlIjogImVuIgogICAgICB9LAogICAgICAiY29udGVudERldGFpbHMiOiB7CiAgICAgICAgImR1cmF0aW9uIjogIlBUMTZNNDlTIiwKICAgICAgICAiZGltZW5zaW9uIjogIjJkIiwKICAgICAgICAiZGVmaW5pdGlvbiI6ICJoZCIsCiAgICAgICAgImNhcHRpb24iOiAiZmFsc2UiLAogICAgICAgICJsaWNlbnNlZENvbnRlbnQiOiB0cnVlLAogICAgICAgICJjb250ZW50UmF0aW5nIjoge30sCiAgICAgICAgInByb2plY3Rpb24iOiAicmVjdGFuZ3VsYXIiCiAgICAgIH0sCiAgICAgICJzdGF0aXN0aWNzIjogewogICAgICAgICJ2aWV3Q291bnQiOiAiMTIxMjAiLAogICAgICAgICJsaWtlQ291bnQiOiAiNDYwIiwKICAgICAgICAiZmF2b3JpdGVDb3VudCI6ICIwIiwKICAgICAgICAiY29tbWVudENvdW50IjogIjUxIgogICAgICB9CiAgICB9CiAgXSwKICAicGFnZUluZm8iOiB7CiAgICAidG90YWxSZXN1bHRzIjogMTAsCiAgICAicmVzdWx0c1BlclBhZ2UiOiAxMAogIH0KfQo=","status":200,"url":"https://www.googleapis.com/youtube/v3/videos?part=snippet%2CcontentDetails%2Cstatistics&id=4NfiGkWGFEY%2C1iCn6hKKkOs%2CzQM2HgNTBCs%2CRv2gQX5FVg8%2CCF52N-w4anI%2CKK7rFGFn750%2CMVnKXfKf0VY%2CpuFmzJAlO7E%2CKBSYutEDkgw%2CPVHv8x4o8Q0&key=AIzaSyAeZAsOW2kBeNqsdozdSNpajJeUOXsJ2fs"},"revalidate":3600,"tags":[]}