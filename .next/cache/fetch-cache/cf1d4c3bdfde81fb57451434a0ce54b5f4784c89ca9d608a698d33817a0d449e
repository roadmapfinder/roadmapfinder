{"kind":"FETCH","data":{"headers":{"content-encoding":"gzip","content-type":"application/json; charset=UTF-8","date":"Thu, 23 Oct 2025 11:11:45 GMT","server":"scaffolding on HTTPServer2","transfer-encoding":"chunked","vary":"Origin, X-Origin, Referer","x-content-type-options":"nosniff","x-frame-options":"SAMEORIGIN","x-xss-protection":"0"},"body":"{
  "kind": "youtube#videoListResponse",
  "etag": "fxPMFWQNUoLt6GguduBPSWQydG0",
  "items": [
    {
      "kind": "youtube#video",
      "etag": "-WdXE4roQei-9vsYezEOHmEnZl8",
      "id": "c9Wg6Cb_YlU",
      "snippet": {
        "publishedAt": "2021-02-10T14:40:38Z",
        "channelId": "UC8butISFwT-Wl7EV0hUK0BQ",
        "title": "UI / UX Design Tutorial – Wireframe, Mockup & Design in Figma",
        "description": "Learn the process of UI / UX design.  In this tutorial you will learn how a professional designer builds a full website design from scratch following the process of user experience and user interface. The video covers wireframing, prototyping, and designing in Figma.\n\nThis course was developed by Adrian Twarog. Check out his channel: https://www.youtube.com/channel/UCvM5YYWwfLwpcQgbRr68JLQ\n\n❤️ Try interactive UI courses we love, right in your browser: https://scrimba.com/freeCodeCamp-UI-Design (Made possible by a grant from our friends at Scrimba)\n\n⭐️ Sections ⭐️\n⌨️ (00:00) Introduction\n⌨️ (01:27) Wireframing\n⌨️ (30:58) UI Layout\n⌨️ (1:06:38) Mockup\n\n--\n\nLearn to code for free and get a developer job: https://www.freecodecamp.org\n\nRead hundreds of articles on programming: https://freecodecamp.org/news",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/c9Wg6Cb_YlU/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/c9Wg6Cb_YlU/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/c9Wg6Cb_YlU/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/c9Wg6Cb_YlU/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/c9Wg6Cb_YlU/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "freeCodeCamp.org",
        "tags": [
          "ux"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "UI / UX Design Tutorial – Wireframe, Mockup & Design in Figma",
          "description": "Learn the process of UI / UX design.  In this tutorial you will learn how a professional designer builds a full website design from scratch following the process of user experience and user interface. The video covers wireframing, prototyping, and designing in Figma.\n\nThis course was developed by Adrian Twarog. Check out his channel: https://www.youtube.com/channel/UCvM5YYWwfLwpcQgbRr68JLQ\n\n❤️ Try interactive UI courses we love, right in your browser: https://scrimba.com/freeCodeCamp-UI-Design (Made possible by a grant from our friends at Scrimba)\n\n⭐️ Sections ⭐️\n⌨️ (00:00) Introduction\n⌨️ (01:27) Wireframing\n⌨️ (30:58) UI Layout\n⌨️ (1:06:38) Mockup\n\n--\n\nLearn to code for free and get a developer job: https://www.freecodecamp.org\n\nRead hundreds of articles on programming: https://freecodecamp.org/news"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT1H26M21S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "3103349",
        "likeCount": "86575",
        "favoriteCount": "0",
        "commentCount": "1288"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "-15mCCjo9X80bUi2ar6t6hKHh84",
      "id": "MBblN98-5lg",
      "snippet": {
        "publishedAt": "2025-07-12T09:00:24Z",
        "channelId": "UCCktnahuRFYIBtNnKT5IYyg",
        "title": "UI UX Design Course FREE | UI UX Design Full Course For Beginners (2025) | Intellipaat",
        "description": "Want to become a UI/UX Designer in 2025 but don’t know where to start? This UI/UX Design Full Course for Absolute Beginners by Intellipaat is your all-in-one video to learn the fundamentals, tools, and real-world skills needed to kick-start your career in design! You'll begin with an easy-to-follow UI/UX career roadmap, and then dive into essential design principles like Atomic Design, UI Elements, and what makes good vs bad UI. You'll master color theory using the 60-30-10 rule, understand how to build style guides and design systems, and learn about inclusive design and accessibility including WCAG guidelines and how to create accessibility sheets.\n\nThis course also covers usability evaluation methods, quantitative vs qualitative testing, user load, and explores UX design patterns in detail. Dive deep into powerful UX laws like Fitts’, Hick’s, Jakob’s, and more, followed by a hands-on UX workshop, UI card design practice, and a real-world UX case study. To wrap it up, you'll get insider tips with UI/UX interview questions and answers to help you prepare for job opportunities.\n\nBelow are the topics covered in UI UX Design Full Course (2025)\n00:00:00 - Introduction to UI/UX Design for ABSOLUTE BEGINNERS\n00:02:45 - How to Become a UI/UX Designer  \n00:11:54 - Atomic Design Principles  \n00:26:46 - What are UI Elements?  \n00:39:22 - Groups and Containers  \n00:39:39 - UI Design Principles  \n01:14:15 - Good vs Bad UI Design  \n01:56:51 - Understanding Colours for UI Design  \n02:00:10 - What is the 60-30-10 Rule?  \n02:01:29 - Applying the 60-30-10 Rule in UI Design  \n02:12:39 - What is a Style Guide?  \n02:22:34 - What is a Design System?  \n02:57:45 - What is Inclusive Design?  \n03:07:48 - Inclusive Design Principles  \n03:22:30 - Accessibility Explained (with Example)  \n03:27:52 - Content and Structure in UI/UX  \n03:37:59 - Device Independent Design  \n04:06:04 - Animation, Layout, Media, Visual Design, Research & Testing  \n04:16:56 - WCAG Guidelines  \n04:41:39 - Creating an Accessibility Sheet    \n04:51:14 - What is Usability Evaluation?  \n04:54:49 - Methods of Usability Evaluation  \n05:31:13 - Quantitative vs Qualitative Testing  \n05:37:43 - When to Use Each Testing Method  \n05:47:29 - Understanding User Load  \n06:07:24 - UX Design Patterns (Website Explained)  \n06:20:22 - Why UX Design Patterns are Needed  \n06:47:24 - Examples of UX Design Patterns   \n06:39:24 - Laws of UX  \n06:50:05 - Fitts’ Law  \n06:53:01 - Hick’s Law  \n06:53:29 - Jakob’s Law  \n06:56:04 - Serial Position Effect  \n06:58:07 - Tesler’s Law  \n07:00:52 - Zeigarnik Effect  \n07:03:39 - UX Research Case Study  \n07:32:56 - Brainstorming and Ideation  \n07:35:04 - Brainstorming and Mapping  \n07:35:27 - Ideation and Problem Solving   \n08:14:23 - UX Workshop: Doctor Appointments  \n08:55:42 - UI Workshop: Card Design   \n10:07:07 - UI/UX Designer Interview Questions & Answers  \n\n#uiuxdesigncourse #uiuxcourse #uiuxfullcourse #intellipaat \n\n🔥Register for Intellipaat's State of the Art UI UX Design Course: https://intellipaat.com/ui-ux-course/\n\n➡️ About the Course\nThis UI/UX design course is designed and taught by the top Industry experts along with leading faculty from top IIT’s. The skills you will master in this course are UI/UX designing, identification of appropriate research methods, UI methodologies, Figma, and more. Learn from the best and be the best.\n\n📌 Do subscribe to Intellipaat channel & come across more relevant Tech content: https://goo.gl/hhsGWb\n\n▶️ Intellipaat Achievers Channel: https://www.youtube.com/@intellipaatachievers\n\n📚For more information, please write back to us at sales@intellipaat.com or call us at IND: +91-7022374614 / US : 1-800-216-8930",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/MBblN98-5lg/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/MBblN98-5lg/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/MBblN98-5lg/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/MBblN98-5lg/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/MBblN98-5lg/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Intellipaat",
        "tags": [
          "ui ux design course free",
          "ui ux design full course",
          "ui ux design full course 2025",
          "ui ux design course",
          "complete ui ux design course",
          "best ui ux design course on youtube",
          "ui ux design course for beginners",
          "learn ui ux design from scratch",
          "ui ux course",
          "ui ux design training",
          "ui ux design tutorial",
          "ui ux portfolio",
          "best ui ux design course online",
          "ui ux design",
          "ui ux design tools",
          "ux design course",
          "ui design course",
          "intellipaat"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "UI UX Design Course FREE | UI UX Design Full Course For Beginners (2025) | Intellipaat",
          "description": "Want to become a UI/UX Designer in 2025 but don’t know where to start? This UI/UX Design Full Course for Absolute Beginners by Intellipaat is your all-in-one video to learn the fundamentals, tools, and real-world skills needed to kick-start your career in design! You'll begin with an easy-to-follow UI/UX career roadmap, and then dive into essential design principles like Atomic Design, UI Elements, and what makes good vs bad UI. You'll master color theory using the 60-30-10 rule, understand how to build style guides and design systems, and learn about inclusive design and accessibility including WCAG guidelines and how to create accessibility sheets.\n\nThis course also covers usability evaluation methods, quantitative vs qualitative testing, user load, and explores UX design patterns in detail. Dive deep into powerful UX laws like Fitts’, Hick’s, Jakob’s, and more, followed by a hands-on UX workshop, UI card design practice, and a real-world UX case study. To wrap it up, you'll get insider tips with UI/UX interview questions and answers to help you prepare for job opportunities.\n\nBelow are the topics covered in UI UX Design Full Course (2025)\n00:00:00 - Introduction to UI/UX Design for ABSOLUTE BEGINNERS\n00:02:45 - How to Become a UI/UX Designer  \n00:11:54 - Atomic Design Principles  \n00:26:46 - What are UI Elements?  \n00:39:22 - Groups and Containers  \n00:39:39 - UI Design Principles  \n01:14:15 - Good vs Bad UI Design  \n01:56:51 - Understanding Colours for UI Design  \n02:00:10 - What is the 60-30-10 Rule?  \n02:01:29 - Applying the 60-30-10 Rule in UI Design  \n02:12:39 - What is a Style Guide?  \n02:22:34 - What is a Design System?  \n02:57:45 - What is Inclusive Design?  \n03:07:48 - Inclusive Design Principles  \n03:22:30 - Accessibility Explained (with Example)  \n03:27:52 - Content and Structure in UI/UX  \n03:37:59 - Device Independent Design  \n04:06:04 - Animation, Layout, Media, Visual Design, Research & Testing  \n04:16:56 - WCAG Guidelines  \n04:41:39 - Creating an Accessibility Sheet    \n04:51:14 - What is Usability Evaluation?  \n04:54:49 - Methods of Usability Evaluation  \n05:31:13 - Quantitative vs Qualitative Testing  \n05:37:43 - When to Use Each Testing Method  \n05:47:29 - Understanding User Load  \n06:07:24 - UX Design Patterns (Website Explained)  \n06:20:22 - Why UX Design Patterns are Needed  \n06:47:24 - Examples of UX Design Patterns   \n06:39:24 - Laws of UX  \n06:50:05 - Fitts’ Law  \n06:53:01 - Hick’s Law  \n06:53:29 - Jakob’s Law  \n06:56:04 - Serial Position Effect  \n06:58:07 - Tesler’s Law  \n07:00:52 - Zeigarnik Effect  \n07:03:39 - UX Research Case Study  \n07:32:56 - Brainstorming and Ideation  \n07:35:04 - Brainstorming and Mapping  \n07:35:27 - Ideation and Problem Solving   \n08:14:23 - UX Workshop: Doctor Appointments  \n08:55:42 - UI Workshop: Card Design   \n10:07:07 - UI/UX Designer Interview Questions & Answers  \n\n#uiuxdesigncourse #uiuxcourse #uiuxfullcourse #intellipaat \n\n🔥Register for Intellipaat's State of the Art UI UX Design Course: https://intellipaat.com/ui-ux-course/\n\n➡️ About the Course\nThis UI/UX design course is designed and taught by the top Industry experts along with leading faculty from top IIT’s. The skills you will master in this course are UI/UX designing, identification of appropriate research methods, UI methodologies, Figma, and more. Learn from the best and be the best.\n\n📌 Do subscribe to Intellipaat channel & come across more relevant Tech content: https://goo.gl/hhsGWb\n\n▶️ Intellipaat Achievers Channel: https://www.youtube.com/@intellipaatachievers\n\n📚For more information, please write back to us at sales@intellipaat.com or call us at IND: +91-7022374614 / US : 1-800-216-8930"
        },
        "defaultAudioLanguage": "en-IN"
      },
      "contentDetails": {
        "duration": "PT10H50M52S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": false,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "113202",
        "likeCount": "3287",
        "favoriteCount": "0",
        "commentCount": "77"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "9VxK_P_0p1-fQQ-EMmFTJWdzWV0",
      "id": "hqPP6cP1Im0",
      "snippet": {
        "publishedAt": "2025-09-24T12:24:40Z",
        "channelId": "UCCktnahuRFYIBtNnKT5IYyg",
        "title": "UI UX Design Full Course (2025) | UI UX Design Course For Beginners | Intellipaat",
        "description": "This complete UI/UX Design Course by Intellipaat for Beginners takes you step by step through the fundamentals of user interface and user experience design, combining theory with hands-on practice. You’ll start with a clear roadmap to becoming a UI/UX designer, learning atomic design principles, UI elements, and essential design principles that separate good interfaces from bad ones. The course then moves into practical skills like wireframes, auto layout, advanced UI design concepts, and Figma components, along with real-world projects including icons, plugins, and animations. \n\nYou’ll also explore UX design patterns, their importance, common examples, and the Laws of UX, supported by case studies and research methods. Usability evaluation is covered in depth with different testing methods moderated, unmoderated, remote, in-person, and comparative testing along with when to use quantitative versus qualitative approaches. The course concludes with portfolio reviews, tips for presenting your design work, and UI/UX interview questions to help you prepare for real job opportunities. Perfect for beginners, this course equips you with the skills to start a career in UI/UX design.\n\nBelow are the topics covered in UI UX Design Full Course (2025)\n00:00:00 – Introduction to UI UX Design Course For Beginners\n00:01:34 – UI/UX Designer Roadmap  \n00:10:09 – Atomic Design Principles  \n00:27:42 – UI Elements  \n01:12:06 – UI Design Principles  \n01:14:16 – Good vs Bad UI  \n01:19:32 – Wireframes & UI Fidelities (Hands-On: Auto Layout)  \n01:45:00 – Advanced UI Design Concepts  \n02:35:15 – Components in Figma  \n03:13:49 – Hands-On: Variants, Doctor Appointment App, Icons, Plugins, Animation  \n05:05:27 – Introduction to UX Design Patterns  \n05:31:58 – Need for UX Design Patterns  \n05:41:39 – UX vs UI Patterns  \n05:42:12 – Common UX Pattern Examples  \n05:47:32 – Laws of UX  \n06:01:51 – UX Case Study: Behance Research & Survey  \n06:31:15 – Ideation & Problem Solving  \n07:15:32 – What is Usability Evaluation?  \n07:21:26 – Methods of Usability Evaluation  \n07:30:04 – Moderated vs Unmoderated Testing  \n07:34:14 – Remote vs In-Person Testing  \n07:38:37 – Explorative vs Assessment vs Comparative Testing  \n07:45:58 – User Testing Methods  \n07:58:21 – Quantitative vs Qualitative Testing  \n08:03:48 – When to Use Quantitative vs Qualitative  \n08:14:35 – Understanding User Load  \n08:33:32 – Case Study Discussion  \n09:28:20 – UI Workshop Case Study  \n10:37:47 – Portfolio Review & Tips  \n11:38:20 – UI/UX Designer Interview Questions & Answers\n\n#uiuxdesigncourse #uiuxdesignfullcourse #uiuxdesign #uiuxcourse #intellipaat\n\n🔥Register for Intellipaat's State of the Art UI UX Design Course: https://intellipaat.com/ui-ux-course/\n\n➡️ About the Course\nThis UI/UX design course is designed and taught by the top Industry experts along with leading faculty from top IIT’s. The skills you will master in this course are UI/UX designing, identification of appropriate research methods, UI methodologies, Figma, and more. Learn from the best and be the best.\n\n📌 Do subscribe to Intellipaat channel & come across more relevant Tech content: https://goo.gl/hhsGWb\n\n▶️ Intellipaat Achievers Channel: https://www.youtube.com/@intellipaatachievers\n\n📚For more information, please write back to us at sales@intellipaat.com or call us at IND: +91-7022374614 / US : 1-800-216-8930",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/hqPP6cP1Im0/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/hqPP6cP1Im0/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/hqPP6cP1Im0/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/hqPP6cP1Im0/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/hqPP6cP1Im0/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Intellipaat",
        "tags": [
          "ui ux design full course",
          "ui ux design full course 2025",
          "ui ux design course",
          "ui ux design training",
          "ui ux design course for beginners",
          "ui ux design complete course",
          "ui ux design tutorial for beginners",
          "ui ux course",
          "ui ux course for beginners",
          "ux design tutorial",
          "ui ux design tutorial",
          "figma for ui ux design",
          "user interface and user experience design",
          "ui ux design",
          "best ui ux design course online",
          "intellipaat",
          "intellipaat ui ux course",
          "ui ux design course free",
          "figma for ui ux"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "UI UX Design Full Course (2025) | UI UX Design Course For Beginners | Intellipaat",
          "description": "This complete UI/UX Design Course by Intellipaat for Beginners takes you step by step through the fundamentals of user interface and user experience design, combining theory with hands-on practice. You’ll start with a clear roadmap to becoming a UI/UX designer, learning atomic design principles, UI elements, and essential design principles that separate good interfaces from bad ones. The course then moves into practical skills like wireframes, auto layout, advanced UI design concepts, and Figma components, along with real-world projects including icons, plugins, and animations. \n\nYou’ll also explore UX design patterns, their importance, common examples, and the Laws of UX, supported by case studies and research methods. Usability evaluation is covered in depth with different testing methods moderated, unmoderated, remote, in-person, and comparative testing along with when to use quantitative versus qualitative approaches. The course concludes with portfolio reviews, tips for presenting your design work, and UI/UX interview questions to help you prepare for real job opportunities. Perfect for beginners, this course equips you with the skills to start a career in UI/UX design.\n\nBelow are the topics covered in UI UX Design Full Course (2025)\n00:00:00 – Introduction to UI UX Design Course For Beginners\n00:01:34 – UI/UX Designer Roadmap  \n00:10:09 – Atomic Design Principles  \n00:27:42 – UI Elements  \n01:12:06 – UI Design Principles  \n01:14:16 – Good vs Bad UI  \n01:19:32 – Wireframes & UI Fidelities (Hands-On: Auto Layout)  \n01:45:00 – Advanced UI Design Concepts  \n02:35:15 – Components in Figma  \n03:13:49 – Hands-On: Variants, Doctor Appointment App, Icons, Plugins, Animation  \n05:05:27 – Introduction to UX Design Patterns  \n05:31:58 – Need for UX Design Patterns  \n05:41:39 – UX vs UI Patterns  \n05:42:12 – Common UX Pattern Examples  \n05:47:32 – Laws of UX  \n06:01:51 – UX Case Study: Behance Research & Survey  \n06:31:15 – Ideation & Problem Solving  \n07:15:32 – What is Usability Evaluation?  \n07:21:26 – Methods of Usability Evaluation  \n07:30:04 – Moderated vs Unmoderated Testing  \n07:34:14 – Remote vs In-Person Testing  \n07:38:37 – Explorative vs Assessment vs Comparative Testing  \n07:45:58 – User Testing Methods  \n07:58:21 – Quantitative vs Qualitative Testing  \n08:03:48 – When to Use Quantitative vs Qualitative  \n08:14:35 – Understanding User Load  \n08:33:32 – Case Study Discussion  \n09:28:20 – UI Workshop Case Study  \n10:37:47 – Portfolio Review & Tips  \n11:38:20 – UI/UX Designer Interview Questions & Answers\n\n#uiuxdesigncourse #uiuxdesignfullcourse #uiuxdesign #uiuxcourse #intellipaat\n\n🔥Register for Intellipaat's State of the Art UI UX Design Course: https://intellipaat.com/ui-ux-course/\n\n➡️ About the Course\nThis UI/UX design course is designed and taught by the top Industry experts along with leading faculty from top IIT’s. The skills you will master in this course are UI/UX designing, identification of appropriate research methods, UI methodologies, Figma, and more. Learn from the best and be the best.\n\n📌 Do subscribe to Intellipaat channel & come across more relevant Tech content: https://goo.gl/hhsGWb\n\n▶️ Intellipaat Achievers Channel: https://www.youtube.com/@intellipaatachievers\n\n📚For more information, please write back to us at sales@intellipaat.com or call us at IND: +91-7022374614 / US : 1-800-216-8930"
        },
        "defaultAudioLanguage": "en-IN"
      },
      "contentDetails": {
        "duration": "PT11H55M52S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": false,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "5591",
        "likeCount": "193",
        "favoriteCount": "0",
        "commentCount": "9"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "rbXSZT4fQ-rELVQ1vONApgtZtzc",
      "id": "kbZejnPXyLM",
      "snippet": {
        "publishedAt": "2021-12-01T20:30:13Z",
        "channelId": "UCHZ-NWzcaa4lFT9NjP4T4pg",
        "title": "Free Figma UX Design UI Essentials Course",
        "description": "Get unlimited access to this full course and 30+ more here: https://byol.com/figess1023\nWatch the entire course: https://BYOL.com/FIGFC\nFree Exercise Files: https://BYOL.com/FIGEX\nWatch the Free Figma Advanced Course: https://BYOL.com/FIGFESSYTD\nGet the Free Cheatsheet: https://bit.ly/31cUAeB\n\nNote: If you have a different UI than in the course, you can change it back by clicking the '?' in the bottom right corner of Figma and select 'Go back to previous UI'. Happy Figma'ing! \n\n\nTry Figma for Free! https://BYOL.com/FIG\nFree Figma Course. Learn Figma for Free. Figma for UX Design. Figma for UI Design\n\nIntro to Figma Essentials: 0:00\nGetting started with Figma: 3:10\nWhat is Figma?: 5:55\nDifference between UI & UX: 9:42\nWhat we are making?: 15:05\nClass project 01- Create your own brief: 24:23\nWhat is Lo Fi vs Hi Fi: 28:24\nIntroducing frames in Figma: 30:58\nThe basics of type & fonts in Figma: 39:27 \nRectangles Circles Buttons in Figma: 50:19\nMiddletro: 57:09\nHow to use color in Figma: 58:07 \nStrokes & color defaults in Figma: 1:03:53\nObject editing in Figma: 1:13:21\nScale vs Selection Tool in Figma: 1:15:08\nFrames vs Groups in Figma: 1:17:47\nClass project 02- Wireframe: 1:27:11\nFree icons in Figma: 1:30:12\nMatching the stroke in Figma: 1:39:23\nPlugins in Figma: 1:44:39\nClass project 03 - Icons: 1:49:11\nHow to use Pages in Figma: 1:52:59\nHow to prototype in Figma: 2:01:31\nPrototype animation in Figma: 2:11:15\nTesting on your phone in Figma: 2:22:08\nClass project 04 - Testing on your phone: 2:27:49\nSmart Animation & delays in Figma: 2:31:40\nClass project 05 - My first animation: 2:40:25\nSharing & Commenting in Figma: 2:42:26\nSharing with others in Figma: 2:49:36\nOutro: 2:56:35\n\n\nJoin the Bring Your Own Laptop Facebook Group: https://www.facebook.com/groups/bringyourownlaptop\nFollow me on Instagram: https://www.instagram.com/bringyourownlaptop/\nFollow me on TikTok: https://www.byol.com/tiktok\nFollow me on Twitter: https://twitter.com/danlovesadobe\nJoin the LinkedIn Group: http://linkedin.com/groups/10539178/\n\nHi there - my name is Dan Scott & welcome to Figma UX UI Essentials Course.\n\nTogether - you and me - are going to learn everything you need to get started working as a UX Designer using Figma. \n\nWe’ll use this UI UX design tool to create beautiful User Interfaces and engaging prototypes. Most importantly... we'll cover the client expectations of you as a new UX designer. \n\nThis course is aimed at people new to design, new to User Experience design. Even if you’re not totally sure what UX really means, don’t worry. We’ll start right at the beginning and work our way through step by step. \n\n• First we’ll describe the brief & how to work with a UX persona.  \n• Then you’ll learn how to create simple wireframes.  \n• From there we’ll look at how to implement colours & images properly in your designs.\n• You’ll learn the do’s & don’ts around choosing fonts for web & mobile apps. \n• You’ll learn how to create your own icons, buttons & other UI components. \n• You’ll learn some pretty scary terms such as Components, Constraints & Multi Dimensional Variants. They are all really easy to understand once you know how. \n• We’ll also make our lives easier by using free UI kits & plugins for Figma which will speed up our workflow dramatically!\n• We’ll build a simple Style Guide ready for client handoff. \n• You’ll understand how to make both simple & advanced micro interactions, page transitions & animations \n• Before the end of this course you will have made fully interactive prototypes \n• You will take a project all the way through -  collaborating with other team members and exporting the right files ready to hand off to your developer or software engineer. \n\nWe’ll be focusing on the software Figma but I’ll make sure to explain the techniques & terms used in the UX and how real world projects are run. You will develop a great understanding of the industry and will be able to manage your own UX projects.\n\nI will be setting assignments through the course which will help develop your skills and enable you to create something special and unique for your own portfolio. \n\nAlright - it's time to upgrade yourself & go from Figma Zero to Figma Hero.\n\n#Figma #UXDesign #FigmaTutorial",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/kbZejnPXyLM/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/kbZejnPXyLM/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/kbZejnPXyLM/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/kbZejnPXyLM/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/kbZejnPXyLM/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Bring Your Own Laptop",
        "tags": [
          "figma tutorial",
          "figma tutorial for beginners",
          "figma ui design",
          "Free Figma course",
          "figma tutorial web design",
          "figma web design tutorial",
          "figma UI tutorial",
          "figma ux tutorial",
          "figma ui tutorial for beginners",
          "figma ux tutorial for beginners",
          "figma for beginners",
          "figma ui design tutorial",
          "figma tutorial app design",
          "learn ux design",
          "figma ux course",
          "free figma tutorial",
          "ux design",
          "learn figma",
          "figma course",
          "figma ux design",
          "bring your own laptop figma",
          "user experience design"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "Free Figma UX Design UI Essentials Course",
          "description": "Get unlimited access to this full course and 30+ more here: https://byol.com/figess1023\nWatch the entire course: https://BYOL.com/FIGFC\nFree Exercise Files: https://BYOL.com/FIGEX\nWatch the Free Figma Advanced Course: https://BYOL.com/FIGFESSYTD\nGet the Free Cheatsheet: https://bit.ly/31cUAeB\n\nNote: If you have a different UI than in the course, you can change it back by clicking the '?' in the bottom right corner of Figma and select 'Go back to previous UI'. Happy Figma'ing! \n\n\nTry Figma for Free! https://BYOL.com/FIG\nFree Figma Course. Learn Figma for Free. Figma for UX Design. Figma for UI Design\n\nIntro to Figma Essentials: 0:00\nGetting started with Figma: 3:10\nWhat is Figma?: 5:55\nDifference between UI & UX: 9:42\nWhat we are making?: 15:05\nClass project 01- Create your own brief: 24:23\nWhat is Lo Fi vs Hi Fi: 28:24\nIntroducing frames in Figma: 30:58\nThe basics of type & fonts in Figma: 39:27 \nRectangles Circles Buttons in Figma: 50:19\nMiddletro: 57:09\nHow to use color in Figma: 58:07 \nStrokes & color defaults in Figma: 1:03:53\nObject editing in Figma: 1:13:21\nScale vs Selection Tool in Figma: 1:15:08\nFrames vs Groups in Figma: 1:17:47\nClass project 02- Wireframe: 1:27:11\nFree icons in Figma: 1:30:12\nMatching the stroke in Figma: 1:39:23\nPlugins in Figma: 1:44:39\nClass project 03 - Icons: 1:49:11\nHow to use Pages in Figma: 1:52:59\nHow to prototype in Figma: 2:01:31\nPrototype animation in Figma: 2:11:15\nTesting on your phone in Figma: 2:22:08\nClass project 04 - Testing on your phone: 2:27:49\nSmart Animation & delays in Figma: 2:31:40\nClass project 05 - My first animation: 2:40:25\nSharing & Commenting in Figma: 2:42:26\nSharing with others in Figma: 2:49:36\nOutro: 2:56:35\n\n\nJoin the Bring Your Own Laptop Facebook Group: https://www.facebook.com/groups/bringyourownlaptop\nFollow me on Instagram: https://www.instagram.com/bringyourownlaptop/\nFollow me on TikTok: https://www.byol.com/tiktok\nFollow me on Twitter: https://twitter.com/danlovesadobe\nJoin the LinkedIn Group: http://linkedin.com/groups/10539178/\n\nHi there - my name is Dan Scott & welcome to Figma UX UI Essentials Course.\n\nTogether - you and me - are going to learn everything you need to get started working as a UX Designer using Figma. \n\nWe’ll use this UI UX design tool to create beautiful User Interfaces and engaging prototypes. Most importantly... we'll cover the client expectations of you as a new UX designer. \n\nThis course is aimed at people new to design, new to User Experience design. Even if you’re not totally sure what UX really means, don’t worry. We’ll start right at the beginning and work our way through step by step. \n\n• First we’ll describe the brief & how to work with a UX persona.  \n• Then you’ll learn how to create simple wireframes.  \n• From there we’ll look at how to implement colours & images properly in your designs.\n• You’ll learn the do’s & don’ts around choosing fonts for web & mobile apps. \n• You’ll learn how to create your own icons, buttons & other UI components. \n• You’ll learn some pretty scary terms such as Components, Constraints & Multi Dimensional Variants. They are all really easy to understand once you know how. \n• We’ll also make our lives easier by using free UI kits & plugins for Figma which will speed up our workflow dramatically!\n• We’ll build a simple Style Guide ready for client handoff. \n• You’ll understand how to make both simple & advanced micro interactions, page transitions & animations \n• Before the end of this course you will have made fully interactive prototypes \n• You will take a project all the way through -  collaborating with other team members and exporting the right files ready to hand off to your developer or software engineer. \n\nWe’ll be focusing on the software Figma but I’ll make sure to explain the techniques & terms used in the UX and how real world projects are run. You will develop a great understanding of the industry and will be able to manage your own UX projects.\n\nI will be setting assignments through the course which will help develop your skills and enable you to create something special and unique for your own portfolio. \n\nAlright - it's time to upgrade yourself & go from Figma Zero to Figma Hero.\n\n#Figma #UXDesign #FigmaTutorial"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT2H57M40S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "true",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "2866564",
        "likeCount": "68051",
        "favoriteCount": "0",
        "commentCount": "1083"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "UMORb6k0-X-8mQVlKY7CrkPuZRM",
      "id": "1SNZRCVNizg",
      "snippet": {
        "publishedAt": "2025-02-24T08:00:02Z",
        "channelId": "UC_NhYYzcpz9QJZGm1nr0fWg",
        "title": "Free Figma Crash Course for Beginners 2025 | UI/UX Design",
        "description": "👉  Become a pro UI Designer with my UI Design & Figma Mastery course:\nhttps://bit.ly/3WE9Qe7\n\nFigma has been my go-to design tool for the past eight years, and I can't stress enough how powerful and essential it is for UI/UX designers. If you're looking to dive into UI/UX design, this course is the perfect starting point! You'll learn the fundamentals of Figma, from the basics to creating stunning user interfaces and seamless user experiences. Whether you're a complete beginner or just looking to sharpen your skills, this course will give you the hands-on knowledge you need to get started with confidence!\n\nRemember to subscribe: https://bit.ly/3US49pf\n\n\n📸  Instagram: https://www.instagram.com/uiux.arash\n\n\n#figma #figmatutorial  \n\n\nWho is Arash Ahadzadeh?  Well, I'm a UI/UX designer and a university instructor with 10+ years of experience, and I teach people how to design great user interfaces and experiences. I've helped over 40,000 students become UI/UX designers from scratch worldwide.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/1SNZRCVNizg/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/1SNZRCVNizg/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/1SNZRCVNizg/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/1SNZRCVNizg/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/1SNZRCVNizg/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "DesignWithArash",
        "tags": [
          "ui/ux design",
          "ux design",
          "user experience design",
          "ui/ux design india",
          "how to become a ui/ux designer",
          "become a ui/ux designer",
          "web design",
          "figma",
          "figma tutorial",
          "figma design",
          "figma tutorial for beginners",
          "ux",
          "ui",
          "design",
          "ui design",
          "uxui design",
          "uxui",
          "learn ux",
          "ux course",
          "design course",
          "designcourse",
          "beginner ux",
          "junior ux",
          "junior designer",
          "junior ux designer",
          "entry level ux",
          "how to learn ux",
          "learning ux",
          "user experience",
          "user interface"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "Free Figma Crash Course for Beginners 2025 | UI/UX Design",
          "description": "👉  Become a pro UI Designer with my UI Design & Figma Mastery course:\nhttps://bit.ly/3WE9Qe7\n\nFigma has been my go-to design tool for the past eight years, and I can't stress enough how powerful and essential it is for UI/UX designers. If you're looking to dive into UI/UX design, this course is the perfect starting point! You'll learn the fundamentals of Figma, from the basics to creating stunning user interfaces and seamless user experiences. Whether you're a complete beginner or just looking to sharpen your skills, this course will give you the hands-on knowledge you need to get started with confidence!\n\nRemember to subscribe: https://bit.ly/3US49pf\n\n\n📸  Instagram: https://www.instagram.com/uiux.arash\n\n\n#figma #figmatutorial  \n\n\nWho is Arash Ahadzadeh?  Well, I'm a UI/UX designer and a university instructor with 10+ years of experience, and I teach people how to design great user interfaces and experiences. I've helped over 40,000 students become UI/UX designers from scratch worldwide."
        },
        "defaultAudioLanguage": "en-US"
      },
      "contentDetails": {
        "duration": "PT1H29M46S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "349443",
        "likeCount": "9086",
        "favoriteCount": "0",
        "commentCount": "341"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "v-xQ412m7aP4hfwjE9J8pc08cSI",
      "id": "WylVZzSsavg",
      "snippet": {
        "publishedAt": "2025-05-03T19:04:00Z",
        "channelId": "UCCktnahuRFYIBtNnKT5IYyg",
        "title": "🔥Complete 11 Hour Free UI/UX Design Course for Beginners | UI UX Design Full Course | Intellipaat",
        "description": "🔥Register for Intellipaat's State of the Art UI UX Design Course: https://intellipaat.com/ui-ux-course/\n\nIn this UI UX Design Course by Intellipaat, you’ll learn UI UX design completely in one shot to become job-ready. This UI UX Design Full Course is an exhaustive resource to help you master key UI UX principles, from understanding design laws to defining a problem statement, ideating solutions, and turning them into actual designs using wireframing. At the start of this course, you’ll explore the demand for UI UX designers, the difference between UI and UX, an introduction to UX, and some fundamental UX laws. Moving forward, you’ll dive into UI design, learning how to start wireframing using Figma, build prototypes, and scale your work into a complete UI UX design project.\n\nThis is the only course you need to master UI UX design, as it takes you from the basics to creating real designs and performing usability testing, with hands-on demonstrations throughout. Start learning now and get ahead in the UI UX design game!\n\n\n#UIUX #Intellipaat #UIUXDesign #FreeUIUXCourse #UIUXForBeginners #LearnUIUX #UXDesign #UIDesign #UIUXCourse #FreeDesignCourse #UIUXTutorial #UIUXDesignTips #LearnDesign #DesignCourse\n\n📖 Below are the topics covered in this '🔥Complete 11-Hour Free UI/UX Design Course for Beginners':\n00:00:00 - Introduction to UI UX Design Full Course For ABSOLUTE BEGINNERS\n00:02:48 - UI UX Design Scope in Future  \n00:12:03 - Difference Between UI And UX  \n00:21:11 - Atomic Design Principles\n00:36:46 - What are UI Elements?\n00:49:22 - Groups and Containers  \n00:49:39 - UI Design Principles\n01:24:15 - Deep Dive: Good vs Bad UI    \n02:06:51 - Understanding Colours for UI Design  \n02:10:10 - What is the 60-30-10 Rule?  \n02:11:29 - How to Apply the 60-30-10 Rule to UI Design\n02:22:39 - What is a Style Guide?  \n02:32:34 - What is a Design System?  \n03:07:45 - What is Inclusive Design?\n03:17:48 - Inclusive Design Principles\n03:32:30 - What is Accessibility? (with Example)  \n03:37:52 - Content and Structure  in UI UX Design\n03:47:59 - Device Independent Design  \n04:16:04 - Animation, Layout, Media, Visual Design, User Research & Testing  \n04:26:56 - WCAG Guidelines \n04:51:39 - Creating an Accessibility Sheet  \n05:01:14 - What is Usability Evaluation?  \n05:04:49 - Methods of Usability Evaluation\n05:41:13 - Quantitative vs Qualitative Usability Testing  \n05:47:43 - When to Conduct Quantitative vs Qualitative Testing?  \n05:57:29 - What is User Load?\n06:17:24 - UX Design Patterns (Website Explained)  \n06:30:22 - Need for UX Design Patterns  \n06:57:24 - Common Examples of UX Design Patterns  \n06:59:24 - Laws of UX  \n07:00:05 - Fitts' Law  \n07:03:01 - Hick's Law  \n07:03:29 - Jakob's Law  \n07:06:04 - Serial Position Effect  \n07:08:07 - Tesler's Law  \n07:10:52 - Zeigarnik Effect\n07:13:39 - User Research Design Case Study  \n07:42:56 - Brainstorming and Ideation  \n07:45:04 - Brainstorming and Mapping  \n07:45:27 - Ideation and Problem Solving  \n08:24:23 - UX Workshop Case Study: Doctor Appointments  \n09:05:42 - UI Workshop Case Study: Card Design  \n10:15:06 - UI UX Designer Interview Questions and Answers  \n\n📌 Do subscribe to Intellipaat channel & come across more relevant Tech content: https://goo.gl/hhsGWb\n\n▶️ Intellipaat Achievers Channel: https://www.youtube.com/@intellipaatachievers\n\n📚For more information, please write back to us at sales@intellipaat.com or call us at IND: +91-7022374614 / US : 1-800-216-8930",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/WylVZzSsavg/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/WylVZzSsavg/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/WylVZzSsavg/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/WylVZzSsavg/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/WylVZzSsavg/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Intellipaat",
        "tags": [
          "ui ux design course",
          "ui ux design full course for beginners",
          "ui ux design full course",
          "ui ux training",
          "ui ux design course free",
          "ui ux design tutorial for beginners",
          "ui ux course",
          "how to create ui design for website",
          "user experience design course",
          "user interface design in figma",
          "ui ux in one shot",
          "figma course",
          "usability testing",
          "ui ux deisng course for beginners",
          "ui ux design complete course",
          "intellipaat",
          "ux ui design",
          "🔥Complete 11 Hour Free UI/UX Design Course for Beginners"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "🔥Complete 11 Hour Free UI/UX Design Course for Beginners | UI UX Design Full Course | Intellipaat",
          "description": "🔥Register for Intellipaat's State of the Art UI UX Design Course: https://intellipaat.com/ui-ux-course/\n\nIn this UI UX Design Course by Intellipaat, you’ll learn UI UX design completely in one shot to become job-ready. This UI UX Design Full Course is an exhaustive resource to help you master key UI UX principles, from understanding design laws to defining a problem statement, ideating solutions, and turning them into actual designs using wireframing. At the start of this course, you’ll explore the demand for UI UX designers, the difference between UI and UX, an introduction to UX, and some fundamental UX laws. Moving forward, you’ll dive into UI design, learning how to start wireframing using Figma, build prototypes, and scale your work into a complete UI UX design project.\n\nThis is the only course you need to master UI UX design, as it takes you from the basics to creating real designs and performing usability testing, with hands-on demonstrations throughout. Start learning now and get ahead in the UI UX design game!\n\n\n#UIUX #Intellipaat #UIUXDesign #FreeUIUXCourse #UIUXForBeginners #LearnUIUX #UXDesign #UIDesign #UIUXCourse #FreeDesignCourse #UIUXTutorial #UIUXDesignTips #LearnDesign #DesignCourse\n\n📖 Below are the topics covered in this '🔥Complete 11-Hour Free UI/UX Design Course for Beginners':\n00:00:00 - Introduction to UI UX Design Full Course For ABSOLUTE BEGINNERS\n00:02:48 - UI UX Design Scope in Future  \n00:12:03 - Difference Between UI And UX  \n00:21:11 - Atomic Design Principles\n00:36:46 - What are UI Elements?\n00:49:22 - Groups and Containers  \n00:49:39 - UI Design Principles\n01:24:15 - Deep Dive: Good vs Bad UI    \n02:06:51 - Understanding Colours for UI Design  \n02:10:10 - What is the 60-30-10 Rule?  \n02:11:29 - How to Apply the 60-30-10 Rule to UI Design\n02:22:39 - What is a Style Guide?  \n02:32:34 - What is a Design System?  \n03:07:45 - What is Inclusive Design?\n03:17:48 - Inclusive Design Principles\n03:32:30 - What is Accessibility? (with Example)  \n03:37:52 - Content and Structure  in UI UX Design\n03:47:59 - Device Independent Design  \n04:16:04 - Animation, Layout, Media, Visual Design, User Research & Testing  \n04:26:56 - WCAG Guidelines \n04:51:39 - Creating an Accessibility Sheet  \n05:01:14 - What is Usability Evaluation?  \n05:04:49 - Methods of Usability Evaluation\n05:41:13 - Quantitative vs Qualitative Usability Testing  \n05:47:43 - When to Conduct Quantitative vs Qualitative Testing?  \n05:57:29 - What is User Load?\n06:17:24 - UX Design Patterns (Website Explained)  \n06:30:22 - Need for UX Design Patterns  \n06:57:24 - Common Examples of UX Design Patterns  \n06:59:24 - Laws of UX  \n07:00:05 - Fitts' Law  \n07:03:01 - Hick's Law  \n07:03:29 - Jakob's Law  \n07:06:04 - Serial Position Effect  \n07:08:07 - Tesler's Law  \n07:10:52 - Zeigarnik Effect\n07:13:39 - User Research Design Case Study  \n07:42:56 - Brainstorming and Ideation  \n07:45:04 - Brainstorming and Mapping  \n07:45:27 - Ideation and Problem Solving  \n08:24:23 - UX Workshop Case Study: Doctor Appointments  \n09:05:42 - UI Workshop Case Study: Card Design  \n10:15:06 - UI UX Designer Interview Questions and Answers  \n\n📌 Do subscribe to Intellipaat channel & come across more relevant Tech content: https://goo.gl/hhsGWb\n\n▶️ Intellipaat Achievers Channel: https://www.youtube.com/@intellipaatachievers\n\n📚For more information, please write back to us at sales@intellipaat.com or call us at IND: +91-7022374614 / US : 1-800-216-8930"
        },
        "defaultAudioLanguage": "en-IN"
      },
      "contentDetails": {
        "duration": "PT10H59M28S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": false,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "101677",
        "likeCount": "2460",
        "favoriteCount": "0",
        "commentCount": "64"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "XwIIHrQy2VvfIhDeq1BDfq-zxz8",
      "id": "jdmX8ZIMRUU",
      "snippet": {
        "publishedAt": "2025-07-28T13:30:20Z",
        "channelId": "UCCktnahuRFYIBtNnKT5IYyg",
        "title": "UI UX Design Full Course (2025) | Intellipaat",
        "description": "Looking to start your career in UI/UX Design? This UI/UX Design Full Course by Intellipaat is your complete guide to becoming a job-ready UI/UX designer no prior experience needed! In this hands-on and beginner-friendly course, you’ll start by understanding what UI and UX design really mean, explore their scope in the future, and learn key differences between them. Dive deep into essential design concepts like color theory, typography, design systems, and atomic design principles.\n\nYou’ll also get step-by-step training on Figma, UI elements, style guides, and how to apply popular UX patterns and principles like 60-30-10 rule, SCAMPER, and laws of UX. Practice ideation techniques like mind mapping, brainstorming, affinity mapping, and sketching to solve real design problems.\nTowards the end, sharpen your interview skills with UI/UX interview questions, and gain practical exposure through hands-on Figma projects and design system building.\n\nBelow are the topics covered in UI UX Design Full Course (2025)\n00:00:00 - Introduction to UI/UX Design Free Course\n00:01:41 - What is UI/UX Design\n00:05:38 - UI/UX Scope in Future\n00:15:48 - UI vs UX\n00:24:54 - Color Theory in UI Design\n00:35:57 - Introduction to Typography\n00:45:49 - Figma 101\n01:46:30 - Understanding Color for UI Design\n01:56:04 - What is the 60-30-10 Rule?\n02:21:13 - Components of Style Guides\n02:27:53 - What is a Design System\n03:05:37 - Ideation and Problem Solving\n03:09:28 - What is Brainstorming Analysis\n03:31:30 - Why Use Mind Mapping\n03:34:51 - Purpose of Sketching\n03:41:14 - What is Perspective\n03:54:30 - What is SCAMPER\n04:29:28 - Affinity Mapping\n04:54:03 - Atomic Design Principle\n05:33:37 - What are UI Elements\n05:33:55 - Types of UI Elements\n06:07:51 - What are UI Design Principles\n07:20:26 - Lack of Text Hierarchy\n08:16:51 - What is UX Design Patterns\n08:30:14 - Laws of UX\n09:53:05 - Hands-On\n10:27:02 - Interview Q/A of UI/UX\n\n#uiuxdesigncourse #uiuxdesignfullcourse #uiuxdesign #uiuxcourse #intellipaat\n\n🔥Register for Intellipaat's State of the Art UI UX Design Course: https://intellipaat.com/ui-ux-course/\n\n➡️ About the Course\nThis UI/UX design course is designed and taught by the top Industry experts along with leading faculty from top IIT’s. The skills you will master in this course are UI/UX designing, identification of appropriate research methods, UI methodologies, Figma, and more. Learn from the best and be the best.\n\n📌 Do subscribe to Intellipaat channel & come across more relevant Tech content: https://goo.gl/hhsGWb\n\n▶️ Intellipaat Achievers Channel: https://www.youtube.com/@intellipaatachievers\n\n📚For more information, please write back to us at sales@intellipaat.com or call us at IND: +91-7022374614 / US : 1-800-216-8930",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/jdmX8ZIMRUU/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/jdmX8ZIMRUU/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/jdmX8ZIMRUU/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/jdmX8ZIMRUU/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/jdmX8ZIMRUU/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Intellipaat",
        "tags": [
          "ui ux design full course",
          "ui ux design full course 2025",
          "ui ux design course",
          "ui ux design training",
          "ui ux design course for beginners",
          "ui ux design complete course",
          "ui ux design tutorial for beginners",
          "ui ux course",
          "ui ux course for beginners",
          "ux design tutorial",
          "ui ux design tutorial",
          "figma for ui ux design",
          "user interface and user experience design",
          "ui ux design",
          "best ui ux design course online",
          "intellipaat",
          "intellipaat ui ux course",
          "ui ux design course free",
          "figma for ui ux"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "UI UX Design Full Course (2025) | Intellipaat",
          "description": "Looking to start your career in UI/UX Design? This UI/UX Design Full Course by Intellipaat is your complete guide to becoming a job-ready UI/UX designer no prior experience needed! In this hands-on and beginner-friendly course, you’ll start by understanding what UI and UX design really mean, explore their scope in the future, and learn key differences between them. Dive deep into essential design concepts like color theory, typography, design systems, and atomic design principles.\n\nYou’ll also get step-by-step training on Figma, UI elements, style guides, and how to apply popular UX patterns and principles like 60-30-10 rule, SCAMPER, and laws of UX. Practice ideation techniques like mind mapping, brainstorming, affinity mapping, and sketching to solve real design problems.\nTowards the end, sharpen your interview skills with UI/UX interview questions, and gain practical exposure through hands-on Figma projects and design system building.\n\nBelow are the topics covered in UI UX Design Full Course (2025)\n00:00:00 - Introduction to UI/UX Design Free Course\n00:01:41 - What is UI/UX Design\n00:05:38 - UI/UX Scope in Future\n00:15:48 - UI vs UX\n00:24:54 - Color Theory in UI Design\n00:35:57 - Introduction to Typography\n00:45:49 - Figma 101\n01:46:30 - Understanding Color for UI Design\n01:56:04 - What is the 60-30-10 Rule?\n02:21:13 - Components of Style Guides\n02:27:53 - What is a Design System\n03:05:37 - Ideation and Problem Solving\n03:09:28 - What is Brainstorming Analysis\n03:31:30 - Why Use Mind Mapping\n03:34:51 - Purpose of Sketching\n03:41:14 - What is Perspective\n03:54:30 - What is SCAMPER\n04:29:28 - Affinity Mapping\n04:54:03 - Atomic Design Principle\n05:33:37 - What are UI Elements\n05:33:55 - Types of UI Elements\n06:07:51 - What are UI Design Principles\n07:20:26 - Lack of Text Hierarchy\n08:16:51 - What is UX Design Patterns\n08:30:14 - Laws of UX\n09:53:05 - Hands-On\n10:27:02 - Interview Q/A of UI/UX\n\n#uiuxdesigncourse #uiuxdesignfullcourse #uiuxdesign #uiuxcourse #intellipaat\n\n🔥Register for Intellipaat's State of the Art UI UX Design Course: https://intellipaat.com/ui-ux-course/\n\n➡️ About the Course\nThis UI/UX design course is designed and taught by the top Industry experts along with leading faculty from top IIT’s. The skills you will master in this course are UI/UX designing, identification of appropriate research methods, UI methodologies, Figma, and more. Learn from the best and be the best.\n\n📌 Do subscribe to Intellipaat channel & come across more relevant Tech content: https://goo.gl/hhsGWb\n\n▶️ Intellipaat Achievers Channel: https://www.youtube.com/@intellipaatachievers\n\n📚For more information, please write back to us at sales@intellipaat.com or call us at IND: +91-7022374614 / US : 1-800-216-8930"
        },
        "defaultAudioLanguage": "en-IN"
      },
      "contentDetails": {
        "duration": "PT10H38M45S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": false,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "39253",
        "likeCount": "1125",
        "favoriteCount": "0",
        "commentCount": "30"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "s8Gm--7ACETHzwZhJGZbuMspoQY",
      "id": "YIr9nZyh1ls",
      "snippet": {
        "publishedAt": "2025-10-15T15:51:06Z",
        "channelId": "UCsvqVGtbbyHaMoevxPAq9Fg",
        "title": "UI UX Design Full Course Course 2025 | UI UX Design Tutorial For Beginners | UI UX | Simplilearn",
        "description": "🔥IIITB - Advanced Certification in UI UX Design (India Only)  - https://www.simplilearn.com/ui-ux-certification-training-course?utm_campaign=YIr9nZyh1ls&utm_medium=Lives&utm_source=Youtube\n\nThe UI/UX Full Course 2025 by Simplilearn, is a complete journey into user interface and user experience design, from fundamentals to advanced practical skills. It begins with an introduction to UI/UX and a clear career roadmap, followed by the 12 Laws of UX, design principles, and portfolio-building strategies. Learners explore AI tools for designers and hands-on UI/UX training using Figma—covering tutorials, demos, animations, plugins, wireframes, mockups, and micro-interactions. The course also emphasizes human-centered design and color theory to create intuitive, aesthetic interfaces. Finally, it concludes with top UI/UX projects, ChatGPT for design workflows, and UI/UX interview questions to prepare learners for real-world design roles.\nFollowing are the topics covered in the UI UX Full Course 2025 By Simplilearn:\n\n00:00:00 - Introduction to UI / UX Full Course 2025\n00:02:22 - Introduction to UI / UX \n00:18:42 - UI UX Roadmap\n00:28:04 - 12 laws of ui ux \n00:36:26 - UI/UX Design Principles \n00:46:09 - UI / UX Portfolio\n00:54:18 - 6 AI Tools for Graphic Designers \n01:05:37 - UI UX Training\n06:27:34 - Figma tutorial for beginners \n06:43:53 - Figma Demo\n06:51:45 - Figma Animation\n07:02:51 - Top 20 Figma Plugins \n07:25:03 - What is Human Centered Design\n07:34:16 - How to create Mock Ups in Figma \n07:46:22 - Figma Wireframe Tutorial \n08:06:37 - Micro Interactions in Figma \n08:32:39 - Colour Theory \n08:41:03 - Top 10 UI UX Projects \n08:52:50 - ChatGPT for UI/UX Design \n09:40:24 - UI / UX Interview Questions\n\n✅ Subscribe to our Channel to learn more about the top Technologies: https://bit.ly/2VT4WtH \n\n#UiUx #UX #UIUX Design #UIUXTraining #2025 #simplilearn #UIUXCourse #UIUXFullCourse\n\n➡️ About Advanced Certification In UI UX Design\n\nThis Advanced Certification in UI UX Design by IIIT Bangalore helps you learn a design-centric approach to User Interface and User Experience Design, including UX Research, UI Styling, User-centered Design processes, Wireframes, Prototypes, and Usability Testing. Practice via Capstone Projects, course-wide assignments and create your Dribbble portfolio\n\nKey Features\n\n✅ Simplilearn's JobAssist helps you get noticed by top hiring companies\n✅ Get professionally certified in UI UX with a program completion certificate from IIIT Bangalore\n✅ Hands-on Practical Learning Experience via curriculum-wide assignments & projects\n✅ Industry-oriented problem solving via Capstone Projects on E-commerce, Fitness, and Technology industries\n✅ Hands-on learning with Designer Toolkit (Figma, Invision & Balsamiq, Sketch & Mural) for an enhanced learning experience\n✅ Masterclasses from top faculty of IIIT Bangalore\n✅ 8X higher engagement in live online classes by Simplilearn’s expert instructors\n✅ Portfolio creation assistance on Dribbble\n✅ Live Masterclasses delivered by Top Design Experts from Adobe, Amazon, and Microsoft\n\nSkills Covered\n\n✅ UI and Visual Design\n✅ Design Thinking\n✅ Prototyping\n✅ Information and Interaction Design\n✅ User Experience Design\n✅ Product Designing\n✅ Wireframing\n✅ Usability Testing\n✅ User-centered design\n✅ Persona mapping\n✅ Empathy mapping\n✅ Clickstream Analysis\n✅ Gestalt principles\n✅ Heuristics Evaluation\n✅ Microcopy\n\nLearning Path\n✅ IIITB UI UX: Induction for Certificate Program in UI UX\n✅ UI/UX Design and Design Thinking Fundamentals\n✅ UX Research: Applying User Research to Design\n✅ Visual Design, Wireframing, Prototyping, Micro interactions, and Interactive Design\n✅ Usability Evaluation and UX Intensive Phase\n✅ Design Documentation, Project Handoff and Stakeholder Management\n✅ Design Portfolio Creation and Career Guidance\n✅ Introduction to HCI and AR VR in UI/UX\n✅ UI/UX Design Capstone Project\nElectives:\n✅ IIITB UI UX: Masterclass by IIIT Bangalore\n✅ IIITB UI UX: Masterclass by Design Leaders\n✅ Website Building using HTML5 and CSS3\n✅ Generative AI Masterclass\n\nLearn More:- https://www.simplilearn.com/ui-ux-certification-training-course?utm_campaign=YIr9nZyh1ls&utm_medium=Lives&utm_source=youtube",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/YIr9nZyh1ls/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/YIr9nZyh1ls/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/YIr9nZyh1ls/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/YIr9nZyh1ls/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/YIr9nZyh1ls/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Simplilearn",
        "tags": [
          "ui ux design full course",
          "ui ux course",
          "ui ux training",
          "ui ux free course",
          "ui ux tutorial",
          "ux design tutorial",
          "ux design course",
          "learn ui ux",
          "ux course",
          "ui course",
          "ui ux design course",
          "ui ux free tutorial",
          "ui ux tutorial for beginners",
          "ux ui course",
          "free ux course",
          "ux design tutorial for beginners",
          "ux design courses",
          "ux course for beginners",
          "online ui ux course",
          "best ui ux course",
          "ui/ux free course",
          "free ui course",
          "ux design for beginners",
          "ui ux Simplilearn",
          "Simplilearn"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "UI UX Design Full Course Course 2025 | UI UX Design Tutorial For Beginners | UI UX | Simplilearn",
          "description": "🔥IIITB - Advanced Certification in UI UX Design (India Only)  - https://www.simplilearn.com/ui-ux-certification-training-course?utm_campaign=YIr9nZyh1ls&utm_medium=Lives&utm_source=Youtube\n\nThe UI/UX Full Course 2025 by Simplilearn, is a complete journey into user interface and user experience design, from fundamentals to advanced practical skills. It begins with an introduction to UI/UX and a clear career roadmap, followed by the 12 Laws of UX, design principles, and portfolio-building strategies. Learners explore AI tools for designers and hands-on UI/UX training using Figma—covering tutorials, demos, animations, plugins, wireframes, mockups, and micro-interactions. The course also emphasizes human-centered design and color theory to create intuitive, aesthetic interfaces. Finally, it concludes with top UI/UX projects, ChatGPT for design workflows, and UI/UX interview questions to prepare learners for real-world design roles.\nFollowing are the topics covered in the UI UX Full Course 2025 By Simplilearn:\n\n00:00:00 - Introduction to UI / UX Full Course 2025\n00:02:22 - Introduction to UI / UX \n00:18:42 - UI UX Roadmap\n00:28:04 - 12 laws of ui ux \n00:36:26 - UI/UX Design Principles \n00:46:09 - UI / UX Portfolio\n00:54:18 - 6 AI Tools for Graphic Designers \n01:05:37 - UI UX Training\n06:27:34 - Figma tutorial for beginners \n06:43:53 - Figma Demo\n06:51:45 - Figma Animation\n07:02:51 - Top 20 Figma Plugins \n07:25:03 - What is Human Centered Design\n07:34:16 - How to create Mock Ups in Figma \n07:46:22 - Figma Wireframe Tutorial \n08:06:37 - Micro Interactions in Figma \n08:32:39 - Colour Theory \n08:41:03 - Top 10 UI UX Projects \n08:52:50 - ChatGPT for UI/UX Design \n09:40:24 - UI / UX Interview Questions\n\n✅ Subscribe to our Channel to learn more about the top Technologies: https://bit.ly/2VT4WtH \n\n#UiUx #UX #UIUX Design #UIUXTraining #2025 #simplilearn #UIUXCourse #UIUXFullCourse\n\n➡️ About Advanced Certification In UI UX Design\n\nThis Advanced Certification in UI UX Design by IIIT Bangalore helps you learn a design-centric approach to User Interface and User Experience Design, including UX Research, UI Styling, User-centered Design processes, Wireframes, Prototypes, and Usability Testing. Practice via Capstone Projects, course-wide assignments and create your Dribbble portfolio\n\nKey Features\n\n✅ Simplilearn's JobAssist helps you get noticed by top hiring companies\n✅ Get professionally certified in UI UX with a program completion certificate from IIIT Bangalore\n✅ Hands-on Practical Learning Experience via curriculum-wide assignments & projects\n✅ Industry-oriented problem solving via Capstone Projects on E-commerce, Fitness, and Technology industries\n✅ Hands-on learning with Designer Toolkit (Figma, Invision & Balsamiq, Sketch & Mural) for an enhanced learning experience\n✅ Masterclasses from top faculty of IIIT Bangalore\n✅ 8X higher engagement in live online classes by Simplilearn’s expert instructors\n✅ Portfolio creation assistance on Dribbble\n✅ Live Masterclasses delivered by Top Design Experts from Adobe, Amazon, and Microsoft\n\nSkills Covered\n\n✅ UI and Visual Design\n✅ Design Thinking\n✅ Prototyping\n✅ Information and Interaction Design\n✅ User Experience Design\n✅ Product Designing\n✅ Wireframing\n✅ Usability Testing\n✅ User-centered design\n✅ Persona mapping\n✅ Empathy mapping\n✅ Clickstream Analysis\n✅ Gestalt principles\n✅ Heuristics Evaluation\n✅ Microcopy\n\nLearning Path\n✅ IIITB UI UX: Induction for Certificate Program in UI UX\n✅ UI/UX Design and Design Thinking Fundamentals\n✅ UX Research: Applying User Research to Design\n✅ Visual Design, Wireframing, Prototyping, Micro interactions, and Interactive Design\n✅ Usability Evaluation and UX Intensive Phase\n✅ Design Documentation, Project Handoff and Stakeholder Management\n✅ Design Portfolio Creation and Career Guidance\n✅ Introduction to HCI and AR VR in UI/UX\n✅ UI/UX Design Capstone Project\nElectives:\n✅ IIITB UI UX: Masterclass by IIIT Bangalore\n✅ IIITB UI UX: Masterclass by Design Leaders\n✅ Website Building using HTML5 and CSS3\n✅ Generative AI Masterclass\n\nLearn More:- https://www.simplilearn.com/ui-ux-certification-training-course?utm_campaign=YIr9nZyh1ls&utm_medium=Lives&utm_source=youtube"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT9H52M51S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "3050",
        "likeCount": "68",
        "favoriteCount": "0",
        "commentCount": "1"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "wo5MfBgRzVkUN_DqQDWZqR2G6H4",
      "id": "2eWdccBjZNs",
      "snippet": {
        "publishedAt": "2025-07-07T14:15:00Z",
        "channelId": "UCCktnahuRFYIBtNnKT5IYyg",
        "title": "UI UX Design Full Course (2025) | UI UX Design Course For Beginners | Intellipaat",
        "description": "In this UI/UX Design Full Course for 2025 by Intellipaat, you’ll learn UI/UX design comprehensively in one go to become job-ready. This UI/UX Design Course for Beginners is an extensive resource to help you start your journey in UI/UX design. You will cover everything from understanding design principles to defining problem statements, ideating solutions, and turning them into actual designs using Figma. At the beginning, you’ll learn what UI/UX design truly is. Then, you'll follow a strategic UI/UX design roadmap, a learning plan that helps you acquire all the essential skills. As you progress, you’ll dive into UI design, learning how to create wireframes using Figma, build prototypes, and scale your work into a complete UI/UX design project.\n\nYou’ll also explore how to build your design portfolio, conduct usability testing, and prepare for job interviews. Finally, the course will walk you through the most commonly asked UI/UX design interview questions to help you understand what to expect in an interview.\n\nBelow are the topics covered in UI UX Design Full Course (2025)\n00:00:00 – Introduction to UI UX Design Course For Beginners\n00:01:34 – UI/UX Designer Roadmap  \n00:10:09 – Atomic Design Principles  \n00:27:42 – UI Elements  \n01:12:06 – UI Design Principles  \n01:14:16 – Good vs Bad UI  \n01:19:32 – Wireframes & UI Fidelities (Hands-On: Auto Layout)  \n01:45:00 – Advanced UI Design Concepts  \n02:35:15 – Components in Figma  \n03:13:49 – Hands-On: Variants, Doctor Appointment App, Icons, Plugins, Animation  \n05:05:27 – Introduction to UX Design Patterns  \n05:31:58 – Need for UX Design Patterns  \n05:41:39 – UX vs UI Patterns  \n05:42:12 – Common UX Pattern Examples  \n05:47:32 – Laws of UX  \n06:01:51 – UX Case Study: Behance Research & Survey  \n06:31:15 – Ideation & Problem Solving  \n07:15:32 – What is Usability Evaluation?  \n07:21:26 – Methods of Usability Evaluation  \n07:30:04 – Moderated vs Unmoderated Testing  \n07:34:14 – Remote vs In-Person Testing  \n07:38:37 – Explorative vs Assessment vs Comparative Testing  \n07:45:58 – User Testing Methods  \n07:58:21 – Quantitative vs Qualitative Testing  \n08:03:48 – When to Use Quantitative vs Qualitative  \n08:14:35 – Understanding User Load  \n08:33:32 – Case Study Discussion  \n09:28:20 – UI Workshop Case Study  \n10:37:47 – Portfolio Review & Tips  \n11:38:20 – UI/UX Designer Interview Questions & Answers  \n\n#uiuxdesigncourse #uiuxdesignfullcourse #uiuxdesign #uiuxcourse #intellipaat\n\n🔥Register for Intellipaat's State of the Art UI UX Design Course: https://intellipaat.com/ui-ux-course/\n\n➡️ About the Course\nThis UI/UX design course is designed and taught by the top Industry experts along with leading faculty from top IIT’s. The skills you will master in this course are UI/UX designing, identification of appropriate research methods, UI methodologies, Figma, and more. Learn from the best and be the best.\n\n📌 Do subscribe to Intellipaat channel & come across more relevant Tech content: https://goo.gl/hhsGWb\n\n▶️ Intellipaat Achievers Channel: https://www.youtube.com/@intellipaatachievers\n\n📚For more information, please write back to us at sales@intellipaat.com or call us at IND: +91-7022374614 / US : 1-800-216-8930",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/2eWdccBjZNs/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/2eWdccBjZNs/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/2eWdccBjZNs/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/2eWdccBjZNs/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/2eWdccBjZNs/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Intellipaat",
        "tags": [
          "ui ux design course",
          "ui ux design full course for beginners",
          "ui ux design full course",
          "ui ux training",
          "ui ux design course free",
          "ui ux design tutorial for beginners",
          "ui ux course",
          "how to create ui design for website",
          "user experience design course",
          "user interface design in figma",
          "ui ux in one shot",
          "figma course",
          "usability testing",
          "ui ux deisng course for beginners",
          "ui ux design complete course",
          "intellipaat",
          "free ui course",
          "ui ux design",
          "ui ux design course for beginners",
          "ui ux"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "UI UX Design Full Course (2025) | UI UX Design Course For Beginners | Intellipaat",
          "description": "In this UI/UX Design Full Course for 2025 by Intellipaat, you’ll learn UI/UX design comprehensively in one go to become job-ready. This UI/UX Design Course for Beginners is an extensive resource to help you start your journey in UI/UX design. You will cover everything from understanding design principles to defining problem statements, ideating solutions, and turning them into actual designs using Figma. At the beginning, you’ll learn what UI/UX design truly is. Then, you'll follow a strategic UI/UX design roadmap, a learning plan that helps you acquire all the essential skills. As you progress, you’ll dive into UI design, learning how to create wireframes using Figma, build prototypes, and scale your work into a complete UI/UX design project.\n\nYou’ll also explore how to build your design portfolio, conduct usability testing, and prepare for job interviews. Finally, the course will walk you through the most commonly asked UI/UX design interview questions to help you understand what to expect in an interview.\n\nBelow are the topics covered in UI UX Design Full Course (2025)\n00:00:00 – Introduction to UI UX Design Course For Beginners\n00:01:34 – UI/UX Designer Roadmap  \n00:10:09 – Atomic Design Principles  \n00:27:42 – UI Elements  \n01:12:06 – UI Design Principles  \n01:14:16 – Good vs Bad UI  \n01:19:32 – Wireframes & UI Fidelities (Hands-On: Auto Layout)  \n01:45:00 – Advanced UI Design Concepts  \n02:35:15 – Components in Figma  \n03:13:49 – Hands-On: Variants, Doctor Appointment App, Icons, Plugins, Animation  \n05:05:27 – Introduction to UX Design Patterns  \n05:31:58 – Need for UX Design Patterns  \n05:41:39 – UX vs UI Patterns  \n05:42:12 – Common UX Pattern Examples  \n05:47:32 – Laws of UX  \n06:01:51 – UX Case Study: Behance Research & Survey  \n06:31:15 – Ideation & Problem Solving  \n07:15:32 – What is Usability Evaluation?  \n07:21:26 – Methods of Usability Evaluation  \n07:30:04 – Moderated vs Unmoderated Testing  \n07:34:14 – Remote vs In-Person Testing  \n07:38:37 – Explorative vs Assessment vs Comparative Testing  \n07:45:58 – User Testing Methods  \n07:58:21 – Quantitative vs Qualitative Testing  \n08:03:48 – When to Use Quantitative vs Qualitative  \n08:14:35 – Understanding User Load  \n08:33:32 – Case Study Discussion  \n09:28:20 – UI Workshop Case Study  \n10:37:47 – Portfolio Review & Tips  \n11:38:20 – UI/UX Designer Interview Questions & Answers  \n\n#uiuxdesigncourse #uiuxdesignfullcourse #uiuxdesign #uiuxcourse #intellipaat\n\n🔥Register for Intellipaat's State of the Art UI UX Design Course: https://intellipaat.com/ui-ux-course/\n\n➡️ About the Course\nThis UI/UX design course is designed and taught by the top Industry experts along with leading faculty from top IIT’s. The skills you will master in this course are UI/UX designing, identification of appropriate research methods, UI methodologies, Figma, and more. Learn from the best and be the best.\n\n📌 Do subscribe to Intellipaat channel & come across more relevant Tech content: https://goo.gl/hhsGWb\n\n▶️ Intellipaat Achievers Channel: https://www.youtube.com/@intellipaatachievers\n\n📚For more information, please write back to us at sales@intellipaat.com or call us at IND: +91-7022374614 / US : 1-800-216-8930"
        },
        "defaultAudioLanguage": "en-IN"
      },
      "contentDetails": {
        "duration": "PT11H55M52S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": false,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "22531",
        "likeCount": "668",
        "favoriteCount": "0",
        "commentCount": "33"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "iM52UjunACNjFL70DVeNZApF2wo",
      "id": "Hltyd0MTsZk",
      "snippet": {
        "publishedAt": "2025-07-12T19:23:21Z",
        "channelId": "UCCktnahuRFYIBtNnKT5IYyg",
        "title": "UI UX Design Full Course (2025) | UI UX Design Course For Beginners | Intellipaat",
        "description": "Ready to become a UI/UX Designer in 2025? This UI UX Design Full Course by Intellipaat is your ultimate beginner-to-pro guide to mastering everything from design fundamentals to portfolio building and interview prep - all in one video! Kick things off with a clear UI/UX roadmap, then dive into core topics like atomic design principles, UI elements, good vs bad UI, and wireframes. Learn advanced Figma skills with hands-on projects like designing a doctor appointment app, working with variants, icons, plugins, and animations.\n\nUnderstand the importance of UX design patterns, the laws of UX, and how to evaluate usability through various user testing methods (moderated, remote, qualitative vs quantitative, etc.). You’ll also explore real case studies, tackle design challenges, and get portfolio-ready with expert guidance.\nTo top it off, we’ve included a segment on UI/UX designer interview questions & answers so you can walk into job interviews with confidence.\n\nBelow are the topics covered in UI UX Design Full Course (2025)\n00:00:00 - Introduction to UI Design  \n00:01:34 - UI/UX Designer Roadmap  \n00:10:09 - Atomic Design Principles  \n00:27:42 - UI Elements  \n01:12:06 - UI Design Principles  \n01:14:16 - Good vs Bad UI  \n01:19:32 - Wireframe and UI Fidelities (Hands-On: Auto Layout)  \n01:45:00 - Advanced UI Design  \n02:35:15 - Components in Figma  \n03:13:49 - Hands-On (Variants, Doctor Appointments UI, Icons, Plugins, Animation)  \n05:05:27 - What are UX Design Patterns  \n05:31:58 - Need for UX Design Patterns  \n05:41:39 - Difference Between UX and UI Patterns  \n05:42:12 - Common Examples of UX Design Patterns  \n05:47:32 - Laws of UX  \n06:01:51 - UX Design on Behance: Research & Survey Case Study  \n06:31:15 - Ideation & Problem Solving  \n07:15:32 - What is Usability Evaluation?  \n07:21:26 - Methods of Usability Evaluation  \n07:29:42 - Best Practices  \n07:30:04 - Moderated vs Unmoderated Testing  \n07:34:14 - Remote vs In-Person Testing  \n07:38:37 - Explorative vs Assessment vs Comparative Testing  \n07:45:58 - User Testing Methods  \n07:58:21 - Quantitative vs Qualitative Usability Testing  \n08:03:48 - When to Use Quantitative vs Qualitative  \n08:14:35 - What is User Load?  \n08:33:32 - Case Study Discussion  \n09:28:20 - UI Workshop Case Study  \n10:37:47 - Portfolio Discussion  \n11:38:20 - UI/UX Designer Interview Questions & Answers  \n\n#uiuxdesignfullcourse #uiuxdesigncourse #uiuxdesigncourseforbeginners #uiuxcourse #intellipaat\n\n🔥Register for Intellipaat's State of the Art UI UX Design Course: https://intellipaat.com/ui-ux-course/\n\n➡️ About the Course\nThis UI/UX design course is designed and taught by the top Industry experts along with leading faculty from top IIT’s. The skills you will master in this course are UI/UX designing, identification of appropriate research methods, UI methodologies, Figma, and more. Learn from the best and be the best.\n\n📌 Do subscribe to Intellipaat channel & come across more relevant Tech content: https://goo.gl/hhsGWb\n\n▶️ Intellipaat Achievers Channel: https://www.youtube.com/@intellipaatachievers\n\n📚For more information, please write back to us at sales@intellipaat.com or call us at IND: +91-7022374614 / US : 1-800-216-8930",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/Hltyd0MTsZk/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/Hltyd0MTsZk/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/Hltyd0MTsZk/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/Hltyd0MTsZk/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/Hltyd0MTsZk/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Intellipaat",
        "tags": [
          "UI ux design full course 2025",
          "UI ux design full course",
          "UI ux design course",
          "ui ux design course for beginners",
          "what is ui ux design",
          "ui ux design roadmap",
          "learn ui ux design from scratch",
          "learn ui ux design for beginners",
          "complete ui ux design course",
          "ui ux course",
          "ui ux portfolio",
          "best ui ux course on youtube",
          "best ui ux design course online",
          "ui ux design",
          "intellipaat",
          "intellipaat ui ux design"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "UI UX Design Full Course (2025) | UI UX Design Course For Beginners | Intellipaat",
          "description": "Ready to become a UI/UX Designer in 2025? This UI UX Design Full Course by Intellipaat is your ultimate beginner-to-pro guide to mastering everything from design fundamentals to portfolio building and interview prep - all in one video! Kick things off with a clear UI/UX roadmap, then dive into core topics like atomic design principles, UI elements, good vs bad UI, and wireframes. Learn advanced Figma skills with hands-on projects like designing a doctor appointment app, working with variants, icons, plugins, and animations.\n\nUnderstand the importance of UX design patterns, the laws of UX, and how to evaluate usability through various user testing methods (moderated, remote, qualitative vs quantitative, etc.). You’ll also explore real case studies, tackle design challenges, and get portfolio-ready with expert guidance.\nTo top it off, we’ve included a segment on UI/UX designer interview questions & answers so you can walk into job interviews with confidence.\n\nBelow are the topics covered in UI UX Design Full Course (2025)\n00:00:00 - Introduction to UI Design  \n00:01:34 - UI/UX Designer Roadmap  \n00:10:09 - Atomic Design Principles  \n00:27:42 - UI Elements  \n01:12:06 - UI Design Principles  \n01:14:16 - Good vs Bad UI  \n01:19:32 - Wireframe and UI Fidelities (Hands-On: Auto Layout)  \n01:45:00 - Advanced UI Design  \n02:35:15 - Components in Figma  \n03:13:49 - Hands-On (Variants, Doctor Appointments UI, Icons, Plugins, Animation)  \n05:05:27 - What are UX Design Patterns  \n05:31:58 - Need for UX Design Patterns  \n05:41:39 - Difference Between UX and UI Patterns  \n05:42:12 - Common Examples of UX Design Patterns  \n05:47:32 - Laws of UX  \n06:01:51 - UX Design on Behance: Research & Survey Case Study  \n06:31:15 - Ideation & Problem Solving  \n07:15:32 - What is Usability Evaluation?  \n07:21:26 - Methods of Usability Evaluation  \n07:29:42 - Best Practices  \n07:30:04 - Moderated vs Unmoderated Testing  \n07:34:14 - Remote vs In-Person Testing  \n07:38:37 - Explorative vs Assessment vs Comparative Testing  \n07:45:58 - User Testing Methods  \n07:58:21 - Quantitative vs Qualitative Usability Testing  \n08:03:48 - When to Use Quantitative vs Qualitative  \n08:14:35 - What is User Load?  \n08:33:32 - Case Study Discussion  \n09:28:20 - UI Workshop Case Study  \n10:37:47 - Portfolio Discussion  \n11:38:20 - UI/UX Designer Interview Questions & Answers  \n\n#uiuxdesignfullcourse #uiuxdesigncourse #uiuxdesigncourseforbeginners #uiuxcourse #intellipaat\n\n🔥Register for Intellipaat's State of the Art UI UX Design Course: https://intellipaat.com/ui-ux-course/\n\n➡️ About the Course\nThis UI/UX design course is designed and taught by the top Industry experts along with leading faculty from top IIT’s. The skills you will master in this course are UI/UX designing, identification of appropriate research methods, UI methodologies, Figma, and more. Learn from the best and be the best.\n\n📌 Do subscribe to Intellipaat channel & come across more relevant Tech content: https://goo.gl/hhsGWb\n\n▶️ Intellipaat Achievers Channel: https://www.youtube.com/@intellipaatachievers\n\n📚For more information, please write back to us at sales@intellipaat.com or call us at IND: +91-7022374614 / US : 1-800-216-8930"
        },
        "defaultAudioLanguage": "en-IN"
      },
      "contentDetails": {
        "duration": "PT11H54M56S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": false,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "27459",
        "likeCount": "664",
        "favoriteCount": "0",
        "commentCount": "20"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "AWtAQ-vS3sleLvR0Dq4ipN4XYpo",
      "id": "jwCmIBJ8Jtc",
      "snippet": {
        "publishedAt": "2022-01-05T14:34:30Z",
        "channelId": "UC8butISFwT-Wl7EV0hUK0BQ",
        "title": "Figma Tutorial for UI Design - Course for Beginners",
        "description": "In this Figma course, you will learn how to use Figma for UI Design. Figma is a vector graphics editor and prototyping tool.\n\n✏️ Joseph Brendan developed this course. Check out his YouTube channel: https://www.youtube.com/channel/UCETwb_AzizmhID0RjKULnBA\n\n❤️ Try interactive UI courses we love, right in your browser: https://scrimba.com/freeCodeCamp-UI-Design (Made possible by a grant from our friends at Scrimba)\n\n⭐️ Course Contents ⭐️\n⌨️ (0:00:00) Introduction\n⌨️ (0:00:55) Creating A Figma Account\n⌨️ (0:02:32) Creating & Naming A Figma Design File\n⌨️ (0:04:47) Creating Shapes In Figma\n⌨️ (0:07:16) Selection In Figma  \n⌨️ (0:12:02) Editing Shapes In Figma\n⌨️ (0:36:14) Introduction To Typography In Figma\n⌨️ (1:01:41) Design Tree In Figma\n⌨️ (1:06:43) First Design Task\n⌨️ (1:20:44) Colors In Figma\n⌨️ (1:44:22) Drawing Tools In Figma\n⌨️ (1:49:20) Margin And Padding In UI UX Design\n⌨️ (1:56:08) Figma AutoLayout\n⌨️ (2:13:48) Formatting Principles In Figma\n⌨️ (2:34:32) Figma Constraints And Resizing\n⌨️ (2:51:11) Website Design in Figma\n⌨️ (2:55:52) Jakob's Principle Of Design\n⌨️ (3:00:25) Introduction to Styles and components\n⌨️ (3:25:29) Figma Component Variants\n⌨️ (3:36:18) Layout Design & Configuration For Websites in Figma\n⌨️ (3:40:07) Layout Grids In Figma\n⌨️ (4:01:22) Introduction To Responsive Design\n⌨️ (4:07:32) Material Design Guide\n⌨️ (6:26:24) Introduction To Tailwind UI\n⌨️ (6:28:24) Tailwind UI Design Project\n⌨️ (7:25:45) Responsive Landing Page Design Project\n⌨️ (8:45:54) Designing Mobile Apps\n⌨️ (8:56:47) Iconography In Figma\n⌨️ (9:02:32) Boolean Groups\n⌨️ (9:09:52) Figma Tokens\n⌨️ (9:18:29) Animation In Figma With Figmotion\n⌨️ (9:36:29) Mobile Design Project\n\n🎉 Thanks to our Champion and Sponsor supporters:\n👾 Raymond Odero\n👾 Agustín Kussrow\n👾 aldo ferretti\n👾 Otis Morgan\n👾 DeezMaster\n\n--\n\nLearn to code for free and get a developer job: https://www.freecodecamp.org\n\nRead hundreds of articles on programming: https://freecodecamp.org/news",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/jwCmIBJ8Jtc/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/jwCmIBJ8Jtc/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/jwCmIBJ8Jtc/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/jwCmIBJ8Jtc/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/jwCmIBJ8Jtc/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "freeCodeCamp.org",
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "Figma Tutorial for UI Design - Course for Beginners",
          "description": "In this Figma course, you will learn how to use Figma for UI Design. Figma is a vector graphics editor and prototyping tool.\n\n✏️ Joseph Brendan developed this course. Check out his YouTube channel: https://www.youtube.com/channel/UCETwb_AzizmhID0RjKULnBA\n\n❤️ Try interactive UI courses we love, right in your browser: https://scrimba.com/freeCodeCamp-UI-Design (Made possible by a grant from our friends at Scrimba)\n\n⭐️ Course Contents ⭐️\n⌨️ (0:00:00) Introduction\n⌨️ (0:00:55) Creating A Figma Account\n⌨️ (0:02:32) Creating & Naming A Figma Design File\n⌨️ (0:04:47) Creating Shapes In Figma\n⌨️ (0:07:16) Selection In Figma  \n⌨️ (0:12:02) Editing Shapes In Figma\n⌨️ (0:36:14) Introduction To Typography In Figma\n⌨️ (1:01:41) Design Tree In Figma\n⌨️ (1:06:43) First Design Task\n⌨️ (1:20:44) Colors In Figma\n⌨️ (1:44:22) Drawing Tools In Figma\n⌨️ (1:49:20) Margin And Padding In UI UX Design\n⌨️ (1:56:08) Figma AutoLayout\n⌨️ (2:13:48) Formatting Principles In Figma\n⌨️ (2:34:32) Figma Constraints And Resizing\n⌨️ (2:51:11) Website Design in Figma\n⌨️ (2:55:52) Jakob's Principle Of Design\n⌨️ (3:00:25) Introduction to Styles and components\n⌨️ (3:25:29) Figma Component Variants\n⌨️ (3:36:18) Layout Design & Configuration For Websites in Figma\n⌨️ (3:40:07) Layout Grids In Figma\n⌨️ (4:01:22) Introduction To Responsive Design\n⌨️ (4:07:32) Material Design Guide\n⌨️ (6:26:24) Introduction To Tailwind UI\n⌨️ (6:28:24) Tailwind UI Design Project\n⌨️ (7:25:45) Responsive Landing Page Design Project\n⌨️ (8:45:54) Designing Mobile Apps\n⌨️ (8:56:47) Iconography In Figma\n⌨️ (9:02:32) Boolean Groups\n⌨️ (9:09:52) Figma Tokens\n⌨️ (9:18:29) Animation In Figma With Figmotion\n⌨️ (9:36:29) Mobile Design Project\n\n🎉 Thanks to our Champion and Sponsor supporters:\n👾 Raymond Odero\n👾 Agustín Kussrow\n👾 aldo ferretti\n👾 Otis Morgan\n👾 DeezMaster\n\n--\n\nLearn to code for free and get a developer job: https://www.freecodecamp.org\n\nRead hundreds of articles on programming: https://freecodecamp.org/news"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT10H16M51S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "2010863",
        "likeCount": "43299",
        "favoriteCount": "0",
        "commentCount": "1627"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "LAwZ7a2Vagfl9d8fKpSatTTRFxA",
      "id": "bI6q16ffdgQ",
      "snippet": {
        "publishedAt": "2023-10-05T12:28:41Z",
        "channelId": "UCZknyXD-6tETm9aN8GQCi8g",
        "title": "How to use Figma?",
        "description": "🍿 Watch rest of the Figma Course - https://youtube.com/playlist?list=PLlHtucAD9KT19ckHqXpPSStZOyDSq9AW-&si=LFheokCYSCAUTm-G\n\nMost Figma courses on the internet are superficial.\n\nThey just cover the basic features and that's it without any discussion of use cases or practical implementation.\n\nWelcome to Foundations of Figma, an in-depth course on Figma design for beginners where we'll talk about -\n\n→ What is Figma?\n→ How to use Figma?\n\nIncluding all the basics of Figma including helpful tips and tricks that you need to know to get started on designing websites and apps on Figma in the industry. \n\nThis is the most practical and actionable Figma course you'll find on the internet with proper homework and resources at the end of every video.\n\nWatch the entire playlist - https://youtube.com/playlist?list=PLlHtucAD9KT19ckHqXpPSStZOyDSq9AW-&si=jatIQbCn5bJMIkjQ\n\n🌏 Keep up with Design and AI:\n🔗 https://www.instagram.com/anshmehra.in/\n🔗 https://www.anshmehra.com/\n🔗 https://medium.com/ansh-mehra\n\n🚀 Complete Roadmap to a UX Design Career:\n→ https://learnuiux.in/\n\n🏆 Learn about Prompting and AI Tools:\n→ https://www.howtoprompt.in/\n\nResources mentioned in the video 👇🏽\n\n🔌 Figma Help Centre: \nhttps://help.figma.com/hc/en-us\n\n🔌 Sorter Plugin:\nhttps://www.figma.com/community/plugin/742038190980789811/sorter\n\n🔌 Figma Web and App Design Type Styles & UI Typography Systems on Figma | UX Design System Tutorial:\nhttps://youtu.be/HQvOF7TK7hg?si=Wbb6nNbnklACr2sf\n\n🔌 Step by Step Roadmap for how to become a UX Designer (Updated 2023)\nhttps://youtu.be/cwPU547bCDs?si=Tjwm_6zIXgNlOWLB\n\n🔌 is this the end of UX Design? Will AI take over soon?\nhttps://youtu.be/S-0StqUhwn0?si=J9Tg8FYikw3gfSc0\n\n🔌 How to use Notion - Beginners Tutorial (2023)\nhttps://youtu.be/eGhbFL-kwt4?si=E8bahI42WMyxGmBP\n\n🔌 What is UX/UI Design? Learn Figma for free in Hindi/English\nhttps://youtube.com/playlist?list=PLlHtucAD9KT0bD44BokShkbSWO6Wsj4BC&si=i6-tgc_CxW2nHMnv\n\n⚡️ Checkout Zuddl (Events hosting platform for Conferences and Marketers)\n→ https://www.zuddl.com/\n\nTimestamps\n0:00 - Intro\n0:40 - Course Syllabus\n2:15 - Video Overview\n2:40 - 1. Basics of Figma UI\n27:47 - 2. Sidebar & Canvas Features\n1:14:47 - 3. Practical Implementation\n1:14:56 - Figma Community\n1:18:36 - Free Resources\n1:19:36 - Homework for Upskilling\n\nComment your reviews here or on Twitter (@AnshMehraaa) or share a story on Instagram (@anshmehra.in)",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/bI6q16ffdgQ/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/bI6q16ffdgQ/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/bI6q16ffdgQ/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/bI6q16ffdgQ/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/bI6q16ffdgQ/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "The Cutting Edge School",
        "tags": [
          "ansh mehra",
          "anshmehra",
          "uxui design",
          "ux design",
          "ui design",
          "ux design free course",
          "ui design free course"
        ],
        "categoryId": "24",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "How to use Figma?",
          "description": "🍿 Watch rest of the Figma Course - https://youtube.com/playlist?list=PLlHtucAD9KT19ckHqXpPSStZOyDSq9AW-&si=LFheokCYSCAUTm-G\n\nMost Figma courses on the internet are superficial.\n\nThey just cover the basic features and that's it without any discussion of use cases or practical implementation.\n\nWelcome to Foundations of Figma, an in-depth course on Figma design for beginners where we'll talk about -\n\n→ What is Figma?\n→ How to use Figma?\n\nIncluding all the basics of Figma including helpful tips and tricks that you need to know to get started on designing websites and apps on Figma in the industry. \n\nThis is the most practical and actionable Figma course you'll find on the internet with proper homework and resources at the end of every video.\n\nWatch the entire playlist - https://youtube.com/playlist?list=PLlHtucAD9KT19ckHqXpPSStZOyDSq9AW-&si=jatIQbCn5bJMIkjQ\n\n🌏 Keep up with Design and AI:\n🔗 https://www.instagram.com/anshmehra.in/\n🔗 https://www.anshmehra.com/\n🔗 https://medium.com/ansh-mehra\n\n🚀 Complete Roadmap to a UX Design Career:\n→ https://learnuiux.in/\n\n🏆 Learn about Prompting and AI Tools:\n→ https://www.howtoprompt.in/\n\nResources mentioned in the video 👇🏽\n\n🔌 Figma Help Centre: \nhttps://help.figma.com/hc/en-us\n\n🔌 Sorter Plugin:\nhttps://www.figma.com/community/plugin/742038190980789811/sorter\n\n🔌 Figma Web and App Design Type Styles & UI Typography Systems on Figma | UX Design System Tutorial:\nhttps://youtu.be/HQvOF7TK7hg?si=Wbb6nNbnklACr2sf\n\n🔌 Step by Step Roadmap for how to become a UX Designer (Updated 2023)\nhttps://youtu.be/cwPU547bCDs?si=Tjwm_6zIXgNlOWLB\n\n🔌 is this the end of UX Design? Will AI take over soon?\nhttps://youtu.be/S-0StqUhwn0?si=J9Tg8FYikw3gfSc0\n\n🔌 How to use Notion - Beginners Tutorial (2023)\nhttps://youtu.be/eGhbFL-kwt4?si=E8bahI42WMyxGmBP\n\n🔌 What is UX/UI Design? Learn Figma for free in Hindi/English\nhttps://youtube.com/playlist?list=PLlHtucAD9KT0bD44BokShkbSWO6Wsj4BC&si=i6-tgc_CxW2nHMnv\n\n⚡️ Checkout Zuddl (Events hosting platform for Conferences and Marketers)\n→ https://www.zuddl.com/\n\nTimestamps\n0:00 - Intro\n0:40 - Course Syllabus\n2:15 - Video Overview\n2:40 - 1. Basics of Figma UI\n27:47 - 2. Sidebar & Canvas Features\n1:14:47 - 3. Practical Implementation\n1:14:56 - Figma Community\n1:18:36 - Free Resources\n1:19:36 - Homework for Upskilling\n\nComment your reviews here or on Twitter (@AnshMehraaa) or share a story on Instagram (@anshmehra.in)"
        },
        "defaultAudioLanguage": "en-GB"
      },
      "contentDetails": {
        "duration": "PT1H24M21S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "907259",
        "likeCount": "24544",
        "favoriteCount": "0",
        "commentCount": "988"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "eftNeHgQkOtTbV1SLWqCkrQ14jU",
      "id": "FBDVzr0peO4",
      "snippet": {
        "publishedAt": "2025-09-29T15:00:06Z",
        "channelId": "UC_Dq0oUEi7uXhdUX8prunbw",
        "title": "Full App Design Course - High Fidelity UI/UX in Figma",
        "description": "This is my FULL High-Fidelity UI/UX mobile app design course in Figma. Originally published in 2021, it helped thousands of people to level up and sold over $80,000. \nNOW it's completely FREE here on youtube. \n\nWant to see another of my courses about how to make the best UI designer portfolio? When we reach 400 comments and 1500 likes I'll drop another gem for FREE! \n\nYou can also purchase my PRO course for mid/senior designers, freelancers and agency owners - this is my BEST work so far: \nhttps://hype4academy.gumroad.com/l/ai2025 \n\nVisit my agency website to see our work:\nhttps://squareblack.com \n\nOr follow me on socials:\nhttps://x.com/michalmalewicz\nhttps://instagram.com/malewiczhype \n\nYeah you can also say it's a 5 hour long Figma tutorial on UI Design ;P \n\n==================== \n\n#course #ux #uidesign \n\n00:00:00 Intro in 2025\n00:02:33 Intro in 2020\n00:06:44 Accessibility vs High Fidelity UI Design\n00:09:39 Effects in UI Design (Shadows, Blurs, Gradients and more)\n00:52:58 Crafting beautiful UI design elements\n01:37:40 Login and Registration Design\n02:21:21 Lists and Cards UI Design\n02:31:45 Map Views in UI Design\n02:51:57 Navigation - tabs and hamburger menu UI Design\n03:19:23 Product detail view and profile page High Fidelity UI\n03:56:59 Popups, Modals, Onboarding UI Design\n04:31:00 Decoration UI Design\n05:22:24 Wrapping up the design",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/FBDVzr0peO4/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/FBDVzr0peO4/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/FBDVzr0peO4/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/FBDVzr0peO4/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/FBDVzr0peO4/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Malewicz",
        "tags": [
          "ux",
          "ui",
          "design",
          "ux design",
          "ui design",
          "user experience",
          "uxui",
          "uiux",
          "figma",
          "sketch",
          "penpot",
          "adobe xd",
          "junior ux designer",
          "junior designer",
          "portfolio",
          "case study",
          "ux job",
          "ux jobs",
          "ux course",
          "free course",
          "free ui course",
          "free figma course",
          "free uxui course"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en-US",
        "localized": {
          "title": "Full App Design Course - High Fidelity UI/UX in Figma",
          "description": "This is my FULL High-Fidelity UI/UX mobile app design course in Figma. Originally published in 2021, it helped thousands of people to level up and sold over $80,000. \nNOW it's completely FREE here on youtube. \n\nWant to see another of my courses about how to make the best UI designer portfolio? When we reach 400 comments and 1500 likes I'll drop another gem for FREE! \n\nYou can also purchase my PRO course for mid/senior designers, freelancers and agency owners - this is my BEST work so far: \nhttps://hype4academy.gumroad.com/l/ai2025 \n\nVisit my agency website to see our work:\nhttps://squareblack.com \n\nOr follow me on socials:\nhttps://x.com/michalmalewicz\nhttps://instagram.com/malewiczhype \n\nYeah you can also say it's a 5 hour long Figma tutorial on UI Design ;P \n\n==================== \n\n#course #ux #uidesign \n\n00:00:00 Intro in 2025\n00:02:33 Intro in 2020\n00:06:44 Accessibility vs High Fidelity UI Design\n00:09:39 Effects in UI Design (Shadows, Blurs, Gradients and more)\n00:52:58 Crafting beautiful UI design elements\n01:37:40 Login and Registration Design\n02:21:21 Lists and Cards UI Design\n02:31:45 Map Views in UI Design\n02:51:57 Navigation - tabs and hamburger menu UI Design\n03:19:23 Product detail view and profile page High Fidelity UI\n03:56:59 Popups, Modals, Onboarding UI Design\n04:31:00 Decoration UI Design\n05:22:24 Wrapping up the design"
        },
        "defaultAudioLanguage": "en-US"
      },
      "contentDetails": {
        "duration": "PT5H28M12S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "true",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "13500",
        "likeCount": "837",
        "favoriteCount": "0",
        "commentCount": "51"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "17ytOeohSl8Ga3cWG4eDA1Rax7w",
      "id": "truRwcI7-kg",
      "snippet": {
        "publishedAt": "2025-05-06T13:17:00Z",
        "channelId": "UC8RaXfzsNk6e5ASy5nz9wOQ",
        "title": "UI/UX Design Full Course for Beginners 2025 | Lets Uncover",
        "description": "UI/UX Design Full Course for Beginners 2025 | Lets Uncover\n\nFollow Ali Hassan:\nInstagram: https://www.instagram.com/alihassanux\nYouTube: https://youtube.com/@alihassanux  \nLinkedin: http://linkedin.com/in/alihassanux\nFacebook: https://www.facebook.com/AliHassanUX \n\n⭐Buy Hosting and Domain: https://hostinger.com/letsuncover\n10% Discount Code: LETSUNCOVER\nWhatsApp Invoices: 03361176620\n\n⭐ Free Online Earning Courses: https://www.youtube.com/playlist?list=PLddXDOtiaRnGW9C-0CltXCPU4RFBzXcAZ\n\n👉Client Hunting Methodology Course: https://bit.ly/client-hunting \n👉Create RedotPay Account: https://url.hk/i/en/z6qny\n👉Paid Fiverr Course: https://bit.ly/3PwiDZe (1499/rs Only)\n👉Skillshare: https://bit.ly/3PkpVmw\n\n►  Business Email: ➜ Letsuncover@yahoo.com\n►  Website: ➜ https://letsuncover.pk/\n►  Linkedin: ➜ https://pk.linkedin.com/in/sobantariq\n►  Instagram:➜ https://www.instagram.com/theletsuncover/\n►  Twitter:➜ https://twitter.com/Lets_Uncover\n►  Facebook:➜ https://www.facebook.com/letsUncover\n►  Facebook Group:➜ https://www.facebook.com/groups/letsuncover\n\nDISCLAIMER: This video contains affiliate links, which means I receive a small commission on a purchase without additional cost. These commissions help me to create Free Educational Videos on YouTube.\n\n#uxuidesign #letsuncover",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/truRwcI7-kg/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/truRwcI7-kg/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/truRwcI7-kg/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/truRwcI7-kg/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/truRwcI7-kg/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Lets Uncover",
        "tags": [
          "ui ux design course",
          "ui ux design full course",
          "ux design course",
          "ux design",
          "ui ux course",
          "ui design",
          "ui ux design",
          "online ui ux course",
          "ux ui course",
          "best ui ux course",
          "ux design courses",
          "ui ux free course",
          "ux course",
          "ux design tutorial",
          "ux design tutorial for beginners",
          "ux design for beginners",
          "ui ux design tutorial for beginners",
          "free ux course",
          "ui course",
          "free ui course",
          "ux course for beginners",
          "ux designer",
          "ui design course",
          "lets uncover",
          "figma course"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "UI/UX Design Full Course for Beginners 2025 | Lets Uncover",
          "description": "UI/UX Design Full Course for Beginners 2025 | Lets Uncover\n\nFollow Ali Hassan:\nInstagram: https://www.instagram.com/alihassanux\nYouTube: https://youtube.com/@alihassanux  \nLinkedin: http://linkedin.com/in/alihassanux\nFacebook: https://www.facebook.com/AliHassanUX \n\n⭐Buy Hosting and Domain: https://hostinger.com/letsuncover\n10% Discount Code: LETSUNCOVER\nWhatsApp Invoices: 03361176620\n\n⭐ Free Online Earning Courses: https://www.youtube.com/playlist?list=PLddXDOtiaRnGW9C-0CltXCPU4RFBzXcAZ\n\n👉Client Hunting Methodology Course: https://bit.ly/client-hunting \n👉Create RedotPay Account: https://url.hk/i/en/z6qny\n👉Paid Fiverr Course: https://bit.ly/3PwiDZe (1499/rs Only)\n👉Skillshare: https://bit.ly/3PkpVmw\n\n►  Business Email: ➜ Letsuncover@yahoo.com\n►  Website: ➜ https://letsuncover.pk/\n►  Linkedin: ➜ https://pk.linkedin.com/in/sobantariq\n►  Instagram:➜ https://www.instagram.com/theletsuncover/\n►  Twitter:➜ https://twitter.com/Lets_Uncover\n►  Facebook:➜ https://www.facebook.com/letsUncover\n►  Facebook Group:➜ https://www.facebook.com/groups/letsuncover\n\nDISCLAIMER: This video contains affiliate links, which means I receive a small commission on a purchase without additional cost. These commissions help me to create Free Educational Videos on YouTube.\n\n#uxuidesign #letsuncover"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT3H8M15S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "185179",
        "likeCount": "5705",
        "favoriteCount": "0",
        "commentCount": "110"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "Nht1UgOb8WSLMOea7bU91UQABIk",
      "id": "BU_afT-aIn0",
      "snippet": {
        "publishedAt": "2024-02-18T16:12:45Z",
        "channelId": "UCCktnahuRFYIBtNnKT5IYyg",
        "title": "UI UX Design Full Course | UI UX Course | UI UX Training | Intellipaat",
        "description": "🔥Enroll for the UI / UX Design Course: https://intellipaat.com/ui-ux-design-course/\n\n#UIUXDesignFullCourse #UIUXCourse #UIUXTraining #Intellipaat\n\nThis UI UX Design Full Course covers all the important skill sets required to get you a UI UX  job! \n\nWe will begin this UI UX Course with an Introduction to UI UX Design. Then we will get introduced to Figma, how to do Brainstorming and Empathization in Figma, as well as how to use predefined templates and features from Figjam.\n\nNext, we will cover How to use inspiration from the internet to create design, how to recognize UI patterns, Atomic Design principles, and much more about UI and UX technicalities as highlighted on the screen. Finally, we will help you understand how you can create UI Components in Figma as well as some of the important  Figma PlugIns and their Use Cases.\n\nThis UI UX Course suits those who aspire to become UI UX Designers\n\n🔵 Following topics are covered in this UI UX Design Full Course: \n00:00:00 - Introduction to UI UX Course\n00:03:15 - Introduction to Figma Products\n00:37:46 - What is Affinity Map And How to Create?\n00:49:46 - Collaborative Power\n00:50:50 - Brainstorming & Empathization in Figma\n01:09:23 - Using Predefined Templates and Features in FigJam\n01:49:47 - Drawing Inspiration from the Internet\n02:10:56 - Atomic Design Principle\n02:28:38 - Principles of Good UI Design\n02:47:20 - UI Design Styles\n03:00:52 - What is a Wireframe?\n03:07:30 - Jakob's Law\n03:25:37 - Aesthetic Usability Effect\n03:33:10 - Hick's Law\n03:50:50 - Goal - Gradient Effect\n03:57:45 - Miller's Law\n04:08:26 - Serial Position Effect\n04:11:25 - Von Restroff Effect\n04:15:35 - Zeigarnik Effect\n04:22:52 - Law of Common Region\n04:24:58 - Gestalt Law of UX Designing\n04:38:14 - UI Designing Principles   \n05:02:00 - Drawing Inspiration from the Internet \n05:09:09 - Hands-on Session\n07:30:03 - Components in Figma \n07:56:42 - Figma Plugins & It’s Use Cases\n10:31:46 - UI UX Designing Interview Questions And Answers\n\n✅ What is a UI UX course?\nThe UI/UX Design Specialization brings a design-centric approach to user interface and user experience design and offers practical, skill-based instruction centered around a visual communications perspective, rather than one focused on marketing or programming alone.\n\n✅What is the UI UX design course for?\nThe UI/UX Design Specialization brings a design-centric approach to user interface and user experience design and offers practical, skill-based instruction centered around a visual communications perspective, rather than one focused on marketing or programming alone.\n\n➡️ About the Course\nBecome a UI/UX professional by building a strong UX portfolio with our UI UX Course in just 6 months!\n\nUI UX Design Course by iHUB, IIT Roorkee (An Innovation Hub of IIT Roorkee)\nLearn UI/UX from eminent IIT Faculty & Industry Experts\nGain Generative AI skills in the UI UX Industry\n2 Days Campus Immersion at IIT Roorkee\n\n➡️Who should take this course?\nWeb designers\nWeb developers\nProduct designers\nAnyone with a bachelor’s degree\nAnyone aspiring to pursue UX UI Design\n\n✅ Key Features - (Course Features)\n👉🏼50+ Live sessions across 6 months\n👉🏼250 Hrs of Applied Learning\n👉🏼30+ Industry Projects & Case Studies\n👉🏼Learn from IIT Faculty & Industry Practitioners\n👉🏼Top 2 performers per batch will receive INR 80,000 in fellowship*\n👉🏼Up to INR 50 lakhs startup Incubation Support*\n👉🏼24*7 Support\n👉🏼1:1 Mock Interview\n\n➡️ What’s Covered in This Program? -\nWhat’s Covered in This Program? -\n✅ PART - 1 Introduction to UI/UX Design, design process, and user research\n✅ PART - 2 Fundamentals of UI and UX design and how to Apply them\n✅ PART - 3 Polishing your UI/UX Design and Learning about the UX Industry\n✅ PART - 4 Getting Industry Ready\n\n📌 Do subscribe to Intellipaat channel & come across more relevant Tech content: https://goo.gl/hhsGWb\n\n▶️ Intellipaat Achievers Channel: https://www.youtube.com/@intellipaatachievers\n\n🚀 Intellipaat Advanced Certifications \n🌕 Advanced Certification in Cloud Computing: https://intellipaat.com/advanced-certification-cloud-computing/\n🌕 Advanced Certification in Data Science: https://intellipaat.com/advanced-certification-data-science-ai-ihub-iit-roorkee/\n🌕 Advanced Certification in Full Stack Web Development: https://intellipaat.com/web-development-certification/\n🌕 Advanced Certification in UI UX Design: https://intellipaat.com/UI-UX-course-iitm-pravartak/\n\n📌Website: https://intellipaat.com/ \n📌Facebook:https://www.facebook.com/intellipaatonline\n📌Telegram: https://t.me/s/Learn_with_Intellipaat \n📌Instagram: https://www.instagram.com/intellipaat \n📌LinkedIn: https://www.linkedin.com/company/intellipaat-software-solutions/\n📌Twitter: https://twitter.com/Intellipaat\n\n📚For more information, please write back to us at sales@intellipaat.com or call us at IND : +91-7022374614  US : 1-800-216-8930 (Toll Free)",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/BU_afT-aIn0/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/BU_afT-aIn0/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/BU_afT-aIn0/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/BU_afT-aIn0/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/BU_afT-aIn0/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Intellipaat",
        "tags": [
          "UI UX Design Full Course",
          "UI UX Course",
          "UI UX Training",
          "UI UX Free Course",
          "UI UX Tutorial",
          "UX Design Tutorial",
          "UX Design Course",
          "Learn UI UX",
          "UX Course",
          "UI Course",
          "UI UX Design Course",
          "UI UX Free Tutorial",
          "UI UX Tutorial For Beginners",
          "UX UI Course",
          "Free UX Course",
          "UX Design Tutorial For Beginners",
          "UX Design Courses",
          "UX Course For Beginners",
          "Best UI UX Course",
          "Free UI Course",
          "Online UI UX Course",
          "UX Design For Beginners",
          "UI UX Intellipaat",
          "Intellipaat"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "UI UX Design Full Course | UI UX Course | UI UX Training | Intellipaat",
          "description": "🔥Enroll for the UI / UX Design Course: https://intellipaat.com/ui-ux-design-course/\n\n#UIUXDesignFullCourse #UIUXCourse #UIUXTraining #Intellipaat\n\nThis UI UX Design Full Course covers all the important skill sets required to get you a UI UX  job! \n\nWe will begin this UI UX Course with an Introduction to UI UX Design. Then we will get introduced to Figma, how to do Brainstorming and Empathization in Figma, as well as how to use predefined templates and features from Figjam.\n\nNext, we will cover How to use inspiration from the internet to create design, how to recognize UI patterns, Atomic Design principles, and much more about UI and UX technicalities as highlighted on the screen. Finally, we will help you understand how you can create UI Components in Figma as well as some of the important  Figma PlugIns and their Use Cases.\n\nThis UI UX Course suits those who aspire to become UI UX Designers\n\n🔵 Following topics are covered in this UI UX Design Full Course: \n00:00:00 - Introduction to UI UX Course\n00:03:15 - Introduction to Figma Products\n00:37:46 - What is Affinity Map And How to Create?\n00:49:46 - Collaborative Power\n00:50:50 - Brainstorming & Empathization in Figma\n01:09:23 - Using Predefined Templates and Features in FigJam\n01:49:47 - Drawing Inspiration from the Internet\n02:10:56 - Atomic Design Principle\n02:28:38 - Principles of Good UI Design\n02:47:20 - UI Design Styles\n03:00:52 - What is a Wireframe?\n03:07:30 - Jakob's Law\n03:25:37 - Aesthetic Usability Effect\n03:33:10 - Hick's Law\n03:50:50 - Goal - Gradient Effect\n03:57:45 - Miller's Law\n04:08:26 - Serial Position Effect\n04:11:25 - Von Restroff Effect\n04:15:35 - Zeigarnik Effect\n04:22:52 - Law of Common Region\n04:24:58 - Gestalt Law of UX Designing\n04:38:14 - UI Designing Principles   \n05:02:00 - Drawing Inspiration from the Internet \n05:09:09 - Hands-on Session\n07:30:03 - Components in Figma \n07:56:42 - Figma Plugins & It’s Use Cases\n10:31:46 - UI UX Designing Interview Questions And Answers\n\n✅ What is a UI UX course?\nThe UI/UX Design Specialization brings a design-centric approach to user interface and user experience design and offers practical, skill-based instruction centered around a visual communications perspective, rather than one focused on marketing or programming alone.\n\n✅What is the UI UX design course for?\nThe UI/UX Design Specialization brings a design-centric approach to user interface and user experience design and offers practical, skill-based instruction centered around a visual communications perspective, rather than one focused on marketing or programming alone.\n\n➡️ About the Course\nBecome a UI/UX professional by building a strong UX portfolio with our UI UX Course in just 6 months!\n\nUI UX Design Course by iHUB, IIT Roorkee (An Innovation Hub of IIT Roorkee)\nLearn UI/UX from eminent IIT Faculty & Industry Experts\nGain Generative AI skills in the UI UX Industry\n2 Days Campus Immersion at IIT Roorkee\n\n➡️Who should take this course?\nWeb designers\nWeb developers\nProduct designers\nAnyone with a bachelor’s degree\nAnyone aspiring to pursue UX UI Design\n\n✅ Key Features - (Course Features)\n👉🏼50+ Live sessions across 6 months\n👉🏼250 Hrs of Applied Learning\n👉🏼30+ Industry Projects & Case Studies\n👉🏼Learn from IIT Faculty & Industry Practitioners\n👉🏼Top 2 performers per batch will receive INR 80,000 in fellowship*\n👉🏼Up to INR 50 lakhs startup Incubation Support*\n👉🏼24*7 Support\n👉🏼1:1 Mock Interview\n\n➡️ What’s Covered in This Program? -\nWhat’s Covered in This Program? -\n✅ PART - 1 Introduction to UI/UX Design, design process, and user research\n✅ PART - 2 Fundamentals of UI and UX design and how to Apply them\n✅ PART - 3 Polishing your UI/UX Design and Learning about the UX Industry\n✅ PART - 4 Getting Industry Ready\n\n📌 Do subscribe to Intellipaat channel & come across more relevant Tech content: https://goo.gl/hhsGWb\n\n▶️ Intellipaat Achievers Channel: https://www.youtube.com/@intellipaatachievers\n\n🚀 Intellipaat Advanced Certifications \n🌕 Advanced Certification in Cloud Computing: https://intellipaat.com/advanced-certification-cloud-computing/\n🌕 Advanced Certification in Data Science: https://intellipaat.com/advanced-certification-data-science-ai-ihub-iit-roorkee/\n🌕 Advanced Certification in Full Stack Web Development: https://intellipaat.com/web-development-certification/\n🌕 Advanced Certification in UI UX Design: https://intellipaat.com/UI-UX-course-iitm-pravartak/\n\n📌Website: https://intellipaat.com/ \n📌Facebook:https://www.facebook.com/intellipaatonline\n📌Telegram: https://t.me/s/Learn_with_Intellipaat \n📌Instagram: https://www.instagram.com/intellipaat \n📌LinkedIn: https://www.linkedin.com/company/intellipaat-software-solutions/\n📌Twitter: https://twitter.com/Intellipaat\n\n📚For more information, please write back to us at sales@intellipaat.com or call us at IND : +91-7022374614  US : 1-800-216-8930 (Toll Free)"
        },
        "defaultAudioLanguage": "en-IN"
      },
      "contentDetails": {
        "duration": "PT10H50M35S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": false,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "663240",
        "likeCount": "17072",
        "favoriteCount": "0",
        "commentCount": "134"
      }
    }
  ],
  "pageInfo": {
    "totalResults": 15,
    "resultsPerPage": 15
  }
}
","status":200,"url":"https://www.googleapis.com/youtube/v3/videos?part=snippet%2CcontentDetails%2Cstatistics&id=c9Wg6Cb_YlU%2CMBblN98-5lg%2ChqPP6cP1Im0%2CkbZejnPXyLM%2C1SNZRCVNizg%2CWylVZzSsavg%2CjdmX8ZIMRUU%2CYIr9nZyh1ls%2C2eWdccBjZNs%2CHltyd0MTsZk%2CjwCmIBJ8Jtc%2CbI6q16ffdgQ%2CFBDVzr0peO4%2CtruRwcI7-kg%2CBU_afT-aIn0&key=AIzaSyAeZAsOW2kBeNqsdozdSNpajJeUOXsJ2fs"},"revalidate":3600,"tags":[]}