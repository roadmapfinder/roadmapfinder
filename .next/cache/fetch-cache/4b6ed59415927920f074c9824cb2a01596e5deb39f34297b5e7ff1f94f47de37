{"kind":"FETCH","data":{"headers":{"content-encoding":"gzip","content-type":"application/json; charset=UTF-8","date":"Thu, 23 Oct 2025 11:10:40 GMT","server":"scaffolding on HTTPServer2","transfer-encoding":"chunked","vary":"Origin, X-Origin, Referer","x-content-type-options":"nosniff","x-frame-options":"SAMEORIGIN","x-xss-protection":"0"},"body":"{
  "kind": "youtube#videoListResponse",
  "etag": "-Jt9kqTfihlvh_3JObIkOUqyF30",
  "items": [
    {
      "kind": "youtube#video",
      "etag": "nS2Jyidj718xYy9JHd-gDL46eoA",
      "id": "8Xg7E9shq0U",
      "snippet": {
        "publishedAt": "2022-12-07T16:01:04Z",
        "channelId": "UC8butISFwT-Wl7EV0hUK0BQ",
        "title": "Swift Programming Tutorial – Full Course for Beginners",
        "description": "Learn the Swift programming language in this full tutorial for beginners. \n\nIn this video, we will go through every modern aspect of Swift as a programming language including, variables, constants, functions, structures, classes, protocols. extensions, asynchronous programming, generics and much more. This video will lay the foundation for learning Swift for those who are not familiar with Swift already.\n\nYou can follow along with this video on macOS, Linux and Windows. On Linux and Windows you will need to download the Swift toolchain from https://swift.org and run the examples manually by invoking Swift from Terminal using your favorite code editor such as Visual Studio Code.\n\n✏️ Vandad Nahavandipoor created this course. \nVandad on YouTube: https://youtube.com/c/vandadnp\nVandad on Twitter: https://twitter.com/vandadnp\nVandad on LinkedIn: https://linkedin.com/in/vandadnp\n\n⭐️ Contents ⭐️\n⌨️ (0:00:00) Introduction\n⌨️ (0:06:49) Variables\n⌨️ (0:29:46) Operators\n⌨️ (0:46:55) If and else\n⌨️ (1:05:08) Functions\n⌨️ (1:23:58) Closures\n⌨️ (1:52:08) Structures\n⌨️ (2:17:58) Enumerations\n⌨️ (2:59:21) Classes\n⌨️ (3:24:51) Protocols\n⌨️ (3:47:48) Extensions\n⌨️ (4:00:06) Generics\n⌨️ (4:32:44) Optionals\n⌨️ (4:53:39) Error Handling\n⌨️ (5:39:35) Collections\n⌨️ (6:17:17) Equality and Hashing\n⌨️ (6:38:46) Custom Operators\n⌨️ (6:50:53) Asynchronous Programming\n⌨️ (7:04:38) Outro\n\n🎉 Thanks to our Champion and Sponsor supporters:\n👾 Nattira Maneerat\n👾 Heather Wcislo\n👾 Serhiy Kalinets\n👾 Erdeniz Unvan\n👾 Justin Hual\n👾 Agustín Kussrow\n👾 Otis Morgan\n\n--\n\nLearn to code for free and get a developer job: https://www.freecodecamp.org\n\nRead hundreds of articles on programming: https://freecodecamp.org/news \n\n❤️ Support for this channel comes from our friends at Scrimba – the coding platform that's reinvented interactive learning: https://scrimba.com/freecodecamp",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/8Xg7E9shq0U/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/8Xg7E9shq0U/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/8Xg7E9shq0U/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/8Xg7E9shq0U/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/8Xg7E9shq0U/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "freeCodeCamp.org",
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "Swift Programming Tutorial – Full Course for Beginners",
          "description": "Learn the Swift programming language in this full tutorial for beginners. \n\nIn this video, we will go through every modern aspect of Swift as a programming language including, variables, constants, functions, structures, classes, protocols. extensions, asynchronous programming, generics and much more. This video will lay the foundation for learning Swift for those who are not familiar with Swift already.\n\nYou can follow along with this video on macOS, Linux and Windows. On Linux and Windows you will need to download the Swift toolchain from https://swift.org and run the examples manually by invoking Swift from Terminal using your favorite code editor such as Visual Studio Code.\n\n✏️ Vandad Nahavandipoor created this course. \nVandad on YouTube: https://youtube.com/c/vandadnp\nVandad on Twitter: https://twitter.com/vandadnp\nVandad on LinkedIn: https://linkedin.com/in/vandadnp\n\n⭐️ Contents ⭐️\n⌨️ (0:00:00) Introduction\n⌨️ (0:06:49) Variables\n⌨️ (0:29:46) Operators\n⌨️ (0:46:55) If and else\n⌨️ (1:05:08) Functions\n⌨️ (1:23:58) Closures\n⌨️ (1:52:08) Structures\n⌨️ (2:17:58) Enumerations\n⌨️ (2:59:21) Classes\n⌨️ (3:24:51) Protocols\n⌨️ (3:47:48) Extensions\n⌨️ (4:00:06) Generics\n⌨️ (4:32:44) Optionals\n⌨️ (4:53:39) Error Handling\n⌨️ (5:39:35) Collections\n⌨️ (6:17:17) Equality and Hashing\n⌨️ (6:38:46) Custom Operators\n⌨️ (6:50:53) Asynchronous Programming\n⌨️ (7:04:38) Outro\n\n🎉 Thanks to our Champion and Sponsor supporters:\n👾 Nattira Maneerat\n👾 Heather Wcislo\n👾 Serhiy Kalinets\n👾 Erdeniz Unvan\n👾 Justin Hual\n👾 Agustín Kussrow\n👾 Otis Morgan\n\n--\n\nLearn to code for free and get a developer job: https://www.freecodecamp.org\n\nRead hundreds of articles on programming: https://freecodecamp.org/news \n\n❤️ Support for this channel comes from our friends at Scrimba – the coding platform that's reinvented interactive learning: https://scrimba.com/freecodecamp"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT7H5M17S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "483630",
        "likeCount": "10348",
        "favoriteCount": "0",
        "commentCount": "227"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "yUa1WuD1BHzCDSG4JqY9adA2K9U",
      "id": "CwA1VWP0Ldw",
      "snippet": {
        "publishedAt": "2022-10-08T14:42:34Z",
        "channelId": "UCbTw29mcP12YlTt1EpUaVJw",
        "title": "Swift Programming Tutorial | FULL COURSE | Absolute Beginner",
        "description": "My Swift & SwiftUI Courses - https://seanallen.teachable.com/?video=CwA1VWP0Ldw\nSwift News Newsletter - https://swiftnews.kit.com/newsletter\n\nNeed help with something specific? Book a call with me:\nhttps://seanallen.teachable.com/p/call?video=CwA1VWP0Ldw\n\nWhen you've finished this course, try my SwiftUI Fundamentals course which is now free:\nhttps://www.youtube.com/watch?v=b1oC7sLIgpI\n\nMy Formula 1 App:\nhttps://apps.apple.com/app/formula-widgets-push-push/id6744127751\n \nMy other iOS Developer Courses\nhttps://seanallen.teachable.com/\n\nCard Deck Assets:\nhttps://www.dropbox.com/sh/ygwlohcppk0c8dv/AACDU3NSO8oK8i74SNXDY68Ta?dl=0\n\nSwiftUI Video Thumbnail Assets:\nhttps://www.dropbox.com/sh/cpp1ibizedt6f9t/AABJHoTqiQf_-A1n1aMUpKpla?dl=0\n\nhttps://seanallen.co\n\nTwitter:\nhttps://twitter.com/seanallen_dev\n\nHired.com:\nhttps://hired.com/x/1n01g\n\nBook and learning recommendations that help out the channel if you decide to purchase (Affiliate Links):\n\nPaul Hudson's Hacking With Swift:\nhttps://gumroad.com/a/762098803\n\nDonny Wals - Combine:\nhttps://gumroad.com/a/909014131\n\nMark Moeyken’s SwiftUI Books:\nwww.bigmountainstudio.com/swiftui-views-book/fzc51\n\nObjc.io Books (Thinking in SwiftUI & Advanced Swift):\nhttps://gumroad.com/a/656585843\n\nRay Wenderlich Books:\nhttps://store.raywenderlich.com/a/20866/link/1\n\nCurriculum Timestamps:\n00:00:00 - Course overview\n00:05:36 - I was just like you\n00:13:48 - What is Xcode?\n00:19:47 - SwiftUI or UIKit (2020)\n00:22:27 - SwiftUI or UIKit (2021)\n00:26:00 - Intro to Swift Language\n00:33:30 - Swift Types\n00:37:15 - Variables\n00:42:10 - Array\n00:49:37 - Set\n00:57:59 - Dictionary\n01:02:25 - Functions\n01:14:50 - if / else\n01:21:15 - For Loops\n01:30:29 - Enum\n01:40:27 - Switch Statement\n01:48:49 - Operators\n02:01:45 - Optionals\n02:12:46 - Self\n02:15:27 - Class\n02:23:36 - Inheritance\n02:31:31 - Struct\n02:36:45 - Extension\n02:40:30 - Apple Developer Program\n02:43:54 - Tour of Xcode\n02:58:56 - What’s New in Xcode 12\n03:08:07 - What’s New in Xcode 13\n03:24:59 - What’s New in Xcode 14\n03:34:54 - What is Auto Layout?\n03:38:38 - What is UIKit?\n03:55:05 - Storyboard vs. Programmatic UI\n04:01:16 - FizzBuzz Challenge\n04:09:27 - Colors App Intro\n04:10:39 - Colors App - Navigation\n04:25:02 - Colors App - UITableView\n04:36:37 - Colors App - Code\n05:05:56 - Card Workout App - Intro\n05:08:53 - Card Workout App - Storyboard UI\n05:21:20 - Card Workout App - IBOutlets\n05:41:49 - Card Workout App - Storyboard Logic\n05:59:27 - iOS 15 Storyboard Buttons\n06:08:05 - Programmatic UI - Setup\n06:17:37 - Programmatic UIButtons\n06:25:55 - Card Workout App - Card Selection\n06:44:29 - Card Workout App - Rules Screen\n07:04:07 - Card Workout App - Logic\n07:13:52 - iOS 15 Update - UIButtons\n07:24:24 - SwiftUI Overview\n07:34:06 - SwiftUI Example\n08:00:29 - General Knowledge Section Intro\n08:01:57 - How Apps Work\n08:05:34 - What is an API?\n08:10:00 - What is Version Control?\n08:19:34 - 3rd Party Libraries\n08:25:56 - What are Edge Cases?\n08:30:55 - iOS Dev Career Paths\n08:36:48 - World of iOS Dev\n08:38:31 - Why WWDC is the best\n08:45:02 - Twitter will change your career\n08:55:30 - Swift blogs & websites\n09:03:47 - Book Recommendations\n09:10:40 - Podcast Recommendations\n09:20:23 - Next Steps\n09:26:18 - Thank You!\n09:29:04 - Bonus: Homeless to $130k iOS Dev\n09:46:21 - Bonus: 37 Tips for Jr. Developers\n10:01:04 - Bonus: I’m an Average Developer\n10:06:34 - Bonus: 9 Things I Wish I Knew When I Started\n10:16:46 - Bonus: How to Gain Confidence as a Dev\n10:25:56 - Bonus: The 90/90 Rule\n\n#swift #softwaredeveloper #iosdeveloper",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/CwA1VWP0Ldw/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/CwA1VWP0Ldw/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/CwA1VWP0Ldw/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/CwA1VWP0Ldw/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/CwA1VWP0Ldw/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Sean Allen",
        "tags": [
          "Swift",
          "Swift Tutorial",
          "iOS Developer",
          "iOS Development",
          "Swift app tutorial",
          "swift beginner",
          "beginner swift",
          "swift beginner tutorial",
          "swift beginner app",
          "swift beginner course",
          "beginner swift programming",
          "beginner swift tutorial",
          "beginner swift projects",
          "iOS swift beginner",
          "iOS development course",
          "iOS development for beginners",
          "swift first app",
          "Swift programming language",
          "What is swift",
          "Xcode for beginners",
          "Swift programming course",
          "Swift for beginners",
          "iOS dev for beginners"
        ],
        "categoryId": "28",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "Swift Programming Tutorial | FULL COURSE | Absolute Beginner",
          "description": "My Swift & SwiftUI Courses - https://seanallen.teachable.com/?video=CwA1VWP0Ldw\nSwift News Newsletter - https://swiftnews.kit.com/newsletter\n\nNeed help with something specific? Book a call with me:\nhttps://seanallen.teachable.com/p/call?video=CwA1VWP0Ldw\n\nWhen you've finished this course, try my SwiftUI Fundamentals course which is now free:\nhttps://www.youtube.com/watch?v=b1oC7sLIgpI\n\nMy Formula 1 App:\nhttps://apps.apple.com/app/formula-widgets-push-push/id6744127751\n \nMy other iOS Developer Courses\nhttps://seanallen.teachable.com/\n\nCard Deck Assets:\nhttps://www.dropbox.com/sh/ygwlohcppk0c8dv/AACDU3NSO8oK8i74SNXDY68Ta?dl=0\n\nSwiftUI Video Thumbnail Assets:\nhttps://www.dropbox.com/sh/cpp1ibizedt6f9t/AABJHoTqiQf_-A1n1aMUpKpla?dl=0\n\nhttps://seanallen.co\n\nTwitter:\nhttps://twitter.com/seanallen_dev\n\nHired.com:\nhttps://hired.com/x/1n01g\n\nBook and learning recommendations that help out the channel if you decide to purchase (Affiliate Links):\n\nPaul Hudson's Hacking With Swift:\nhttps://gumroad.com/a/762098803\n\nDonny Wals - Combine:\nhttps://gumroad.com/a/909014131\n\nMark Moeyken’s SwiftUI Books:\nwww.bigmountainstudio.com/swiftui-views-book/fzc51\n\nObjc.io Books (Thinking in SwiftUI & Advanced Swift):\nhttps://gumroad.com/a/656585843\n\nRay Wenderlich Books:\nhttps://store.raywenderlich.com/a/20866/link/1\n\nCurriculum Timestamps:\n00:00:00 - Course overview\n00:05:36 - I was just like you\n00:13:48 - What is Xcode?\n00:19:47 - SwiftUI or UIKit (2020)\n00:22:27 - SwiftUI or UIKit (2021)\n00:26:00 - Intro to Swift Language\n00:33:30 - Swift Types\n00:37:15 - Variables\n00:42:10 - Array\n00:49:37 - Set\n00:57:59 - Dictionary\n01:02:25 - Functions\n01:14:50 - if / else\n01:21:15 - For Loops\n01:30:29 - Enum\n01:40:27 - Switch Statement\n01:48:49 - Operators\n02:01:45 - Optionals\n02:12:46 - Self\n02:15:27 - Class\n02:23:36 - Inheritance\n02:31:31 - Struct\n02:36:45 - Extension\n02:40:30 - Apple Developer Program\n02:43:54 - Tour of Xcode\n02:58:56 - What’s New in Xcode 12\n03:08:07 - What’s New in Xcode 13\n03:24:59 - What’s New in Xcode 14\n03:34:54 - What is Auto Layout?\n03:38:38 - What is UIKit?\n03:55:05 - Storyboard vs. Programmatic UI\n04:01:16 - FizzBuzz Challenge\n04:09:27 - Colors App Intro\n04:10:39 - Colors App - Navigation\n04:25:02 - Colors App - UITableView\n04:36:37 - Colors App - Code\n05:05:56 - Card Workout App - Intro\n05:08:53 - Card Workout App - Storyboard UI\n05:21:20 - Card Workout App - IBOutlets\n05:41:49 - Card Workout App - Storyboard Logic\n05:59:27 - iOS 15 Storyboard Buttons\n06:08:05 - Programmatic UI - Setup\n06:17:37 - Programmatic UIButtons\n06:25:55 - Card Workout App - Card Selection\n06:44:29 - Card Workout App - Rules Screen\n07:04:07 - Card Workout App - Logic\n07:13:52 - iOS 15 Update - UIButtons\n07:24:24 - SwiftUI Overview\n07:34:06 - SwiftUI Example\n08:00:29 - General Knowledge Section Intro\n08:01:57 - How Apps Work\n08:05:34 - What is an API?\n08:10:00 - What is Version Control?\n08:19:34 - 3rd Party Libraries\n08:25:56 - What are Edge Cases?\n08:30:55 - iOS Dev Career Paths\n08:36:48 - World of iOS Dev\n08:38:31 - Why WWDC is the best\n08:45:02 - Twitter will change your career\n08:55:30 - Swift blogs & websites\n09:03:47 - Book Recommendations\n09:10:40 - Podcast Recommendations\n09:20:23 - Next Steps\n09:26:18 - Thank You!\n09:29:04 - Bonus: Homeless to $130k iOS Dev\n09:46:21 - Bonus: 37 Tips for Jr. Developers\n10:01:04 - Bonus: I’m an Average Developer\n10:06:34 - Bonus: 9 Things I Wish I Knew When I Started\n10:16:46 - Bonus: How to Gain Confidence as a Dev\n10:25:56 - Bonus: The 90/90 Rule\n\n#swift #softwaredeveloper #iosdeveloper"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT10H32M30S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "656564",
        "likeCount": "15754",
        "favoriteCount": "0",
        "commentCount": "871"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "6mn2BUiRdVw3AltJLnfObsi3f4c",
      "id": "n5X_V81OYnQ",
      "snippet": {
        "publishedAt": "2021-10-15T21:23:32Z",
        "channelId": "UCmJi5RdDLgzvkl3Ly0DRMlQ",
        "title": "Learn the Essentials of Swift in one hour",
        "description": "This video walks through all the essential language features of Swift in just under one hour, and is aimed at two groups of people: folks who have completed up to day 14 of the 100 Days of SwiftUI and want to review what they've learned, and developers with extensive experience of other languages who want to transfer their knowledge to Swift quickly.\n\nThis video is very fast! If you're struggling to understand concepts such as arrays, functions, closures, and similar, you should consider following the videos in my 100 Days of SwiftUI course at https://www.hackingwithswift.com/100/swiftui – they are much slower, providing much more explanation and example code along the way.\n\n00:00 Introduction\n01:21 Creating constants and variables, \n01:59 Strings\n03:38 Integers\n04:38 Decimals\n05:01 Booleans\n05:23 Joining strings \n05:59 Arrays\n07:39 Dictionaries\n08:16 Sets\n09:10 Enums\n09:40 Type annotations\n11:50 Conditions\n12:46 Switch statements\n13:25 The ternary conditional operator\n13:55 Loops\n16:24 Functions\n17:39 Returning multiple values from functions\n18:45 Customizing parameter labels\n19:52 Providing default values for parameters\n20:38 Handling errors in functions\n22:46 Closures\n25:02 Trailing closures and shorthand syntax\n26:22 Structs\n27:43 Computed properties\n28:37 Property observers\n29:16 Custom initializers\n30:10 Access control\n31:56 Static properties and methods\n32:42 Classes\n39:49 Protocols\n43:49 Extensions\n46:00 Protocol extensions\n49:31 Optionals\n49:31 Unwrapping optionals with guard\n51:34 Nil coalescing\n53:06 Optional chaining\n54:09 Optional try?\n55:37 Wrap up\n56:52 Dog reward",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/n5X_V81OYnQ/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/n5X_V81OYnQ/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/n5X_V81OYnQ/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/n5X_V81OYnQ/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/n5X_V81OYnQ/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Paul Hudson",
        "categoryId": "28",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "Learn the Essentials of Swift in one hour",
          "description": "This video walks through all the essential language features of Swift in just under one hour, and is aimed at two groups of people: folks who have completed up to day 14 of the 100 Days of SwiftUI and want to review what they've learned, and developers with extensive experience of other languages who want to transfer their knowledge to Swift quickly.\n\nThis video is very fast! If you're struggling to understand concepts such as arrays, functions, closures, and similar, you should consider following the videos in my 100 Days of SwiftUI course at https://www.hackingwithswift.com/100/swiftui – they are much slower, providing much more explanation and example code along the way.\n\n00:00 Introduction\n01:21 Creating constants and variables, \n01:59 Strings\n03:38 Integers\n04:38 Decimals\n05:01 Booleans\n05:23 Joining strings \n05:59 Arrays\n07:39 Dictionaries\n08:16 Sets\n09:10 Enums\n09:40 Type annotations\n11:50 Conditions\n12:46 Switch statements\n13:25 The ternary conditional operator\n13:55 Loops\n16:24 Functions\n17:39 Returning multiple values from functions\n18:45 Customizing parameter labels\n19:52 Providing default values for parameters\n20:38 Handling errors in functions\n22:46 Closures\n25:02 Trailing closures and shorthand syntax\n26:22 Structs\n27:43 Computed properties\n28:37 Property observers\n29:16 Custom initializers\n30:10 Access control\n31:56 Static properties and methods\n32:42 Classes\n39:49 Protocols\n43:49 Extensions\n46:00 Protocol extensions\n49:31 Optionals\n49:31 Unwrapping optionals with guard\n51:34 Nil coalescing\n53:06 Optional chaining\n54:09 Optional try?\n55:37 Wrap up\n56:52 Dog reward"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT58M14S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": false,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "264467",
        "likeCount": "7969",
        "favoriteCount": "0",
        "commentCount": "238"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "NSkSCU4zEyYWPUruKKGucAOf7RM",
      "id": "b1oC7sLIgpI",
      "snippet": {
        "publishedAt": "2023-09-06T11:56:06Z",
        "channelId": "UCbTw29mcP12YlTt1EpUaVJw",
        "title": "SwiftUI Fundamentals | FULL COURSE | Beginner Friendly",
        "description": "My Latest SwiftUI Courses - https://seanallen.teachable.com/?video=b1oC7sLIgpI\nSwift News Newsletter - https://swiftnews.kit.com/newsletter\n\nIn this 12 hour course we build 4 apps that ramp up in difficulty. The first 3 apps are quite simple, but the 4th and final app grows substantially in size and challenge. See the timestamps at the bottom of the description for the full curriculum.\n\nNeed help with something specific? Book a call with me:\nhttps://seanallen.teachable.com/p/call?video=b1oC7sLIgpI\n\nThe course has been updated for iOS 15 and iOS 16. Check out my latest, up to date courses at https://seanallen.teachable.com/?video=b1oC7sLIgpI\n\nApp 1 Weather: \nWe learn the absolute basics of SwiftUI to build the user interface of a weather app. If you have experience with SwiftUI, feel free to skip this one as it's very beginner friendly.\n\nWeather Completed Source Code (Updated for iOS 16):\nhttps://www.dropbox.com/scl/fo/sh092hs8fnwxwa169kkre/h?rlkey=5l9h82p95con0bu9usc2s1wg3&dl=0\n\nApp 2 - Apple Frameworks: \nWe learn to build a Grid and pass data from our main view to a detail view.\n\nFramework icon images:\nhttps://www.dropbox.com/scl/fo/lijj23qlv9eiblta13z61/h?rlkey=79h2tiegl2ysood23qcvfxo85&dl=0\n\nApple Frameworks Completed Source Code (Updated for iOS 16):\nhttps://www.dropbox.com/scl/fo/5zvhvulzemu74sit9qn96/h?rlkey=pc8nycuc6eejy8rb8j9szfvhm&dl=0\n\nApp 3 - Barcode Scanner: \nWe learn to use UIViewRepresentable to connect SwiftUI and UIKit in case SwiftUI doesn't support a type of user interface you want.\n\nBarcode Scanner Completed Source Code:\nhttps://www.dropbox.com/scl/fo/iy2ymc4jcrz7vfh2wqxzk/h?rlkey=8055hc325k07rji6hapgifcw1&dl=0\n\nApp 4 - Appetizers: \nThis app is a big one where we put it all our learnings together to build a proper SwiftUI app that works with a network call (updated to Async/Await in iOS 15).\n\nAppetizers Completed Source Code (updated for iOS 16):\nhttps://www.dropbox.com/scl/fo/0h5kub6len9jkghiwj6gz/h?rlkey=uf04zyhvww722jksfrech2up4&dl=0\n\nWhat's New in Xcode 15:\nhttps://youtu.be/oNAj6aIU7tk\n\nWhat's New in Xcode 14:\nhttps://youtu.be/tYBZ8AVH0Q0\n\nWhat's New in Xcode 13: \nhttps://youtu.be/8OIyptQpzMQ\n\nWhat's New in SwiftUI WWDC 2021:\nhttps://developer.apple.com/videos/play/wwdc2021/10018/\n\nWhat's New in SwiftUI WWDC 2022:\nhttps://developer.apple.com/videos/play/wwdc2022/10052/\n\nWhat's New in SwiftUI WWDC 2023:\nhttps://developer.apple.com/videos/play/wwdc2023/10148/\n\nMy Formula 1 App:\nhttps://apps.apple.com/app/formula-widgets-push-push/id6744127751\n\nTwitter:\nSean Allen - https://twitter.com/seanallen_dev\n\nBook and learning recommendations that help out the channel if you decide to purchase (Affiliate Links):\n\n#swift #swiftui #iosdeveloper \n\nTimestamps:\n0:00 - What you will learn & updates\n6:30 - SwiftUI Basics - Weather App\n19:01 - Weather - Text\n25:54 - Weather - SF Symbols\n29:13 - Weather - Main VStack\n36:41 - Weather - HStack of Days\n50:08 - Weather - Button & Refactoring\n1:07:35 - Weather - @State & @Binding Basics\n1:18:03 - Weather App - iOS 15 & 16 Updates\n1:31:52 - How SwiftUI Works - Fundamental Concepts\n2:02:00 - App 2 - Apple Frameworks\n2:09:08 - Frameworks - Grid Start\n2:20:35 - Frameworks - Grid End\n2:32:34 - Frameworks - Detail View\n2:47:00 - Frameworks - Intro to MVVM & Moving Data\n3:06:09 - Frameworks - Integrating with UIKit\n3:17:56 - Frameworks - Refactor\n3:38:12 - Frameworks - iOS 15 & 16 Updates\n3:53:41 - App 3 - Barcode Scanner\n4:05:24 - Barcode Scanner - Camera Setup\n4:21:44 - Barcode Scanner - Error Handling\n4:26:49 - Barcode Scanner - Coordinator Setup\n4:48:28 - Barcode Scanner - More Error Handling\n5:02:46 - Barcode Scanner - Refactor\n5:12:26 - App 4 - Appetizers\n5:24:48 - Appetizers - App Lifecycle\n5:29:55 - Appetizers - Model\n5:42:19 - Appetizers - List View\n5:55:32 - Appetizers - Network Manager\n6:12:40 - Appetizers - Connecting the UI\n6:26:53 - Appetizers - Errors & Alerts\n6:41:35 - Appetizers - Loading View\n6:53:21 - Appetizers - Download Image\n7:03:42 - Appetizers - Remote Image\n7:16:16 - Appetizers - Project cleanup & organization\n7:21:12 - Appetizers - Detail View UI Setup\n7:41:09 - Appetizers - Detail View UI Connections\n7:52:28 - Appetizers - Detail View Refactor\n8:02:56 - Appetizers - Account View UI Setup\n8:17:29 - Appetizers - View Model & Text Validation\n8:33:22 - Appetizers - @AppStorage\n8:50:56 - Appetizers - Order Screen UI\n9:02:18 - Appetizers - Empty State\n9:12:40 - Appetizers - @EnvironmentObject - Order\n9:30:21 - Appetizers - iOS 15 - Initial Run\n9:38:48 - Appetizers - iOS 15 - Tabbar Badge & List Separator\n9:52:25 - Appetizers - iOS 15 - @FocusState Keyboard\n10:01:01 - Appetizers - iOS 15 - Async/Await Network Calls\n10:26:19 - Appetizers - iOS 15 - AsyncImage\n10:32:52 - Appetizers - iOS 16 - Regex, guard let\n10:45:58 - App Optimizations\n11:19:41 - Data Flow Review\n11:38:47 - iOS 17 @Observable\n11:45:36 - What’s Next?",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/b1oC7sLIgpI/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/b1oC7sLIgpI/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/b1oC7sLIgpI/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/b1oC7sLIgpI/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/b1oC7sLIgpI/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Sean Allen",
        "tags": [
          "Swift",
          "Swift Tutorial",
          "iOS Developer",
          "iOS Development",
          "Swift Code Tutorial",
          "Swift app tutorial",
          "SwiftUI",
          "SwiftUI Basics",
          "Swift for beginners",
          "SwiftUI For Beginners",
          "SwiftUI Tutorial",
          "SwiftUI Basics for Beginners",
          "SwiftUI app",
          "SwiftUI tutorial 2020",
          "SwiftUI Tutorial 2021",
          "swiftUI for dummies",
          "Sean Allen",
          "SwiftUI Fundamentals",
          "fundamentals of swiftui",
          "beginner swiftui",
          "how to learn swiftui",
          "swiftui example",
          "swiftui full course"
        ],
        "categoryId": "28",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "SwiftUI Fundamentals | FULL COURSE | Beginner Friendly",
          "description": "My Latest SwiftUI Courses - https://seanallen.teachable.com/?video=b1oC7sLIgpI\nSwift News Newsletter - https://swiftnews.kit.com/newsletter\n\nIn this 12 hour course we build 4 apps that ramp up in difficulty. The first 3 apps are quite simple, but the 4th and final app grows substantially in size and challenge. See the timestamps at the bottom of the description for the full curriculum.\n\nNeed help with something specific? Book a call with me:\nhttps://seanallen.teachable.com/p/call?video=b1oC7sLIgpI\n\nThe course has been updated for iOS 15 and iOS 16. Check out my latest, up to date courses at https://seanallen.teachable.com/?video=b1oC7sLIgpI\n\nApp 1 Weather: \nWe learn the absolute basics of SwiftUI to build the user interface of a weather app. If you have experience with SwiftUI, feel free to skip this one as it's very beginner friendly.\n\nWeather Completed Source Code (Updated for iOS 16):\nhttps://www.dropbox.com/scl/fo/sh092hs8fnwxwa169kkre/h?rlkey=5l9h82p95con0bu9usc2s1wg3&dl=0\n\nApp 2 - Apple Frameworks: \nWe learn to build a Grid and pass data from our main view to a detail view.\n\nFramework icon images:\nhttps://www.dropbox.com/scl/fo/lijj23qlv9eiblta13z61/h?rlkey=79h2tiegl2ysood23qcvfxo85&dl=0\n\nApple Frameworks Completed Source Code (Updated for iOS 16):\nhttps://www.dropbox.com/scl/fo/5zvhvulzemu74sit9qn96/h?rlkey=pc8nycuc6eejy8rb8j9szfvhm&dl=0\n\nApp 3 - Barcode Scanner: \nWe learn to use UIViewRepresentable to connect SwiftUI and UIKit in case SwiftUI doesn't support a type of user interface you want.\n\nBarcode Scanner Completed Source Code:\nhttps://www.dropbox.com/scl/fo/iy2ymc4jcrz7vfh2wqxzk/h?rlkey=8055hc325k07rji6hapgifcw1&dl=0\n\nApp 4 - Appetizers: \nThis app is a big one where we put it all our learnings together to build a proper SwiftUI app that works with a network call (updated to Async/Await in iOS 15).\n\nAppetizers Completed Source Code (updated for iOS 16):\nhttps://www.dropbox.com/scl/fo/0h5kub6len9jkghiwj6gz/h?rlkey=uf04zyhvww722jksfrech2up4&dl=0\n\nWhat's New in Xcode 15:\nhttps://youtu.be/oNAj6aIU7tk\n\nWhat's New in Xcode 14:\nhttps://youtu.be/tYBZ8AVH0Q0\n\nWhat's New in Xcode 13: \nhttps://youtu.be/8OIyptQpzMQ\n\nWhat's New in SwiftUI WWDC 2021:\nhttps://developer.apple.com/videos/play/wwdc2021/10018/\n\nWhat's New in SwiftUI WWDC 2022:\nhttps://developer.apple.com/videos/play/wwdc2022/10052/\n\nWhat's New in SwiftUI WWDC 2023:\nhttps://developer.apple.com/videos/play/wwdc2023/10148/\n\nMy Formula 1 App:\nhttps://apps.apple.com/app/formula-widgets-push-push/id6744127751\n\nTwitter:\nSean Allen - https://twitter.com/seanallen_dev\n\nBook and learning recommendations that help out the channel if you decide to purchase (Affiliate Links):\n\n#swift #swiftui #iosdeveloper \n\nTimestamps:\n0:00 - What you will learn & updates\n6:30 - SwiftUI Basics - Weather App\n19:01 - Weather - Text\n25:54 - Weather - SF Symbols\n29:13 - Weather - Main VStack\n36:41 - Weather - HStack of Days\n50:08 - Weather - Button & Refactoring\n1:07:35 - Weather - @State & @Binding Basics\n1:18:03 - Weather App - iOS 15 & 16 Updates\n1:31:52 - How SwiftUI Works - Fundamental Concepts\n2:02:00 - App 2 - Apple Frameworks\n2:09:08 - Frameworks - Grid Start\n2:20:35 - Frameworks - Grid End\n2:32:34 - Frameworks - Detail View\n2:47:00 - Frameworks - Intro to MVVM & Moving Data\n3:06:09 - Frameworks - Integrating with UIKit\n3:17:56 - Frameworks - Refactor\n3:38:12 - Frameworks - iOS 15 & 16 Updates\n3:53:41 - App 3 - Barcode Scanner\n4:05:24 - Barcode Scanner - Camera Setup\n4:21:44 - Barcode Scanner - Error Handling\n4:26:49 - Barcode Scanner - Coordinator Setup\n4:48:28 - Barcode Scanner - More Error Handling\n5:02:46 - Barcode Scanner - Refactor\n5:12:26 - App 4 - Appetizers\n5:24:48 - Appetizers - App Lifecycle\n5:29:55 - Appetizers - Model\n5:42:19 - Appetizers - List View\n5:55:32 - Appetizers - Network Manager\n6:12:40 - Appetizers - Connecting the UI\n6:26:53 - Appetizers - Errors & Alerts\n6:41:35 - Appetizers - Loading View\n6:53:21 - Appetizers - Download Image\n7:03:42 - Appetizers - Remote Image\n7:16:16 - Appetizers - Project cleanup & organization\n7:21:12 - Appetizers - Detail View UI Setup\n7:41:09 - Appetizers - Detail View UI Connections\n7:52:28 - Appetizers - Detail View Refactor\n8:02:56 - Appetizers - Account View UI Setup\n8:17:29 - Appetizers - View Model & Text Validation\n8:33:22 - Appetizers - @AppStorage\n8:50:56 - Appetizers - Order Screen UI\n9:02:18 - Appetizers - Empty State\n9:12:40 - Appetizers - @EnvironmentObject - Order\n9:30:21 - Appetizers - iOS 15 - Initial Run\n9:38:48 - Appetizers - iOS 15 - Tabbar Badge & List Separator\n9:52:25 - Appetizers - iOS 15 - @FocusState Keyboard\n10:01:01 - Appetizers - iOS 15 - Async/Await Network Calls\n10:26:19 - Appetizers - iOS 15 - AsyncImage\n10:32:52 - Appetizers - iOS 16 - Regex, guard let\n10:45:58 - App Optimizations\n11:19:41 - Data Flow Review\n11:38:47 - iOS 17 @Observable\n11:45:36 - What’s Next?"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT11H48M41S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "true",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "553727",
        "likeCount": "12435",
        "favoriteCount": "0",
        "commentCount": "742"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "sWigpYgDJkbV1TefGce0TA0ODHg",
      "id": "comQ1-x2a1Q",
      "snippet": {
        "publishedAt": "2019-01-09T15:28:29Z",
        "channelId": "UC8butISFwT-Wl7EV0hUK0BQ",
        "title": "Swift Tutorial - Full Course for Beginners",
        "description": "Learn how to code with Swift in this full tutorial course for beginners. Swift is a powerful and intuitive programming language for macOS, iOS, watchOS and tvOS.\n\nThis course covers all the core concepts of Swift including:\nVariables and Constants, Data Types, Properties, Functions and Parameters, Classes, IF Statements, and more.\n\nCourse from Code With Chris. Check out their YouTube channel: https://www.youtube.com/user/codewithchris\n\nThe Code With Chris Facebook community: https://www.facebook.com/groups/codewithchriscommunity/\n\n--\n\nLearn to code for free and get a developer job: https://www.freecodecamp.org\n\nRead hundreds of articles on programming: https://medium.freecodecamp.org \n\n❤️ Support for this channel comes from our friends at Scrimba – the coding platform that's reinvented interactive learning: https://scrimba.com/freecodecamp",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/comQ1-x2a1Q/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/comQ1-x2a1Q/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/comQ1-x2a1Q/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/comQ1-x2a1Q/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/comQ1-x2a1Q/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "freeCodeCamp.org",
        "tags": [
          "swift course",
          "swift programming",
          "swift tutorial",
          "learn swift",
          "swift programming language",
          "ios",
          "ios development",
          "swift tutorial for beginners",
          "swift course for beginners",
          "ios programming"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "Swift Tutorial - Full Course for Beginners",
          "description": "Learn how to code with Swift in this full tutorial course for beginners. Swift is a powerful and intuitive programming language for macOS, iOS, watchOS and tvOS.\n\nThis course covers all the core concepts of Swift including:\nVariables and Constants, Data Types, Properties, Functions and Parameters, Classes, IF Statements, and more.\n\nCourse from Code With Chris. Check out their YouTube channel: https://www.youtube.com/user/codewithchris\n\nThe Code With Chris Facebook community: https://www.facebook.com/groups/codewithchriscommunity/\n\n--\n\nLearn to code for free and get a developer job: https://www.freecodecamp.org\n\nRead hundreds of articles on programming: https://medium.freecodecamp.org \n\n❤️ Support for this channel comes from our friends at Scrimba – the coding platform that's reinvented interactive learning: https://scrimba.com/freecodecamp"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT3H9M58S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "565487",
        "likeCount": "8360",
        "favoriteCount": "0",
        "commentCount": "257"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "em6Mx1zoM2tDUet6jzopVVws2qg",
      "id": "0_YxopMqTCw",
      "snippet": {
        "publishedAt": "2021-06-23T16:55:40Z",
        "channelId": "UCFTM1FGjZSkoSPDZgtbp7hA",
        "title": "Swift UI 3 Full Crash Course English | Build a Pokemon App",
        "description": "SwiftUI helps you build great-looking apps across all Apple platforms with the power of Swift — and as little code as possible. With SwiftUI, you can bring even better experiences to all users, on any Apple device, using just one set of tools and APIs.\n\nCheckout AppCircle - bit.ly/3fvkbCE\n1 month free Promocode - MTECHVIRALJUNE\n\nSource Code - https://www.codepur.dev/swift-ui-3-mini-course/\n\nWe will explore the latest features of Swift UI 3 along with creating a fully functional MMVM architectured Pokemon App.\n\nWe will learn various concepts:\n\nSwiftUI 3\nData Models\nNetworking/API\nAsync/Await (New in Swift UI 3)\nSearch (New in Swift UI 3)\nNavigation\nAsyncImage (New in Swift UI 3)\nBackward Compatibility\n\n#SwiftUI #PokemonApp #iOS\n\n💼 Business Inquiries: mtechviral@gmail.com\n\n🌎 Find Me Here:\nDiscord Server - https://discord.gg/t7gPb6B\nInstagram - https://instagram.com/codepur_ka_superhero\nTwitter: https://twitter.com/imthepk\nMedium - https://medium.com/@imthepk\nMy portfolio - https://pawan.live\n\nSupport this channel either by donating - \nhttps://www.patreon.com/mtechviral\nor joining any channel membership\nor by subscribing at https://codepur.dev\n\nTo support me.\nSubscribe to my channel: https://goo.gl/BlFui4\n\nBased on your request, here are all the products I use on daily basis. Buy from my link and make me rich. \n\nMy Laptop (Macbook Pro 1TB) - https://amzn.to/33nL3Pa\n\nMy Camera (Sony Alpha)  - https://amzn.to/2FrqR6T\n\nMy Phone (iPhone) - https://amzn.to/35xJm49\n\nMy Monitor 1 (Dell) - https://amzn.to/2ZD43rQ\n\nMy Monitor 2(Lenovo) - https://amzn.to/3mnbAVt\n\nBluetooth Earphones - https://amzn.to/3bTUeui\n\nMy Studio Lights - https://amzn.to/3mmiyd5\n\nMy Router - https://amzn.to/3kc9PZa\n\nMy PC Configs:\n\nProcessor - https://amzn.to/3io6G89\n\nMotherboard - https://amzn.to/33tXlp9\n\nRam (32gb) - https://amzn.to/33tc7w7\n\nGraphic Card - https://amzn.to/32q6DTC\n\nPower supply - https://amzn.to/2FvQiEa\n\nSSD - https://amzn.to/3hx4E4i\n\nPC Case - https://amzn.to/2E3jTo4\n\nRGB Fans - https://amzn.to/2FyEr8a\n\nAccessories:\n\nMy Keyboard (Logitech) - https://amzn.to/3hpuasl\n\nMy Mouse (MXMaster 3) - https://amzn.to/2H1PTtX\n\nMy Microphone (Yeti) - https://amzn.to/3mcUgCi\n\nMy Speaker (Bose) - https://amzn.to/2FvOJWO\n\nMy Chair (Amazon) - https://amzn.to/33rNwIk\n\nMy Gimbal (DJI) - https://amzn.to/3bTQuce\n\nMy Tripod (Amazon) -  https://amzn.to/2ZxTeHk\n\nUSB-C Hub - https://amzn.to/32pzK9N\n\nRBG light strips - https://amzn.to/2RmJ3ki\n\nCapture Card - https://amzn.to/2ZChc4p\n\nHDMI Cables - https://amzn.to/2DWCRfR\n\nLaptop Stand - https://amzn.to/3bXSz6V\n\nGreen Backdrop - https://amzn.to/3mfjYGx\n\nLIKE | SHARE | SUBSCRIBE FOR MORE VIDEOS LIKE THIS",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/0_YxopMqTCw/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/0_YxopMqTCw/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/0_YxopMqTCw/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/0_YxopMqTCw/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/0_YxopMqTCw/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Codepur",
        "tags": [
          "swiftui tutorial",
          "swiftui",
          "swiftui tutorial for beginners",
          "swift networking tutorial",
          "swift mvvm",
          "swiftui 3",
          "swiftui 3.0",
          "swift api",
          "swift api tutorial",
          "swift course",
          "swiftui core data",
          "swiftui course",
          "swift ui design"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "Swift UI 3 Full Crash Course English | Build a Pokemon App",
          "description": "SwiftUI helps you build great-looking apps across all Apple platforms with the power of Swift — and as little code as possible. With SwiftUI, you can bring even better experiences to all users, on any Apple device, using just one set of tools and APIs.\n\nCheckout AppCircle - bit.ly/3fvkbCE\n1 month free Promocode - MTECHVIRALJUNE\n\nSource Code - https://www.codepur.dev/swift-ui-3-mini-course/\n\nWe will explore the latest features of Swift UI 3 along with creating a fully functional MMVM architectured Pokemon App.\n\nWe will learn various concepts:\n\nSwiftUI 3\nData Models\nNetworking/API\nAsync/Await (New in Swift UI 3)\nSearch (New in Swift UI 3)\nNavigation\nAsyncImage (New in Swift UI 3)\nBackward Compatibility\n\n#SwiftUI #PokemonApp #iOS\n\n💼 Business Inquiries: mtechviral@gmail.com\n\n🌎 Find Me Here:\nDiscord Server - https://discord.gg/t7gPb6B\nInstagram - https://instagram.com/codepur_ka_superhero\nTwitter: https://twitter.com/imthepk\nMedium - https://medium.com/@imthepk\nMy portfolio - https://pawan.live\n\nSupport this channel either by donating - \nhttps://www.patreon.com/mtechviral\nor joining any channel membership\nor by subscribing at https://codepur.dev\n\nTo support me.\nSubscribe to my channel: https://goo.gl/BlFui4\n\nBased on your request, here are all the products I use on daily basis. Buy from my link and make me rich. \n\nMy Laptop (Macbook Pro 1TB) - https://amzn.to/33nL3Pa\n\nMy Camera (Sony Alpha)  - https://amzn.to/2FrqR6T\n\nMy Phone (iPhone) - https://amzn.to/35xJm49\n\nMy Monitor 1 (Dell) - https://amzn.to/2ZD43rQ\n\nMy Monitor 2(Lenovo) - https://amzn.to/3mnbAVt\n\nBluetooth Earphones - https://amzn.to/3bTUeui\n\nMy Studio Lights - https://amzn.to/3mmiyd5\n\nMy Router - https://amzn.to/3kc9PZa\n\nMy PC Configs:\n\nProcessor - https://amzn.to/3io6G89\n\nMotherboard - https://amzn.to/33tXlp9\n\nRam (32gb) - https://amzn.to/33tc7w7\n\nGraphic Card - https://amzn.to/32q6DTC\n\nPower supply - https://amzn.to/2FvQiEa\n\nSSD - https://amzn.to/3hx4E4i\n\nPC Case - https://amzn.to/2E3jTo4\n\nRGB Fans - https://amzn.to/2FyEr8a\n\nAccessories:\n\nMy Keyboard (Logitech) - https://amzn.to/3hpuasl\n\nMy Mouse (MXMaster 3) - https://amzn.to/2H1PTtX\n\nMy Microphone (Yeti) - https://amzn.to/3mcUgCi\n\nMy Speaker (Bose) - https://amzn.to/2FvOJWO\n\nMy Chair (Amazon) - https://amzn.to/33rNwIk\n\nMy Gimbal (DJI) - https://amzn.to/3bTQuce\n\nMy Tripod (Amazon) -  https://amzn.to/2ZxTeHk\n\nUSB-C Hub - https://amzn.to/32pzK9N\n\nRBG light strips - https://amzn.to/2RmJ3ki\n\nCapture Card - https://amzn.to/2ZChc4p\n\nHDMI Cables - https://amzn.to/2DWCRfR\n\nLaptop Stand - https://amzn.to/3bXSz6V\n\nGreen Backdrop - https://amzn.to/3mfjYGx\n\nLIKE | SHARE | SUBSCRIBE FOR MORE VIDEOS LIKE THIS"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT1H31M58S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "4321",
        "likeCount": "146",
        "favoriteCount": "0",
        "commentCount": "15"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "-Yba745R4uj3MgKlgaePvFyEVtY",
      "id": "uvLUJev1F20",
      "snippet": {
        "publishedAt": "2024-12-12T14:30:29Z",
        "channelId": "UC2D6eRvCeMtcF5OGHf1-trw",
        "title": "How to Make an App in 8 Days (2025 Full Tutorial)",
        "description": "Confidently learn how to make an app (no coding experience required). Used in classrooms and Apple stores, this video is designed with beginners in mind to teach the fundamental skills for making apps on iOS.\n\n🚨 SPECIAL CWC+ OFFER FOR YOUTUBE:\n👋 Our \"Launch Your First App\" program will help you build up your iOS skills to publish your very own feature rich app even if you’re a beginner starting from scratch. https://cwc.to/youtubeoffer\n\nResources and Code:\nhttps://www.dropbox.com/scl/fo/cs23jz2bvtsxljbrtzhwk/ANu2H0mDN_cQNmRfueBvnoI?rlkey=d7y51nw0phhxkjmfx92nytezu&e=1&st=ui6lo2uq&dl=1\n\n✌️Get Access To MODULE 2 Here:\nhttps://codewithchris.com/menu-app/?utm_source=youtube&utm_medium=video&utm_campaign=8day&utm_content=full\n\nTimestamps\n00:00 Lesson 1 - The Apple Dev Ecosystem\n27:16 Lesson 2 - Xcode Tutorial\n46:32 Lesson 3 - Building a User Interface\n01:16:14 Lesson 4 - Starting the War Card Game\n01:32:10 Lesson 5 - Introduction to Swift Coding\n01:51:00 Lesson 6 - Swift Functions\n02:13:09 Lesson 7 - SwiftUIButtons and Properties\n02:32:56 Lesson 8 - Adding the App Logic\n\nThis video series will teach a beginner with no programming experience how to make iPhone apps. I'm creating these videos with the assumption that the student has no prior knowledge and is starting from scratch.\n\nAbout CodeWithChris:\nHi I’m Chris! I’m dedicated to teaching fundamentals about how to make an app. This is important if you’re trying to land an iOS job, be a freelancer, increase or start a business with an app idea. On this channel and my website, you'll find a ton of free resources and tutorials to aid you on your journey to learn iOS development. Many people have learned to code and build apps on their own! \n\nStudent Success Stories\nhttps://codewithchris.com/category/success-stories/\n\n#CodeWithChris #iosdevelopment  #HowToMakeAnApp",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/uvLUJev1F20/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/uvLUJev1F20/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/uvLUJev1F20/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/uvLUJev1F20/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/uvLUJev1F20/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "CodeWithChris",
        "tags": [
          "How to Make an App",
          "How to Create an App",
          "How Build a Mobile App",
          "Xcode",
          "Swift",
          "iOS",
          "Coding",
          "Programming",
          "iOS Development"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "How to Make an App in 8 Days (2025 Full Tutorial)",
          "description": "Confidently learn how to make an app (no coding experience required). Used in classrooms and Apple stores, this video is designed with beginners in mind to teach the fundamental skills for making apps on iOS.\n\n🚨 SPECIAL CWC+ OFFER FOR YOUTUBE:\n👋 Our \"Launch Your First App\" program will help you build up your iOS skills to publish your very own feature rich app even if you’re a beginner starting from scratch. https://cwc.to/youtubeoffer\n\nResources and Code:\nhttps://www.dropbox.com/scl/fo/cs23jz2bvtsxljbrtzhwk/ANu2H0mDN_cQNmRfueBvnoI?rlkey=d7y51nw0phhxkjmfx92nytezu&e=1&st=ui6lo2uq&dl=1\n\n✌️Get Access To MODULE 2 Here:\nhttps://codewithchris.com/menu-app/?utm_source=youtube&utm_medium=video&utm_campaign=8day&utm_content=full\n\nTimestamps\n00:00 Lesson 1 - The Apple Dev Ecosystem\n27:16 Lesson 2 - Xcode Tutorial\n46:32 Lesson 3 - Building a User Interface\n01:16:14 Lesson 4 - Starting the War Card Game\n01:32:10 Lesson 5 - Introduction to Swift Coding\n01:51:00 Lesson 6 - Swift Functions\n02:13:09 Lesson 7 - SwiftUIButtons and Properties\n02:32:56 Lesson 8 - Adding the App Logic\n\nThis video series will teach a beginner with no programming experience how to make iPhone apps. I'm creating these videos with the assumption that the student has no prior knowledge and is starting from scratch.\n\nAbout CodeWithChris:\nHi I’m Chris! I’m dedicated to teaching fundamentals about how to make an app. This is important if you’re trying to land an iOS job, be a freelancer, increase or start a business with an app idea. On this channel and my website, you'll find a ton of free resources and tutorials to aid you on your journey to learn iOS development. Many people have learned to code and build apps on their own! \n\nStudent Success Stories\nhttps://codewithchris.com/category/success-stories/\n\n#CodeWithChris #iosdevelopment  #HowToMakeAnApp"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT3H1M9S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "84306",
        "likeCount": "1889",
        "favoriteCount": "0",
        "commentCount": "101"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "HaQ3gTvSaAdtBQRHZVfwbHCyz1o",
      "id": "wargRHa8oKQ",
      "snippet": {
        "publishedAt": "2024-10-02T16:07:15Z",
        "channelId": "UCKvDySsrOVgUgRLhWHeyHJA",
        "title": "Swift Language Fundamentals - The Complete Beginner's Guide",
        "description": "\"SwiftUI Fundamentals\" is a beginner-friendly course designed to help you master the Swift programming language. Whether you're completely new to programming or transitioning from another language, this course will provide you with a deep understanding of Swift's core features, syntax, and programming concepts.\n\nThroughout the course, you’ll learn how to work with data types, control flow, functions, and optionals, as well as explore more advanced topics like closures and protocols. This course will build your confidence as a Swift developer, allowing you to write clean, efficient, and safe code.\n\nBy mastering Swift, you'll unlock the potential to create powerful and innovative applications, setting a solid foundation for future growth in iOS development or other Apple platforms. Whether you're looking to advance your career or simply want to dive into the world of programming, this course will have a lasting impact on your life by equipping you with essential skills in one of the most versatile and modern programming languages.\n\nDone with Swift Language Fundamentals! Start learning SwiftUI using this free course: \nhttps://azamsharp.teachable.com/p/swiftui-fundamentals-beginner-friendly-course\n\nWant to become a highly valued iOS developer! Check out all my courses and workshops: \nhttps://azamsharp.school \n\n0:00 Introduction \n2:36: Installing Xcode \n5:48 Variable and Constants \n12:45 Operators and Expressions \n23:06 Strings and Strings Interpolation \n28:33 Conditional Statements \n35:20 Switch Statements \n41:24 Loops \n53:27 Defining and Using Functions \n01:04:19 Closures \n01:15:34 Optionals \n01:40:55 Generics \n01:57:44 Protocols \n02:16:29 Enums \n02:36:50 Next Steps \n\n#iosdev #swiftlang #swiftuideveloper #coding #swiftdev",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/wargRHa8oKQ/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/wargRHa8oKQ/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/wargRHa8oKQ/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/wargRHa8oKQ/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/wargRHa8oKQ/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "azamsharp",
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "Swift Language Fundamentals - The Complete Beginner's Guide",
          "description": "\"SwiftUI Fundamentals\" is a beginner-friendly course designed to help you master the Swift programming language. Whether you're completely new to programming or transitioning from another language, this course will provide you with a deep understanding of Swift's core features, syntax, and programming concepts.\n\nThroughout the course, you’ll learn how to work with data types, control flow, functions, and optionals, as well as explore more advanced topics like closures and protocols. This course will build your confidence as a Swift developer, allowing you to write clean, efficient, and safe code.\n\nBy mastering Swift, you'll unlock the potential to create powerful and innovative applications, setting a solid foundation for future growth in iOS development or other Apple platforms. Whether you're looking to advance your career or simply want to dive into the world of programming, this course will have a lasting impact on your life by equipping you with essential skills in one of the most versatile and modern programming languages.\n\nDone with Swift Language Fundamentals! Start learning SwiftUI using this free course: \nhttps://azamsharp.teachable.com/p/swiftui-fundamentals-beginner-friendly-course\n\nWant to become a highly valued iOS developer! Check out all my courses and workshops: \nhttps://azamsharp.school \n\n0:00 Introduction \n2:36: Installing Xcode \n5:48 Variable and Constants \n12:45 Operators and Expressions \n23:06 Strings and Strings Interpolation \n28:33 Conditional Statements \n35:20 Switch Statements \n41:24 Loops \n53:27 Defining and Using Functions \n01:04:19 Closures \n01:15:34 Optionals \n01:40:55 Generics \n01:57:44 Protocols \n02:16:29 Enums \n02:36:50 Next Steps \n\n#iosdev #swiftlang #swiftuideveloper #coding #swiftdev"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT2H40M39S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "4242",
        "likeCount": "100",
        "favoriteCount": "0",
        "commentCount": "7"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "T1g6Tcw-XDWZ_3ih4Y8Q5X1LVgM",
      "id": "1ocQUXi3gDc",
      "snippet": {
        "publishedAt": "2023-07-18T00:53:55Z",
        "channelId": "UCHaYcy9627HPl6YTwKrYBAw",
        "title": "🔴 Coding Bootcamp For Beginners | Full Course in 5 Hours | Swift + iOS",
        "description": "Come learn how to code with a Ex-Meta Software Engineer! This is a full coding bootcamp for complete beginners, teaching you how to code from scratch, in less than 5 hours!!\n\n🔴 App Development Fundamentals | Bootcamp Phase 2 : \n(Free with Diamond Membership)\nhttps://www.stephancodes.com/videos\n\n🔴 Become a member to access Exclusive Content : \nhttps://www.stephancodes.com/videos\n\n🔴 Become a member to access Exclusive Content & Source Code : \nhttps://www.stephancodes.com/plans-pricing\n\n🔴 FREE Instagram Course with SwiftUI:\nhttps://youtu.be/7UKUCZuaVlA\n\n🔴Async/Await:\nhttps://youtu.be/ICBc6inTNZQ\n\n🔴 SwiftUI Threads Clone:\nComing Soon\n\n🔴Navigation Stacks:\nhttps://youtu.be/ZQXzZ1hxQwo\n\n🔴@State vs @Binding video:\nhttps://youtu.be/uiptHyyxF3Y\n\n🖥️ ONLINE COURSES & APPS\n\n👉 Pro Courses: \nhttps://www.stephancodes.com/videos\n\n👉 FREE UBER SwiftUI Course \nhttps://youtu.be/Z6-KVWXbw-w\n\n👉 iOS App Templates:\nhttps://www.stephancodes.com/shop\n\n👉 FREE Twitter SwiftUI Course \nhttps://www.youtube.com/watch?v=3pIXMwvJLZs\n\nSocial Media: \nInstagram - @stephan.dowless\n\n🖥️ Chapters\n0:00 - Intro \n3:14 - Getting Started\n7:26 - What is programming?\n10:16 - Adding comments \n12:51 - Variables & Constants\n30:52 - Operators\n44:46 - String Interpolation\n58:12 - Conditional Programming\n1:21:57 - Arrays\n1:42:05 - Dictionaries\n1:53:30 - For Loops\n2:17:16 - While Loops\n2:25:03 - Functions\n2:43:34 - Optionals\n3:12:10 - Structs (Object Oriented Programming)\n3:28:52 - Exercise 1\n3:41:32 - Exercise 2\n4:00:38 - Exercise 3\n4:27:45 - Final Exercise & Info About Next Steps",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/1ocQUXi3gDc/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/1ocQUXi3gDc/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/1ocQUXi3gDc/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/1ocQUXi3gDc/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/1ocQUXi3gDc/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "AppStuff",
        "tags": [
          "SwiftUI",
          "Xcode",
          "iOS",
          "iOS App",
          "Swift",
          "iOS development",
          "development",
          "programming",
          "mobile app",
          "code",
          "coding",
          "iOS 16",
          "Xcode 14",
          "API",
          "Navigation",
          "Navigation Stacks",
          "Navigation Link",
          "State",
          "Binding",
          "State vs Binding",
          "@State",
          "@Binding",
          "iPhone app",
          "@StateObject",
          "@ObservedObject",
          "@ObservableObject",
          "Coding Bootcamp",
          "Learn how to code",
          "Programming Course",
          "Beginner Coding",
          "Online Coding",
          "Javascript",
          "Python",
          "Python Bootcamp",
          "Python course",
          "iOS app",
          "app development course",
          "iOS app development"
        ],
        "categoryId": "28",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "🔴 Coding Bootcamp For Beginners | Full Course in 5 Hours | Swift + iOS",
          "description": "Come learn how to code with a Ex-Meta Software Engineer! This is a full coding bootcamp for complete beginners, teaching you how to code from scratch, in less than 5 hours!!\n\n🔴 App Development Fundamentals | Bootcamp Phase 2 : \n(Free with Diamond Membership)\nhttps://www.stephancodes.com/videos\n\n🔴 Become a member to access Exclusive Content : \nhttps://www.stephancodes.com/videos\n\n🔴 Become a member to access Exclusive Content & Source Code : \nhttps://www.stephancodes.com/plans-pricing\n\n🔴 FREE Instagram Course with SwiftUI:\nhttps://youtu.be/7UKUCZuaVlA\n\n🔴Async/Await:\nhttps://youtu.be/ICBc6inTNZQ\n\n🔴 SwiftUI Threads Clone:\nComing Soon\n\n🔴Navigation Stacks:\nhttps://youtu.be/ZQXzZ1hxQwo\n\n🔴@State vs @Binding video:\nhttps://youtu.be/uiptHyyxF3Y\n\n🖥️ ONLINE COURSES & APPS\n\n👉 Pro Courses: \nhttps://www.stephancodes.com/videos\n\n👉 FREE UBER SwiftUI Course \nhttps://youtu.be/Z6-KVWXbw-w\n\n👉 iOS App Templates:\nhttps://www.stephancodes.com/shop\n\n👉 FREE Twitter SwiftUI Course \nhttps://www.youtube.com/watch?v=3pIXMwvJLZs\n\nSocial Media: \nInstagram - @stephan.dowless\n\n🖥️ Chapters\n0:00 - Intro \n3:14 - Getting Started\n7:26 - What is programming?\n10:16 - Adding comments \n12:51 - Variables & Constants\n30:52 - Operators\n44:46 - String Interpolation\n58:12 - Conditional Programming\n1:21:57 - Arrays\n1:42:05 - Dictionaries\n1:53:30 - For Loops\n2:17:16 - While Loops\n2:25:03 - Functions\n2:43:34 - Optionals\n3:12:10 - Structs (Object Oriented Programming)\n3:28:52 - Exercise 1\n3:41:32 - Exercise 2\n4:00:38 - Exercise 3\n4:27:45 - Final Exercise & Info About Next Steps"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT4H50M40S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "8417",
        "likeCount": "274",
        "favoriteCount": "0",
        "commentCount": "24"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "vpjj6qhdMDxM6fJOY7puhmOXglg",
      "id": "6kW2FIy2nsA",
      "snippet": {
        "publishedAt": "2020-11-07T16:58:52Z",
        "channelId": "UCC9DwsnTdeau7Z4UeR0a_sQ",
        "title": "Swift Crash Course",
        "description": "Presented by: Clayton Sluby\nDifficulty: Intermediate\n\nBuild an iPhone app in 45 minutes! For people who know enough about code to get by, this is a great workshop to get a taste of app development.\n\nSoftware & Skills Required: Need an Apple product able to run Xcode 12. XCode 11.6 is okay but the example will not be downloadable. \nDownload links: https://github.com/claytonsulby/splardcmy \n\nProject Application: Make an app in Swift!",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/6kW2FIy2nsA/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/6kW2FIy2nsA/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/6kW2FIy2nsA/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/6kW2FIy2nsA/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/6kW2FIy2nsA/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "HackPSU",
        "categoryId": "28",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "Swift Crash Course",
          "description": "Presented by: Clayton Sluby\nDifficulty: Intermediate\n\nBuild an iPhone app in 45 minutes! For people who know enough about code to get by, this is a great workshop to get a taste of app development.\n\nSoftware & Skills Required: Need an Apple product able to run Xcode 12. XCode 11.6 is okay but the example will not be downloadable. \nDownload links: https://github.com/claytonsulby/splardcmy \n\nProject Application: Make an app in Swift!"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT54M12S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": false,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "129",
        "likeCount": "3",
        "favoriteCount": "0",
        "commentCount": "0"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "H--QJEmpscTgnzx77rdzeJMp5g8",
      "id": "KCgYDCKqato",
      "snippet": {
        "publishedAt": "2022-02-15T14:26:43Z",
        "channelId": "UC8butISFwT-Wl7EV0hUK0BQ",
        "title": "iOS Development Course - Use Swift 5 and UIKit to Build a Netflix Clone",
        "description": "Learn how to use Swift 5, UIKit, and Xcode to develop iOS apps by building a Netflix clone. You will learn how to implement the MVVM design pattern.\n\n✏️ Course developed by Amr. Check out his channel: https://www.youtube.com/channel/UCIGbW54bABLekk_RYlwnAzg\n\n💻 Github Repo: https://github.com/amrhossam96/Netflix-clone\n\n⭐️ Course Contents ⭐️\n⌨️ (0:00:00) Introduction and App Demo\n⌨️ (0:02:28) Creating new Xcode Project\n⌨️ (0:05:41) Creating MainTabBarViewController\n⌨️ (0:16:38) Setting HomeViewController TableView\n⌨️ (0:30:07) Setting home TableViewCell and it’s CollectionView\n⌨️ (0:38:46) Creating Table’s HeaderView\n⌨️ (0:59:35) Customizing the navigation bar\n⌨️ (1:10:17) Setting Tableview sections titles\n⌨️ (1:19:21) Sending URL Requests and Parsing JSON response\n⌨️ (1:40:11) Using Extensions\n⌨️ (1:42:24) Consuming API To Fetch Data for each Section\n⌨️ (1:59:20) Refactoring Models\n⌨️ (2:01:50) Creating Custom CollectionViewCell\n⌨️ (2:08:24) Passing data to the CollectionView \n⌨️ (2:22:49) Viewing poster images inside CollectionViewCell\n⌨️ (2:24:27) Creating Upcoming TableView inside Upcoming Tab\n⌨️ (2:31:55) Creating custom TableViewCell from the upcoming table\n⌨️ (2:40:00) Creating TitleViewModel\n⌨️ (2:50:11) Creating Top Search TableView inside TopSearch tab\n⌨️ (3:01:06) Creating SearchResultsViewController to display search results\n⌨️ (3:11:21) Querying database for individual movie\n⌨️ (3:20:50) Using YouTube API\n⌨️ (3:28:51) Parsing YouTube API Response\n⌨️ (3:35:19) Handling selections of cells (Tapping on cells)\n⌨️ (3:38:37) Creating TitlePreviewViewController\n⌨️ (4:06:11) Refactoring TableViewHeader Hero title\n⌨️ (4:13:03) Handling Tapping across all ViewControllers\n⌨️ (4:29:26) Core Data (Best Practices)\n⌨️ (5:07:36) Using Notification Center to update ViewControllers\n\n🎉 Thanks to our Champion and Sponsor supporters:\n👾 Raymond Odero\n👾 Agustín Kussrow\n👾 aldo ferretti\n👾 Otis Morgan\n👾 DeezMaster\n\n--\n\nLearn to code for free and get a developer job: https://www.freecodecamp.org\n\nRead hundreds of articles on programming: https://freecodecamp.org/news \n\n❤️ Support for this channel comes from our friends at Scrimba – the coding platform that's reinvented interactive learning: https://scrimba.com/freecodecamp",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/KCgYDCKqato/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/KCgYDCKqato/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/KCgYDCKqato/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/KCgYDCKqato/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/KCgYDCKqato/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "freeCodeCamp.org",
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "iOS Development Course - Use Swift 5 and UIKit to Build a Netflix Clone",
          "description": "Learn how to use Swift 5, UIKit, and Xcode to develop iOS apps by building a Netflix clone. You will learn how to implement the MVVM design pattern.\n\n✏️ Course developed by Amr. Check out his channel: https://www.youtube.com/channel/UCIGbW54bABLekk_RYlwnAzg\n\n💻 Github Repo: https://github.com/amrhossam96/Netflix-clone\n\n⭐️ Course Contents ⭐️\n⌨️ (0:00:00) Introduction and App Demo\n⌨️ (0:02:28) Creating new Xcode Project\n⌨️ (0:05:41) Creating MainTabBarViewController\n⌨️ (0:16:38) Setting HomeViewController TableView\n⌨️ (0:30:07) Setting home TableViewCell and it’s CollectionView\n⌨️ (0:38:46) Creating Table’s HeaderView\n⌨️ (0:59:35) Customizing the navigation bar\n⌨️ (1:10:17) Setting Tableview sections titles\n⌨️ (1:19:21) Sending URL Requests and Parsing JSON response\n⌨️ (1:40:11) Using Extensions\n⌨️ (1:42:24) Consuming API To Fetch Data for each Section\n⌨️ (1:59:20) Refactoring Models\n⌨️ (2:01:50) Creating Custom CollectionViewCell\n⌨️ (2:08:24) Passing data to the CollectionView \n⌨️ (2:22:49) Viewing poster images inside CollectionViewCell\n⌨️ (2:24:27) Creating Upcoming TableView inside Upcoming Tab\n⌨️ (2:31:55) Creating custom TableViewCell from the upcoming table\n⌨️ (2:40:00) Creating TitleViewModel\n⌨️ (2:50:11) Creating Top Search TableView inside TopSearch tab\n⌨️ (3:01:06) Creating SearchResultsViewController to display search results\n⌨️ (3:11:21) Querying database for individual movie\n⌨️ (3:20:50) Using YouTube API\n⌨️ (3:28:51) Parsing YouTube API Response\n⌨️ (3:35:19) Handling selections of cells (Tapping on cells)\n⌨️ (3:38:37) Creating TitlePreviewViewController\n⌨️ (4:06:11) Refactoring TableViewHeader Hero title\n⌨️ (4:13:03) Handling Tapping across all ViewControllers\n⌨️ (4:29:26) Core Data (Best Practices)\n⌨️ (5:07:36) Using Notification Center to update ViewControllers\n\n🎉 Thanks to our Champion and Sponsor supporters:\n👾 Raymond Odero\n👾 Agustín Kussrow\n👾 aldo ferretti\n👾 Otis Morgan\n👾 DeezMaster\n\n--\n\nLearn to code for free and get a developer job: https://www.freecodecamp.org\n\nRead hundreds of articles on programming: https://freecodecamp.org/news \n\n❤️ Support for this channel comes from our friends at Scrimba – the coding platform that's reinvented interactive learning: https://scrimba.com/freecodecamp"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT5H12M26S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "335631",
        "likeCount": "7352",
        "favoriteCount": "0",
        "commentCount": "287"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "sT_MfRg-oRLHqWO9YuB59fK4ec8",
      "id": "K0t-RCSlasE",
      "snippet": {
        "publishedAt": "2023-04-06T16:00:23Z",
        "channelId": "UC2D6eRvCeMtcF5OGHf1-trw",
        "title": "How to Make an App in 8 Days (2024) - Full Walkthrough",
        "description": "Confidently learn how to make an app (no coding experience required). Used in classrooms and Apple stores, these videos are designed for beginners in mind to teach the fundamental skills for making apps on iOS.\n\n🚨 SPECIAL CWC+ OFFER FOR YOUTUBE:\n👋 Our \"Launch Your First App\" program will help you build up your iOS skills to publish your very own feature rich app even if you’re a beginner starting from scratch. https://cwc.to/youtubeoffer\n\nResources and Code:\nhttps://www.dropbox.com/scl/fo/cs23jz2bvtsxljbrtzhwk/ANu2H0mDN_cQNmRfueBvnoI?rlkey=d7y51nw0phhxkjmfx92nytezu&e=1&st=ui6lo2uq&dl=1\n\n✌️Get Access To MODULE 2 Here:\nhttps://learn.codewithchris.com/courses/menu?utm_source=youtube&utm_medium=video&utm_campaign=8day&utm_content=full\n\nTimestamps\n00:00 Lesson 1 - The Apple Dev Ecosystem\n27:16 Lesson 2 - Xcode Tutorial\n46:32 Lesson 3 - Building a User Interface\n01:15:49 Lesson 4 - Starting the War Card Game\n01:31: 45 Lesson 5 - Introduction to Swift Coding\n01:50:35 Lesson 6 - Swift Functions\n02:12:46 Lesson 7 - SwiftUIButtons and Properties\n02:32:33 Lesson 8 - Adding the App Logic\n\nThis video series will teach a beginner with no programming experience how to make iPhone apps. I'm creating these videos with the assumption that the student has no prior knowledge and is starting from scratch.\n\n👋 Our \"Launch Your First App\" program will help you build up your iOS skills to publish your very own feature rich app even if you’re a beginner starting from scratch. https://cwc.to/youtubeoffer\n\nAPPLE DEVELOPER PROGRAM:\nhttps://developer.apple.com/programs/\n\nMY FAVOURITE APP RESOURCES:\n📖 The SwiftUI Reference Books I Use - SwiftUI Views Mastery - https://cwc.to/swiftui-book\n💰 How I Monetize My Apps - RevenueCat - https://cwc.to/revenuecat\n🤖 My Automation Tool of Choice - Bitrise - https://cwc.to/bitrise\n🧑\u200d🎨 What I Use For App Design - Figma - https://cwc.to/figma\n\nWEEKLY UPDATES VIA EMAIL:\n✉️ Every Saturday, receive an email digest of new content - https://cwc.to/newsletter\n\nCONNECT:\n🌍 My website - https://codewithchris.com\n😺 GitHub - https://github.com/codewithchris\n📸 Instagram - https://www.instagram.com/codewithchris/\n🐦 Twitter - https://twitter.com/codewithchris\n\nABOUT CODEWITHCHRIS:\nHi I’m Chris! I’m dedicated to teaching fundamentals about how to make an app. This is important if you’re trying to land an iOS job, be a freelancer, increase or start a business with an app idea. On this channel and my website, you'll find a ton of free resources and tutorials to aid you on your journey to learn iOS development. Many people have learned to code and build apps on their own! https://cwc.to/reviews\n\nNote: Some of the links in this description are affiliate links that help support this channel. Thank you if you used any of them!\n\n#CodeWithChris #CodeCrew #HowToMakeAnApp",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/K0t-RCSlasE/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/K0t-RCSlasE/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/K0t-RCSlasE/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/K0t-RCSlasE/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/K0t-RCSlasE/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "CodeWithChris",
        "tags": [
          "How to Make an App",
          "How to Create an App",
          "How Build a Mobile App",
          "Xcode",
          "Swift",
          "iOS",
          "Coding",
          "Programming",
          "iOS Development"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "How to Make an App in 8 Days (2024) - Full Walkthrough",
          "description": "Confidently learn how to make an app (no coding experience required). Used in classrooms and Apple stores, these videos are designed for beginners in mind to teach the fundamental skills for making apps on iOS.\n\n🚨 SPECIAL CWC+ OFFER FOR YOUTUBE:\n👋 Our \"Launch Your First App\" program will help you build up your iOS skills to publish your very own feature rich app even if you’re a beginner starting from scratch. https://cwc.to/youtubeoffer\n\nResources and Code:\nhttps://www.dropbox.com/scl/fo/cs23jz2bvtsxljbrtzhwk/ANu2H0mDN_cQNmRfueBvnoI?rlkey=d7y51nw0phhxkjmfx92nytezu&e=1&st=ui6lo2uq&dl=1\n\n✌️Get Access To MODULE 2 Here:\nhttps://learn.codewithchris.com/courses/menu?utm_source=youtube&utm_medium=video&utm_campaign=8day&utm_content=full\n\nTimestamps\n00:00 Lesson 1 - The Apple Dev Ecosystem\n27:16 Lesson 2 - Xcode Tutorial\n46:32 Lesson 3 - Building a User Interface\n01:15:49 Lesson 4 - Starting the War Card Game\n01:31: 45 Lesson 5 - Introduction to Swift Coding\n01:50:35 Lesson 6 - Swift Functions\n02:12:46 Lesson 7 - SwiftUIButtons and Properties\n02:32:33 Lesson 8 - Adding the App Logic\n\nThis video series will teach a beginner with no programming experience how to make iPhone apps. I'm creating these videos with the assumption that the student has no prior knowledge and is starting from scratch.\n\n👋 Our \"Launch Your First App\" program will help you build up your iOS skills to publish your very own feature rich app even if you’re a beginner starting from scratch. https://cwc.to/youtubeoffer\n\nAPPLE DEVELOPER PROGRAM:\nhttps://developer.apple.com/programs/\n\nMY FAVOURITE APP RESOURCES:\n📖 The SwiftUI Reference Books I Use - SwiftUI Views Mastery - https://cwc.to/swiftui-book\n💰 How I Monetize My Apps - RevenueCat - https://cwc.to/revenuecat\n🤖 My Automation Tool of Choice - Bitrise - https://cwc.to/bitrise\n🧑\u200d🎨 What I Use For App Design - Figma - https://cwc.to/figma\n\nWEEKLY UPDATES VIA EMAIL:\n✉️ Every Saturday, receive an email digest of new content - https://cwc.to/newsletter\n\nCONNECT:\n🌍 My website - https://codewithchris.com\n😺 GitHub - https://github.com/codewithchris\n📸 Instagram - https://www.instagram.com/codewithchris/\n🐦 Twitter - https://twitter.com/codewithchris\n\nABOUT CODEWITHCHRIS:\nHi I’m Chris! I’m dedicated to teaching fundamentals about how to make an app. This is important if you’re trying to land an iOS job, be a freelancer, increase or start a business with an app idea. On this channel and my website, you'll find a ton of free resources and tutorials to aid you on your journey to learn iOS development. Many people have learned to code and build apps on their own! https://cwc.to/reviews\n\nNote: Some of the links in this description are affiliate links that help support this channel. Thank you if you used any of them!\n\n#CodeWithChris #CodeCrew #HowToMakeAnApp"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT3H49S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "1104642",
        "likeCount": "15256",
        "favoriteCount": "0",
        "commentCount": "535"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "tbVU4stEM5g60K9uPZiJcXxK1hA",
      "id": "II7WcnHVG4U",
      "snippet": {
        "publishedAt": "2023-09-06T23:27:56Z",
        "channelId": "UCHaYcy9627HPl6YTwKrYBAw",
        "title": "Swift Networking Masterclass | A Comprehensive Course for iOS Developers",
        "description": "Are you an aspiring iOS app developer or a seasoned coder looking to level up your skills in networking? Look no further! Welcome to our comprehensive iOS development course dedicated to networking with Swift.\n\n🖥️ FULL PRO COURSE: \nhttps://appstuff.teachable.com/p/swift-networking-mastery\n\n🔴 Become a member for UNLIMITED ACCESS \nhttps://www.stephancodes.com/plans-pricing\n\n🔴 FREE Threads Clone SwiftUI Course:\nhttps://appstuff.teachable.com/p/swiftui-threads-pro\n\n🔴 FREE Instagram Course with SwiftUI:\nhttps://youtu.be/7UKUCZuaVlA\n\n🔴Navigation Stacks:\nhttps://youtu.be/ZQXzZ1hxQwo\n\n🔴@State vs @Binding video:\nhttps://youtu.be/uiptHyyxF3Y\n\n🖥️ ONLINE COURSES & APPS\n\n👉 Pro Courses: \nhttps://www.stephancodes.com/videos\n\n👉 FREE UBER SwiftUI Course \nhttps://youtu.be/Z6-KVWXbw-w\n\n👉 iOS App Templates:\nhttps://www.stephancodes.com/shop\n\n👉 FREE Twitter SwiftUI Course \nhttps://www.youtube.com/watch?v=3pIXMwvJLZs\n\nChapters \n00:00 - Intro\n03:27 - What is an API?\n07:59 - Project Setup & API Docs\n14:27 - Fetching Price Data from API\n28:01 - Parsing JSON\n44:56 - Threading Breakdown\n56:14 - Error Handling\n1:07:51 - Creating A Service Class\n1:23:27 - Fetching Coins \n1:45:40 - Custom Decoding | Error Handling\n2:04:29 - Custom Errors | Retain Cycles\n2:23:29 - Async/Await\n2:40:39 - Pro Course Upgrade\n\nSocial Media: \nInstagram - @stephan.dowless",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/II7WcnHVG4U/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/II7WcnHVG4U/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/II7WcnHVG4U/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/II7WcnHVG4U/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/II7WcnHVG4U/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "AppStuff",
        "tags": [
          "SwiftUI",
          "Xcode",
          "iOS",
          "iOS App",
          "Uber",
          "Swift",
          "iOS maps",
          "iOS development",
          "development",
          "programming",
          "build uber app",
          "mobile app",
          "code",
          "coding",
          "iOS 16",
          "Xcode 14",
          "API",
          "Navigation",
          "Navigation Stacks",
          "Navigation Link",
          "State",
          "Binding",
          "State vs Binding",
          "@State",
          "@Binding",
          "iPhone app",
          "threads",
          "swiftui threads",
          "instagram",
          "async",
          "await",
          "threads ios app",
          "threads clone",
          "Firebase",
          "ios17",
          "networking",
          "api",
          "swift concurrency",
          "threading",
          "async/await"
        ],
        "categoryId": "28",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "Swift Networking Masterclass | A Comprehensive Course for iOS Developers",
          "description": "Are you an aspiring iOS app developer or a seasoned coder looking to level up your skills in networking? Look no further! Welcome to our comprehensive iOS development course dedicated to networking with Swift.\n\n🖥️ FULL PRO COURSE: \nhttps://appstuff.teachable.com/p/swift-networking-mastery\n\n🔴 Become a member for UNLIMITED ACCESS \nhttps://www.stephancodes.com/plans-pricing\n\n🔴 FREE Threads Clone SwiftUI Course:\nhttps://appstuff.teachable.com/p/swiftui-threads-pro\n\n🔴 FREE Instagram Course with SwiftUI:\nhttps://youtu.be/7UKUCZuaVlA\n\n🔴Navigation Stacks:\nhttps://youtu.be/ZQXzZ1hxQwo\n\n🔴@State vs @Binding video:\nhttps://youtu.be/uiptHyyxF3Y\n\n🖥️ ONLINE COURSES & APPS\n\n👉 Pro Courses: \nhttps://www.stephancodes.com/videos\n\n👉 FREE UBER SwiftUI Course \nhttps://youtu.be/Z6-KVWXbw-w\n\n👉 iOS App Templates:\nhttps://www.stephancodes.com/shop\n\n👉 FREE Twitter SwiftUI Course \nhttps://www.youtube.com/watch?v=3pIXMwvJLZs\n\nChapters \n00:00 - Intro\n03:27 - What is an API?\n07:59 - Project Setup & API Docs\n14:27 - Fetching Price Data from API\n28:01 - Parsing JSON\n44:56 - Threading Breakdown\n56:14 - Error Handling\n1:07:51 - Creating A Service Class\n1:23:27 - Fetching Coins \n1:45:40 - Custom Decoding | Error Handling\n2:04:29 - Custom Errors | Retain Cycles\n2:23:29 - Async/Await\n2:40:39 - Pro Course Upgrade\n\nSocial Media: \nInstagram - @stephan.dowless"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT2H45M7S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "49871",
        "likeCount": "1547",
        "favoriteCount": "0",
        "commentCount": "91"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "MPyUtgGkFwH4b9hA-AiHLwzVYPs",
      "id": "xkgaIm7QxK0",
      "snippet": {
        "publishedAt": "2024-11-12T15:43:27Z",
        "channelId": "UC2D6eRvCeMtcF5OGHf1-trw",
        "title": "How to Make an App - Lesson 1 (Xcode 16 Updated)",
        "description": "Confidently learn how to make an app (no coding experience required). Used in classrooms and Apple stores, these videos are designed for beginners in mind to teach the fundamental skills for making apps on iOS.\n\n👋 Our \"Launch Your First App\" program will help you build up your iOS skills to publish your very own feature rich app even if you’re a beginner starting from scratch. https://cwc.to/youtubeoffer\n\nDownload the project and resources:\nhttps://learn.codewithchris.com/courses/start?utm_source=youtube&utm_medium=video&utm_campaign=8day2025&utm_content=lesson1\n\nNiagara falls image asset: \nhttps://www.dropbox.com/scl/fi/sys0y59r0222dpvxoyipu/niagarafalls.jpeg?rlkey=k182gmqr5tdlxf041sr7ivm9e&dl=1\n\nTimestamps\n00:00 Intro\n01:16 The App Store Process\n04:45 Downloading and Installing Xcode\n05:58 Start a New Xcode Project\n07:29 Add Images to the App Project\n08:27 Customizing Your App Screen\n24:50 Launch Your App\n26:44 Outro\n\nThis video series will teach a beginner with no programming experience how to make iPhone apps. I'm creating these videos with the assumption that the student has no prior knowledge and is starting from scratch.\n\nAbout CodeWithChris:\nHi I’m Chris! I’m dedicated to teaching fundamentals about how to make an app. This is important if you’re trying to land an iOS job, be a freelancer, increase or start a business with an app idea. On this channel and my website, you'll find a ton of free resources and tutorials to aid you on your journey to learn iOS development. Many people have learned to code and build apps on their own! \n\nStudent Success Stories\nhttps://codewithchris.com/category/success-stories/\n\n#CodeWithChris #iosdevelopment  #HowToMakeAnApp",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/xkgaIm7QxK0/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/xkgaIm7QxK0/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/xkgaIm7QxK0/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/xkgaIm7QxK0/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/xkgaIm7QxK0/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "CodeWithChris",
        "tags": [
          "How to Make an App",
          "How to Create an App",
          "How Build a Mobile App",
          "Xcode",
          "Swift",
          "iOS",
          "Coding",
          "Programming",
          "iOS Development"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "How to Make an App - Lesson 1 (Xcode 16 Updated)",
          "description": "Confidently learn how to make an app (no coding experience required). Used in classrooms and Apple stores, these videos are designed for beginners in mind to teach the fundamental skills for making apps on iOS.\n\n👋 Our \"Launch Your First App\" program will help you build up your iOS skills to publish your very own feature rich app even if you’re a beginner starting from scratch. https://cwc.to/youtubeoffer\n\nDownload the project and resources:\nhttps://learn.codewithchris.com/courses/start?utm_source=youtube&utm_medium=video&utm_campaign=8day2025&utm_content=lesson1\n\nNiagara falls image asset: \nhttps://www.dropbox.com/scl/fi/sys0y59r0222dpvxoyipu/niagarafalls.jpeg?rlkey=k182gmqr5tdlxf041sr7ivm9e&dl=1\n\nTimestamps\n00:00 Intro\n01:16 The App Store Process\n04:45 Downloading and Installing Xcode\n05:58 Start a New Xcode Project\n07:29 Add Images to the App Project\n08:27 Customizing Your App Screen\n24:50 Launch Your App\n26:44 Outro\n\nThis video series will teach a beginner with no programming experience how to make iPhone apps. I'm creating these videos with the assumption that the student has no prior knowledge and is starting from scratch.\n\nAbout CodeWithChris:\nHi I’m Chris! I’m dedicated to teaching fundamentals about how to make an app. This is important if you’re trying to land an iOS job, be a freelancer, increase or start a business with an app idea. On this channel and my website, you'll find a ton of free resources and tutorials to aid you on your journey to learn iOS development. Many people have learned to code and build apps on their own! \n\nStudent Success Stories\nhttps://codewithchris.com/category/success-stories/\n\n#CodeWithChris #iosdevelopment  #HowToMakeAnApp"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT27M21S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "134601",
        "likeCount": "2636",
        "favoriteCount": "0",
        "commentCount": "132"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "cXmYQWyoEknbLPLw1XujCr3KTjo",
      "id": "JJ-AandyU5o",
      "snippet": {
        "publishedAt": "2025-05-09T14:30:11Z",
        "channelId": "UCsvqVGtbbyHaMoevxPAq9Fg",
        "title": "Swift Programming For Beginners 2025 | Swift Crash Course 2025 | Swift Tutorial | Simplilearn",
        "description": "🔥 Full Stack Developer - MERN Stack: https://www.simplilearn.com/full-stack-developer-course-mern-certification-training?utm_campaign=JJ-AandyU5o&utm_medium=DescriptionFirstFold&utm_source=youtube        \n🔥 Full Stack Java Developer - https://www.simplilearn.com/java-full-stack-developer-certification?utm_campaign=JJ-AandyU5o&utm_medium=DescriptionFF&utm_source=youtube     \n\nIn this video, we're going to learn the basics of the Swift programming language. First, we'll talk about how Swift deals with values that might not exist, and how to handle them safely using simple techniques. Then, we'll explore common ways to organize information in Swift, like lists of items called arrays, collections of words and their meanings called dictionaries, and groups of unique things called sets. Finally, we'll start to understand how Swift uses the idea of creating 'objects' which are like real-world things with their own information and actions. This video is a great place to start if you want to understand the main ideas behind building apps with Swift.\n\n00:00:07- Introduction of the video\n00:00:48- introduction to swift programming language\n00:02:52- Installing swift \n00:06:29- basics of swift\n00:15:41-control flow\n00:25:00-optionals\n00:27:04-collections\n00:38:13-Object-Oriented Swift\n00:47:28-cNext steps and resources\n\nSwift is a modern and powerful programming language created by Apple. It's designed to be easy to learn and use, while also being incredibly fast and safe. Primarily used for building apps across Apple's platforms (iOS, macOS, watchOS, tvOS), Swift is also expanding into other areas like server-side development. Think of it as a clear and efficient way to tell computers what to do, especially for creating engaging and high-performing applications.\n\n\n✅ Subscribe to our Channel to learn more about the top Technologies: https://bit.ly/2VT4WtH\n\n#SwiftProgeamming #SwiftTutorial #softwaredevelopment #softwareengineer #simplilearn\n\n➡️ About Full Stack Java Developer Program\nThis Java Full Stack Developer course is designed to introduce you to front-end, middleware, and back-end Java web development technologies. You will learn to build an end-to-end application, test and deploy code, store data using MongoDB, and much more.\n\n✅ Key Features\nSimplilearn's JobAssist helps you get noticed by top hiring companies\nKickstart Full Stack Java Developer career with industry-aligned curriculum by experts\nHands-on practice through 20+ projects, assessments, and tests\nLearn cutting edge frameworks like React, Springboot, and many more\nLive interaction and applied learning with industry expert trainers\nPractice hands - on learning with Capstone Projects across 4 domains\n\n✅ Skills Covered\nAgile\nGit\nSQL\nCore Java\nSpring\nSpring Boot\nHTML and CSS\nAWS\nDocker\nJenkins\nJavaScript\nReactJS\nCucumber\nMaven JSP\nJDBC\nMongoDB\nJUnit\n\n✅ Enroll Now: https://www.simplilearn.com/full-stack-developer-course-mern-certification-training?utm_campaign=JJ-AandyU5o&utm_medium=Description&utm_source=youtube                      \"",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/JJ-AandyU5o/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/JJ-AandyU5o/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/JJ-AandyU5o/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/JJ-AandyU5o/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/JJ-AandyU5o/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Simplilearn",
        "tags": [
          "Swift Programming For Beginners 2025",
          "Swift Crash Course 2025",
          "Swift Tutorial",
          "Simplilearn",
          "Swift Programming Crash Course 2025",
          "swift tutorial for beginners",
          "swift tutorial for ios application development",
          "swift programming",
          "swift programming full course",
          "swift programming tutorial",
          "swift programming for beginners",
          "swift programming in windows",
          "swift course ios",
          "swift course",
          "swift crash course",
          "swift course 2025",
          "what is swift",
          "learn swift"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "Swift Programming For Beginners 2025 | Swift Crash Course 2025 | Swift Tutorial | Simplilearn",
          "description": "🔥 Full Stack Developer - MERN Stack: https://www.simplilearn.com/full-stack-developer-course-mern-certification-training?utm_campaign=JJ-AandyU5o&utm_medium=DescriptionFirstFold&utm_source=youtube        \n🔥 Full Stack Java Developer - https://www.simplilearn.com/java-full-stack-developer-certification?utm_campaign=JJ-AandyU5o&utm_medium=DescriptionFF&utm_source=youtube     \n\nIn this video, we're going to learn the basics of the Swift programming language. First, we'll talk about how Swift deals with values that might not exist, and how to handle them safely using simple techniques. Then, we'll explore common ways to organize information in Swift, like lists of items called arrays, collections of words and their meanings called dictionaries, and groups of unique things called sets. Finally, we'll start to understand how Swift uses the idea of creating 'objects' which are like real-world things with their own information and actions. This video is a great place to start if you want to understand the main ideas behind building apps with Swift.\n\n00:00:07- Introduction of the video\n00:00:48- introduction to swift programming language\n00:02:52- Installing swift \n00:06:29- basics of swift\n00:15:41-control flow\n00:25:00-optionals\n00:27:04-collections\n00:38:13-Object-Oriented Swift\n00:47:28-cNext steps and resources\n\nSwift is a modern and powerful programming language created by Apple. It's designed to be easy to learn and use, while also being incredibly fast and safe. Primarily used for building apps across Apple's platforms (iOS, macOS, watchOS, tvOS), Swift is also expanding into other areas like server-side development. Think of it as a clear and efficient way to tell computers what to do, especially for creating engaging and high-performing applications.\n\n\n✅ Subscribe to our Channel to learn more about the top Technologies: https://bit.ly/2VT4WtH\n\n#SwiftProgeamming #SwiftTutorial #softwaredevelopment #softwareengineer #simplilearn\n\n➡️ About Full Stack Java Developer Program\nThis Java Full Stack Developer course is designed to introduce you to front-end, middleware, and back-end Java web development technologies. You will learn to build an end-to-end application, test and deploy code, store data using MongoDB, and much more.\n\n✅ Key Features\nSimplilearn's JobAssist helps you get noticed by top hiring companies\nKickstart Full Stack Java Developer career with industry-aligned curriculum by experts\nHands-on practice through 20+ projects, assessments, and tests\nLearn cutting edge frameworks like React, Springboot, and many more\nLive interaction and applied learning with industry expert trainers\nPractice hands - on learning with Capstone Projects across 4 domains\n\n✅ Skills Covered\nAgile\nGit\nSQL\nCore Java\nSpring\nSpring Boot\nHTML and CSS\nAWS\nDocker\nJenkins\nJavaScript\nReactJS\nCucumber\nMaven JSP\nJDBC\nMongoDB\nJUnit\n\n✅ Enroll Now: https://www.simplilearn.com/full-stack-developer-course-mern-certification-training?utm_campaign=JJ-AandyU5o&utm_medium=Description&utm_source=youtube                      \""
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT49M45S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "2313",
        "likeCount": "52",
        "favoriteCount": "0",
        "commentCount": "1"
      }
    }
  ],
  "pageInfo": {
    "totalResults": 15,
    "resultsPerPage": 15
  }
}
","status":200,"url":"https://www.googleapis.com/youtube/v3/videos?part=snippet%2CcontentDetails%2Cstatistics&id=8Xg7E9shq0U%2CCwA1VWP0Ldw%2Cn5X_V81OYnQ%2Cb1oC7sLIgpI%2CcomQ1-x2a1Q%2C0_YxopMqTCw%2CuvLUJev1F20%2CwargRHa8oKQ%2C1ocQUXi3gDc%2C6kW2FIy2nsA%2CKCgYDCKqato%2CK0t-RCSlasE%2CII7WcnHVG4U%2CxkgaIm7QxK0%2CJJ-AandyU5o&key=AIzaSyAeZAsOW2kBeNqsdozdSNpajJeUOXsJ2fs"},"revalidate":3600,"tags":[]}