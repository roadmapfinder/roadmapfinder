{"kind":"FETCH","data":{"headers":{"content-encoding":"gzip","content-type":"application/json; charset=UTF-8","date":"Thu, 23 Oct 2025 11:03:57 GMT","server":"scaffolding on HTTPServer2","transfer-encoding":"chunked","vary":"Origin, X-Origin, Referer","x-content-type-options":"nosniff","x-frame-options":"SAMEORIGIN","x-xss-protection":"0"},"body":"ewogICJraW5kIjogInlvdXR1YmUjdmlkZW9MaXN0UmVzcG9uc2UiLAogICJldGFnIjogInpjSFpKMWZEUnVwUVNIUzlNVWhINVBlaWU1SSIsCiAgIml0ZW1zIjogWwogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgImV0YWciOiAiOWRjYkVCelRxTGhjRjBwcDdZQUlWb0JnNjhRIiwKICAgICAgImlkIjogIjQySktCZVJUVHBrIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMjUtMDQtMTRUMDc6MzA6MDFaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDVzVZZXVFUk1tbG5xbzRvcTh2d1VwZyIsCiAgICAgICAgInRpdGxlIjogIkNvbXBsZXRlIFJlYWN0IE5hdGl2ZSBUdXRvcmlhbCAjNSAtIExpZ2h0IGFuZCBEYXJrIFRoZW1lcyIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIkluIHRoaXMgY29tcGxldGUgUmVhY3QgTmF0aXZlIHR1dG9yaWFsLCB5b3UnbGwgbGVhcm4gaG93IHRvIGRldmVsb3AgbmF0aXZlIGFwcHMgZnJvbSB0aGUgZ3JvdW5kIHVwLCB1c2luZyBSZWFjdCBOYXRpdmUgYW5kIEV4cG8uIFlvdSdsbCBsZWFybiBhYm91dCBuYXRpdmUgY29tcG9uZW50cywgcm91dGluZywgbmF2aWdhdGlvbiwgc3R5bGluZywgYXV0aGVudGljYXRpb24gYW5kIGEgbG90IG1vcmUgdG9vLiBcblxu8J+UpfCfpbfwn4+8IEdldCBpbnN0YW50IGFjY2VzcyB0byBBTEwgcHJlbWl1bSBjb3Vyc2VzIG9uIE5ldE5pbmphLmRldjpcbmh0dHBzOi8vbmV0bmluamEuZGV2L1xuXG7wn5Sl8J+lt/Cfj7wgR2V0IGluc3RhbnQgYWNjZXNzIHRvIFRoaXMgQ291cnNlIG9uIE5ldE5pbmphLmRldjpcbmh0dHBzOi8vbmV0bmluamEuZGV2L3AvY29tcGxldGUtcmVhY3QtbmF0aXZlXG5cbvCflJfwn5GHIFNpZ24gdXAgdG8gQXBwd3JpdGUgJiBHZXQgJDUwIEZyZWUgQ3JlZGl0OlxuaHR0cHM6Ly9hcHdyLmRldi9uZXRuaW5qYTA1MFxuXG7wn5OC8J+lt/Cfj7wgQWNjZXNzIHRoZSBjb3Vyc2UgZmlsZXMgb24gR2l0SHViOlxuaHR0cHM6Ly9naXRodWIuY29tL2lhbXNoYXVuanAvQ29tcGxldGUtUmVhY3QtTmF0aXZlLVR1dG9yaWFsXG5cbvCfp6Dwn6W38J+PvCBSZWFjdCBDb3Vyc2U6IFxuaHR0cHM6Ly9uZXRuaW5qYS5kZXYvcC9idWlsZC13ZWJzaXRlcy13aXRoLXJlYWN0LWZpcmViYXNlXG5cbvCfp6Dwn6W38J+PvCBSZWFjdCBDb250ZXh0IGFuZCBIb29rcyBDb3Vyc2U6IFxuaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj02UmhPelFjaVZ3SSZsaXN0PVBMNGNVeGVHa2NDOWhOb2tCeUppbFBnNWc5bTJBUFVlUElcblxu8J+Ul/CfkYcgSW5zdGFsbCBOb2RlLmpzOiBcbmh0dHBzOi8vbm9kZWpzLm9yZy9lblxuXG7wn5SX8J+RhyBSZWFjdCBOYXRpdmUgRG9jczpcbmh0dHBzOi8vcmVhY3RuYXRpdmUuZGV2L2RvY3MvZ2V0dGluZy1zdGFydGVkXG5cbvCflJfwn5GHIEV4cG8gRG9jczpcbmh0dHBzOi8vZG9jcy5leHBvLmRldi9cblxu8J+Ul/CfkYcgQXBwd3JpdGUgZG9jczpcbmh0dHBzOi8vYXBwd3JpdGUuaW8vZG9jcyIsCiAgICAgICAgInRodW1ibmFpbHMiOiB7CiAgICAgICAgICAiZGVmYXVsdCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpLzQySktCZVJUVHBrL2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTIwLAogICAgICAgICAgICAiaGVpZ2h0IjogOTAKICAgICAgICAgIH0sCiAgICAgICAgICAibWVkaXVtIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvNDJKS0JlUlRUcGsvbXFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgICAgICAgImhlaWdodCI6IDE4MAogICAgICAgICAgfSwKICAgICAgICAgICJoaWdoIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvNDJKS0JlUlRUcGsvaHFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgICAgICAgImhlaWdodCI6IDM2MAogICAgICAgICAgfSwKICAgICAgICAgICJzdGFuZGFyZCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpLzQySktCZVJUVHBrL3NkZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA2NDAsCiAgICAgICAgICAgICJoZWlnaHQiOiA0ODAKICAgICAgICAgIH0sCiAgICAgICAgICAibWF4cmVzIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvNDJKS0JlUlRUcGsvbWF4cmVzZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjgwLAogICAgICAgICAgICAiaGVpZ2h0IjogNzIwCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiY2hhbm5lbFRpdGxlIjogIk5ldCBOaW5qYSIsCiAgICAgICAgInRhZ3MiOiBbCiAgICAgICAgICAicmVhY3QgbmF0aXZlIiwKICAgICAgICAgICJyZWFjdCBuYXRpdmUgdHV0b3JpYWwiLAogICAgICAgICAgInJlYWN0IiwKICAgICAgICAgICJyZWFjdCBmb3IgbW9iaWxlIiwKICAgICAgICAgICJtb2JpbGUgZGV2ZWxvcG1lbnQiLAogICAgICAgICAgImFwcCBkZXZlbG9wbWVudCIsCiAgICAgICAgICAicmVhY3QgbmF0aXZlIGNyYXNoIGNvdXJzZSIsCiAgICAgICAgICAidHV0b3JpYWwiLAogICAgICAgICAgImNyYXNoIGNvdXJzZSIsCiAgICAgICAgICAicmVhY3QgbmF0aXZlIHZzIGZsdXR0ZXIiLAogICAgICAgICAgIm1vYmlsZSB3ZWIgZGV2IgogICAgICAgIF0sCiAgICAgICAgImNhdGVnb3J5SWQiOiAiMjciLAogICAgICAgICJsaXZlQnJvYWRjYXN0Q29udGVudCI6ICJub25lIiwKICAgICAgICAiZGVmYXVsdExhbmd1YWdlIjogImVuIiwKICAgICAgICAibG9jYWxpemVkIjogewogICAgICAgICAgInRpdGxlIjogIkNvbXBsZXRlIFJlYWN0IE5hdGl2ZSBUdXRvcmlhbCAjNSAtIExpZ2h0IGFuZCBEYXJrIFRoZW1lcyIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiSW4gdGhpcyBjb21wbGV0ZSBSZWFjdCBOYXRpdmUgdHV0b3JpYWwsIHlvdSdsbCBsZWFybiBob3cgdG8gZGV2ZWxvcCBuYXRpdmUgYXBwcyBmcm9tIHRoZSBncm91bmQgdXAsIHVzaW5nIFJlYWN0IE5hdGl2ZSBhbmQgRXhwby4gWW91J2xsIGxlYXJuIGFib3V0IG5hdGl2ZSBjb21wb25lbnRzLCByb3V0aW5nLCBuYXZpZ2F0aW9uLCBzdHlsaW5nLCBhdXRoZW50aWNhdGlvbiBhbmQgYSBsb3QgbW9yZSB0b28uIFxuXG7wn5Sl8J+lt/Cfj7wgR2V0IGluc3RhbnQgYWNjZXNzIHRvIEFMTCBwcmVtaXVtIGNvdXJzZXMgb24gTmV0TmluamEuZGV2OlxuaHR0cHM6Ly9uZXRuaW5qYS5kZXYvXG5cbvCflKXwn6W38J+PvCBHZXQgaW5zdGFudCBhY2Nlc3MgdG8gVGhpcyBDb3Vyc2Ugb24gTmV0TmluamEuZGV2OlxuaHR0cHM6Ly9uZXRuaW5qYS5kZXYvcC9jb21wbGV0ZS1yZWFjdC1uYXRpdmVcblxu8J+Ul/CfkYcgU2lnbiB1cCB0byBBcHB3cml0ZSAmIEdldCAkNTAgRnJlZSBDcmVkaXQ6XG5odHRwczovL2Fwd3IuZGV2L25ldG5pbmphMDUwXG5cbvCfk4Lwn6W38J+PvCBBY2Nlc3MgdGhlIGNvdXJzZSBmaWxlcyBvbiBHaXRIdWI6XG5odHRwczovL2dpdGh1Yi5jb20vaWFtc2hhdW5qcC9Db21wbGV0ZS1SZWFjdC1OYXRpdmUtVHV0b3JpYWxcblxu8J+noPCfpbfwn4+8IFJlYWN0IENvdXJzZTogXG5odHRwczovL25ldG5pbmphLmRldi9wL2J1aWxkLXdlYnNpdGVzLXdpdGgtcmVhY3QtZmlyZWJhc2Vcblxu8J+noPCfpbfwn4+8IFJlYWN0IENvbnRleHQgYW5kIEhvb2tzIENvdXJzZTogXG5odHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PTZSaE96UWNpVndJJmxpc3Q9UEw0Y1V4ZUdrY0M5aE5va0J5SmlsUGc1ZzltMkFQVWVQSVxuXG7wn5SX8J+RhyBJbnN0YWxsIE5vZGUuanM6IFxuaHR0cHM6Ly9ub2RlanMub3JnL2VuXG5cbvCflJfwn5GHIFJlYWN0IE5hdGl2ZSBEb2NzOlxuaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy9nZXR0aW5nLXN0YXJ0ZWRcblxu8J+Ul/CfkYcgRXhwbyBEb2NzOlxuaHR0cHM6Ly9kb2NzLmV4cG8uZGV2L1xuXG7wn5SX8J+RhyBBcHB3cml0ZSBkb2NzOlxuaHR0cHM6Ly9hcHB3cml0ZS5pby9kb2NzIgogICAgICAgIH0sCiAgICAgICAgImRlZmF1bHRBdWRpb0xhbmd1YWdlIjogImVuLUdCIgogICAgICB9LAogICAgICAiY29udGVudERldGFpbHMiOiB7CiAgICAgICAgImR1cmF0aW9uIjogIlBUMTFNMjBTIiwKICAgICAgICAiZGltZW5zaW9uIjogIjJkIiwKICAgICAgICAiZGVmaW5pdGlvbiI6ICJoZCIsCiAgICAgICAgImNhcHRpb24iOiAiZmFsc2UiLAogICAgICAgICJsaWNlbnNlZENvbnRlbnQiOiB0cnVlLAogICAgICAgICJjb250ZW50UmF0aW5nIjoge30sCiAgICAgICAgInByb2plY3Rpb24iOiAicmVjdGFuZ3VsYXIiCiAgICAgIH0sCiAgICAgICJzdGF0aXN0aWNzIjogewogICAgICAgICJ2aWV3Q291bnQiOiAiMjI0MDAiLAogICAgICAgICJsaWtlQ291bnQiOiAiNDYxIiwKICAgICAgICAiZmF2b3JpdGVDb3VudCI6ICIwIiwKICAgICAgICAiY29tbWVudENvdW50IjogIjMzIgogICAgICB9CiAgICB9LAogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgImV0YWciOiAiM3I4NDE0NFRISld6c2NiQ0ZpSE1EWXM0OFJzIiwKICAgICAgImlkIjogIlVDYlJUYVg2aTdnIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMjUtMDQtMTBUMDg6Mjc6MTJaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDVzVZZXVFUk1tbG5xbzRvcTh2d1VwZyIsCiAgICAgICAgInRpdGxlIjogIkNvbXBsZXRlIFJlYWN0IE5hdGl2ZSBUdXRvcmlhbCAjMiAtIFRleHQsIFZpZXcgJiBJbWFnZSBDb21wb25lbnRzIiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiSW4gdGhpcyBjb21wbGV0ZSBSZWFjdCBOYXRpdmUgdHV0b3JpYWwsIHlvdSdsbCBsZWFybiBob3cgdG8gZGV2ZWxvcCBuYXRpdmUgYXBwcyBmcm9tIHRoZSBncm91bmQgdXAsIHVzaW5nIFJlYWN0IE5hdGl2ZSBhbmQgRXhwby4gWW91J2xsIGxlYXJuIGFib3V0IG5hdGl2ZSBjb21wb25lbnRzLCByb3V0aW5nLCBuYXZpZ2F0aW9uLCBzdHlsaW5nLCBhdXRoZW50aWNhdGlvbiBhbmQgYSBsb3QgbW9yZSB0b28uIFxuXG7wn5Sl8J+lt/Cfj7wgR2V0IGluc3RhbnQgYWNjZXNzIHRvIEFMTCBwcmVtaXVtIGNvdXJzZXMgb24gTmV0TmluamEuZGV2OlxuaHR0cHM6Ly9uZXRuaW5qYS5kZXYvXG5cbvCflKXwn6W38J+PvCBHZXQgaW5zdGFudCBhY2Nlc3MgdG8gVGhpcyBDb3Vyc2Ugb24gTmV0TmluamEuZGV2OlxuaHR0cHM6Ly9uZXRuaW5qYS5kZXYvcC9jb21wbGV0ZS1yZWFjdC1uYXRpdmVcblxu8J+Ul/CfkYcgU2lnbiB1cCB0byBBcHB3cml0ZSAmIEdldCAkNTAgRnJlZSBDcmVkaXQ6XG5odHRwczovL2Fwd3IuZGV2L25ldG5pbmphMDUwXG5cbvCfk4Lwn6W38J+PvCBBY2Nlc3MgdGhlIGNvdXJzZSBmaWxlcyBvbiBHaXRIdWI6XG5odHRwczovL2dpdGh1Yi5jb20vaWFtc2hhdW5qcC9Db21wbGV0ZS1SZWFjdC1OYXRpdmUtVHV0b3JpYWxcblxu8J+noPCfpbfwn4+8IFJlYWN0IENvdXJzZTogXG5odHRwczovL25ldG5pbmphLmRldi9wL2J1aWxkLXdlYnNpdGVzLXdpdGgtcmVhY3QtZmlyZWJhc2Vcblxu8J+noPCfpbfwn4+8IFJlYWN0IENvbnRleHQgYW5kIEhvb2tzIENvdXJzZTogXG5odHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PTZSaE96UWNpVndJJmxpc3Q9UEw0Y1V4ZUdrY0M5aE5va0J5SmlsUGc1ZzltMkFQVWVQSVxuXG7wn5SX8J+RhyBJbnN0YWxsIE5vZGUuanM6IFxuaHR0cHM6Ly9ub2RlanMub3JnL2VuXG5cbvCflJfwn5GHIFJlYWN0IE5hdGl2ZSBEb2NzOlxuaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy9nZXR0aW5nLXN0YXJ0ZWRcblxu8J+Ul/CfkYcgRXhwbyBEb2NzOlxuaHR0cHM6Ly9kb2NzLmV4cG8uZGV2L1xuXG7wn5SX8J+RhyBBcHB3cml0ZSBkb2NzOlxuaHR0cHM6Ly9hcHB3cml0ZS5pby9kb2NzIiwKICAgICAgICAidGh1bWJuYWlscyI6IHsKICAgICAgICAgICJkZWZhdWx0IjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvVUNiUlRhWDZpN2cvZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiA5MAogICAgICAgICAgfSwKICAgICAgICAgICJtZWRpdW0iOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9VQ2JSVGFYNmk3Zy9tcWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMzIwLAogICAgICAgICAgICAiaGVpZ2h0IjogMTgwCiAgICAgICAgICB9LAogICAgICAgICAgImhpZ2giOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9VQ2JSVGFYNmk3Zy9ocWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNDgwLAogICAgICAgICAgICAiaGVpZ2h0IjogMzYwCiAgICAgICAgICB9LAogICAgICAgICAgInN0YW5kYXJkIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvVUNiUlRhWDZpN2cvc2RkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDY0MCwKICAgICAgICAgICAgImhlaWdodCI6IDQ4MAogICAgICAgICAgfSwKICAgICAgICAgICJtYXhyZXMiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9VQ2JSVGFYNmk3Zy9tYXhyZXNkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyODAsCiAgICAgICAgICAgICJoZWlnaHQiOiA3MjAKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJjaGFubmVsVGl0bGUiOiAiTmV0IE5pbmphIiwKICAgICAgICAidGFncyI6IFsKICAgICAgICAgICJyZWFjdCBuYXRpdmUiLAogICAgICAgICAgInJlYWN0IG5hdGl2ZSB0dXRvcmlhbCIsCiAgICAgICAgICAicmVhY3QiLAogICAgICAgICAgInJlYWN0IGZvciBtb2JpbGUiLAogICAgICAgICAgIm1vYmlsZSBkZXZlbG9wbWVudCIsCiAgICAgICAgICAiYXBwIGRldmVsb3BtZW50IiwKICAgICAgICAgICJyZWFjdCBuYXRpdmUgY3Jhc2ggY291cnNlIiwKICAgICAgICAgICJ0dXRvcmlhbCIsCiAgICAgICAgICAiY3Jhc2ggY291cnNlIiwKICAgICAgICAgICJyZWFjdCBuYXRpdmUgdnMgZmx1dHRlciIsCiAgICAgICAgICAibW9iaWxlIHdlYiBkZXYiCiAgICAgICAgXSwKICAgICAgICAiY2F0ZWdvcnlJZCI6ICIyNyIsCiAgICAgICAgImxpdmVCcm9hZGNhc3RDb250ZW50IjogIm5vbmUiLAogICAgICAgICJkZWZhdWx0TGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICJsb2NhbGl6ZWQiOiB7CiAgICAgICAgICAidGl0bGUiOiAiQ29tcGxldGUgUmVhY3QgTmF0aXZlIFR1dG9yaWFsICMyIC0gVGV4dCwgVmlldyAmIEltYWdlIENvbXBvbmVudHMiLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIkluIHRoaXMgY29tcGxldGUgUmVhY3QgTmF0aXZlIHR1dG9yaWFsLCB5b3UnbGwgbGVhcm4gaG93IHRvIGRldmVsb3AgbmF0aXZlIGFwcHMgZnJvbSB0aGUgZ3JvdW5kIHVwLCB1c2luZyBSZWFjdCBOYXRpdmUgYW5kIEV4cG8uIFlvdSdsbCBsZWFybiBhYm91dCBuYXRpdmUgY29tcG9uZW50cywgcm91dGluZywgbmF2aWdhdGlvbiwgc3R5bGluZywgYXV0aGVudGljYXRpb24gYW5kIGEgbG90IG1vcmUgdG9vLiBcblxu8J+UpfCfpbfwn4+8IEdldCBpbnN0YW50IGFjY2VzcyB0byBBTEwgcHJlbWl1bSBjb3Vyc2VzIG9uIE5ldE5pbmphLmRldjpcbmh0dHBzOi8vbmV0bmluamEuZGV2L1xuXG7wn5Sl8J+lt/Cfj7wgR2V0IGluc3RhbnQgYWNjZXNzIHRvIFRoaXMgQ291cnNlIG9uIE5ldE5pbmphLmRldjpcbmh0dHBzOi8vbmV0bmluamEuZGV2L3AvY29tcGxldGUtcmVhY3QtbmF0aXZlXG5cbvCflJfwn5GHIFNpZ24gdXAgdG8gQXBwd3JpdGUgJiBHZXQgJDUwIEZyZWUgQ3JlZGl0OlxuaHR0cHM6Ly9hcHdyLmRldi9uZXRuaW5qYTA1MFxuXG7wn5OC8J+lt/Cfj7wgQWNjZXNzIHRoZSBjb3Vyc2UgZmlsZXMgb24gR2l0SHViOlxuaHR0cHM6Ly9naXRodWIuY29tL2lhbXNoYXVuanAvQ29tcGxldGUtUmVhY3QtTmF0aXZlLVR1dG9yaWFsXG5cbvCfp6Dwn6W38J+PvCBSZWFjdCBDb3Vyc2U6IFxuaHR0cHM6Ly9uZXRuaW5qYS5kZXYvcC9idWlsZC13ZWJzaXRlcy13aXRoLXJlYWN0LWZpcmViYXNlXG5cbvCfp6Dwn6W38J+PvCBSZWFjdCBDb250ZXh0IGFuZCBIb29rcyBDb3Vyc2U6IFxuaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj02UmhPelFjaVZ3SSZsaXN0PVBMNGNVeGVHa2NDOWhOb2tCeUppbFBnNWc5bTJBUFVlUElcblxu8J+Ul/CfkYcgSW5zdGFsbCBOb2RlLmpzOiBcbmh0dHBzOi8vbm9kZWpzLm9yZy9lblxuXG7wn5SX8J+RhyBSZWFjdCBOYXRpdmUgRG9jczpcbmh0dHBzOi8vcmVhY3RuYXRpdmUuZGV2L2RvY3MvZ2V0dGluZy1zdGFydGVkXG5cbvCflJfwn5GHIEV4cG8gRG9jczpcbmh0dHBzOi8vZG9jcy5leHBvLmRldi9cblxu8J+Ul/CfkYcgQXBwd3JpdGUgZG9jczpcbmh0dHBzOi8vYXBwd3JpdGUuaW8vZG9jcyIKICAgICAgICB9LAogICAgICAgICJkZWZhdWx0QXVkaW9MYW5ndWFnZSI6ICJlbi1HQiIKICAgICAgfSwKICAgICAgImNvbnRlbnREZXRhaWxzIjogewogICAgICAgICJkdXJhdGlvbiI6ICJQVDE0TTQxUyIsCiAgICAgICAgImRpbWVuc2lvbiI6ICIyZCIsCiAgICAgICAgImRlZmluaXRpb24iOiAiaGQiLAogICAgICAgICJjYXB0aW9uIjogImZhbHNlIiwKICAgICAgICAibGljZW5zZWRDb250ZW50IjogdHJ1ZSwKICAgICAgICAiY29udGVudFJhdGluZyI6IHt9LAogICAgICAgICJwcm9qZWN0aW9uIjogInJlY3Rhbmd1bGFyIgogICAgICB9LAogICAgICAic3RhdGlzdGljcyI6IHsKICAgICAgICAidmlld0NvdW50IjogIjM5NDA5IiwKICAgICAgICAibGlrZUNvdW50IjogIjcxNyIsCiAgICAgICAgImZhdm9yaXRlQ291bnQiOiAiMCIsCiAgICAgICAgImNvbW1lbnRDb3VudCI6ICIyOSIKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImtpbmQiOiAieW91dHViZSN2aWRlbyIsCiAgICAgICJldGFnIjogInM2UlVLSkNtcC1UeTh2WFR2OWI2YTR5TFpuZyIsCiAgICAgICJpZCI6ICJQaFotYWp5TWZ0SSIsCiAgICAgICJzbmlwcGV0IjogewogICAgICAgICJwdWJsaXNoZWRBdCI6ICIyMDI1LTAxLTIzVDA0OjMxOjEwWiIsCiAgICAgICAgImNoYW5uZWxJZCI6ICJVQ19CSkFOR0RSQ2VvZ1Jfa0oyUWUtZXciLAogICAgICAgICJ0aXRsZSI6ICJGcmVlIFJlYWN0IE5hdGl2ZSBGdWxsIENvdXJzZSAtIFN0YXJ0aW5nIGZyb20gMTB0aCBGZWIgMjAyNSB8IEVuZ2luZWVyIENvZGV3YWxhIiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiSGVsbG8gZ3V5cyAsaW4gdGhpcyB2aWRlbyB3ZSBhcmUgZ29pbmcgdG8gZGlzY3VzcyBXaGF0IFdlIGFyZSBnb2luZyB0byBsZWFybiBpbiB0aGlzIGNvbWluZyAgZnJlZSByZWFjdCBuYXRpdmUgY291cnNlLlNvIHdhdGNoIGZ1bGwgdmlkZW8gYW5kIGRvIGxpa2UgYW5kIHN1YnNjcmliZS5cblxuUGxheWxpc3QgOlxu4pyFIFJlYWN0IE5hdGl2ZSBGb3IgQmVnaW5uZXJzIEZ1bGwgQ291cnNlIDogaHR0cHM6Ly95b3V0dWJlLmNvbS9wbGF5bGlzdD9saXN0PVBMbHlkRnNGUmJ4SjJ4RERoemxoMm14YjhBaEpjYVhUVTRcbuKchSBFLUNvbW1lcmNlIEFwcCA6IGh0dHBzOi8veW91dHViZS5jb20vcGxheWxpc3Q/bGlzdD1QTGx5ZEZzRlJieEoxenBzUEFQeE1tS1JEWnN1RTBUeldTXG7inIUgUmVkdXggd2l0aCBSZWFjdCBOYXRpdmUgOiBodHRwczovL3lvdXR1YmUuY29tL3BsYXlsaXN0P2xpc3Q9UExseWRGc0ZSYnhKMlk2dzJ4TEpQalAtQUt5WFhXNkNORFxu4pyFIFJlZHV4IFRvb2xraXQgQ2FydCAgRXhhbXBsZSA6IGh0dHBzOi8veW91dHViZS5jb20vcGxheWxpc3Q/bGlzdD1QTGx5ZEZzRlJieEowME1BeFVnNlJYOTNyQ1JucHNhWS1LXG7inIUgTWFzdGVyIEZpcmViYXNlIHdpdGggUmVhY3QgTmF0aXZlIDogaHR0cHM6Ly95b3V0dWJlLmNvbS9wbGF5bGlzdD9saXN0PVBMbHlkRnNGUmJ4SjJEU29yNFlOandqRTZMNy1lUHJmN2FcbuKchSBDcmFjayBSZWFjdCBOYXRpdmUgSW50ZXJ2aWV3cyA6IGh0dHBzOi8veW91dHViZS5jb20vcGxheWxpc3Q/bGlzdD1QTGx5ZEZzRlJieEozMnpYN21QX3FrYnNCdjVUTkRNX3ZIXG7inIUgTmV0ZmxpeCBDbG9uZSBpbiBSZWFjdCBOYXRpdmUgOiBodHRwczovL3lvdXR1YmUuY29tL3BsYXlsaXN0P2xpc3Q9UExseWRGc0ZSYnhKMjlnLVJTeXdvRlJ4NFVEQk8xcHpZblxu4pyFIExlYXJuIFJlYWN0IE5hdGl2ZSAzLTQgRGF5cyA6IGh0dHBzOi8veW91dHViZS5jb20vcGxheWxpc3Q/bGlzdD1QTGx5ZEZzRlJieEoxMF9ZRHZiZUwtN0YzRlBaQ2pveEhqXG7inIUgUmVhY3QgSG9va3MgOiBodHRwczovL3lvdXR1YmUuY29tL3BsYXlsaXN0P2xpc3Q9UExseWRGc0ZSYnhKMDVEUFFTLXc1Sm1uVm5tdmczR05kVVxu4pyFIFVkZW15IENsb25lIGluIFJlYWN0IE5hdGl2ZSA6IGh0dHBzOi8veW91dHViZS5jb20vcGxheWxpc3Q/bGlzdD1QTGx5ZEZzRlJieEoxVlZ6SXptX0VERkN6VmRCUVJJbU8wXG7inIUgUmVhY3QgTmF0aXZlIFNjcm9sbCBBbmltYXRpb25zIDogaHR0cHM6Ly95b3V0dWJlLmNvbS9wbGF5bGlzdD9saXN0PVBMbHlkRnNGUmJ4SjNrU3lieS1MQ0dmRlQ1bE0zRTZET21cbuKchSBSZWFjdCBOYXRpdmUgTWFrZU15dHJpcCBjbG9uZSA6IGh0dHBzOi8veW91dHViZS5jb20vcGxheWxpc3Q/bGlzdD1QTGx5ZEZzRlJieEoxTlNEdHFEM2JsVkxwRFZ1bXY3c0xuXG7inIUgUmVhY3QgTmF0aXZlIERvY3RvciBBcHAgOiBodHRwczovL3lvdXR1YmUuY29tL3BsYXlsaXN0P2xpc3Q9UExseWRGc0ZSYnhKM3dWZmdBOVdETlk2ZmhiR19kd0lwSFxu4pyFIFRvbWF0byBDbG9uZSBSZWFjdCBOYXRpdmUgOiBodHRwczovL3lvdXR1YmUuY29tL3BsYXlsaXN0P2xpc3Q9UExseWRGc0ZSYnhKM0xaSENub1dzY0d2OEhPdUpoVjJpRFxu4pyFIFR5cGVTY3JpcHQgRm9yIEJlZ2lubmVycyA6IGh0dHBzOi8veW91dHViZS5jb20vcGxheWxpc3Q/bGlzdD1QTGx5ZEZzRlJieEoyR19lRHE0czVSRnVCeFNNWXRJMnRrXG5cblxuVmlkZW9zIE5ldyB0byBPbGQgOiBcbuKchSBGaWxlIERvd25sb2FkZXIgQXBwIDogaHR0cHM6Ly95b3V0dS5iZS9RM0NBb2NfZ3VXSVxu4pyFUmVhY3QgTmF0aXZlICBRUiBjb2RlIEdlbmVyYXRvciA6IGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9M2U5R1ZBaHpqYUkmdD0xc1xu4pyFR2l0IEZvciBCZWdpbm5lcnMgd2l0aCBWUyBDb2RlIDogaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1XYl96U1JEZS1pUSZ0PTFzXG7inIUgUmVhY3QgSnMgZm9yIFJlYWN0IE5hdGl2ZSBEZXZlbG9wZXJzIDogaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1vSGFjNENpSENPWSZ0PTFzXG7inIUgUmVhY3QgTmF0aXZlIEZvbnRzIDogaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1aWEszY3g4czI4QSZ0PTFzXG7inIUgRmV0Y2ggRGF0YSBGcm9tIEFwaSB3aXRoIFJlZHV4IDogaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj02YnFrZjQ1a2JaWSZ0PTFzXG7inIUgU2lnbWEgRGVzaWduIHRvIFJlYWN0IE5hdGl2ZSBDb2RlIHdpdGggTG9jb2Z5IDogaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1LTjhCR0gwUzdaYyZ0PTRzXG7inIUgUmVhY3QgTmF0aXZlIFN0YWNrLERyYXdlciBhbmQgQm90dG9tIE5hdmlnYXRvciA6IGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9d3YwcGlpXy1MdUkmdD00c1xu4pyFIFJlYWN0IE5hdGl2ZSBDcmVhdGUgYW5kIGFkZCBhcHAgaWNvbiBpbiBBbmRyb2lkIGFuZCBpT1MgOiBodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PS1Ta3RzRXhocTRvJnQ9MXNcbuKchSBGaWdtYSB0byBSZWFjdCBOYXRpdmUgQ29kZSA6IGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9YUZsUk16MEVEczAmdD0zc1xu4pyFIFJlYWN0IE5hdGl2ZSBSVEwgU3VwcG9ydCBsYXlvdXQ6IGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9TmJwX19jS3A1akVcbuKchSBSZWFjdCBOYXRpdmUgTG9jYWxpemF0aW9uICA6IGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9VnpFeW9WbGp3V1UmdD0xc1xu4pyFIFJlYWN0IE5hdGl2ZSBSb2FkIE1hcCA6IGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9S3ExZzZqMl9OUVUmdD0yc1xu4pyFIFJlYWN0IE5hdGl2ZSBNYW5hZ2VtZW50IGFwcCBQYXJ0IDE6IGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9c1Zid0NrVU1XY3MmdD0xc1xu4pyFICBSZWFjdCBOYXRpdmUgTWFuYWdlbWVudCBBcHAgUGFydCAyIDogaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1uMkRWM3JYNjY5cyZ0PTdzXG7inIUgUmVhY3QgTmF0aXZlIEJsb2dnaW5nIEFwcCA6IGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9eVM3Rm44UVZwUDgmdD0yc1xu4pyFIFJlYWN0IE5hdGl2ZSBRdWl6IEFwcCAgOiBodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PThIWG9LeU53NEpRJnQ9MXNcbuKchSBSZWFjdCBOYXRpdmUgQ3VzdG9tIERyb3Bkb3duIHdpdGggU2VhcmNoIE9wdGlvbiA6IGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9LTlNZWpyRkJmN2smdD0zc1xu4pyFIFJlYWN0IE5hdGl2ZSBDb250YWN0IEFwcCA6aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1QMnpPMVRMQkVoRSZ0PTQ2c1xu4pyFIFJlYWN0IE5hdGl2ZSBEeW5hbWljIEZvcm0gUGFydCAxOiBodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PUFNTnp4aUxwMmk4JnQ9OXNcbuKchSBSZWFjdCBOYXRpdmUgRHluYW1pYyBGb3JtIFBhcnQgMiA6IGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9MUNiMGVxZ3UyaFFcbuKchSBSZWFjdCBOYXRpdmUgRmxhdGxpc3QgaXRlbXMgc2VhcmNoIGFuZCBGaWx0ZXIgOiBodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PTZYLVBWUHFDaUg0XG7inIUgUmVhY3QgTmF0aXZlIERlZXBsaW5pa25nIDogaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj13MDRGOTJ1NTFkSSZ0PTFzXG7inIUgUmVhY3QgTmF0aXZlIE1vYlggOiBodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PS04dnFlTEJ1eFZNJnQ9NHNcbuKchSBSZWFjdCBOYXRpdmUgU3BvdGlmeSBVSSA6IGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9V1FvOTVZSksyUEEmdD0xc1xu4pyFIFJlYWN0IE5hdGl2ZSBPcmRlciBTdGVwcyA6IGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9T3plUV9VRl9ZVlUmdD0xc1xu4pyFIFJlYWN0IE5hdGl2ZSBFeGNlbCBWaWV3IDogaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1Xc2VfTE43blRHbyZ0PTJzXG7inIUgUmVhY3QgTmF0aXZlIFNxbGl0ZSA6IGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9NHpjRnA4Umx1eUEmdD0yNnNcblxuXG4gI3JlYWN0bmF0aXZlY291cnNlMjAyNSAjc29mdHdhcmVlbmdpbmVlcnNhbGFyeSAgI3NvZnR3YXJlZW5naW5lZXJpbnRlcnZpZXcgICNyZWFjdG5hdGl2ZSAgICNlbmdpbmVlcmNvZGV3YWxhICNyZWFjdG5hdGl2ZWRldmVsb3BlciIsCiAgICAgICAgInRodW1ibmFpbHMiOiB7CiAgICAgICAgICAiZGVmYXVsdCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL1BoWi1hanlNZnRJL2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTIwLAogICAgICAgICAgICAiaGVpZ2h0IjogOTAKICAgICAgICAgIH0sCiAgICAgICAgICAibWVkaXVtIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvUGhaLWFqeU1mdEkvbXFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgICAgICAgImhlaWdodCI6IDE4MAogICAgICAgICAgfSwKICAgICAgICAgICJoaWdoIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvUGhaLWFqeU1mdEkvaHFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgICAgICAgImhlaWdodCI6IDM2MAogICAgICAgICAgfSwKICAgICAgICAgICJzdGFuZGFyZCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL1BoWi1hanlNZnRJL3NkZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA2NDAsCiAgICAgICAgICAgICJoZWlnaHQiOiA0ODAKICAgICAgICAgIH0sCiAgICAgICAgICAibWF4cmVzIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvUGhaLWFqeU1mdEkvbWF4cmVzZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjgwLAogICAgICAgICAgICAiaGVpZ2h0IjogNzIwCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiY2hhbm5lbFRpdGxlIjogIkVuZ2luZWVyIENvZGV3YWxhIiwKICAgICAgICAidGFncyI6IFsKICAgICAgICAgICJlbmdpbmVlciBjb2Rld2FsYSIsCiAgICAgICAgICAiZW5naW5lZXIgY29kZXdhbGEgcmVhY3QgbmF0aXZlIiwKICAgICAgICAgICJlbmdpbmVlciBjb2Rld2FsYSBnaXRodWIiLAogICAgICAgICAgImVuZ2luZWVyIGNvZGV3YWxhIGludGVydmlldyIsCiAgICAgICAgICAiZW5naW5lZXIgY29kZXdhbGEgZSBjb21tZXJjZSIsCiAgICAgICAgICAiZW5naW5lZXIgY29kZXdhbGEgcmVkdXgiLAogICAgICAgICAgImVuZ2luZWVyIGNvZGV3YWxhIGZpcmViYXNlIiwKICAgICAgICAgICJlbmdpbmVlZXIgY29kZXdhbGEgZ2l0aHViIiwKICAgICAgICAgICJyZWFjdCBuYXRpdmUgZW5naW5lZXIgY29kZXdhbGEiLAogICAgICAgICAgImVuZ2luZWVyIGNvZGV3YWxhIGVjb21tZXJjZSIsCiAgICAgICAgICAiZW5naW5lZXIgY29kZXdhbGEgcmVkdXggdG9vbGtpdCIsCiAgICAgICAgICAiZW5naW5lZXIgY29kZXdhbGEgZmxhdGxpc3QiLAogICAgICAgICAgImZyZWVsYW5jaW5nIGZvciBiZWdpbm5lcnMiLAogICAgICAgICAgInJlYWN0IHNhbGFyeSIsCiAgICAgICAgICAicmVhY3QgbmF0aXZlIGRldmVsb3BlciIsCiAgICAgICAgICAiSG93IHRvIEJlY29tZVxuUmVhY3QgTmF0aXZlIERldiIsCiAgICAgICAgICAicmVhY3QgbmF0aXZlIiwKICAgICAgICAgICJyZWFjdCBuYXRpdmUgaW50ZXJ2aWV3IHF1ZXN0aW9ucyIKICAgICAgICBdLAogICAgICAgICJjYXRlZ29yeUlkIjogIjI3IiwKICAgICAgICAibGl2ZUJyb2FkY2FzdENvbnRlbnQiOiAibm9uZSIsCiAgICAgICAgImRlZmF1bHRMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgImxvY2FsaXplZCI6IHsKICAgICAgICAgICJ0aXRsZSI6ICJGcmVlIFJlYWN0IE5hdGl2ZSBGdWxsIENvdXJzZSAtIFN0YXJ0aW5nIGZyb20gMTB0aCBGZWIgMjAyNSB8IEVuZ2luZWVyIENvZGV3YWxhIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJIZWxsbyBndXlzICxpbiB0aGlzIHZpZGVvIHdlIGFyZSBnb2luZyB0byBkaXNjdXNzIFdoYXQgV2UgYXJlIGdvaW5nIHRvIGxlYXJuIGluIHRoaXMgY29taW5nICBmcmVlIHJlYWN0IG5hdGl2ZSBjb3Vyc2UuU28gd2F0Y2ggZnVsbCB2aWRlbyBhbmQgZG8gbGlrZSBhbmQgc3Vic2NyaWJlLlxuXG5QbGF5bGlzdCA6XG7inIUgUmVhY3QgTmF0aXZlIEZvciBCZWdpbm5lcnMgRnVsbCBDb3Vyc2UgOiBodHRwczovL3lvdXR1YmUuY29tL3BsYXlsaXN0P2xpc3Q9UExseWRGc0ZSYnhKMnhERGh6bGgybXhiOEFoSmNhWFRVNFxu4pyFIEUtQ29tbWVyY2UgQXBwIDogaHR0cHM6Ly95b3V0dWJlLmNvbS9wbGF5bGlzdD9saXN0PVBMbHlkRnNGUmJ4SjF6cHNQQVB4TW1LUkRac3VFMFR6V1NcbuKchSBSZWR1eCB3aXRoIFJlYWN0IE5hdGl2ZSA6IGh0dHBzOi8veW91dHViZS5jb20vcGxheWxpc3Q/bGlzdD1QTGx5ZEZzRlJieEoyWTZ3MnhMSlBqUC1BS3lYWFc2Q05EXG7inIUgUmVkdXggVG9vbGtpdCBDYXJ0ICBFeGFtcGxlIDogaHR0cHM6Ly95b3V0dWJlLmNvbS9wbGF5bGlzdD9saXN0PVBMbHlkRnNGUmJ4SjAwTUF4VWc2Ulg5M3JDUm5wc2FZLUtcbuKchSBNYXN0ZXIgRmlyZWJhc2Ugd2l0aCBSZWFjdCBOYXRpdmUgOiBodHRwczovL3lvdXR1YmUuY29tL3BsYXlsaXN0P2xpc3Q9UExseWRGc0ZSYnhKMkRTb3I0WU5qd2pFNkw3LWVQcmY3YVxu4pyFIENyYWNrIFJlYWN0IE5hdGl2ZSBJbnRlcnZpZXdzIDogaHR0cHM6Ly95b3V0dWJlLmNvbS9wbGF5bGlzdD9saXN0PVBMbHlkRnNGUmJ4SjMyelg3bVBfcWtic0J2NVRORE1fdkhcbuKchSBOZXRmbGl4IENsb25lIGluIFJlYWN0IE5hdGl2ZSA6IGh0dHBzOi8veW91dHViZS5jb20vcGxheWxpc3Q/bGlzdD1QTGx5ZEZzRlJieEoyOWctUlN5d29GUng0VURCTzFwelluXG7inIUgTGVhcm4gUmVhY3QgTmF0aXZlIDMtNCBEYXlzIDogaHR0cHM6Ly95b3V0dWJlLmNvbS9wbGF5bGlzdD9saXN0PVBMbHlkRnNGUmJ4SjEwX1lEdmJlTC03RjNGUFpDam94SGpcbuKchSBSZWFjdCBIb29rcyA6IGh0dHBzOi8veW91dHViZS5jb20vcGxheWxpc3Q/bGlzdD1QTGx5ZEZzRlJieEowNURQUVMtdzVKbW5Wbm12ZzNHTmRVXG7inIUgVWRlbXkgQ2xvbmUgaW4gUmVhY3QgTmF0aXZlIDogaHR0cHM6Ly95b3V0dWJlLmNvbS9wbGF5bGlzdD9saXN0PVBMbHlkRnNGUmJ4SjFWVnpJem1fRURGQ3pWZEJRUkltTzBcbuKchSBSZWFjdCBOYXRpdmUgU2Nyb2xsIEFuaW1hdGlvbnMgOiBodHRwczovL3lvdXR1YmUuY29tL3BsYXlsaXN0P2xpc3Q9UExseWRGc0ZSYnhKM2tTeWJ5LUxDR2ZGVDVsTTNFNkRPbVxu4pyFIFJlYWN0IE5hdGl2ZSBNYWtlTXl0cmlwIGNsb25lIDogaHR0cHM6Ly95b3V0dWJlLmNvbS9wbGF5bGlzdD9saXN0PVBMbHlkRnNGUmJ4SjFOU0R0cUQzYmxWTHBEVnVtdjdzTG5cbuKchSBSZWFjdCBOYXRpdmUgRG9jdG9yIEFwcCA6IGh0dHBzOi8veW91dHViZS5jb20vcGxheWxpc3Q/bGlzdD1QTGx5ZEZzRlJieEozd1ZmZ0E5V0ROWTZmaGJHX2R3SXBIXG7inIUgVG9tYXRvIENsb25lIFJlYWN0IE5hdGl2ZSA6IGh0dHBzOi8veW91dHViZS5jb20vcGxheWxpc3Q/bGlzdD1QTGx5ZEZzRlJieEozTFpIQ25vV3NjR3Y4SE91SmhWMmlEXG7inIUgVHlwZVNjcmlwdCBGb3IgQmVnaW5uZXJzIDogaHR0cHM6Ly95b3V0dWJlLmNvbS9wbGF5bGlzdD9saXN0PVBMbHlkRnNGUmJ4SjJHX2VEcTRzNVJGdUJ4U01ZdEkydGtcblxuXG5WaWRlb3MgTmV3IHRvIE9sZCA6IFxu4pyFIEZpbGUgRG93bmxvYWRlciBBcHAgOiBodHRwczovL3lvdXR1LmJlL1EzQ0FvY19ndVdJXG7inIVSZWFjdCBOYXRpdmUgIFFSIGNvZGUgR2VuZXJhdG9yIDogaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj0zZTlHVkFoemphSSZ0PTFzXG7inIVHaXQgRm9yIEJlZ2lubmVycyB3aXRoIFZTIENvZGUgOiBodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PVdiX3pTUkRlLWlRJnQ9MXNcbuKchSBSZWFjdCBKcyBmb3IgUmVhY3QgTmF0aXZlIERldmVsb3BlcnMgOiBodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PW9IYWM0Q2lIQ09ZJnQ9MXNcbuKchSBSZWFjdCBOYXRpdmUgRm9udHMgOiBodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PVpYSzNjeDhzMjhBJnQ9MXNcbuKchSBGZXRjaCBEYXRhIEZyb20gQXBpIHdpdGggUmVkdXggOiBodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PTZicWtmNDVrYlpZJnQ9MXNcbuKchSBTaWdtYSBEZXNpZ24gdG8gUmVhY3QgTmF0aXZlIENvZGUgd2l0aCBMb2NvZnkgOiBodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PUtOOEJHSDBTN1pjJnQ9NHNcbuKchSBSZWFjdCBOYXRpdmUgU3RhY2ssRHJhd2VyIGFuZCBCb3R0b20gTmF2aWdhdG9yIDogaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj13djBwaWlfLUx1SSZ0PTRzXG7inIUgUmVhY3QgTmF0aXZlIENyZWF0ZSBhbmQgYWRkIGFwcCBpY29uIGluIEFuZHJvaWQgYW5kIGlPUyA6IGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9LVNrdHNFeGhxNG8mdD0xc1xu4pyFIEZpZ21hIHRvIFJlYWN0IE5hdGl2ZSBDb2RlIDogaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1hRmxSTXowRURzMCZ0PTNzXG7inIUgUmVhY3QgTmF0aXZlIFJUTCBTdXBwb3J0IGxheW91dDogaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1OYnBfX2NLcDVqRVxu4pyFIFJlYWN0IE5hdGl2ZSBMb2NhbGl6YXRpb24gIDogaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1WekV5b1ZsandXVSZ0PTFzXG7inIUgUmVhY3QgTmF0aXZlIFJvYWQgTWFwIDogaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1LcTFnNmoyX05RVSZ0PTJzXG7inIUgUmVhY3QgTmF0aXZlIE1hbmFnZW1lbnQgYXBwIFBhcnQgMTogaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1zVmJ3Q2tVTVdjcyZ0PTFzXG7inIUgIFJlYWN0IE5hdGl2ZSBNYW5hZ2VtZW50IEFwcCBQYXJ0IDIgOiBodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PW4yRFYzclg2NjlzJnQ9N3NcbuKchSBSZWFjdCBOYXRpdmUgQmxvZ2dpbmcgQXBwIDogaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj15UzdGbjhRVnBQOCZ0PTJzXG7inIUgUmVhY3QgTmF0aXZlIFF1aXogQXBwICA6IGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9OEhYb0t5Tnc0SlEmdD0xc1xu4pyFIFJlYWN0IE5hdGl2ZSBDdXN0b20gRHJvcGRvd24gd2l0aCBTZWFyY2ggT3B0aW9uIDogaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj0tOU1lanJGQmY3ayZ0PTNzXG7inIUgUmVhY3QgTmF0aXZlIENvbnRhY3QgQXBwIDpodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PVAyek8xVExCRWhFJnQ9NDZzXG7inIUgUmVhY3QgTmF0aXZlIER5bmFtaWMgRm9ybSBQYXJ0IDE6IGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9QU1OenhpTHAyaTgmdD05c1xu4pyFIFJlYWN0IE5hdGl2ZSBEeW5hbWljIEZvcm0gUGFydCAyIDogaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj0xQ2IwZXFndTJoUVxu4pyFIFJlYWN0IE5hdGl2ZSBGbGF0bGlzdCBpdGVtcyBzZWFyY2ggYW5kIEZpbHRlciA6IGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9NlgtUFZQcUNpSDRcbuKchSBSZWFjdCBOYXRpdmUgRGVlcGxpbmlrbmcgOiBodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PXcwNEY5MnU1MWRJJnQ9MXNcbuKchSBSZWFjdCBOYXRpdmUgTW9iWCA6IGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9LTh2cWVMQnV4Vk0mdD00c1xu4pyFIFJlYWN0IE5hdGl2ZSBTcG90aWZ5IFVJIDogaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1XUW85NVlKSzJQQSZ0PTFzXG7inIUgUmVhY3QgTmF0aXZlIE9yZGVyIFN0ZXBzIDogaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1PemVRX1VGX1lWVSZ0PTFzXG7inIUgUmVhY3QgTmF0aXZlIEV4Y2VsIFZpZXcgOiBodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PVdzZV9MTjduVEdvJnQ9MnNcbuKchSBSZWFjdCBOYXRpdmUgU3FsaXRlIDogaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj00emNGcDhSbHV5QSZ0PTI2c1xuXG5cbiAjcmVhY3RuYXRpdmVjb3Vyc2UyMDI1ICNzb2Z0d2FyZWVuZ2luZWVyc2FsYXJ5ICAjc29mdHdhcmVlbmdpbmVlcmludGVydmlldyAgI3JlYWN0bmF0aXZlICAgI2VuZ2luZWVyY29kZXdhbGEgI3JlYWN0bmF0aXZlZGV2ZWxvcGVyIgogICAgICAgIH0sCiAgICAgICAgImRlZmF1bHRBdWRpb0xhbmd1YWdlIjogImhpIgogICAgICB9LAogICAgICAiY29udGVudERldGFpbHMiOiB7CiAgICAgICAgImR1cmF0aW9uIjogIlBUMTBNNDRTIiwKICAgICAgICAiZGltZW5zaW9uIjogIjJkIiwKICAgICAgICAiZGVmaW5pdGlvbiI6ICJoZCIsCiAgICAgICAgImNhcHRpb24iOiAiZmFsc2UiLAogICAgICAgICJsaWNlbnNlZENvbnRlbnQiOiB0cnVlLAogICAgICAgICJjb250ZW50UmF0aW5nIjoge30sCiAgICAgICAgInByb2plY3Rpb24iOiAicmVjdGFuZ3VsYXIiCiAgICAgIH0sCiAgICAgICJzdGF0aXN0aWNzIjogewogICAgICAgICJ2aWV3Q291bnQiOiAiNzg2NiIsCiAgICAgICAgImxpa2VDb3VudCI6ICIxOTQiLAogICAgICAgICJmYXZvcml0ZUNvdW50IjogIjAiLAogICAgICAgICJjb21tZW50Q291bnQiOiAiODIiCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJraW5kIjogInlvdXR1YmUjdmlkZW8iLAogICAgICAiZXRhZyI6ICJra1EyU3NnMl8ybHR2RHFQWURrTzhpT0plakUiLAogICAgICAiaWQiOiAieHYzUDgyOUhYVEEiLAogICAgICAic25pcHBldCI6IHsKICAgICAgICAicHVibGlzaGVkQXQiOiAiMjAyNC0wOC0yOVQxMjozMDowNloiLAogICAgICAgICJjaGFubmVsSWQiOiAiVUNfc3dwcVdIaWNuTjJuUFVpenh6SzB3IiwKICAgICAgICAidGl0bGUiOiAi8J+UtENvbXBsZXRlIFJlYWN0IE5hdGl2ZSBBIHRvIFogQ291cnNlIGZvciBCZWdpbm5lcnMgfCBDb3Vyc2UgSW50cm9kdWN0aW9uIiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAi8J+agCBXZWxjb21lIHRvIHRoZSBSZWFjdCBOYXRpdmUgQXRvWiBDb3Vyc2UgZm9yIEJlZ2lubmVycyBieSBDb2RlcyBvZiBBeWFhbiEgSW4gdGhpcyBzZXJpZXMsIHdlJ2xsIGRpdmUgaW50byB0aGUgd29ybGQgb2YgUmVhY3QgTmF0aXZlLCBjb3ZlcmluZyBldmVyeXRoaW5nIGZyb20gdGhlIGJhc2ljcyB0byBhZHZhbmNlZCBjb25jZXB0cywgaW4gYm90aCBFbmdsaXNoIGFuZCBUZWx1Z3UuIFdoZXRoZXIgeW91J3JlIGEgY29tcGxldGUgYmVnaW5uZXIgb3IgbG9va2luZyB0byBlbmhhbmNlIHlvdXIgc2tpbGxzLCB0aGlzIGNvdXJzZSBoYXMgc29tZXRoaW5nIGZvciBldmVyeW9uZS5cblxuSW4gdGhpcyBpbnRyb2R1Y3Rpb24gdmlkZW8sIEknbGwgd2FsayB5b3UgdGhyb3VnaCB3aGF0IHlvdSBjYW4gZXhwZWN0IGZyb20gdGhpcyBjb3Vyc2UsIGhvdyB0byBuYXZpZ2F0ZSB0aHJvdWdoIHRoZSBwbGF5bGlzdHMsIGFuZCB0aGUgYWRkaXRpb25hbCByZXNvdXJjZXMgYXZhaWxhYmxlIG9uIHRoZSB3ZWJzaXRlIHRvIHRyYWNrIHlvdXIgcHJvZ3Jlc3MuIExldCdzIGtpY2tzdGFydCB5b3VyIGpvdXJuZXkgaW50byBtb2JpbGUgYXBwIGRldmVsb3BtZW50IVxuXG5Eb24ndCBmb3JnZXQgdG8gc3Vic2NyaWJlLCBsaWtlLCBhbmQgc2hhcmUgdGhpcyB2aWRlbyB0byBzdGF5IHVwZGF0ZWQgd2l0aCB0aGUgbGF0ZXN0IGxlc3NvbnMhIPCfkq/wn5SlXG5cbvCflJcgSGVscGZ1bCBMaW5rczpcbkdpdGh1YjpodHRwczovL2dpdGh1Yi5jb20vQXlhYW4yMlxuXG5UaGFua3MgZm9yIHdhdGNoaW5nLCBhbmQgbGV0J3MgZGl2ZSBpbnRvIHRoZSB3b3JsZCBvZiBSZWFjdCBOYXRpdmUgYXBwIGRldmVsb3BtZW50IHRvZ2V0aGVyISDwn5mMXG5cbkZvbGxvdyBtZSBvbiBJbnN0YWdyYW06IGh0dHBzOi8vaW5zdGFncmFtLmNvbS9jb2Rlc29mYXlhYW5cblxuTGFwdG9wIFNwZWNpZmljYXRpb25zOlxuQXN1cyBWaXZvIGJvb2sgMTZ4IFJ5emVuIDcgNTgwMGggcHJvY2Vzc29yIDE2Z2IgcmFtXG5cbkNvcHlyaWdodCBEaXNjbGFpbWVyIHVuZGVyIHNlY3Rpb24gMTA3IG9mIHRoZSBDb3B5cmlnaHQgQWN0IDE5NzYsIGFsbG93YW5jZSBpcyBtYWRlIGZvciDigJxmYWlyIHVzZeKAnSBmb3IgcHVycG9zZXMgc3VjaCBhcyBjcml0aWNpc20sIGNvbW1lbnQsIG5ld3MgcmVwb3J0aW5nLCB0ZWFjaGluZywgc2Nob2xhcnNoaXAsIGVkdWNhdGlvbiBhbmQgcmVzZWFyY2guIEZhaXIgdXNlIGlzIGEgdXNlIHBlcm1pdHRlZCBieSBjb3B5cmlnaHQgc3RhdHV0ZSB0aGF0IG1pZ2h0IG90aGVyd2lzZSBiZSBpbmZyaW5naW5nLlxuXG4jYXBwZGV2ZWxvcG1lbnQgI2NvZGluZyAjZ29vZ2xlICN0ZWx1Z3UgI2phdmFzY3JpcCNyZWFjdGpzICN5b3V0dWJlICNiZWdpbm5lciAjY291cnNlICNmcm9udGVuZGRldmVsb3BlciAjeW91dHViZXIgI3lvdXR1YmVzaG9ydHMgI3VpICN1aWRlc2lnbiAjZGV2ZWxvcGUgI2NvbnRlbnRjcmVhdG9yICNjb2Rlc29mYXlhYW4gI3RlbHVndSAjZm9vZGxvdmVyICN0cmVuZGluZyAjdHJlbmRpbmdzaG9ydHMgI3RyZW5kaW5ndmlkZW8gI3RyZW5kaW5ncmVlbHMgI2xlYXJuICNiZWdpbm5lcnMgI2Zyb250ZW5kZGV2ZWxvcGVyICN1aWRlc2lnbiAjbm9kZWpzICAjYXBwZGV2ZWxvcG1lbnQgI3RlYWNoaW5nICNlYXN5c3RlcHMgI3RyZW5kaW5nICN0aHJlYWQgI3JlYWN0bmF0aXZlICNkYXRhYmFzZSAjcmVhY3RuYXRpdmV0dXRvcmlhbCAjcmVhY3RuYXRpdmVwcm9qZWN0cyAjZ29vZ2xlbWFwcyAjcmVkdXh0b29sa2l0ICNiYWNrZW5kICNtYXBzICNuZXRmbGl4ICNzdHJlYW0gI3dlYnNlcmllcyAjcmFwaWRvICN0aW5kZXIgI2RhdGluZyAjY2xvbmUgI2J1bWJsZWViZWUgI2RhdGluZ2FwcHMgI2dyb2NlcmllcyAjemVwdG8gI3RyZW5kaW5nIiwKICAgICAgICAidGh1bWJuYWlscyI6IHsKICAgICAgICAgICJkZWZhdWx0IjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkveHYzUDgyOUhYVEEvZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiA5MAogICAgICAgICAgfSwKICAgICAgICAgICJtZWRpdW0iOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS94djNQODI5SFhUQS9tcWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMzIwLAogICAgICAgICAgICAiaGVpZ2h0IjogMTgwCiAgICAgICAgICB9LAogICAgICAgICAgImhpZ2giOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS94djNQODI5SFhUQS9ocWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNDgwLAogICAgICAgICAgICAiaGVpZ2h0IjogMzYwCiAgICAgICAgICB9LAogICAgICAgICAgInN0YW5kYXJkIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkveHYzUDgyOUhYVEEvc2RkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDY0MCwKICAgICAgICAgICAgImhlaWdodCI6IDQ4MAogICAgICAgICAgfSwKICAgICAgICAgICJtYXhyZXMiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS94djNQODI5SFhUQS9tYXhyZXNkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyODAsCiAgICAgICAgICAgICJoZWlnaHQiOiA3MjAKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJjaGFubmVsVGl0bGUiOiAiQ29kZXMgT2YgQXlhYW4iLAogICAgICAgICJjYXRlZ29yeUlkIjogIjI3IiwKICAgICAgICAibGl2ZUJyb2FkY2FzdENvbnRlbnQiOiAibm9uZSIsCiAgICAgICAgImRlZmF1bHRMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgImxvY2FsaXplZCI6IHsKICAgICAgICAgICJ0aXRsZSI6ICLwn5S0Q29tcGxldGUgUmVhY3QgTmF0aXZlIEEgdG8gWiBDb3Vyc2UgZm9yIEJlZ2lubmVycyB8IENvdXJzZSBJbnRyb2R1Y3Rpb24iLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIvCfmoAgV2VsY29tZSB0byB0aGUgUmVhY3QgTmF0aXZlIEF0b1ogQ291cnNlIGZvciBCZWdpbm5lcnMgYnkgQ29kZXMgb2YgQXlhYW4hIEluIHRoaXMgc2VyaWVzLCB3ZSdsbCBkaXZlIGludG8gdGhlIHdvcmxkIG9mIFJlYWN0IE5hdGl2ZSwgY292ZXJpbmcgZXZlcnl0aGluZyBmcm9tIHRoZSBiYXNpY3MgdG8gYWR2YW5jZWQgY29uY2VwdHMsIGluIGJvdGggRW5nbGlzaCBhbmQgVGVsdWd1LiBXaGV0aGVyIHlvdSdyZSBhIGNvbXBsZXRlIGJlZ2lubmVyIG9yIGxvb2tpbmcgdG8gZW5oYW5jZSB5b3VyIHNraWxscywgdGhpcyBjb3Vyc2UgaGFzIHNvbWV0aGluZyBmb3IgZXZlcnlvbmUuXG5cbkluIHRoaXMgaW50cm9kdWN0aW9uIHZpZGVvLCBJJ2xsIHdhbGsgeW91IHRocm91Z2ggd2hhdCB5b3UgY2FuIGV4cGVjdCBmcm9tIHRoaXMgY291cnNlLCBob3cgdG8gbmF2aWdhdGUgdGhyb3VnaCB0aGUgcGxheWxpc3RzLCBhbmQgdGhlIGFkZGl0aW9uYWwgcmVzb3VyY2VzIGF2YWlsYWJsZSBvbiB0aGUgd2Vic2l0ZSB0byB0cmFjayB5b3VyIHByb2dyZXNzLiBMZXQncyBraWNrc3RhcnQgeW91ciBqb3VybmV5IGludG8gbW9iaWxlIGFwcCBkZXZlbG9wbWVudCFcblxuRG9uJ3QgZm9yZ2V0IHRvIHN1YnNjcmliZSwgbGlrZSwgYW5kIHNoYXJlIHRoaXMgdmlkZW8gdG8gc3RheSB1cGRhdGVkIHdpdGggdGhlIGxhdGVzdCBsZXNzb25zISDwn5Kv8J+UpVxuXG7wn5SXIEhlbHBmdWwgTGlua3M6XG5HaXRodWI6aHR0cHM6Ly9naXRodWIuY29tL0F5YWFuMjJcblxuVGhhbmtzIGZvciB3YXRjaGluZywgYW5kIGxldCdzIGRpdmUgaW50byB0aGUgd29ybGQgb2YgUmVhY3QgTmF0aXZlIGFwcCBkZXZlbG9wbWVudCB0b2dldGhlciEg8J+ZjFxuXG5Gb2xsb3cgbWUgb24gSW5zdGFncmFtOiBodHRwczovL2luc3RhZ3JhbS5jb20vY29kZXNvZmF5YWFuXG5cbkxhcHRvcCBTcGVjaWZpY2F0aW9uczpcbkFzdXMgVml2byBib29rIDE2eCBSeXplbiA3IDU4MDBoIHByb2Nlc3NvciAxNmdiIHJhbVxuXG5Db3B5cmlnaHQgRGlzY2xhaW1lciB1bmRlciBzZWN0aW9uIDEwNyBvZiB0aGUgQ29weXJpZ2h0IEFjdCAxOTc2LCBhbGxvd2FuY2UgaXMgbWFkZSBmb3Ig4oCcZmFpciB1c2XigJ0gZm9yIHB1cnBvc2VzIHN1Y2ggYXMgY3JpdGljaXNtLCBjb21tZW50LCBuZXdzIHJlcG9ydGluZywgdGVhY2hpbmcsIHNjaG9sYXJzaGlwLCBlZHVjYXRpb24gYW5kIHJlc2VhcmNoLiBGYWlyIHVzZSBpcyBhIHVzZSBwZXJtaXR0ZWQgYnkgY29weXJpZ2h0IHN0YXR1dGUgdGhhdCBtaWdodCBvdGhlcndpc2UgYmUgaW5mcmluZ2luZy5cblxuI2FwcGRldmVsb3BtZW50ICNjb2RpbmcgI2dvb2dsZSAjdGVsdWd1ICNqYXZhc2NyaXAjcmVhY3RqcyAjeW91dHViZSAjYmVnaW5uZXIgI2NvdXJzZSAjZnJvbnRlbmRkZXZlbG9wZXIgI3lvdXR1YmVyICN5b3V0dWJlc2hvcnRzICN1aSAjdWlkZXNpZ24gI2RldmVsb3BlICNjb250ZW50Y3JlYXRvciAjY29kZXNvZmF5YWFuICN0ZWx1Z3UgI2Zvb2Rsb3ZlciAjdHJlbmRpbmcgI3RyZW5kaW5nc2hvcnRzICN0cmVuZGluZ3ZpZGVvICN0cmVuZGluZ3JlZWxzICNsZWFybiAjYmVnaW5uZXJzICNmcm9udGVuZGRldmVsb3BlciAjdWlkZXNpZ24gI25vZGVqcyAgI2FwcGRldmVsb3BtZW50ICN0ZWFjaGluZyAjZWFzeXN0ZXBzICN0cmVuZGluZyAjdGhyZWFkICNyZWFjdG5hdGl2ZSAjZGF0YWJhc2UgI3JlYWN0bmF0aXZldHV0b3JpYWwgI3JlYWN0bmF0aXZlcHJvamVjdHMgI2dvb2dsZW1hcHMgI3JlZHV4dG9vbGtpdCAjYmFja2VuZCAjbWFwcyAjbmV0ZmxpeCAjc3RyZWFtICN3ZWJzZXJpZXMgI3JhcGlkbyAjdGluZGVyICNkYXRpbmcgI2Nsb25lICNidW1ibGVlYmVlICNkYXRpbmdhcHBzICNncm9jZXJpZXMgI3plcHRvICN0cmVuZGluZyIKICAgICAgICB9LAogICAgICAgICJkZWZhdWx0QXVkaW9MYW5ndWFnZSI6ICJlbiIKICAgICAgfSwKICAgICAgImNvbnRlbnREZXRhaWxzIjogewogICAgICAgICJkdXJhdGlvbiI6ICJQVDVNMzFTIiwKICAgICAgICAiZGltZW5zaW9uIjogIjJkIiwKICAgICAgICAiZGVmaW5pdGlvbiI6ICJoZCIsCiAgICAgICAgImNhcHRpb24iOiAiZmFsc2UiLAogICAgICAgICJsaWNlbnNlZENvbnRlbnQiOiBmYWxzZSwKICAgICAgICAiY29udGVudFJhdGluZyI6IHt9LAogICAgICAgICJwcm9qZWN0aW9uIjogInJlY3Rhbmd1bGFyIgogICAgICB9LAogICAgICAic3RhdGlzdGljcyI6IHsKICAgICAgICAidmlld0NvdW50IjogIjQ0OCIsCiAgICAgICAgImxpa2VDb3VudCI6ICIyNyIsCiAgICAgICAgImZhdm9yaXRlQ291bnQiOiAiMCIsCiAgICAgICAgImNvbW1lbnRDb3VudCI6ICIxMyIKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImtpbmQiOiAieW91dHViZSN2aWRlbyIsCiAgICAgICJldGFnIjogInZCRXZqam9zRkJyYUVxVnhLRWl3dER5LTJqOCIsCiAgICAgICJpZCI6ICJ5eWU3clNzaVY2ayIsCiAgICAgICJzbmlwcGV0IjogewogICAgICAgICJwdWJsaXNoZWRBdCI6ICIyMDI0LTA3LTA0VDEzOjAxOjAzWiIsCiAgICAgICAgImNoYW5uZWxJZCI6ICJVQ1d2N3ZNYk1XSDQtVjBaWGRtRHBQQkEiLAogICAgICAgICJ0aXRsZSI6ICJUaGUgQ29tcGxldGUgQXBwIERldmVsb3BtZW50IFJvYWRtYXAiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJHbyBmcm9tIHplcm8gdG8gYSBtb2JpbGUgYXBwIGRldmVsb3BlciBpbiAxMiBtb250aHMuIFRoaXMgc3RlcC1ieS1zdGVwIHJvYWRtYXAgY292ZXJzIHRoZSBlc3NlbnRpYWwgc2tpbGxzIGFuZCBsYXRlc3QgdGVjaG5vbG9naWVzIHRvIGJlY29tZSBhbiBhcHAgZGV2ZWxvcGVyLiBcblxu4p2k77iPIEpvaW4gdGhpcyBjaGFubmVsIHRvIGdldCBhY2Nlc3MgdG8gcGVya3M6XG5odHRwczovL3d3dy55b3V0dWJlLmNvbS9jaGFubmVsL1VDV3Y3dk1iTVdINC1WMFpYZG1EcFBCQS9qb2luXG5cbkRvd25sb2FkIHRoZSBGUkVFIHJvYWRtYXAgUERGIGhlcmU6IGh0dHBzOi8vbW9zaC5saW5rL21vYmlsZS1yb2FkbWFwXG5cbuKciyBTdGF5IGNvbm5lY3RlZFxuXG4tIENvbXBsZXRlIGNvdXJzZXM6IGh0dHBzOi8vY29kZXdpdGhtb3NoLmNvbVxuLSBUd2l0dGVyOiBodHRwczovL3R3aXR0ZXIuY29tL21vc2hoYW1lZGFuaVxuLSBGYWNlYm9vazogaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL3Byb2dyYW1taW5nd2l0aG1vc2gvXG4tIEluc3RhZ3JhbTogaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS9jb2Rld2l0aG1vc2gub2ZmaWNpYWwvXG4tIExpbmtlZEluOiBodHRwczovL3d3dy5saW5rZWRpbi5jb20vc2Nob29sL2NvZGV3aXRobW9zaC9cblxu8J+UlyBPdGhlciByb2FkbWFwc1xuXG5odHRwczovL3lvdXR1LmJlL1RlZjFlOUZpU1IwP3NpPVFwVm5aX285LURBWHpUNzFcbmh0dHBzOi8veW91dHUuYmUvT2VFSEpnenFTMWs/c2k9cWQwWklxQXpVcFpRbjZCWFxuXG7wn5OaIFR1dG9yaWFscyBcblxuaHR0cHM6Ly95b3V0dS5iZS9XNk5aZkNPNVNJaz9zaT15UzBsUVh5eTNxd1FGM0RBXG5odHRwczovL3lvdXR1LmJlLzhKSjEwMUQza25FP3NpPU9HVHVTMzVMUXFTdW51aGhcbmh0dHBzOi8veW91dHUuYmUvQkJwQW14VV9OUW8/c2k9ZG0tWkNQeFZCWVdTMVFoblxuaHR0cHM6Ly95b3V0dS5iZS9OVV8xU3RONVRraz9zaT1nc01PTlBkZ3hvdVFPb2x1XG5odHRwczovL3lvdXR1LmJlL1NxY1kwR2xFVFBrP3NpPU85M0lYZWpUVnVoXzVjYllcbmh0dHBzOi8veW91dHUuYmUvMC1TNWEwZVhQb2M/c2k9eVA3cWlhMDdOTjJGTWVTMlxuXG5cbvCfk5YgQ2hhcHRlcnNcblxuMDA6MDAgLSBJbnRyb2R1Y3Rpb25cbjAwOjA4IC0gTmF0aXZlIHZzIENyb3NzLXBsYXRmb3JtIERldmVsb3BtZW50XG4wNDowOCAtIExhbmd1YWdlc1xuMDQ6NTcgLSBWZXJzaW9uIGNvbnRyb2wgKEdpdClcbjA1OjI1IC0gRGF0YSBzdHJ1Y3R1cmVzICYgYWxnb3JpdGhtcyBcbjA2OjEyIC0gRGVzaWduIHBhdHRlcm5zIFxuMDc6MTQgLSBNb2JpbGUgZnJhbWV3b3Jrc1xuXG4jYXBwZGV2ZWxvcG1lbnQgI2NvZGluZyAjcHJvZ3JhbW1pbmciLAogICAgICAgICJ0aHVtYm5haWxzIjogewogICAgICAgICAgImRlZmF1bHQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS95eWU3clNzaVY2ay9kZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgICAgICAgImhlaWdodCI6IDkwCiAgICAgICAgICB9LAogICAgICAgICAgIm1lZGl1bSI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL3l5ZTdyU3NpVjZrL21xZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAzMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiAxODAKICAgICAgICAgIH0sCiAgICAgICAgICAiaGlnaCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL3l5ZTdyU3NpVjZrL2hxZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA0ODAsCiAgICAgICAgICAgICJoZWlnaHQiOiAzNjAKICAgICAgICAgIH0sCiAgICAgICAgICAic3RhbmRhcmQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS95eWU3clNzaVY2ay9zZGRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNjQwLAogICAgICAgICAgICAiaGVpZ2h0IjogNDgwCiAgICAgICAgICB9LAogICAgICAgICAgIm1heHJlcyI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL3l5ZTdyU3NpVjZrL21heHJlc2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTI4MCwKICAgICAgICAgICAgImhlaWdodCI6IDcyMAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImNoYW5uZWxUaXRsZSI6ICJQcm9ncmFtbWluZyB3aXRoIE1vc2giLAogICAgICAgICJ0YWdzIjogWwogICAgICAgICAgImFwcCBkZXZlbG9wbWVudCByb2FkbWFwIiwKICAgICAgICAgICJhcHAgZGV2ZWxvcG1lbnQiLAogICAgICAgICAgInJlYWN0IG5hdGl2ZSIsCiAgICAgICAgICAiZmx1dHRlciIsCiAgICAgICAgICAiYW5kcm9pZCBhcHAgZGV2ZWxvcG1lbnQiLAogICAgICAgICAgImlvcyBhcHAgZGV2ZWxvcG1lbnQiLAogICAgICAgICAgInByb2dyYW1taW5nIiwKICAgICAgICAgICJwcm9ncmFtbWluZyB3aXRoIG1vc2giLAogICAgICAgICAgImNvZGUgd2l0aCBtb3NoIiwKICAgICAgICAgICJtb3NoIGhhbWVkYW5pIiwKICAgICAgICAgICJob3cgdG8gbWFrZSBhbiBhcHAiLAogICAgICAgICAgImNvZGluZyIsCiAgICAgICAgICAiZmx1dHRlciBhcHAgZGV2ZWxvcG1lbnQiLAogICAgICAgICAgIm1vYmlsZSBkZXZlbG9wbWVudCIsCiAgICAgICAgICAic2hvdWxkIGkgdXNlIGZsdXR0ZXIiCiAgICAgICAgXSwKICAgICAgICAiY2F0ZWdvcnlJZCI6ICIyNyIsCiAgICAgICAgImxpdmVCcm9hZGNhc3RDb250ZW50IjogIm5vbmUiLAogICAgICAgICJkZWZhdWx0TGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICJsb2NhbGl6ZWQiOiB7CiAgICAgICAgICAidGl0bGUiOiAiVGhlIENvbXBsZXRlIEFwcCBEZXZlbG9wbWVudCBSb2FkbWFwIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJHbyBmcm9tIHplcm8gdG8gYSBtb2JpbGUgYXBwIGRldmVsb3BlciBpbiAxMiBtb250aHMuIFRoaXMgc3RlcC1ieS1zdGVwIHJvYWRtYXAgY292ZXJzIHRoZSBlc3NlbnRpYWwgc2tpbGxzIGFuZCBsYXRlc3QgdGVjaG5vbG9naWVzIHRvIGJlY29tZSBhbiBhcHAgZGV2ZWxvcGVyLiBcblxu4p2k77iPIEpvaW4gdGhpcyBjaGFubmVsIHRvIGdldCBhY2Nlc3MgdG8gcGVya3M6XG5odHRwczovL3d3dy55b3V0dWJlLmNvbS9jaGFubmVsL1VDV3Y3dk1iTVdINC1WMFpYZG1EcFBCQS9qb2luXG5cbkRvd25sb2FkIHRoZSBGUkVFIHJvYWRtYXAgUERGIGhlcmU6IGh0dHBzOi8vbW9zaC5saW5rL21vYmlsZS1yb2FkbWFwXG5cbuKciyBTdGF5IGNvbm5lY3RlZFxuXG4tIENvbXBsZXRlIGNvdXJzZXM6IGh0dHBzOi8vY29kZXdpdGhtb3NoLmNvbVxuLSBUd2l0dGVyOiBodHRwczovL3R3aXR0ZXIuY29tL21vc2hoYW1lZGFuaVxuLSBGYWNlYm9vazogaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL3Byb2dyYW1taW5nd2l0aG1vc2gvXG4tIEluc3RhZ3JhbTogaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS9jb2Rld2l0aG1vc2gub2ZmaWNpYWwvXG4tIExpbmtlZEluOiBodHRwczovL3d3dy5saW5rZWRpbi5jb20vc2Nob29sL2NvZGV3aXRobW9zaC9cblxu8J+UlyBPdGhlciByb2FkbWFwc1xuXG5odHRwczovL3lvdXR1LmJlL1RlZjFlOUZpU1IwP3NpPVFwVm5aX285LURBWHpUNzFcbmh0dHBzOi8veW91dHUuYmUvT2VFSEpnenFTMWs/c2k9cWQwWklxQXpVcFpRbjZCWFxuXG7wn5OaIFR1dG9yaWFscyBcblxuaHR0cHM6Ly95b3V0dS5iZS9XNk5aZkNPNVNJaz9zaT15UzBsUVh5eTNxd1FGM0RBXG5odHRwczovL3lvdXR1LmJlLzhKSjEwMUQza25FP3NpPU9HVHVTMzVMUXFTdW51aGhcbmh0dHBzOi8veW91dHUuYmUvQkJwQW14VV9OUW8/c2k9ZG0tWkNQeFZCWVdTMVFoblxuaHR0cHM6Ly95b3V0dS5iZS9OVV8xU3RONVRraz9zaT1nc01PTlBkZ3hvdVFPb2x1XG5odHRwczovL3lvdXR1LmJlL1NxY1kwR2xFVFBrP3NpPU85M0lYZWpUVnVoXzVjYllcbmh0dHBzOi8veW91dHUuYmUvMC1TNWEwZVhQb2M/c2k9eVA3cWlhMDdOTjJGTWVTMlxuXG5cbvCfk5YgQ2hhcHRlcnNcblxuMDA6MDAgLSBJbnRyb2R1Y3Rpb25cbjAwOjA4IC0gTmF0aXZlIHZzIENyb3NzLXBsYXRmb3JtIERldmVsb3BtZW50XG4wNDowOCAtIExhbmd1YWdlc1xuMDQ6NTcgLSBWZXJzaW9uIGNvbnRyb2wgKEdpdClcbjA1OjI1IC0gRGF0YSBzdHJ1Y3R1cmVzICYgYWxnb3JpdGhtcyBcbjA2OjEyIC0gRGVzaWduIHBhdHRlcm5zIFxuMDc6MTQgLSBNb2JpbGUgZnJhbWV3b3Jrc1xuXG4jYXBwZGV2ZWxvcG1lbnQgI2NvZGluZyAjcHJvZ3JhbW1pbmciCiAgICAgICAgfSwKICAgICAgICAiZGVmYXVsdEF1ZGlvTGFuZ3VhZ2UiOiAiZW4iCiAgICAgIH0sCiAgICAgICJjb250ZW50RGV0YWlscyI6IHsKICAgICAgICAiZHVyYXRpb24iOiAiUFQ3TTUyUyIsCiAgICAgICAgImRpbWVuc2lvbiI6ICIyZCIsCiAgICAgICAgImRlZmluaXRpb24iOiAiaGQiLAogICAgICAgICJjYXB0aW9uIjogImZhbHNlIiwKICAgICAgICAibGljZW5zZWRDb250ZW50IjogdHJ1ZSwKICAgICAgICAiY29udGVudFJhdGluZyI6IHt9LAogICAgICAgICJwcm9qZWN0aW9uIjogInJlY3Rhbmd1bGFyIgogICAgICB9LAogICAgICAic3RhdGlzdGljcyI6IHsKICAgICAgICAidmlld0NvdW50IjogIjExODY3MzUiLAogICAgICAgICJsaWtlQ291bnQiOiAiMjc2NjgiLAogICAgICAgICJmYXZvcml0ZUNvdW50IjogIjAiLAogICAgICAgICJjb21tZW50Q291bnQiOiAiNzA3IgogICAgICB9CiAgICB9LAogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgImV0YWciOiAiQ1JTMXEwOW83R3JsY1psbGdMdXBtYlhhVE93IiwKICAgICAgImlkIjogIm9RLUNvQUR0bDVVIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMjQtMDYtMjNUMTM6MzA6MDhaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDTlE2RkV0enRBVHVhVmhaS0NZMjhZdyIsCiAgICAgICAgInRpdGxlIjogIlJlYWN0IG5hdGl2ZSB2cyBmbHV0dGVyIHwgQSBiZWdpbm5lciBndWlkZSIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIldlbGNvbWUgdG8gdGhlIHZpZGVvIGFib3V0IGZsdXR0ZXIgdnMgcmVhY3QgbmF0aXZlIHZpZGVvLiBUaGlzIHZpZGVvIGlzIG5vdCBhYm91dCBjb21wYXJpbmcgb24gcGFwZXJzIHdpdGggbnVtYmVycy4gVGhpcyB2aWRlbyBpcyBmb3IgZnJlc2hlcnMgd2hvIHdhbnRzIHRvIHRyeSBtb2JpbGUgZGV2ZWxvcG1lbnQuIFxuXG5XZWxjb21lIHRvIGNoYWkgYXVyIGNvZGUsIGEgY29kaW5nL3Byb2dyYW1taW5nIGRlZGljYXRlZCBjaGFubmVsIGluIEhpbmRpIGxhbmd1YWdlLiBOb3cgeW91IGNhbiBsZWFybiBiZXN0IG9mIHByb2dyYW1taW5nIGNvbmNlcHRzIHdpdGggaW5kdXN0cnkgc3RhbmRhcmQgcHJhY3RpY2FsIGd1aWRlIGluIEhpbmRpIGxhbmd1YWdlLlxuXG5BbGwgc291cmNlIGNvZGUgaXMgYXZhaWxhYmxlIGF0IG15IEdpdGh1YiBhY2NvdW50OlxuaHR0cHM6Ly9naXRodWIuY29tL2hpdGVzaGNob3VkaGFyeVxuXG5PdXIgT3Blbi1Tb3VyY2UgUHJvamVjdCBpcyBoZXJlOiBodHRwczovL2ZyZWVhcGkuYXBwXG5cbkpvaW4gbWUgYXQgd2hhdHNhcHA6IGh0dHBzOi8vaGl0ZXNoLmFpL3doYXRzYXBwXG5cbmZvciBjb21tdW5pdHkgZGlzY29yZDogaHR0cHM6Ly9oaXRlc2guYWkvZGlzY29yZFxuXG5JbnN0YWdyYW0gcGUgeWFoYSBwYWF5ZSBqYWF0ZSBoOlxuaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS9oaXRlc2hjaG91ZGhhcnlvZmZpY2lhbC9cblxuSFRNTCB2aWRlbyBzZXJpZXM6ICBodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PVhtTE93SkhGSGYwJmxpc3Q9UEx1NzFTS3hOYmZvREJORjVzLVdINmFMYnRoU0VJTWhNSVxuXG5Db21wbGV0ZSBqYXZhc2NyaXB0IHNlcmllczogaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1IcjVpTEc3c1VhMCZsaXN0PVBMdTcxU0t4TmJmb0J1WDNmNEVPQUNsZTJ5LXRSQzVRMzdcblxuQ29tcGxldGUgUmVhY3RqcyBzZXJpZXM6IGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9dnoxUmxVeXJjM3cmbGlzdD1QTHU3MVNLeE5iZm9EcWdQY2htdklzTDRoVG5KSXJ0aWdlXG5cbkphdmFzY3JpcHQgYW5kIHJlYWN0IGludGVydmlldyBzZXJpZXM6IGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9MXdxQ3l6N1hyVjQmbGlzdD1QTHU3MVNLeE5iZm9DeV9Nc0E5OFNCZnZVS0Y1ZVFpdDZMXG5cbkJhY2tlbmQgZGV2ZWxvcG1lbnQgd2l0aCBKYXZhc2NyaXB0OiBodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PUVIM3ZHZXFlSUFvJmxpc3Q9UEx1NzFTS3hOYmZvQkdoXzhwX05TLVpBaDZ2N0hoWXFIV1xuXG5QeXRob24gU2VyaWVzOiBodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PUNhNURMU0RmUGVjJmxpc3Q9UEx1NzFTS3hOYmZvQnNNdWdURkFMaGRMbFo1Vk9xQ2cycyIsCiAgICAgICAgInRodW1ibmFpbHMiOiB7CiAgICAgICAgICAiZGVmYXVsdCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL29RLUNvQUR0bDVVL2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTIwLAogICAgICAgICAgICAiaGVpZ2h0IjogOTAKICAgICAgICAgIH0sCiAgICAgICAgICAibWVkaXVtIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvb1EtQ29BRHRsNVUvbXFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgICAgICAgImhlaWdodCI6IDE4MAogICAgICAgICAgfSwKICAgICAgICAgICJoaWdoIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvb1EtQ29BRHRsNVUvaHFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgICAgICAgImhlaWdodCI6IDM2MAogICAgICAgICAgfSwKICAgICAgICAgICJzdGFuZGFyZCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL29RLUNvQUR0bDVVL3NkZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA2NDAsCiAgICAgICAgICAgICJoZWlnaHQiOiA0ODAKICAgICAgICAgIH0sCiAgICAgICAgICAibWF4cmVzIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvb1EtQ29BRHRsNVUvbWF4cmVzZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjgwLAogICAgICAgICAgICAiaGVpZ2h0IjogNzIwCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiY2hhbm5lbFRpdGxlIjogIkNoYWkgYXVyIENvZGUiLAogICAgICAgICJ0YWdzIjogWwogICAgICAgICAgImNvZGluZyIsCiAgICAgICAgICAiaGluZGkiLAogICAgICAgICAgImphdmFzY3JpcHQiLAogICAgICAgICAgIndlYiBkZXZlbG9wZXIiLAogICAgICAgICAgInJlYWN0IiwKICAgICAgICAgICJxdWFsaXR5IiwKICAgICAgICAgICJyZWFjdGpzIiwKICAgICAgICAgICJ0ZWNoIGludGVydmlld3MiLAogICAgICAgICAgImNvZGluZyBpbnRlcnZpZXdzIiwKICAgICAgICAgICJweXRob24iLAogICAgICAgICAgImRqYW5nbyIsCiAgICAgICAgICAibWFjaGluZSBsZWFybmluZyIsCiAgICAgICAgICAicHl0aG9uIGZvciBiZWdpbm5lcnMiLAogICAgICAgICAgIkFJIiwKICAgICAgICAgICJEYXRhIFNjaWVuY2UiCiAgICAgICAgXSwKICAgICAgICAiY2F0ZWdvcnlJZCI6ICIyNCIsCiAgICAgICAgImxpdmVCcm9hZGNhc3RDb250ZW50IjogIm5vbmUiLAogICAgICAgICJkZWZhdWx0TGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICJsb2NhbGl6ZWQiOiB7CiAgICAgICAgICAidGl0bGUiOiAiUmVhY3QgbmF0aXZlIHZzIGZsdXR0ZXIgfCBBIGJlZ2lubmVyIGd1aWRlIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJXZWxjb21lIHRvIHRoZSB2aWRlbyBhYm91dCBmbHV0dGVyIHZzIHJlYWN0IG5hdGl2ZSB2aWRlby4gVGhpcyB2aWRlbyBpcyBub3QgYWJvdXQgY29tcGFyaW5nIG9uIHBhcGVycyB3aXRoIG51bWJlcnMuIFRoaXMgdmlkZW8gaXMgZm9yIGZyZXNoZXJzIHdobyB3YW50cyB0byB0cnkgbW9iaWxlIGRldmVsb3BtZW50LiBcblxuV2VsY29tZSB0byBjaGFpIGF1ciBjb2RlLCBhIGNvZGluZy9wcm9ncmFtbWluZyBkZWRpY2F0ZWQgY2hhbm5lbCBpbiBIaW5kaSBsYW5ndWFnZS4gTm93IHlvdSBjYW4gbGVhcm4gYmVzdCBvZiBwcm9ncmFtbWluZyBjb25jZXB0cyB3aXRoIGluZHVzdHJ5IHN0YW5kYXJkIHByYWN0aWNhbCBndWlkZSBpbiBIaW5kaSBsYW5ndWFnZS5cblxuQWxsIHNvdXJjZSBjb2RlIGlzIGF2YWlsYWJsZSBhdCBteSBHaXRodWIgYWNjb3VudDpcbmh0dHBzOi8vZ2l0aHViLmNvbS9oaXRlc2hjaG91ZGhhcnlcblxuT3VyIE9wZW4tU291cmNlIFByb2plY3QgaXMgaGVyZTogaHR0cHM6Ly9mcmVlYXBpLmFwcFxuXG5Kb2luIG1lIGF0IHdoYXRzYXBwOiBodHRwczovL2hpdGVzaC5haS93aGF0c2FwcFxuXG5mb3IgY29tbXVuaXR5IGRpc2NvcmQ6IGh0dHBzOi8vaGl0ZXNoLmFpL2Rpc2NvcmRcblxuSW5zdGFncmFtIHBlIHlhaGEgcGFheWUgamFhdGUgaDpcbmh0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vaGl0ZXNoY2hvdWRoYXJ5b2ZmaWNpYWwvXG5cbkhUTUwgdmlkZW8gc2VyaWVzOiAgaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1YbUxPd0pIRkhmMCZsaXN0PVBMdTcxU0t4TmJmb0RCTkY1cy1XSDZhTGJ0aFNFSU1oTUlcblxuQ29tcGxldGUgamF2YXNjcmlwdCBzZXJpZXM6IGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9SHI1aUxHN3NVYTAmbGlzdD1QTHU3MVNLeE5iZm9CdVgzZjRFT0FDbGUyeS10UkM1UTM3XG5cbkNvbXBsZXRlIFJlYWN0anMgc2VyaWVzOiBodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PXZ6MVJsVXlyYzN3Jmxpc3Q9UEx1NzFTS3hOYmZvRHFnUGNobXZJc0w0aFRuSklydGlnZVxuXG5KYXZhc2NyaXB0IGFuZCByZWFjdCBpbnRlcnZpZXcgc2VyaWVzOiBodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PTF3cUN5ejdYclY0Jmxpc3Q9UEx1NzFTS3hOYmZvQ3lfTXNBOThTQmZ2VUtGNWVRaXQ2TFxuXG5CYWNrZW5kIGRldmVsb3BtZW50IHdpdGggSmF2YXNjcmlwdDogaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1FSDN2R2VxZUlBbyZsaXN0PVBMdTcxU0t4TmJmb0JHaF84cF9OUy1aQWg2djdIaFlxSFdcblxuUHl0aG9uIFNlcmllczogaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1DYTVETFNEZlBlYyZsaXN0PVBMdTcxU0t4TmJmb0JzTXVnVEZBTGhkTGxaNVZPcUNnMnMiCiAgICAgICAgfSwKICAgICAgICAiZGVmYXVsdEF1ZGlvTGFuZ3VhZ2UiOiAiaGkiCiAgICAgIH0sCiAgICAgICJjb250ZW50RGV0YWlscyI6IHsKICAgICAgICAiZHVyYXRpb24iOiAiUFQxMk0xM1MiLAogICAgICAgICJkaW1lbnNpb24iOiAiMmQiLAogICAgICAgICJkZWZpbml0aW9uIjogImhkIiwKICAgICAgICAiY2FwdGlvbiI6ICJmYWxzZSIsCiAgICAgICAgImxpY2Vuc2VkQ29udGVudCI6IHRydWUsCiAgICAgICAgImNvbnRlbnRSYXRpbmciOiB7fSwKICAgICAgICAicHJvamVjdGlvbiI6ICJyZWN0YW5ndWxhciIKICAgICAgfSwKICAgICAgInN0YXRpc3RpY3MiOiB7CiAgICAgICAgInZpZXdDb3VudCI6ICIxMzc0MjYiLAogICAgICAgICJsaWtlQ291bnQiOiAiNTc4NyIsCiAgICAgICAgImZhdm9yaXRlQ291bnQiOiAiMCIsCiAgICAgICAgImNvbW1lbnRDb3VudCI6ICI4NDciCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJraW5kIjogInlvdXR1YmUjdmlkZW8iLAogICAgICAiZXRhZyI6ICJsSFhocEtzUmlvSjgyVHNjYkxWTXA3bHFfUDQiLAogICAgICAiaWQiOiAiRDVIM1FGNDYzQ3ciLAogICAgICAic25pcHBldCI6IHsKICAgICAgICAicHVibGlzaGVkQXQiOiAiMjAyNC0wNS0yNFQxNTozMDowNFoiLAogICAgICAgICJjaGFubmVsSWQiOiAiVUMwVDZNVmQzd1FEQjVJQ0FlNDVPeGFRIiwKICAgICAgICAidGl0bGUiOiAiSW1wb3J0L0V4cG9ydCBNb2R1bGUgQ29uY2VwdCBpbiBSZWFjdCBKUyAoRnVsbCBHdWlkZSkgfCBNYXN0ZXIgUmVhY3QgSlMgQ291cnNlIiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiSW1wb3J0L0V4cG9ydCBNb2R1bGUgQ29uY2VwdCBpbiBSZWFjdCBKUyAoRnVsbCBHdWlkZSkgfCBNYXN0ZXIgUmVhY3QgSlMgQ291cnNlXG5cbvCflLQgVG8gbGVhcm4gTWVybiBTdGFjayBEZXZlbG9wbWVudCBvbmxpbmUgd2l0aCByZWd1bGFyIExJVkUgQ0xBU1NFUywgZW5yb2xsIG5vdzogaHR0cHM6Ly93d3cud3NjdWJldGVjaC5jb20vbGFuZGluZy1wYWdlcy9vbmxpbmUtbWVybi1zdGFjay1kZXZlbG9wZXItY291cnNlLWluZGlhLmh0bWw/dXRtX3NvdXJjZT1Zb3VUdWJlJnV0bV9tZWRpdW09TWF5MjAyNF8yNCZ1dG1fY2FtcGFpZ249UmFuZG9tX1ZpZGVvXG5cbldzQ3ViZSBUZWNoIGlzIGEgVmVybmFjdWxhciBVcHNraWxsaW5nIHBsYXRmb3JtIHJldm9sdXRpb25pemluZyB0aGUgd2F5IHlvdSBsZWFybiBhbmQgZGV2ZWxvcCB5b3VyIGNhcmVlciBza2lsbHMu8J+agFxuXG5Xc0N1YmUgVGVjaCBzdGFuZHMgb3V0IGFzIGEgbGVhZGluZyBFZFRlY2ggcGxhdGZvcm0sIG9mZmVyaW5nIGNvbXByZWhlbnNpdmUgZWR1Y2F0aW9uIGluIEZ1bGwgU3RhY2sgV2ViIERldmVsb3BtZW50LCBXb3JkUHJlc3MsIGFuZCB2YXJpb3VzIFdlYiBEZXZlbG9wbWVudCBza2lsbHMuIE91ciBhcHByb2FjaCBpbnZvbHZlcyBib3RoIG9ubGluZSBhbmQgY2xhc3Nyb29tIHRyYWluaW5nLCBmZWF0dXJpbmcgaGFuZHMtb24gcHJvamVjdHMgZGVsaXZlcmVkIHByYWN0aWNhbGx5IGJ5IHNlYXNvbmVkIGluZHVzdHJ5IGV4cGVydHMuXG5cbldpdGggV3NDdWJlIFRlY2gsIHlvdSdsbCBnYWluIGhhbmRzLW9uIHNraWxscyB0aGF0IG1ha2UgeW91IGdsb2JhbGx5IGNvbXBldGl0aXZlLiBPdXIgY291cnNlcyBhcmUgZGVzaWduZWQgdG8gcHJlcGFyZSBvdmVyIDEwMCBtaWxsaW9uIGNhcmVlciBhc3BpcmFudHMgZm9yIHRoZSAnQmhhcmF0JyBvZiB0aGUgZnV0dXJlLiDwn5iKXG5cbvCfkYkgV2FudCB0byBsZWFybiBhbmQgYWNxdWlyZSBza2lsbHMgaW4gRW5nbGlzaD8gVmlzaXQgV3NDdWJlIFRlY2ggRW5nbGlzaCBjaGFubmVsOiBodHRwczovL2JpdC5seS8yTTNvWU9zXG5cbvCfk4wg8J2XqfCdl7zwnZiB8J2XsiDwnZez8J2XvPCdl78g8J2XvPCdmILwnZe/IPCdl7vwnZey8J2YhfCdmIEg8J2Yg/Cdl7bwnZex8J2XsvCdl7w6IGh0dHBzOi8vYml0Lmx5L3NoYXJlLXRvcGljLWlkZWFzXG5cbldhdGNoIE5vdyBvdXIgVHJlbmRpbmcgV2ViIERldmVsb3BtZW50IFBsYXlsaXN0ICYgVmlkZW9zOlxu8J+RiSBMZWFybiBXZWIgRGV2ZWxvcG1lbnQgaW4gT25lIFZpZGVvIC0gaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1IVmpqb012dXRqNCBcbvCfkYkgV29yZFByZXNzIEZ1bGwgQ291cnNlIC0gaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1jcGRlLWxJN19wRSAgXG7wn5GJIENvbXBsZXRlIEhUTUwgJiBDU1MgQ291cnNlICAoQmVnaW5uZXJzIHRvIEFkdmFuY2VkKVxuaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1FdTdHMGpWMEltWSBcbvCfkYkgSmF2YVNjcmlwdCBGdWxsIENvdXJzZSBbRlJFRV1cbmh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9S2R6OUo1dkM0X28gXG5cbkZvciBhbnkgcXVlcmllcywgY2FsbCB1cyBvbjogICs5MSA4NTAyOTU5MDUzXG5cbuKchSBDT05ORUNUIFdJVEggVEhFIEZPVU5ERVIgKE1yLiBLdXNoYWdyYSBCaGF0aWEpIC0gXG7wn5GJIEluc3RhZ3JhbSAtIGh0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20va3VzaGFncmFiaGF0aWFvZmZpY2lhbFxu8J+RiSBMaW5rZWRJbiAtIGh0dHBzOi8vd3d3LmxpbmtlZGluLmNvbS9pbi9rdXNoYWdyYS1iaGF0aWFcbvCfkYkgRmFjZWJvb2sgLSBodHRwczovL3d3dy5mYWNlYm9vay5jb20va3VzaGFncmF3c2N1YmV0ZWNoXG5cbkNvbm5lY3Qgd2l0aCBXc0N1YmUgVGVjaCBvbiBzb2NpYWwgbWVkaWEgZm9yIHRoZSBsYXRlc3Qgb2ZmZXJzLCBwcm9tb3MsIGpvYiB2YWNhbmNpZXMsIGFuZCBtdWNoIG1vcmU6XG7wn5iEIEZhY2Vib29rOiBodHRwczovL3d3dy5mYWNlYm9vay5jb20vd3NjdWJldGVjaC5pbmRpYVxu8J+QpiBUd2l0dGVyOiBodHRwczovL3R3aXR0ZXIuY29tL3dzY3ViZXRlY2hpbmRpYVxu8J+TsSBJbnN0YWdyYW06IGh0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vd3NjdWJldGVjaGluZGlhL1xu8J+RqPCfj7tcdTIwMGTwn5K7IExpbmtlZEluOiBodHRwczovL3d3dy5saW5rZWRpbi5jb20vY29tcGFueS93c2N1YmV0ZWNoaW5kaWEvIFxu8J+UuiBZb3V0dWJlOiBodHRwOi8vYml0Lmx5L3dzY3ViZWNoYW5uZWxcbvCfjJAgV2Vic2l0ZTogaHR0cDovL3dzY3ViZXRlY2guY29tIFxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18IFRoYW5rcyB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4jcmVhY3RqcyAjcmVhY3Rqc3R1dG9yaWFsIiwKICAgICAgICAidGh1bWJuYWlscyI6IHsKICAgICAgICAgICJkZWZhdWx0IjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvRDVIM1FGNDYzQ3cvZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiA5MAogICAgICAgICAgfSwKICAgICAgICAgICJtZWRpdW0iOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9ENUgzUUY0NjNDdy9tcWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMzIwLAogICAgICAgICAgICAiaGVpZ2h0IjogMTgwCiAgICAgICAgICB9LAogICAgICAgICAgImhpZ2giOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9ENUgzUUY0NjNDdy9ocWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNDgwLAogICAgICAgICAgICAiaGVpZ2h0IjogMzYwCiAgICAgICAgICB9LAogICAgICAgICAgInN0YW5kYXJkIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvRDVIM1FGNDYzQ3cvc2RkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDY0MCwKICAgICAgICAgICAgImhlaWdodCI6IDQ4MAogICAgICAgICAgfSwKICAgICAgICAgICJtYXhyZXMiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9ENUgzUUY0NjNDdy9tYXhyZXNkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyODAsCiAgICAgICAgICAgICJoZWlnaHQiOiA3MjAKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJjaGFubmVsVGl0bGUiOiAiV3NDdWJlIFRlY2giLAogICAgICAgICJ0YWdzIjogWwogICAgICAgICAgIldzQ3ViZSBUZWNoIiwKICAgICAgICAgICJyZWFjdCBqcyBpbXBvcnQgZXhwb3J0IiwKICAgICAgICAgICJpbXBvcnQgZXhwb3J0IHJlYWN0anMiLAogICAgICAgICAgImltcG9ydCBleHBvcnQgbW9kdWxlcyBoaW5kaSIsCiAgICAgICAgICAiZXM2IGltcG9ydCBleHBvcnQiLAogICAgICAgICAgInJlYWN0IGpzIG1vZHVsZXMiLAogICAgICAgICAgImV4cG9ydCBkZWZhdWx0IHJlYWN0IiwKICAgICAgICAgICJpbXBvcnQgZXhwb3J0IGVzNiByZWFjdCBqcyIsCiAgICAgICAgICAiaW1wb3J0IGV4cG9ydCBpbiByZWFjdCBqcyBoaW5kaSIsCiAgICAgICAgICAiaW1wb3J0IG1vZHVsZSBpbiByZWFjdCBqcyIsCiAgICAgICAgICAiZXhwb3J0IG1vZHVsZSBpbiByZWFjdCBqcyIsCiAgICAgICAgICAibm9kZSBqcyBtb2R1bGVzIHR1dG9yaWFsIiwKICAgICAgICAgICJtb2R1bGUgaW4gamF2YXNjcmlwdCIsCiAgICAgICAgICAid2hhdCBpcyBpbXBvcnQgbW9kdWxlIGluIHJlYWN0IGpzIiwKICAgICAgICAgICJ3aGF0IGlzIGV4cGVydCBpbiByZWFjdCBqcyIsCiAgICAgICAgICAicmVhY3QganMgY291cnNlIiwKICAgICAgICAgICJyZWFjdCBqcyAyMDI0IiwKICAgICAgICAgICJ3c2N1YmUgdGVjaCIsCiAgICAgICAgICAicmVhY3QganMgaW4gaGluZGkiLAogICAgICAgICAgInJlYWN0IGpzIHR1dG9yaWFsIiwKICAgICAgICAgICJXc2N1YmUgdGVjaCIsCiAgICAgICAgICAicmVhY3RqcyIKICAgICAgICBdLAogICAgICAgICJjYXRlZ29yeUlkIjogIjI3IiwKICAgICAgICAibGl2ZUJyb2FkY2FzdENvbnRlbnQiOiAibm9uZSIsCiAgICAgICAgImRlZmF1bHRMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgImxvY2FsaXplZCI6IHsKICAgICAgICAgICJ0aXRsZSI6ICJJbXBvcnQvRXhwb3J0IE1vZHVsZSBDb25jZXB0IGluIFJlYWN0IEpTIChGdWxsIEd1aWRlKSB8IE1hc3RlciBSZWFjdCBKUyBDb3Vyc2UiLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIkltcG9ydC9FeHBvcnQgTW9kdWxlIENvbmNlcHQgaW4gUmVhY3QgSlMgKEZ1bGwgR3VpZGUpIHwgTWFzdGVyIFJlYWN0IEpTIENvdXJzZVxuXG7wn5S0IFRvIGxlYXJuIE1lcm4gU3RhY2sgRGV2ZWxvcG1lbnQgb25saW5lIHdpdGggcmVndWxhciBMSVZFIENMQVNTRVMsIGVucm9sbCBub3c6IGh0dHBzOi8vd3d3LndzY3ViZXRlY2guY29tL2xhbmRpbmctcGFnZXMvb25saW5lLW1lcm4tc3RhY2stZGV2ZWxvcGVyLWNvdXJzZS1pbmRpYS5odG1sP3V0bV9zb3VyY2U9WW91VHViZSZ1dG1fbWVkaXVtPU1heTIwMjRfMjQmdXRtX2NhbXBhaWduPVJhbmRvbV9WaWRlb1xuXG5Xc0N1YmUgVGVjaCBpcyBhIFZlcm5hY3VsYXIgVXBza2lsbGluZyBwbGF0Zm9ybSByZXZvbHV0aW9uaXppbmcgdGhlIHdheSB5b3UgbGVhcm4gYW5kIGRldmVsb3AgeW91ciBjYXJlZXIgc2tpbGxzLvCfmoBcblxuV3NDdWJlIFRlY2ggc3RhbmRzIG91dCBhcyBhIGxlYWRpbmcgRWRUZWNoIHBsYXRmb3JtLCBvZmZlcmluZyBjb21wcmVoZW5zaXZlIGVkdWNhdGlvbiBpbiBGdWxsIFN0YWNrIFdlYiBEZXZlbG9wbWVudCwgV29yZFByZXNzLCBhbmQgdmFyaW91cyBXZWIgRGV2ZWxvcG1lbnQgc2tpbGxzLiBPdXIgYXBwcm9hY2ggaW52b2x2ZXMgYm90aCBvbmxpbmUgYW5kIGNsYXNzcm9vbSB0cmFpbmluZywgZmVhdHVyaW5nIGhhbmRzLW9uIHByb2plY3RzIGRlbGl2ZXJlZCBwcmFjdGljYWxseSBieSBzZWFzb25lZCBpbmR1c3RyeSBleHBlcnRzLlxuXG5XaXRoIFdzQ3ViZSBUZWNoLCB5b3UnbGwgZ2FpbiBoYW5kcy1vbiBza2lsbHMgdGhhdCBtYWtlIHlvdSBnbG9iYWxseSBjb21wZXRpdGl2ZS4gT3VyIGNvdXJzZXMgYXJlIGRlc2lnbmVkIHRvIHByZXBhcmUgb3ZlciAxMDAgbWlsbGlvbiBjYXJlZXIgYXNwaXJhbnRzIGZvciB0aGUgJ0JoYXJhdCcgb2YgdGhlIGZ1dHVyZS4g8J+YilxuXG7wn5GJIFdhbnQgdG8gbGVhcm4gYW5kIGFjcXVpcmUgc2tpbGxzIGluIEVuZ2xpc2g/IFZpc2l0IFdzQ3ViZSBUZWNoIEVuZ2xpc2ggY2hhbm5lbDogaHR0cHM6Ly9iaXQubHkvMk0zb1lPc1xuXG7wn5OMIPCdl6nwnZe88J2YgfCdl7Ig8J2Xs/Cdl7zwnZe/IPCdl7zwnZiC8J2XvyDwnZe78J2XsvCdmIXwnZiBIPCdmIPwnZe28J2XsfCdl7LwnZe8OiBodHRwczovL2JpdC5seS9zaGFyZS10b3BpYy1pZGVhc1xuXG5XYXRjaCBOb3cgb3VyIFRyZW5kaW5nIFdlYiBEZXZlbG9wbWVudCBQbGF5bGlzdCAmIFZpZGVvczpcbvCfkYkgTGVhcm4gV2ViIERldmVsb3BtZW50IGluIE9uZSBWaWRlbyAtIGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9SFZqam9NdnV0ajQgXG7wn5GJIFdvcmRQcmVzcyBGdWxsIENvdXJzZSAtIGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9Y3BkZS1sSTdfcEUgIFxu8J+RiSBDb21wbGV0ZSBIVE1MICYgQ1NTIENvdXJzZSAgKEJlZ2lubmVycyB0byBBZHZhbmNlZClcbmh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9RXU3RzBqVjBJbVkgXG7wn5GJIEphdmFTY3JpcHQgRnVsbCBDb3Vyc2UgW0ZSRUVdXG5odHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PUtkejlKNXZDNF9vIFxuXG5Gb3IgYW55IHF1ZXJpZXMsIGNhbGwgdXMgb246ICArOTEgODUwMjk1OTA1M1xuXG7inIUgQ09OTkVDVCBXSVRIIFRIRSBGT1VOREVSIChNci4gS3VzaGFncmEgQmhhdGlhKSAtIFxu8J+RiSBJbnN0YWdyYW0gLSBodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL2t1c2hhZ3JhYmhhdGlhb2ZmaWNpYWxcbvCfkYkgTGlua2VkSW4gLSBodHRwczovL3d3dy5saW5rZWRpbi5jb20vaW4va3VzaGFncmEtYmhhdGlhXG7wn5GJIEZhY2Vib29rIC0gaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL2t1c2hhZ3Jhd3NjdWJldGVjaFxuXG5Db25uZWN0IHdpdGggV3NDdWJlIFRlY2ggb24gc29jaWFsIG1lZGlhIGZvciB0aGUgbGF0ZXN0IG9mZmVycywgcHJvbW9zLCBqb2IgdmFjYW5jaWVzLCBhbmQgbXVjaCBtb3JlOlxu8J+YhCBGYWNlYm9vazogaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL3dzY3ViZXRlY2guaW5kaWFcbvCfkKYgVHdpdHRlcjogaHR0cHM6Ly90d2l0dGVyLmNvbS93c2N1YmV0ZWNoaW5kaWFcbvCfk7EgSW5zdGFncmFtOiBodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL3dzY3ViZXRlY2hpbmRpYS9cbvCfkajwn4+7XHUyMDBk8J+SuyBMaW5rZWRJbjogaHR0cHM6Ly93d3cubGlua2VkaW4uY29tL2NvbXBhbnkvd3NjdWJldGVjaGluZGlhLyBcbvCflLogWW91dHViZTogaHR0cDovL2JpdC5seS93c2N1YmVjaGFubmVsXG7wn4yQIFdlYnNpdGU6IGh0dHA6Ly93c2N1YmV0ZWNoLmNvbSBcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfCBUaGFua3MgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuI3JlYWN0anMgI3JlYWN0anN0dXRvcmlhbCIKICAgICAgICB9LAogICAgICAgICJkZWZhdWx0QXVkaW9MYW5ndWFnZSI6ICJoaSIKICAgICAgfSwKICAgICAgImNvbnRlbnREZXRhaWxzIjogewogICAgICAgICJkdXJhdGlvbiI6ICJQVDE3TTExUyIsCiAgICAgICAgImRpbWVuc2lvbiI6ICIyZCIsCiAgICAgICAgImRlZmluaXRpb24iOiAiaGQiLAogICAgICAgICJjYXB0aW9uIjogImZhbHNlIiwKICAgICAgICAibGljZW5zZWRDb250ZW50IjogdHJ1ZSwKICAgICAgICAiY29udGVudFJhdGluZyI6IHt9LAogICAgICAgICJwcm9qZWN0aW9uIjogInJlY3Rhbmd1bGFyIgogICAgICB9LAogICAgICAic3RhdGlzdGljcyI6IHsKICAgICAgICAidmlld0NvdW50IjogIjI0Mzg2IiwKICAgICAgICAibGlrZUNvdW50IjogIjQxNiIsCiAgICAgICAgImZhdm9yaXRlQ291bnQiOiAiMCIsCiAgICAgICAgImNvbW1lbnRDb3VudCI6ICIyNCIKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImtpbmQiOiAieW91dHViZSN2aWRlbyIsCiAgICAgICJldGFnIjogIkhtb1NxWElYS0FUT0hISGN0aHUweDkxZURmOCIsCiAgICAgICJpZCI6ICJ6SG9XZ0pEMGp3NCIsCiAgICAgICJzbmlwcGV0IjogewogICAgICAgICJwdWJsaXNoZWRBdCI6ICIyMDI0LTAxLTMwVDE1OjU0OjQ3WiIsCiAgICAgICAgImNoYW5uZWxJZCI6ICJVQ2VWTW5TU2hQX0l2aXdra250ODNjd3ciLAogICAgICAgICJ0aXRsZSI6ICJIb29rcyAmIFN0YXRlIGluIFJlYWN0IHwgU2lnbWEgV2ViIERldmVsb3BtZW50IENvdXJzZSAtIFR1dG9yaWFsICMxMDciLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJMYXRlc3QgVWRlbXkgV2ViIGRldiBDb3Vyc2UgV2l0aCBDZXJ0aWZpY2F0ZTogaHR0cHM6Ly9nb2hhcnJ5LmluL3dlYmRldlxuQWNjZXNzIHRoZSBTaWdtYSB3ZWIgZGV2ZWxvcG1lbnQgY291cnNlIHBsYXlsaXN0OiBodHRwczovL3d3dy55b3V0dWJlLmNvbS9wbGF5bGlzdD9saXN0PVBMdTBXXzlsSUk5YWdxNVRySDlYTElLUXZ2MGlhRjJYM3dcbuKeoe+4jyBTb3VyY2UgQ29kZTogaHR0cHM6Ly9naXRodWIuY29tL0NvZGVXaXRoSGFycnkvU2lnbWEtV2ViLURldi1Db3Vyc2VcbuKeoe+4jyBOb3RlcyBhbmQgQ2hlYXRTaGVldHM6IGh0dHBzOi8vd3d3LmNvZGV3aXRoaGFycnkuY29tL25vdGVzL1xu4p6h77iPIEVuZ2xpc2ggU3VidGl0bGVzIGFyZSBub3cgdXAgZm9yIGFsbCB0aGUgdmlkZW9zIVxuXG7ilrpDaGVja291dCBteSBFbmdsaXNoIGNoYW5uZWwgaGVyZTogaHR0cHM6Ly93d3cueW91dHViZS5jb20vY2hhbm5lbC9VQzdidHFHMld3MF8yTHd1UXhwdm8ySFFcbuKWukluc3RhZ3JhbTogaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS9jb2Rld2l0aGhhcnJ5XG5cbnB5dGhvbiwgQywgQysrLCBKYXZhLCBKYXZhU2NyaXB0IGFuZCBPdGhlciBDaGVhdHNoZWV0cyBbKytdOlxuUGxheWxpc3Q6IGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3BsYXlsaXN0P2xpc3Q9UEx1MFdfOWxJSTlhZ3JzUlpqRkVDZUZ1V1k1ZXYycFFsa1xuXG7ilrpMZWFybiBpbiBPbmUgVmlkZW9bKytdOlxuUHl0aG9uIENvdXJzZSB3aXRoIDUgUHJvamVjdHM6IGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9ZnFGOU05Mmp6VW9cblB5dGhvblsxNSBIcl06IGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9Z2ZERTJhN01LakEmbGlzdD1QTHUwV185bElJOWFoS1o0MnZnMnc5RVJQbVNoWWJZQUI3XG5QeXRob24gQWR2YW5jZVszLjUgSHJdOiBodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PTYxYTdVa0RPNTBzJmxpc3Q9UEx1MFdfOWxJSTlhaEtaNDJ2ZzJ3OUVSUG1TaFliWUFCN1xuUHl0aG9uWzEgSHJdOiBodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PXFISmpNdkhMSmRnJmxpc3Q9UEx1MFdfOWxJSTlhaEtaNDJ2ZzJ3OUVSUG1TaFliWUFCN1xuUHl0aG9uWzIgSHJdOiBodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PWloa19YZ2xyMTY0Jmxpc3Q9UEx1MFdfOWxJSTlhaEtaNDJ2ZzJ3OUVSUG1TaFliWUFCN1xuUHl0aG9uWzE1IE1pbl06aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1mcjFmODRyZzROdyZsaXN0PVBMdTBXXzlsSUk5YWhLWjQydmcydzlFUlBtU2hZYllBQjdcbkphdmFTY3JpcHRbMSBIcl06IGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9b25iQlYwdUZWcG8mbGlzdD1QTHUwV185bElJOWFoS1o0MnZnMnc5RVJQbVNoWWJZQUI3XG5DWzEuMyBIcl0taHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1ZWGNnRDhoUkhZWSZsaXN0PVBMdTBXXzlsSUk5YWhLWjQydmcydzlFUlBtU2hZYllBQjdcbnBocFsxIEhyXTogaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj14VzdybzNsd2FDSSZsaXN0PVBMdTBXXzlsSUk5YWhLWjQydmcydzlFUlBtU2hZYllBQjdcbnBocFsyLjMgSHJdOmh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9MVNuUEtoQ2Rsc1UmbGlzdD1QTHUwV185bElJOWFoS1o0MnZnMnc5RVJQbVNoWWJZQUI3XG5waHBbUHJvamVjdF0tIGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9LWFsMmJFQ3VtS2cmbGlzdD1QTHUwV185bElJOWFoS1o0MnZnMnc5RVJQbVNoWWJZQUI3XG5IVE1MWzMwIE1pbl06aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1FM0J5Q1JxRTdMbyZsaXN0PVBMdTBXXzlsSUk5YWhLWjQydmcydzlFUlBtU2hZYllBQjdcbkNTU1s4LjUgSHJdOmh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9RWRzeGZfTkJGcncmbGlzdD1QTHUwV185bElJOWFoS1o0MnZnMnc5RVJQbVNoWWJZQUI3XG5DU1NbMS40IEhyXTpodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PXU1LUtfdWE5c093Jmxpc3Q9UEx1MFdfOWxJSTlhaEtaNDJ2ZzJ3OUVSUG1TaFliWUFCN1xuV29yZHByZXNzWzMuMiBIcl06aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1HbExSWW1sOG1DWSZsaXN0PVBMdTBXXzlsSUk5YWhLWjQydmcydzlFUlBtU2hZYllBQjdcbkFuZ3VsYXJbMiBIcl06aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj0wTGhCdnA4cXBybyZsaXN0PVBMdTBXXzlsSUk5YWhLWjQydmcydzlFUlBtU2hZYllBQjdcbkphdmFbMi4zIEhyXTpodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PXJWXzNMZXd4eDZvJmxpc3Q9UEx1MFdfOWxJSTlhaEtaNDJ2ZzJ3OUVSUG1TaFliWUFCN1xuV2ViIFNjcmFwaW5nWzEgSHJdOmh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9dXVmREdqVHVxMzQmbGlzdD1QTHUwV185bElJOWFoS1o0MnZnMnc5RVJQbVNoWWJZQUI3XG5Nb25nb0RCWzIgSHJdOmh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9b1NJdi1FNjBOaVUmbGlzdD1QTHUwV185bElJOWFoS1o0MnZnMnc5RVJQbVNoWWJZQUI3XG5OdW1weVsxIEhyXTpodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PVJiaDFyaWViM3pjJmxpc3Q9UEx1MFdfOWxJSTlhaEtaNDJ2ZzJ3OUVSUG1TaFliWUFCN1xuQW5kcm9pZCBEZXZbMTIgSHJdLSBodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PW1YalpRWDNVek9zXG5MaW51eFsxIEhyXTpodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PV90Q1ktYy1zUFpjJmxpc3Q9UEx1MFdfOWxJSTlhaEtaNDJ2ZzJ3OUVSUG1TaFliWUFCN1xuSlF1ZXJ5WzEuMSBIcl06aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1ZRmx4MUM4WHdSMCZsaXN0PVBMdTBXXzlsSUk5YWhLWjQydmcydzlFUlBtU2hZYllBQjdcbkdpdCBhbmQgR2l0SHViWzEuMSBIcl06aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1nd1dLbm5DTVE1YyZsaXN0PVBMdTBXXzlsSUk5YWhLWjQydmcydzlFUlBtU2hZYllBQjdcblxu4pa6Q29tcGxldGUgY291cnNlIFtwbGF5bGlzdF06XG5SZWFjdDogaHR0cHM6Ly93d3cueW91dHViZS5jb20vcGxheWxpc3Q/bGlzdD1QTHUwV185bElJOWFneDY2b1puVDZJeWhjTUliVU1OTWR0XG5QeXRob24taHR0cHM6Ly93d3cueW91dHViZS5jb20vcGxheWxpc3Q/bGlzdD1QTHUwV185bElJOWFnSUNuVDh0NGlZVlNaM2V5a0lBT01FXG5PT1AgUHl0aG9uLWh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3BsYXlsaXN0P2xpc3Q9UEx1MFdfOWxJSTlhaGZScmhGY29CLTRscHA5WWFCbWRDUFxuSmF2YTpodHRwczovL3d3dy55b3V0dWJlLmNvbS9wbGF5bGlzdD9saXN0PVBMdTBXXzlsSUk5YWdTNjdVaXRzMFVuSnlyWWlYaERTNnFcbkphdmFTY3JpcHQtIGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3BsYXlsaXN0P2xpc3Q9UEx1MFdfOWxJSTlhanlrMDgxVG8xQ2J0MmVJNTkxM1NzTFxuUEhQLWh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3BsYXlsaXN0P2xpc3Q9UEx1MFdfOWxJSTlhaWtYa1JFMFd4RHQxdm96bzNobm10UlxuQy1odHRwczovL3d3dy55b3V0dWJlLmNvbS9wbGF5bGlzdD9saXN0PVBMdTBXXzlsSUk5YWlYbEhjTHgtbURIMVF1bDM4d0QzYVJcbkMrKy1odHRwczovL3d3dy55b3V0dWJlLmNvbS9wbGF5bGlzdD9saXN0PVBMdTBXXzlsSUk5YWdwRlVBbFBGZV9WTlNsWFc1dUUwWUxcbkdpdCAmIEdpdEh1Yi1odHRwczovL3d3dy55b3V0dWJlLmNvbS9wbGF5bGlzdD9saXN0PVBMdTBXXzlsSUk5YWhWUWVrRDdlUEhtbmlyVGVQWHdJbG5cbkFuZHJvaWQgRGV2LSBodHRwczovL3d3dy55b3V0dWJlLmNvbS9wbGF5bGlzdD9saXN0PVBMdTBXXzlsSUk5YWlMMGt5c1lsZlNPVWdZNXJObE9oVWRcblB5dGhvbiBHVUktIGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3BsYXlsaXN0P2xpc3Q9UEx1MFdfOWxJSTlhakxjcVJjajRQb0VpaGt1a0ZfT1R6QVxuV2ViIERldmVsb3BtZW50LSBodHRwczovL3d3dy55b3V0dWJlLmNvbS9wbGF5bGlzdD9saXN0PVBMdTBXXzlsSUk5YWdpQ1VaWVJzdnRHVFhkeGt6UHlJdGdcblB5dGhvbiBEamFuZ286aHR0cHM6Ly93d3cueW91dHViZS5jb20vcGxheWxpc3Q/bGlzdD1QTHUwV185bElJOWFoN0REdFl0Zmxnd013cFQzeG1qWFk5XG5Qcm9qZWN0cyBVc2luZyBIVE1MLCBDU1MgJiBKYXZhc2NyaXB0LSBodHRwczovL3d3dy55b3V0dWJlLmNvbS9wbGF5bGlzdD9saXN0PVBMdTBXXzlsSUk5YWlRaU93dGh1U3ZpbnhvZmxtaFJ4TTNcbkRhdGEgU3RydWN0dXJlIGFuZCBBbGdvOmh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3BsYXlsaXN0P2xpc3Q9UEx1MFdfOWxJSTlhaElhcHBSUE4wTUNBZ3RPdTNsUWpRaSBcblxuRm9sbG93IE1lIE9uIFNvY2lhbCBNZWRpYVxu4pa6V2Vic2l0ZSAoY3JlYXRlZCB1c2luZyBEamFuZ28gUmVzdCAmIEFuZ3VsYXIpOiBodHRwczovL3d3dy5jb2Rld2l0aGhhcnJ5LmNvbVxu4pa6RmFjZWJvb2s6IGh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9Db2RlV2l0aEhhcnJ5XG7ilrpJbnN0YWdyYW06IGh0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vY29kZXdpdGhoYXJyeS8gXG5Ud2l0dGVyOiBodHRwczovL3R3aXR0ZXIuY29tL0NvZGVXaXRoSGFycnlcbkNvbW1lbnQgXCIjSGFycnlCaGFpXCIgaWYgeW91IHJlYWQgdGhpcyDwn5iJ8J+YiSIsCiAgICAgICAgInRodW1ibmFpbHMiOiB7CiAgICAgICAgICAiZGVmYXVsdCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL3pIb1dnSkQwanc0L2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTIwLAogICAgICAgICAgICAiaGVpZ2h0IjogOTAKICAgICAgICAgIH0sCiAgICAgICAgICAibWVkaXVtIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvekhvV2dKRDBqdzQvbXFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgICAgICAgImhlaWdodCI6IDE4MAogICAgICAgICAgfSwKICAgICAgICAgICJoaWdoIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvekhvV2dKRDBqdzQvaHFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgICAgICAgImhlaWdodCI6IDM2MAogICAgICAgICAgfSwKICAgICAgICAgICJzdGFuZGFyZCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL3pIb1dnSkQwanc0L3NkZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA2NDAsCiAgICAgICAgICAgICJoZWlnaHQiOiA0ODAKICAgICAgICAgIH0sCiAgICAgICAgICAibWF4cmVzIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvekhvV2dKRDBqdzQvbWF4cmVzZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjgwLAogICAgICAgICAgICAiaGVpZ2h0IjogNzIwCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiY2hhbm5lbFRpdGxlIjogIkNvZGVXaXRoSGFycnkiLAogICAgICAgICJjYXRlZ29yeUlkIjogIjI3IiwKICAgICAgICAibGl2ZUJyb2FkY2FzdENvbnRlbnQiOiAibm9uZSIsCiAgICAgICAgImRlZmF1bHRMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgImxvY2FsaXplZCI6IHsKICAgICAgICAgICJ0aXRsZSI6ICJIb29rcyAmIFN0YXRlIGluIFJlYWN0IHwgU2lnbWEgV2ViIERldmVsb3BtZW50IENvdXJzZSAtIFR1dG9yaWFsICMxMDciLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIkxhdGVzdCBVZGVteSBXZWIgZGV2IENvdXJzZSBXaXRoIENlcnRpZmljYXRlOiBodHRwczovL2dvaGFycnkuaW4vd2ViZGV2XG5BY2Nlc3MgdGhlIFNpZ21hIHdlYiBkZXZlbG9wbWVudCBjb3Vyc2UgcGxheWxpc3Q6IGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3BsYXlsaXN0P2xpc3Q9UEx1MFdfOWxJSTlhZ3E1VHJIOVhMSUtRdnYwaWFGMlgzd1xu4p6h77iPIFNvdXJjZSBDb2RlOiBodHRwczovL2dpdGh1Yi5jb20vQ29kZVdpdGhIYXJyeS9TaWdtYS1XZWItRGV2LUNvdXJzZVxu4p6h77iPIE5vdGVzIGFuZCBDaGVhdFNoZWV0czogaHR0cHM6Ly93d3cuY29kZXdpdGhoYXJyeS5jb20vbm90ZXMvXG7inqHvuI8gRW5nbGlzaCBTdWJ0aXRsZXMgYXJlIG5vdyB1cCBmb3IgYWxsIHRoZSB2aWRlb3MhXG5cbuKWukNoZWNrb3V0IG15IEVuZ2xpc2ggY2hhbm5lbCBoZXJlOiBodHRwczovL3d3dy55b3V0dWJlLmNvbS9jaGFubmVsL1VDN2J0cUcyV3cwXzJMd3VReHB2bzJIUVxu4pa6SW5zdGFncmFtOiBodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL2NvZGV3aXRoaGFycnlcblxucHl0aG9uLCBDLCBDKyssIEphdmEsIEphdmFTY3JpcHQgYW5kIE90aGVyIENoZWF0c2hlZXRzIFsrK106XG5QbGF5bGlzdDogaHR0cHM6Ly93d3cueW91dHViZS5jb20vcGxheWxpc3Q/bGlzdD1QTHUwV185bElJOWFncnNSWmpGRUNlRnVXWTVldjJwUWxrXG5cbuKWukxlYXJuIGluIE9uZSBWaWRlb1srK106XG5QeXRob24gQ291cnNlIHdpdGggNSBQcm9qZWN0czogaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1mcUY5TTkyanpVb1xuUHl0aG9uWzE1IEhyXTogaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1nZkRFMmE3TUtqQSZsaXN0PVBMdTBXXzlsSUk5YWhLWjQydmcydzlFUlBtU2hZYllBQjdcblB5dGhvbiBBZHZhbmNlWzMuNSBIcl06IGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9NjFhN1VrRE81MHMmbGlzdD1QTHUwV185bElJOWFoS1o0MnZnMnc5RVJQbVNoWWJZQUI3XG5QeXRob25bMSBIcl06IGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9cUhKak12SExKZGcmbGlzdD1QTHUwV185bElJOWFoS1o0MnZnMnc5RVJQbVNoWWJZQUI3XG5QeXRob25bMiBIcl06IGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9aWhrX1hnbHIxNjQmbGlzdD1QTHUwV185bElJOWFoS1o0MnZnMnc5RVJQbVNoWWJZQUI3XG5QeXRob25bMTUgTWluXTpodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PWZyMWY4NHJnNE53Jmxpc3Q9UEx1MFdfOWxJSTlhaEtaNDJ2ZzJ3OUVSUG1TaFliWUFCN1xuSmF2YVNjcmlwdFsxIEhyXTogaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1vbmJCVjB1RlZwbyZsaXN0PVBMdTBXXzlsSUk5YWhLWjQydmcydzlFUlBtU2hZYllBQjdcbkNbMS4zIEhyXS1odHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PVlYY2dEOGhSSFlZJmxpc3Q9UEx1MFdfOWxJSTlhaEtaNDJ2ZzJ3OUVSUG1TaFliWUFCN1xucGhwWzEgSHJdOiBodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PXhXN3JvM2x3YUNJJmxpc3Q9UEx1MFdfOWxJSTlhaEtaNDJ2ZzJ3OUVSUG1TaFliWUFCN1xucGhwWzIuMyBIcl06aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj0xU25QS2hDZGxzVSZsaXN0PVBMdTBXXzlsSUk5YWhLWjQydmcydzlFUlBtU2hZYllBQjdcbnBocFtQcm9qZWN0XS0gaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj0tYWwyYkVDdW1LZyZsaXN0PVBMdTBXXzlsSUk5YWhLWjQydmcydzlFUlBtU2hZYllBQjdcbkhUTUxbMzAgTWluXTpodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PUUzQnlDUnFFN0xvJmxpc3Q9UEx1MFdfOWxJSTlhaEtaNDJ2ZzJ3OUVSUG1TaFliWUFCN1xuQ1NTWzguNSBIcl06aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1FZHN4Zl9OQkZydyZsaXN0PVBMdTBXXzlsSUk5YWhLWjQydmcydzlFUlBtU2hZYllBQjdcbkNTU1sxLjQgSHJdOmh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9dTUtS191YTlzT3cmbGlzdD1QTHUwV185bElJOWFoS1o0MnZnMnc5RVJQbVNoWWJZQUI3XG5Xb3JkcHJlc3NbMy4yIEhyXTpodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PUdsTFJZbWw4bUNZJmxpc3Q9UEx1MFdfOWxJSTlhaEtaNDJ2ZzJ3OUVSUG1TaFliWUFCN1xuQW5ndWxhclsyIEhyXTpodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PTBMaEJ2cDhxcHJvJmxpc3Q9UEx1MFdfOWxJSTlhaEtaNDJ2ZzJ3OUVSUG1TaFliWUFCN1xuSmF2YVsyLjMgSHJdOmh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9clZfM0xld3h4Nm8mbGlzdD1QTHUwV185bElJOWFoS1o0MnZnMnc5RVJQbVNoWWJZQUI3XG5XZWIgU2NyYXBpbmdbMSBIcl06aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj11dWZER2pUdXEzNCZsaXN0PVBMdTBXXzlsSUk5YWhLWjQydmcydzlFUlBtU2hZYllBQjdcbk1vbmdvREJbMiBIcl06aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1vU0l2LUU2ME5pVSZsaXN0PVBMdTBXXzlsSUk5YWhLWjQydmcydzlFUlBtU2hZYllBQjdcbk51bXB5WzEgSHJdOmh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9UmJoMXJpZWIzemMmbGlzdD1QTHUwV185bElJOWFoS1o0MnZnMnc5RVJQbVNoWWJZQUI3XG5BbmRyb2lkIERldlsxMiBIcl0tIGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9bVhqWlFYM1V6T3NcbkxpbnV4WzEgSHJdOmh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9X3RDWS1jLXNQWmMmbGlzdD1QTHUwV185bElJOWFoS1o0MnZnMnc5RVJQbVNoWWJZQUI3XG5KUXVlcnlbMS4xIEhyXTpodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PVlGbHgxQzhYd1IwJmxpc3Q9UEx1MFdfOWxJSTlhaEtaNDJ2ZzJ3OUVSUG1TaFliWUFCN1xuR2l0IGFuZCBHaXRIdWJbMS4xIEhyXTpodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PWd3V0tubkNNUTVjJmxpc3Q9UEx1MFdfOWxJSTlhaEtaNDJ2ZzJ3OUVSUG1TaFliWUFCN1xuXG7ilrpDb21wbGV0ZSBjb3Vyc2UgW3BsYXlsaXN0XTpcblJlYWN0OiBodHRwczovL3d3dy55b3V0dWJlLmNvbS9wbGF5bGlzdD9saXN0PVBMdTBXXzlsSUk5YWd4NjZvWm5UNkl5aGNNSWJVTU5NZHRcblB5dGhvbi1odHRwczovL3d3dy55b3V0dWJlLmNvbS9wbGF5bGlzdD9saXN0PVBMdTBXXzlsSUk5YWdJQ25UOHQ0aVlWU1ozZXlrSUFPTUVcbk9PUCBQeXRob24taHR0cHM6Ly93d3cueW91dHViZS5jb20vcGxheWxpc3Q/bGlzdD1QTHUwV185bElJOWFoZlJyaEZjb0ItNGxwcDlZYUJtZENQXG5KYXZhOmh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3BsYXlsaXN0P2xpc3Q9UEx1MFdfOWxJSTlhZ1M2N1VpdHMwVW5KeXJZaVhoRFM2cVxuSmF2YVNjcmlwdC0gaHR0cHM6Ly93d3cueW91dHViZS5jb20vcGxheWxpc3Q/bGlzdD1QTHUwV185bElJOWFqeWswODFUbzFDYnQyZUk1OTEzU3NMXG5QSFAtaHR0cHM6Ly93d3cueW91dHViZS5jb20vcGxheWxpc3Q/bGlzdD1QTHUwV185bElJOWFpa1hrUkUwV3hEdDF2b3pvM2hubXRSXG5DLWh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3BsYXlsaXN0P2xpc3Q9UEx1MFdfOWxJSTlhaVhsSGNMeC1tREgxUXVsMzh3RDNhUlxuQysrLWh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3BsYXlsaXN0P2xpc3Q9UEx1MFdfOWxJSTlhZ3BGVUFsUEZlX1ZOU2xYVzV1RTBZTFxuR2l0ICYgR2l0SHViLWh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3BsYXlsaXN0P2xpc3Q9UEx1MFdfOWxJSTlhaFZRZWtEN2VQSG1uaXJUZVBYd0lsblxuQW5kcm9pZCBEZXYtIGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3BsYXlsaXN0P2xpc3Q9UEx1MFdfOWxJSTlhaUwwa3lzWWxmU09VZ1k1ck5sT2hVZFxuUHl0aG9uIEdVSS0gaHR0cHM6Ly93d3cueW91dHViZS5jb20vcGxheWxpc3Q/bGlzdD1QTHUwV185bElJOWFqTGNxUmNqNFBvRWloa3VrRl9PVHpBXG5XZWIgRGV2ZWxvcG1lbnQtIGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3BsYXlsaXN0P2xpc3Q9UEx1MFdfOWxJSTlhZ2lDVVpZUnN2dEdUWGR4a3pQeUl0Z1xuUHl0aG9uIERqYW5nbzpodHRwczovL3d3dy55b3V0dWJlLmNvbS9wbGF5bGlzdD9saXN0PVBMdTBXXzlsSUk5YWg3RER0WXRmbGd3TXdwVDN4bWpYWTlcblByb2plY3RzIFVzaW5nIEhUTUwsIENTUyAmIEphdmFzY3JpcHQtIGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3BsYXlsaXN0P2xpc3Q9UEx1MFdfOWxJSTlhaVFpT3d0aHVTdmlueG9mbG1oUnhNM1xuRGF0YSBTdHJ1Y3R1cmUgYW5kIEFsZ286aHR0cHM6Ly93d3cueW91dHViZS5jb20vcGxheWxpc3Q/bGlzdD1QTHUwV185bElJOWFoSWFwcFJQTjBNQ0FndE91M2xRalFpIFxuXG5Gb2xsb3cgTWUgT24gU29jaWFsIE1lZGlhXG7ilrpXZWJzaXRlIChjcmVhdGVkIHVzaW5nIERqYW5nbyBSZXN0ICYgQW5ndWxhcik6IGh0dHBzOi8vd3d3LmNvZGV3aXRoaGFycnkuY29tXG7ilrpGYWNlYm9vazogaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL0NvZGVXaXRoSGFycnlcbuKWukluc3RhZ3JhbTogaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS9jb2Rld2l0aGhhcnJ5LyBcblR3aXR0ZXI6IGh0dHBzOi8vdHdpdHRlci5jb20vQ29kZVdpdGhIYXJyeVxuQ29tbWVudCBcIiNIYXJyeUJoYWlcIiBpZiB5b3UgcmVhZCB0aGlzIPCfmInwn5iJIgogICAgICAgIH0sCiAgICAgICAgImRlZmF1bHRBdWRpb0xhbmd1YWdlIjogImhpIgogICAgICB9LAogICAgICAiY29udGVudERldGFpbHMiOiB7CiAgICAgICAgImR1cmF0aW9uIjogIlBUMTFNMTlTIiwKICAgICAgICAiZGltZW5zaW9uIjogIjJkIiwKICAgICAgICAiZGVmaW5pdGlvbiI6ICJoZCIsCiAgICAgICAgImNhcHRpb24iOiAiZmFsc2UiLAogICAgICAgICJsaWNlbnNlZENvbnRlbnQiOiB0cnVlLAogICAgICAgICJjb250ZW50UmF0aW5nIjoge30sCiAgICAgICAgInByb2plY3Rpb24iOiAicmVjdGFuZ3VsYXIiCiAgICAgIH0sCiAgICAgICJzdGF0aXN0aWNzIjogewogICAgICAgICJ2aWV3Q291bnQiOiAiMTQ0MjEyIiwKICAgICAgICAibGlrZUNvdW50IjogIjUxNjciLAogICAgICAgICJmYXZvcml0ZUNvdW50IjogIjAiLAogICAgICAgICJjb21tZW50Q291bnQiOiAiNTIzIgogICAgICB9CiAgICB9LAogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgImV0YWciOiAidXA2VEk2U2p5UEtNd3B5OU5yc1o3ZDhjM2JRIiwKICAgICAgImlkIjogIjduUXNRMHJ2WXFRIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMjMtMTEtMDRUMTY6NTU6MTFaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDQndtTXh5Yk52YTZQXzVWbXhqendxQSIsCiAgICAgICAgInRpdGxlIjogIkhvdyB0byBTdGFydCBBcHAgRGV2ZWxvcG1lbnQ/IENvbXBsZXRlIFJvYWRNYXAgfCAyMDI0IiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiWW91IGNhbiBqb2luIHRoZSBuZXcgRnVsbCBTdGFjayBCYXRjaCB1c2luZyB0aGUgYmVsb3cgbGluay5cbvCflKVEZWx0YSAzLjAoRnVsbCBTdGFjayBXZWIgRGV2ZWxvcG1lbnQpICA6IGh0dHBzOi8vd3d3LmFwbmFjb2xsZWdlLmluL2NvdXJzZS9kZWx0YS1iYXRjaC0zXG5cbkludGVybmF0aW9uYWwgU3R1ZGVudCAocGF5bWVudCBsaW5rKSAtIGh0dHBzOi8vYnV5LnN0cmlwZS5jb20vN3NJMDBjZHJ1MHRnMTBzYUVRXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxu8J+TjCBEZXRhaWxzIGFib3V0IHRoZSBEZWx0YSAzLjAgQmF0Y2ggOiBcbi0gU3RhcnQgRGF0ZSA6ICA3dGggTm92ZW1iZXIsIDIwMjNcbi0gQWx0ZXJuYXRlIGRheSBsZWN0dXJlcyAoYXQgOFBNKVxuLSBEdXJhdGlvbiAtIDQuNSBtb250aHNcbi0gRWFjaCBDbGFzcyBkdXJhdGlvbiA6IDEuNSBob3VyLTJob3VyIChhbHRlcm5hdGUgZGF5cylcbi0gQWNjZXNzIHRvIHRoZSBjb3Vyc2UgaXMgZm9yIDIgeWVhcnNcbi0gQ29tcGxldGUgRnJvbnRlbmQgRGV2ZWxvcG1lbnQgd2l0aCBIVE1MLCBDU1MsIEphdmFzY3JpcHQgJiBSZWFjdEpzIFxuLSBDb21wbGV0ZSBCYWNrZW5kIERldmVsb3BtZW50IChOb2RlSnMsIEV4cHJlc3NKcylcbi0gQ29tcGxldGUgRGF0YWJhc2UgLSAoU1FMICYgTW9uZ29EQilcbi0gQ29tcGxldGUgTUVSTiBTdGFjayAoTW9uZ29EQiwgRXhwcmVzcywgUmVhY3QsIE5vZGUpXG4tIFJlYWwgTGlmZSBhbmQgSW5kdXN0cnkgR3JhZGUgUHJvamVjdHNcbi0gTGl2ZSBNZW50b3JzaGlwIFNlc3Npb25zIFxuLSA1MDArVG9waWMgVmlkZW9zIFxuLSBDZXJ0aWZpY2F0ZSB3aWxsIGJlIGdpdmVuIG9uIENvbXBsZXRpb24uXG5cbkZvcm0gZm9yIENvdW5zZWxsaW5nOiBodHRwczovL2Zvcm1zLmdsZS9RWjNRTEdDU2RXNWtEbUg4OSIsCiAgICAgICAgInRodW1ibmFpbHMiOiB7CiAgICAgICAgICAiZGVmYXVsdCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpLzduUXNRMHJ2WXFRL2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTIwLAogICAgICAgICAgICAiaGVpZ2h0IjogOTAKICAgICAgICAgIH0sCiAgICAgICAgICAibWVkaXVtIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvN25Rc1EwcnZZcVEvbXFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgICAgICAgImhlaWdodCI6IDE4MAogICAgICAgICAgfSwKICAgICAgICAgICJoaWdoIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvN25Rc1EwcnZZcVEvaHFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgICAgICAgImhlaWdodCI6IDM2MAogICAgICAgICAgfSwKICAgICAgICAgICJzdGFuZGFyZCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpLzduUXNRMHJ2WXFRL3NkZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA2NDAsCiAgICAgICAgICAgICJoZWlnaHQiOiA0ODAKICAgICAgICAgIH0sCiAgICAgICAgICAibWF4cmVzIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvN25Rc1EwcnZZcVEvbWF4cmVzZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjgwLAogICAgICAgICAgICAiaGVpZ2h0IjogNzIwCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiY2hhbm5lbFRpdGxlIjogIkFwbmEgQ29sbGVnZSIsCiAgICAgICAgInRhZ3MiOiBbCiAgICAgICAgICAiQysrIiwKICAgICAgICAgICJDKysgY29kaW5nIiwKICAgICAgICAgICJDKysgZnVsbCBjb3Vyc2UiLAogICAgICAgICAgIkMrKyBwbGFjZW1lbnQgY291cnNlIiwKICAgICAgICAgICJob3cgdG8gY29kZSIsCiAgICAgICAgICAicHJvZ3JhbW1pbmciLAogICAgICAgICAgImNvbGxlZ2UgcGxhY2VtZW50IGNvdXJzZSIsCiAgICAgICAgICAiQysrIGxhbmd1YWdlIiwKICAgICAgICAgICJqYXZhIiwKICAgICAgICAgICJqYXZhIGxhbmd1YWdlIiwKICAgICAgICAgICJqYXZhIGZ1bGwgY291cnNlIiwKICAgICAgICAgICJqYXZhIHBsYWNlbWVudCIsCiAgICAgICAgICAiamF2YSBjb2RlIiwKICAgICAgICAgICJqYXZhIGNvZGluZyIKICAgICAgICBdLAogICAgICAgICJjYXRlZ29yeUlkIjogIjI3IiwKICAgICAgICAibGl2ZUJyb2FkY2FzdENvbnRlbnQiOiAibm9uZSIsCiAgICAgICAgImRlZmF1bHRMYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgImxvY2FsaXplZCI6IHsKICAgICAgICAgICJ0aXRsZSI6ICJIb3cgdG8gU3RhcnQgQXBwIERldmVsb3BtZW50PyBDb21wbGV0ZSBSb2FkTWFwIHwgMjAyNCIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiWW91IGNhbiBqb2luIHRoZSBuZXcgRnVsbCBTdGFjayBCYXRjaCB1c2luZyB0aGUgYmVsb3cgbGluay5cbvCflKVEZWx0YSAzLjAoRnVsbCBTdGFjayBXZWIgRGV2ZWxvcG1lbnQpICA6IGh0dHBzOi8vd3d3LmFwbmFjb2xsZWdlLmluL2NvdXJzZS9kZWx0YS1iYXRjaC0zXG5cbkludGVybmF0aW9uYWwgU3R1ZGVudCAocGF5bWVudCBsaW5rKSAtIGh0dHBzOi8vYnV5LnN0cmlwZS5jb20vN3NJMDBjZHJ1MHRnMTBzYUVRXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxu8J+TjCBEZXRhaWxzIGFib3V0IHRoZSBEZWx0YSAzLjAgQmF0Y2ggOiBcbi0gU3RhcnQgRGF0ZSA6ICA3dGggTm92ZW1iZXIsIDIwMjNcbi0gQWx0ZXJuYXRlIGRheSBsZWN0dXJlcyAoYXQgOFBNKVxuLSBEdXJhdGlvbiAtIDQuNSBtb250aHNcbi0gRWFjaCBDbGFzcyBkdXJhdGlvbiA6IDEuNSBob3VyLTJob3VyIChhbHRlcm5hdGUgZGF5cylcbi0gQWNjZXNzIHRvIHRoZSBjb3Vyc2UgaXMgZm9yIDIgeWVhcnNcbi0gQ29tcGxldGUgRnJvbnRlbmQgRGV2ZWxvcG1lbnQgd2l0aCBIVE1MLCBDU1MsIEphdmFzY3JpcHQgJiBSZWFjdEpzIFxuLSBDb21wbGV0ZSBCYWNrZW5kIERldmVsb3BtZW50IChOb2RlSnMsIEV4cHJlc3NKcylcbi0gQ29tcGxldGUgRGF0YWJhc2UgLSAoU1FMICYgTW9uZ29EQilcbi0gQ29tcGxldGUgTUVSTiBTdGFjayAoTW9uZ29EQiwgRXhwcmVzcywgUmVhY3QsIE5vZGUpXG4tIFJlYWwgTGlmZSBhbmQgSW5kdXN0cnkgR3JhZGUgUHJvamVjdHNcbi0gTGl2ZSBNZW50b3JzaGlwIFNlc3Npb25zIFxuLSA1MDArVG9waWMgVmlkZW9zIFxuLSBDZXJ0aWZpY2F0ZSB3aWxsIGJlIGdpdmVuIG9uIENvbXBsZXRpb24uXG5cbkZvcm0gZm9yIENvdW5zZWxsaW5nOiBodHRwczovL2Zvcm1zLmdsZS9RWjNRTEdDU2RXNWtEbUg4OSIKICAgICAgICB9LAogICAgICAgICJkZWZhdWx0QXVkaW9MYW5ndWFnZSI6ICJoaSIKICAgICAgfSwKICAgICAgImNvbnRlbnREZXRhaWxzIjogewogICAgICAgICJkdXJhdGlvbiI6ICJQVDE3TTQ4UyIsCiAgICAgICAgImRpbWVuc2lvbiI6ICIyZCIsCiAgICAgICAgImRlZmluaXRpb24iOiAiaGQiLAogICAgICAgICJjYXB0aW9uIjogImZhbHNlIiwKICAgICAgICAibGljZW5zZWRDb250ZW50IjogdHJ1ZSwKICAgICAgICAiY29udGVudFJhdGluZyI6IHt9LAogICAgICAgICJwcm9qZWN0aW9uIjogInJlY3Rhbmd1bGFyIgogICAgICB9LAogICAgICAic3RhdGlzdGljcyI6IHsKICAgICAgICAidmlld0NvdW50IjogIjIxMTQ3ODciLAogICAgICAgICJsaWtlQ291bnQiOiAiNjU2MzciLAogICAgICAgICJmYXZvcml0ZUNvdW50IjogIjAiLAogICAgICAgICJjb21tZW50Q291bnQiOiAiMjEzNCIKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImtpbmQiOiAieW91dHViZSN2aWRlbyIsCiAgICAgICJldGFnIjogInotY3QtalBDZ0lzeGZKLVFDUS1COC1PVlJZSSIsCiAgICAgICJpZCI6ICI4SzFOM2ZFLWNEcyIsCiAgICAgICJzbmlwcGV0IjogewogICAgICAgICJwdWJsaXNoZWRBdCI6ICIyMDIzLTA3LTI2VDEyOjAwOjEyWiIsCiAgICAgICAgImNoYW5uZWxJZCI6ICJVQ3JMNjlzRXJSd0V5cjdfcDBxVkNrT1EiLAogICAgICAgICJ0aXRsZSI6ICJSZWFjdCBRdWVyeSAtIENvbXBsZXRlIFR1dG9yaWFsIiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAi8J+agCBQcm9qZWN0IFJlYWN0ICDihpIgaHR0cHM6Ly9jb3NkZW4uc29sdXRpb25zL3Byb2plY3QtcmVhY3RcbvCfk6UgSW1wb3J0IFJlYWN0IChOZXdzbGV0dGVyKSDihpIgaHR0cHM6Ly9jb3NkZW4uc29sdXRpb25zL25ld3NsZXR0ZXI/cz15dGRcblxuSm9pbiBUaGUgRGlzY29yZCEg4oaSIGh0dHBzOi8vZGlzY29yZC5jb3NkZW5zb2x1dGlvbnMuaW9cblNvdXJjZSBDb2RlIOKGkiBodHRwczovL2dpdGh1Yi5jb20vY29zZGVuc29sdXRpb25zL2NvZGUvdHJlZS9tYXN0ZXIvdmlkZW9zL2xvbmcvcmVhY3QtcXVlcnktdHV0b3JpYWxcblxuSW4gdGhpcyB2aWRlbyB3ZSB3aWxsIGxlYXJuIGFib3V0IFJlYWN0IFF1ZXJ5LCBhIGRhdGEtZmV0Y2hpbmcgbGlicmFyeSBmcm9tIFRhbnN0YWNrLiBSZWFjdCBRdWVyeSBoZWxwcyB5b3UgaGFuZGxlIGRhdGEtZmV0Y2hpbmcgaW4gYSBzdXBlciBlYXN5IHdheS4gWW91IGdldCBhY2Nlc3MgdG8gaG9va3Mgc3VjaCBhcyB1c2VRdWVyeSBhbmQgdXNlTXV0YXRpb24gdG8gaGFuZGxlIHlvdXIgcXVlcmllcyBhbmQgbXV0YXRpb25zLiBBbHNvLCB5b3UgaGF2ZSBhY2Nlc3MgdG8gYWxsIG9mIHRoZSBjYWNoaW5nIG1hZ2ljIHRoYXQgUmVhY3QgUXVlcnkgZG9lcy4gVGhpcyB3b3JrcyBmb3IgUmVhY3QgYW5kIFJlYWN0IE5hdGl2ZSEiLAogICAgICAgICJ0aHVtYm5haWxzIjogewogICAgICAgICAgImRlZmF1bHQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS84SzFOM2ZFLWNEcy9kZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgICAgICAgImhlaWdodCI6IDkwCiAgICAgICAgICB9LAogICAgICAgICAgIm1lZGl1bSI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpLzhLMU4zZkUtY0RzL21xZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAzMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiAxODAKICAgICAgICAgIH0sCiAgICAgICAgICAiaGlnaCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpLzhLMU4zZkUtY0RzL2hxZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA0ODAsCiAgICAgICAgICAgICJoZWlnaHQiOiAzNjAKICAgICAgICAgIH0sCiAgICAgICAgICAic3RhbmRhcmQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS84SzFOM2ZFLWNEcy9zZGRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNjQwLAogICAgICAgICAgICAiaGVpZ2h0IjogNDgwCiAgICAgICAgICB9LAogICAgICAgICAgIm1heHJlcyI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpLzhLMU4zZkUtY0RzL21heHJlc2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTI4MCwKICAgICAgICAgICAgImhlaWdodCI6IDcyMAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImNoYW5uZWxUaXRsZSI6ICJDb3NkZW4gU29sdXRpb25zIiwKICAgICAgICAidGFncyI6IFsKICAgICAgICAgICJyZWFjdCB0dXRvcmlhbCIsCiAgICAgICAgICAicmVhY3QgY3Jhc2ggY291cnNlIiwKICAgICAgICAgICJyZWFjdCBkZXZlbG9wZXIiLAogICAgICAgICAgImxlYXJuIHJlYWN0IiwKICAgICAgICAgICJyZWFjdCBob29rIiwKICAgICAgICAgICJyZWFjdCBob29rcyIsCiAgICAgICAgICAicmVhY3QgaG9va3MgdHV0b3JpYWwiLAogICAgICAgICAgInVzZWVmZmVjdCBob29rIiwKICAgICAgICAgICJ1c2VlZmZlY3QgdHV0b3JpYWwiLAogICAgICAgICAgInByb2dyYW1taW5nIHR1dG9yaWFsIiwKICAgICAgICAgICJyZWFjdCBob29rcyBleHBsYWluZWQiLAogICAgICAgICAgImNvbXB1dGVyIHNjaWVuY2UiLAogICAgICAgICAgInR1dG9yaWFsIGZvciBiZWdpbm5lcnMiLAogICAgICAgICAgInJlYWN0IGNvbXBvbmVudCIsCiAgICAgICAgICAibGVhcm4gcHJvZ3JhbW1pbmciLAogICAgICAgICAgIndlYiBkZXZlbG9wbWVudCIsCiAgICAgICAgICAiZnJvbnRlbmQgZGV2ZWxvcG1lbnQiLAogICAgICAgICAgImNvZGluZyBmb3IgYmVnaW5uZXJzIiwKICAgICAgICAgICJzaW1wbGUgY29kZSIsCiAgICAgICAgICAiZWFzeSBwcm9ncmFtbWluZyIsCiAgICAgICAgICAicmVhY3QgcXVlcnkiLAogICAgICAgICAgInJlYWN0LXF1ZXJ5IiwKICAgICAgICAgICJ0YW5zdGFjayBxdWVyeSIsCiAgICAgICAgICAidHJhbnN0YWNrIiwKICAgICAgICAgICJ0cmFuc3RhY2stcXVlcnkiCiAgICAgICAgXSwKICAgICAgICAiY2F0ZWdvcnlJZCI6ICIyNyIsCiAgICAgICAgImxpdmVCcm9hZGNhc3RDb250ZW50IjogIm5vbmUiLAogICAgICAgICJkZWZhdWx0TGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICJsb2NhbGl6ZWQiOiB7CiAgICAgICAgICAidGl0bGUiOiAiUmVhY3QgUXVlcnkgLSBDb21wbGV0ZSBUdXRvcmlhbCIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAi8J+agCBQcm9qZWN0IFJlYWN0ICDihpIgaHR0cHM6Ly9jb3NkZW4uc29sdXRpb25zL3Byb2plY3QtcmVhY3RcbvCfk6UgSW1wb3J0IFJlYWN0IChOZXdzbGV0dGVyKSDihpIgaHR0cHM6Ly9jb3NkZW4uc29sdXRpb25zL25ld3NsZXR0ZXI/cz15dGRcblxuSm9pbiBUaGUgRGlzY29yZCEg4oaSIGh0dHBzOi8vZGlzY29yZC5jb3NkZW5zb2x1dGlvbnMuaW9cblNvdXJjZSBDb2RlIOKGkiBodHRwczovL2dpdGh1Yi5jb20vY29zZGVuc29sdXRpb25zL2NvZGUvdHJlZS9tYXN0ZXIvdmlkZW9zL2xvbmcvcmVhY3QtcXVlcnktdHV0b3JpYWxcblxuSW4gdGhpcyB2aWRlbyB3ZSB3aWxsIGxlYXJuIGFib3V0IFJlYWN0IFF1ZXJ5LCBhIGRhdGEtZmV0Y2hpbmcgbGlicmFyeSBmcm9tIFRhbnN0YWNrLiBSZWFjdCBRdWVyeSBoZWxwcyB5b3UgaGFuZGxlIGRhdGEtZmV0Y2hpbmcgaW4gYSBzdXBlciBlYXN5IHdheS4gWW91IGdldCBhY2Nlc3MgdG8gaG9va3Mgc3VjaCBhcyB1c2VRdWVyeSBhbmQgdXNlTXV0YXRpb24gdG8gaGFuZGxlIHlvdXIgcXVlcmllcyBhbmQgbXV0YXRpb25zLiBBbHNvLCB5b3UgaGF2ZSBhY2Nlc3MgdG8gYWxsIG9mIHRoZSBjYWNoaW5nIG1hZ2ljIHRoYXQgUmVhY3QgUXVlcnkgZG9lcy4gVGhpcyB3b3JrcyBmb3IgUmVhY3QgYW5kIFJlYWN0IE5hdGl2ZSEiCiAgICAgICAgfSwKICAgICAgICAiZGVmYXVsdEF1ZGlvTGFuZ3VhZ2UiOiAiZW4iCiAgICAgIH0sCiAgICAgICJjb250ZW50RGV0YWlscyI6IHsKICAgICAgICAiZHVyYXRpb24iOiAiUFQxOE01N1MiLAogICAgICAgICJkaW1lbnNpb24iOiAiMmQiLAogICAgICAgICJkZWZpbml0aW9uIjogImhkIiwKICAgICAgICAiY2FwdGlvbiI6ICJmYWxzZSIsCiAgICAgICAgImxpY2Vuc2VkQ29udGVudCI6IHRydWUsCiAgICAgICAgImNvbnRlbnRSYXRpbmciOiB7fSwKICAgICAgICAicHJvamVjdGlvbiI6ICJyZWN0YW5ndWxhciIKICAgICAgfSwKICAgICAgInN0YXRpc3RpY3MiOiB7CiAgICAgICAgInZpZXdDb3VudCI6ICIyMTc5ODgiLAogICAgICAgICJsaWtlQ291bnQiOiAiNzI3NiIsCiAgICAgICAgImZhdm9yaXRlQ291bnQiOiAiMCIsCiAgICAgICAgImNvbW1lbnRDb3VudCI6ICIyMzUiCiAgICAgIH0KICAgIH0KICBdLAogICJwYWdlSW5mbyI6IHsKICAgICJ0b3RhbFJlc3VsdHMiOiAxMCwKICAgICJyZXN1bHRzUGVyUGFnZSI6IDEwCiAgfQp9Cg==","status":200,"url":"https://www.googleapis.com/youtube/v3/videos?part=snippet%2CcontentDetails%2Cstatistics&id=42JKBeRTTpk%2CUCbRTaX6i7g%2CPhZ-ajyMftI%2Cxv3P829HXTA%2Cyye7rSsiV6k%2CoQ-CoADtl5U%2CD5H3QF463Cw%2CzHoWgJD0jw4%2C7nQsQ0rvYqQ%2C8K1N3fE-cDs&key=AIzaSyAeZAsOW2kBeNqsdozdSNpajJeUOXsJ2fs"},"revalidate":3600,"tags":[]}