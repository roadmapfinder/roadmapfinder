{"kind":"FETCH","data":{"headers":{"content-encoding":"gzip","content-type":"application/json; charset=UTF-8","date":"Thu, 23 Oct 2025 10:54:14 GMT","server":"scaffolding on HTTPServer2","transfer-encoding":"chunked","vary":"Origin, X-Origin, Referer","x-content-type-options":"nosniff","x-frame-options":"SAMEORIGIN","x-xss-protection":"0"},"body":"","status":200,"url":"https://www.googleapis.com/youtube/v3/search?part=snippet&q=rust+programming+language+hindi+tutorial+course+complete&type=video&videoDuration=medium&videoDefinition=high&relevanceLanguage=hi&order=date&maxResults=10&key=AIzaSyAeZAsOW2kBeNqsdozdSNpajJeUOXsJ2fs"},"revalidate":3600,"tags":[]}