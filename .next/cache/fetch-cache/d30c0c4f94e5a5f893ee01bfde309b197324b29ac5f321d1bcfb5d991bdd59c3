{"kind":"FETCH","data":{"headers":{"content-encoding":"gzip","content-type":"application/json; charset=UTF-8","date":"Thu, 23 Oct 2025 11:04:13 GMT","server":"scaffolding on HTTPServer2","transfer-encoding":"chunked","vary":"Origin, X-Origin, Referer","x-content-type-options":"nosniff","x-frame-options":"SAMEORIGIN","x-xss-protection":"0"},"body":"{
  "kind": "youtube#videoListResponse",
  "etag": "GosJKW8prdH1UDehAdJmghH3J3E",
  "items": [
    {
      "kind": "youtube#video",
      "etag": "CRS1q09o7GrlcZllgLupmbXaTOw",
      "id": "oQ-CoADtl5U",
      "snippet": {
        "publishedAt": "2024-06-23T13:30:08Z",
        "channelId": "UCNQ6FEtztATuaVhZKCY28Yw",
        "title": "React native vs flutter | A beginner guide",
        "description": "Welcome to the video about flutter vs react native video. This video is not about comparing on papers with numbers. This video is for freshers who wants to try mobile development. \n\nWelcome to chai aur code, a coding/programming dedicated channel in Hindi language. Now you can learn best of programming concepts with industry standard practical guide in Hindi language.\n\nAll source code is available at my Github account:\nhttps://github.com/hiteshchoudhary\n\nOur Open-Source Project is here: https://freeapi.app\n\nJoin me at whatsapp: https://hitesh.ai/whatsapp\n\nfor community discord: https://hitesh.ai/discord\n\nInstagram pe yaha paaye jaate h:\nhttps://www.instagram.com/hiteshchoudharyofficial/\n\nHTML video series:  https://www.youtube.com/watch?v=XmLOwJHFHf0&list=PLu71SKxNbfoDBNF5s-WH6aLbthSEIMhMI\n\nComplete javascript series: https://www.youtube.com/watch?v=Hr5iLG7sUa0&list=PLu71SKxNbfoBuX3f4EOACle2y-tRC5Q37\n\nComplete Reactjs series: https://www.youtube.com/watch?v=vz1RlUyrc3w&list=PLu71SKxNbfoDqgPchmvIsL4hTnJIrtige\n\nJavascript and react interview series: https://www.youtube.com/watch?v=1wqCyz7XrV4&list=PLu71SKxNbfoCy_MsA98SBfvUKF5eQit6L\n\nBackend development with Javascript: https://www.youtube.com/watch?v=EH3vGeqeIAo&list=PLu71SKxNbfoBGh_8p_NS-ZAh6v7HhYqHW\n\nPython Series: https://www.youtube.com/watch?v=Ca5DLSDfPec&list=PLu71SKxNbfoBsMugTFALhdLlZ5VOqCg2s",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/oQ-CoADtl5U/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/oQ-CoADtl5U/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/oQ-CoADtl5U/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/oQ-CoADtl5U/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/oQ-CoADtl5U/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chai aur Code",
        "tags": [
          "coding",
          "hindi",
          "javascript",
          "web developer",
          "react",
          "quality",
          "reactjs",
          "tech interviews",
          "coding interviews",
          "python",
          "django",
          "machine learning",
          "python for beginners",
          "AI",
          "Data Science"
        ],
        "categoryId": "24",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "React native vs flutter | A beginner guide",
          "description": "Welcome to the video about flutter vs react native video. This video is not about comparing on papers with numbers. This video is for freshers who wants to try mobile development. \n\nWelcome to chai aur code, a coding/programming dedicated channel in Hindi language. Now you can learn best of programming concepts with industry standard practical guide in Hindi language.\n\nAll source code is available at my Github account:\nhttps://github.com/hiteshchoudhary\n\nOur Open-Source Project is here: https://freeapi.app\n\nJoin me at whatsapp: https://hitesh.ai/whatsapp\n\nfor community discord: https://hitesh.ai/discord\n\nInstagram pe yaha paaye jaate h:\nhttps://www.instagram.com/hiteshchoudharyofficial/\n\nHTML video series:  https://www.youtube.com/watch?v=XmLOwJHFHf0&list=PLu71SKxNbfoDBNF5s-WH6aLbthSEIMhMI\n\nComplete javascript series: https://www.youtube.com/watch?v=Hr5iLG7sUa0&list=PLu71SKxNbfoBuX3f4EOACle2y-tRC5Q37\n\nComplete Reactjs series: https://www.youtube.com/watch?v=vz1RlUyrc3w&list=PLu71SKxNbfoDqgPchmvIsL4hTnJIrtige\n\nJavascript and react interview series: https://www.youtube.com/watch?v=1wqCyz7XrV4&list=PLu71SKxNbfoCy_MsA98SBfvUKF5eQit6L\n\nBackend development with Javascript: https://www.youtube.com/watch?v=EH3vGeqeIAo&list=PLu71SKxNbfoBGh_8p_NS-ZAh6v7HhYqHW\n\nPython Series: https://www.youtube.com/watch?v=Ca5DLSDfPec&list=PLu71SKxNbfoBsMugTFALhdLlZ5VOqCg2s"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT12M13S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "137426",
        "likeCount": "5787",
        "favoriteCount": "0",
        "commentCount": "847"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "ZtXIbNfrciREqSWT0ts7Zds4J6o",
      "id": "5-V0-y1iP3Q",
      "snippet": {
        "publishedAt": "2022-04-04T16:13:29Z",
        "channelId": "UCBwmMxybNva6P_5VmxjzwqA",
        "title": "React Native vs Flutter | Which one should you Learn in 2022 ?",
        "description": "🔥Telegram: https://t.me/+k4rdgTPwmm5kMGVl\n🔥 Complete C Course : https://bit.ly/FullTutorialC\n🔥 Java Placement Course(with DSA) : https://bit.ly/JavaPlaylistComplete\n🔥 C++ Placement Course (DSA) : https://bit.ly/CppPlaylistComplete\n🔥Instagram: https://www.instagram.com/dhattarwalaman/\n\nTimestamps\n00:00 - Introduction\n00:10 - React Native & Flutter (Companies/Apps)\n01:27 - Languages\n02:35 - Development/Community\n03:55 - Performance\n05:19 - Jobs\n06:52 - What should you choose?\n\nMy YouTube Gear 😉: https://docs.google.com/document/d/1pyTJVmed-rHFXNqQodOTYr7z-EhH37s8pvtYpR0vMR4/edit?usp=sharing",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/5-V0-y1iP3Q/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/5-V0-y1iP3Q/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/5-V0-y1iP3Q/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/5-V0-y1iP3Q/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/5-V0-y1iP3Q/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Apna College",
        "tags": [
          "C++",
          "C++ coding",
          "C++ full course",
          "C++ placement course",
          "how to code",
          "programming",
          "college placement course",
          "C++ language",
          "java",
          "java language",
          "java full course",
          "java placement",
          "java code",
          "java coding"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "React Native vs Flutter | Which one should you Learn in 2022 ?",
          "description": "🔥Telegram: https://t.me/+k4rdgTPwmm5kMGVl\n🔥 Complete C Course : https://bit.ly/FullTutorialC\n🔥 Java Placement Course(with DSA) : https://bit.ly/JavaPlaylistComplete\n🔥 C++ Placement Course (DSA) : https://bit.ly/CppPlaylistComplete\n🔥Instagram: https://www.instagram.com/dhattarwalaman/\n\nTimestamps\n00:00 - Introduction\n00:10 - React Native & Flutter (Companies/Apps)\n01:27 - Languages\n02:35 - Development/Community\n03:55 - Performance\n05:19 - Jobs\n06:52 - What should you choose?\n\nMy YouTube Gear 😉: https://docs.google.com/document/d/1pyTJVmed-rHFXNqQodOTYr7z-EhH37s8pvtYpR0vMR4/edit?usp=sharing"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT9M20S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "739400",
        "likeCount": "19610",
        "favoriteCount": "0",
        "commentCount": "809"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "rTH5W6A0YAoL7zs1jE00eA-hf3Q",
      "id": "XGa4onZP66Q",
      "snippet": {
        "publishedAt": "2021-05-25T16:44:53Z",
        "channelId": "UCBwmMxybNva6P_5VmxjzwqA",
        "title": "What is an API ? Simply Explained",
        "description": "Complete C++ Placement Course (Data Structures+Algorithm) :https://www.youtube.com/playlist?list=PLfqMhTWNBTe0b2nM6JHVCnAkhQRGiZMSJ\nTelegram: https://t.me/apnikakshaofficial\nInstagram: https://www.instagram.com/dhattarwalaman/",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/XGa4onZP66Q/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/XGa4onZP66Q/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/XGa4onZP66Q/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/XGa4onZP66Q/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/XGa4onZP66Q/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Apna College",
        "tags": [
          "C++",
          "C++ coding",
          "C++ full course",
          "C++ placement course",
          "how to code",
          "programming",
          "college placement course",
          "C++ language"
        ],
        "categoryId": "22",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "What is an API ? Simply Explained",
          "description": "Complete C++ Placement Course (Data Structures+Algorithm) :https://www.youtube.com/playlist?list=PLfqMhTWNBTe0b2nM6JHVCnAkhQRGiZMSJ\nTelegram: https://t.me/apnikakshaofficial\nInstagram: https://www.instagram.com/dhattarwalaman/"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT5M21S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "2766042",
        "likeCount": "89787",
        "favoriteCount": "0",
        "commentCount": "3594"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "ibabflo5VPCbiFPpm84yT7Cdtms",
      "id": "z1qG80Jkzi8",
      "snippet": {
        "publishedAt": "2023-01-02T14:30:08Z",
        "channelId": "UCvHX2bCZG2m9ddUhwxudKYA",
        "title": "React native tutorial in Hindi #1 Introduction | what is React-Native",
        "description": "Instragram Id : code.steps\n\nIn this introduction video for React native tutorial in Hindi for beginners. this course is made by anil sidhu in Hindi language.\npoints of video\nWhat is react native in Hindi\nwhy should react native learn  \ntopics of react native in Hindi\nreact-native full course in hindi\n\nReact native and redux tutorial with saga in hindi Playlist\nhttps://www.youtube.com/playlist?list=PL8p2I9GklV44NMx-i9-A0EN3X-s7cDdty\n\nReact Native tutorial in Hindi Playlist\nhttps://www.youtube.com/playlist?list=PL8p2I9GklV468O2wk-n8Q1KmtMhnHHj4C\n \nReact js Latest Playlist in Hindi : https://www.youtube.com/playlist?list=PL8p2I9GklV47BCAjiCtuV_liN9IwAl8pM\ninst id:  @code.steps",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/z1qG80Jkzi8/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/z1qG80Jkzi8/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/z1qG80Jkzi8/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/z1qG80Jkzi8/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/z1qG80Jkzi8/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Code Step By Step",
        "tags": [
          "react native tutorial in hindi",
          "react native in hindi",
          "react native tutorial for beginners in hindi",
          "react native full course in hindi",
          "react native tutorial",
          "what is react native in hindi",
          "react native tutorial for beginners"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "React native tutorial in Hindi #1 Introduction | what is React-Native",
          "description": "Instragram Id : code.steps\n\nIn this introduction video for React native tutorial in Hindi for beginners. this course is made by anil sidhu in Hindi language.\npoints of video\nWhat is react native in Hindi\nwhy should react native learn  \ntopics of react native in Hindi\nreact-native full course in hindi\n\nReact native and redux tutorial with saga in hindi Playlist\nhttps://www.youtube.com/playlist?list=PL8p2I9GklV44NMx-i9-A0EN3X-s7cDdty\n\nReact Native tutorial in Hindi Playlist\nhttps://www.youtube.com/playlist?list=PL8p2I9GklV468O2wk-n8Q1KmtMhnHHj4C\n \nReact js Latest Playlist in Hindi : https://www.youtube.com/playlist?list=PL8p2I9GklV47BCAjiCtuV_liN9IwAl8pM\ninst id:  @code.steps"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT6M6S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "390910",
        "likeCount": "5080",
        "favoriteCount": "0",
        "commentCount": "349"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "N2ujhexhrqkB1UhDGZZXblwYdcE",
      "id": "HbNfCM4ilBQ",
      "snippet": {
        "publishedAt": "2023-09-22T08:45:59Z",
        "channelId": "UCNQ6FEtztATuaVhZKCY28Yw",
        "title": "How to build logics in programming",
        "description": "Visit https://chaicode.com for all related materials, community help, source code etc.\nSteps to improve logics in programming\n\nSara code yaha milta h\nhttps://github.com/hiteshchoudhary/\n\nDiscord pe yaha paaye jaate h:\nhttps://hitesh.ai/discord\nInstagram pe yaha paaye jaate h:\nhttps://www.instagram.com/hiteshchoudharyofficial/",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/HbNfCM4ilBQ/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/HbNfCM4ilBQ/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/HbNfCM4ilBQ/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/HbNfCM4ilBQ/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/HbNfCM4ilBQ/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chai aur Code",
        "tags": [
          "coding",
          "hindi",
          "javascript",
          "web developer",
          "react",
          "quality"
        ],
        "categoryId": "24",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "How to build logics in programming",
          "description": "Visit https://chaicode.com for all related materials, community help, source code etc.\nSteps to improve logics in programming\n\nSara code yaha milta h\nhttps://github.com/hiteshchoudhary/\n\nDiscord pe yaha paaye jaate h:\nhttps://hitesh.ai/discord\nInstagram pe yaha paaye jaate h:\nhttps://www.instagram.com/hiteshchoudharyofficial/"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT10M4S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "671523",
        "likeCount": "30789",
        "favoriteCount": "0",
        "commentCount": "791"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "e48nTJKoLeHK7cFKSwHOx97U950",
      "id": "rJORiMZe2hA",
      "snippet": {
        "publishedAt": "2024-04-12T13:30:08Z",
        "channelId": "UCNQ6FEtztATuaVhZKCY28Yw",
        "title": "6 Step guide to master api handling",
        "description": "Text guide: https://chaicode.com/blog/6-step-guide-to-master-api-handling\n\nYou have been using APIs in their most basic format. You send a request to a server, and it sends back a response. But APIs can do so much more than that. They can be used to create new APIs, to modify existing APIs, and to integrate APIs with other APIs. Most of the time that you practice is just data picking from APIs or loop through the data. But APIs can do so much more than that. At a max level, you went through the basics of state management.\n\nWelcome to chai aur code, a coding/programming dedicated channel in Hindi language. Now you can learn best of programming concepts with industry standard practical guide in Hindi language.\n\nAll source code is available at my Github account:\nhttps://github.com/hiteshchoudhary\n\nOur Open-Source Project is here: https://freeapi.app\n\nJoin me at whatsapp: https://hitesh.ai/whatsapp\n\nfor community discord: https://hitesh.ai/discord\n\nInstagram pe yaha paaye jaate h:\nhttps://www.instagram.com/hiteshchoudharyofficial/\n\nHTML video series:  https://www.youtube.com/watch?v=XmLOwJHFHf0&list=PLu71SKxNbfoDBNF5s-WH6aLbthSEIMhMI\n\nComplete javascript series: https://www.youtube.com/watch?v=Hr5iLG7sUa0&list=PLu71SKxNbfoBuX3f4EOACle2y-tRC5Q37\n\nComplete Reactjs series: https://www.youtube.com/watch?v=vz1RlUyrc3w&list=PLu71SKxNbfoDqgPchmvIsL4hTnJIrtige\n\nJavascript and react interview series: https://www.youtube.com/watch?v=1wqCyz7XrV4&list=PLu71SKxNbfoCy_MsA98SBfvUKF5eQit6L\n\nBackend development with Javascript: https://www.youtube.com/watch?v=EH3vGeqeIAo&list=PLu71SKxNbfoBGh_8p_NS-ZAh6v7HhYqHW\n\nPython Series: https://www.youtube.com/watch?v=Ca5DLSDfPec&list=PLu71SKxNbfoBsMugTFALhdLlZ5VOqCg2s",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/rJORiMZe2hA/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/rJORiMZe2hA/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/rJORiMZe2hA/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/rJORiMZe2hA/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/rJORiMZe2hA/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chai aur Code",
        "tags": [
          "coding",
          "hindi",
          "javascript",
          "web developer",
          "react",
          "quality",
          "reactjs",
          "tech interviews",
          "coding interviews",
          "python",
          "django",
          "machine learning",
          "python for beginners",
          "AI",
          "Data Science",
          "API handling",
          "API",
          "axios",
          "fetch",
          "react query"
        ],
        "categoryId": "24",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "6 Step guide to master api handling",
          "description": "Text guide: https://chaicode.com/blog/6-step-guide-to-master-api-handling\n\nYou have been using APIs in their most basic format. You send a request to a server, and it sends back a response. But APIs can do so much more than that. They can be used to create new APIs, to modify existing APIs, and to integrate APIs with other APIs. Most of the time that you practice is just data picking from APIs or loop through the data. But APIs can do so much more than that. At a max level, you went through the basics of state management.\n\nWelcome to chai aur code, a coding/programming dedicated channel in Hindi language. Now you can learn best of programming concepts with industry standard practical guide in Hindi language.\n\nAll source code is available at my Github account:\nhttps://github.com/hiteshchoudhary\n\nOur Open-Source Project is here: https://freeapi.app\n\nJoin me at whatsapp: https://hitesh.ai/whatsapp\n\nfor community discord: https://hitesh.ai/discord\n\nInstagram pe yaha paaye jaate h:\nhttps://www.instagram.com/hiteshchoudharyofficial/\n\nHTML video series:  https://www.youtube.com/watch?v=XmLOwJHFHf0&list=PLu71SKxNbfoDBNF5s-WH6aLbthSEIMhMI\n\nComplete javascript series: https://www.youtube.com/watch?v=Hr5iLG7sUa0&list=PLu71SKxNbfoBuX3f4EOACle2y-tRC5Q37\n\nComplete Reactjs series: https://www.youtube.com/watch?v=vz1RlUyrc3w&list=PLu71SKxNbfoDqgPchmvIsL4hTnJIrtige\n\nJavascript and react interview series: https://www.youtube.com/watch?v=1wqCyz7XrV4&list=PLu71SKxNbfoCy_MsA98SBfvUKF5eQit6L\n\nBackend development with Javascript: https://www.youtube.com/watch?v=EH3vGeqeIAo&list=PLu71SKxNbfoBGh_8p_NS-ZAh6v7HhYqHW\n\nPython Series: https://www.youtube.com/watch?v=Ca5DLSDfPec&list=PLu71SKxNbfoBsMugTFALhdLlZ5VOqCg2s"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT14M42S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "142675",
        "likeCount": "8090",
        "favoriteCount": "0",
        "commentCount": "1469"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "up6TI6SjyPKMwpy9NrsZ7d8c3bQ",
      "id": "7nQsQ0rvYqQ",
      "snippet": {
        "publishedAt": "2023-11-04T16:55:11Z",
        "channelId": "UCBwmMxybNva6P_5VmxjzwqA",
        "title": "How to Start App Development? Complete RoadMap | 2024",
        "description": "You can join the new Full Stack Batch using the below link.\n🔥Delta 3.0(Full Stack Web Development)  : https://www.apnacollege.in/course/delta-batch-3\n\nInternational Student (payment link) - https://buy.stripe.com/7sI00cdru0tg10saEQ\n---------------------------------------------------\n\n📌 Details about the Delta 3.0 Batch : \n- Start Date :  7th November, 2023\n- Alternate day lectures (at 8PM)\n- Duration - 4.5 months\n- Each Class duration : 1.5 hour-2hour (alternate days)\n- Access to the course is for 2 years\n- Complete Frontend Development with HTML, CSS, Javascript & ReactJs \n- Complete Backend Development (NodeJs, ExpressJs)\n- Complete Database - (SQL & MongoDB)\n- Complete MERN Stack (MongoDB, Express, React, Node)\n- Real Life and Industry Grade Projects\n- Live Mentorship Sessions \n- 500+Topic Videos \n- Certificate will be given on Completion.\n\nForm for Counselling: https://forms.gle/QZ3QLGCSdW5kDmH89",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/7nQsQ0rvYqQ/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/7nQsQ0rvYqQ/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/7nQsQ0rvYqQ/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/7nQsQ0rvYqQ/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/7nQsQ0rvYqQ/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Apna College",
        "tags": [
          "C++",
          "C++ coding",
          "C++ full course",
          "C++ placement course",
          "how to code",
          "programming",
          "college placement course",
          "C++ language",
          "java",
          "java language",
          "java full course",
          "java placement",
          "java code",
          "java coding"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "How to Start App Development? Complete RoadMap | 2024",
          "description": "You can join the new Full Stack Batch using the below link.\n🔥Delta 3.0(Full Stack Web Development)  : https://www.apnacollege.in/course/delta-batch-3\n\nInternational Student (payment link) - https://buy.stripe.com/7sI00cdru0tg10saEQ\n---------------------------------------------------\n\n📌 Details about the Delta 3.0 Batch : \n- Start Date :  7th November, 2023\n- Alternate day lectures (at 8PM)\n- Duration - 4.5 months\n- Each Class duration : 1.5 hour-2hour (alternate days)\n- Access to the course is for 2 years\n- Complete Frontend Development with HTML, CSS, Javascript & ReactJs \n- Complete Backend Development (NodeJs, ExpressJs)\n- Complete Database - (SQL & MongoDB)\n- Complete MERN Stack (MongoDB, Express, React, Node)\n- Real Life and Industry Grade Projects\n- Live Mentorship Sessions \n- 500+Topic Videos \n- Certificate will be given on Completion.\n\nForm for Counselling: https://forms.gle/QZ3QLGCSdW5kDmH89"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT17M48S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "2114787",
        "likeCount": "65637",
        "favoriteCount": "0",
        "commentCount": "2134"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "zXYQ3dghHdqr3kjOHg7qf22tz5M",
      "id": "AjCJtT_qkKI",
      "snippet": {
        "publishedAt": "2022-04-08T18:14:14Z",
        "channelId": "UCBwmMxybNva6P_5VmxjzwqA",
        "title": "How to make money from Coding? 5 ways to earn without a job or degree",
        "description": "🔴 Alpha Placement Batch - https://bit.ly/3oqidsd\n\n🟡 Complete C Course : https://bit.ly/FullTutorialC\n🟡 Java Placement Course(with DSA) : https://bit.ly/JavaPlaylistComplete\n🟡 C++ Placement Course (DSA) : https://bit.ly/CppPlaylistComplete\n🔥 Instagram: https://www.instagram.com/dhattarwalaman/\n🔥 Telegram: https://t.me/+k4rdgTPwmm5kMGVl",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/AjCJtT_qkKI/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/AjCJtT_qkKI/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/AjCJtT_qkKI/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/AjCJtT_qkKI/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/AjCJtT_qkKI/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Apna College",
        "tags": [
          "C++",
          "C++ coding",
          "C++ full course",
          "C++ placement course",
          "how to code",
          "programming",
          "college placement course",
          "C++ language",
          "java",
          "java language",
          "java full course",
          "java placement",
          "java code",
          "java coding"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "How to make money from Coding? 5 ways to earn without a job or degree",
          "description": "🔴 Alpha Placement Batch - https://bit.ly/3oqidsd\n\n🟡 Complete C Course : https://bit.ly/FullTutorialC\n🟡 Java Placement Course(with DSA) : https://bit.ly/JavaPlaylistComplete\n🟡 C++ Placement Course (DSA) : https://bit.ly/CppPlaylistComplete\n🔥 Instagram: https://www.instagram.com/dhattarwalaman/\n🔥 Telegram: https://t.me/+k4rdgTPwmm5kMGVl"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT7M13S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "2360055",
        "likeCount": "102562",
        "favoriteCount": "0",
        "commentCount": "1327"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "2xBuk2cgJpJ2_C2B_xVHRh5g1bM",
      "id": "u9dFHBDC2oE",
      "snippet": {
        "publishedAt": "2023-05-18T04:30:10Z",
        "channelId": "UCvHX2bCZG2m9ddUhwxudKYA",
        "title": "React Native tutorial #1 Introduction | what is React-Native",
        "description": "Instragram Id : code.steps\nIn this introduction video for React native tutorial for beginners. this course is made by anil Sidhu in English language.\npoints of video\nWhat is react native\nwhy should react native learn  \ntopics of react native \nreact-native full course \n\nReact native tutorial for beginners\nReact native for beginners\nreact-native complete course \n\n\n \nReact js Latest Playlist in Hindi : https://www.youtube.com/playlist?list=PL8p2I9GklV47BCAjiCtuV_liN9IwAl8pM\ninst id:  @code.steps",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/u9dFHBDC2oE/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/u9dFHBDC2oE/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/u9dFHBDC2oE/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/u9dFHBDC2oE/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/u9dFHBDC2oE/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Code Step By Step",
        "tags": [
          "React Native tutorial",
          "what is react native",
          "React native tutorial for beginners",
          "react native for beginners",
          "react native full course",
          "react-native tutorial",
          "react native",
          "react native 2023"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "React Native tutorial #1 Introduction | what is React-Native",
          "description": "Instragram Id : code.steps\nIn this introduction video for React native tutorial for beginners. this course is made by anil Sidhu in English language.\npoints of video\nWhat is react native\nwhy should react native learn  \ntopics of react native \nreact-native full course \n\nReact native tutorial for beginners\nReact native for beginners\nreact-native complete course \n\n\n \nReact js Latest Playlist in Hindi : https://www.youtube.com/playlist?list=PL8p2I9GklV47BCAjiCtuV_liN9IwAl8pM\ninst id:  @code.steps"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT5M44S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "34811",
        "likeCount": "450",
        "favoriteCount": "0",
        "commentCount": "51"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "aHREi1L6Dzvi7Z0TmTtVPzQDT68",
      "id": "vQcHPQJ4Ujs",
      "snippet": {
        "publishedAt": "2024-03-07T16:38:47Z",
        "channelId": "UCBwmMxybNva6P_5VmxjzwqA",
        "title": "Which one to Choose - Web Development vs App Development ?",
        "description": "This video will help we decide if we should do Web Development or App Development as a student.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/vQcHPQJ4Ujs/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/vQcHPQJ4Ujs/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/vQcHPQJ4Ujs/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/vQcHPQJ4Ujs/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/vQcHPQJ4Ujs/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Apna College",
        "tags": [
          "C++",
          "C++ coding",
          "C++ full course",
          "C++ placement course",
          "how to code",
          "programming",
          "college placement course",
          "C++ language",
          "java",
          "java language",
          "java full course",
          "java placement",
          "java code",
          "java coding"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "Which one to Choose - Web Development vs App Development ?",
          "description": "This video will help we decide if we should do Web Development or App Development as a student."
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT12M21S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "1214308",
        "likeCount": "40772",
        "favoriteCount": "0",
        "commentCount": "1964"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "JdaakTYX51X5m_Kkkefk9wB1J9Q",
      "id": "Y_r-51IzfGk",
      "snippet": {
        "publishedAt": "2021-08-20T14:17:25Z",
        "channelId": "UCeVMnSShP_Iviwkknt83cww",
        "title": "How much JavaScript is needed to learn React?",
        "description": "How much Javascript to learn for react. Can you learn react along with Javascript? This video will answer all these questions!\n►Checkout my English channel here: https://www.youtube.com/ProgrammingWithHarry\n►Click here to subscribe - https://www.youtube.com/channel/UCeVMnSShP_Iviwkknt83cww\n\nBest Hindi Videos For Learning Programming:\n►Learn Python In One Video - https://www.youtube.com/watch?v=ihk_Xglr164\n\n►Python Complete Course In Hindi - https://www.youtube.com/playlist?list=PLu0W_9lII9agICnT8t4iYVSZ3eykIAOME\n\n►C Language Complete Course In Hindi -  \nhttps://www.youtube.com/playlist?list=PLu0W_9lII9aiXlHcLx-mDH1Qul38wD3aR&disable_polymer=true\n\n►JavaScript Complete Course In Hindi - \n https://www.youtube.com/playlist?list=PLu0W_9lII9ajyk081To1Cbt2eI5913SsL\n\n►Learn JavaScript in One Video - https://www.youtube.com/watch?v=onbBV0uFVpo\n\n►Learn PHP In One Video - https://www.youtube.com/watch?v=xW7ro3lwaCI\n\n►Django Complete Course In Hindi -  \nhttps://www.youtube.com/playlist?list=PLu0W_9lII9ah7DDtYtflgwMwpT3xmjXY9\n\n►Machine Learning Using Python - https://www.youtube.com/playlist?list=PLu0W_9lII9ai6fAMHp-acBmJONT7Y4BSG\n\n►Creating & Hosting A Website (Tech Blog) Using Python - https://www.youtube.com/playlist?list=PLu0W_9lII9agAiWp6Y41ueUKx1VcTRxmf\n\n►Advanced Python Tutorials - https://www.youtube.com/playlist?list=PLu0W_9lII9aiJWQ7VhY712fuimEpQZYp4\n\n►Object Oriented Programming In Python - https://www.youtube.com/playlist?list=PLu0W_9lII9ahfRrhFcoB-4lpp9YaBmdCP\n\n►Python Data Science and Big Data Tutorials - https://www.youtube.com/playlist?list=PLu0W_9lII9agK8pojo23OHiNz3Jm6VQCH\n\nFollow Me On Social Media\n►Website (created using Flask) - http://www.codewithharry.com\n►Facebook - https://www.facebook.com/CodeWithHarry\n►Instagram - https://www.instagram.com/codewithharry/\n►Personal Facebook A/c - https://www.facebook.com/geekyharis\nTwitter - https://twitter.com/Haris_Is_Here\nComment \"#HarryBhai\" if you read this 😉😉",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/Y_r-51IzfGk/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/Y_r-51IzfGk/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/Y_r-51IzfGk/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/Y_r-51IzfGk/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/Y_r-51IzfGk/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "CodeWithHarry",
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "How much JavaScript is needed to learn React?",
          "description": "How much Javascript to learn for react. Can you learn react along with Javascript? This video will answer all these questions!\n►Checkout my English channel here: https://www.youtube.com/ProgrammingWithHarry\n►Click here to subscribe - https://www.youtube.com/channel/UCeVMnSShP_Iviwkknt83cww\n\nBest Hindi Videos For Learning Programming:\n►Learn Python In One Video - https://www.youtube.com/watch?v=ihk_Xglr164\n\n►Python Complete Course In Hindi - https://www.youtube.com/playlist?list=PLu0W_9lII9agICnT8t4iYVSZ3eykIAOME\n\n►C Language Complete Course In Hindi -  \nhttps://www.youtube.com/playlist?list=PLu0W_9lII9aiXlHcLx-mDH1Qul38wD3aR&disable_polymer=true\n\n►JavaScript Complete Course In Hindi - \n https://www.youtube.com/playlist?list=PLu0W_9lII9ajyk081To1Cbt2eI5913SsL\n\n►Learn JavaScript in One Video - https://www.youtube.com/watch?v=onbBV0uFVpo\n\n►Learn PHP In One Video - https://www.youtube.com/watch?v=xW7ro3lwaCI\n\n►Django Complete Course In Hindi -  \nhttps://www.youtube.com/playlist?list=PLu0W_9lII9ah7DDtYtflgwMwpT3xmjXY9\n\n►Machine Learning Using Python - https://www.youtube.com/playlist?list=PLu0W_9lII9ai6fAMHp-acBmJONT7Y4BSG\n\n►Creating & Hosting A Website (Tech Blog) Using Python - https://www.youtube.com/playlist?list=PLu0W_9lII9agAiWp6Y41ueUKx1VcTRxmf\n\n►Advanced Python Tutorials - https://www.youtube.com/playlist?list=PLu0W_9lII9aiJWQ7VhY712fuimEpQZYp4\n\n►Object Oriented Programming In Python - https://www.youtube.com/playlist?list=PLu0W_9lII9ahfRrhFcoB-4lpp9YaBmdCP\n\n►Python Data Science and Big Data Tutorials - https://www.youtube.com/playlist?list=PLu0W_9lII9agK8pojo23OHiNz3Jm6VQCH\n\nFollow Me On Social Media\n►Website (created using Flask) - http://www.codewithharry.com\n►Facebook - https://www.facebook.com/CodeWithHarry\n►Instagram - https://www.instagram.com/codewithharry/\n►Personal Facebook A/c - https://www.facebook.com/geekyharis\nTwitter - https://twitter.com/Haris_Is_Here\nComment \"#HarryBhai\" if you read this 😉😉"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT10M11S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "692654",
        "likeCount": "24115",
        "favoriteCount": "0",
        "commentCount": "787"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "KDsdDNBpmvvEQcg-GYECXoG_sas",
      "id": "EWAQs7QeXNY",
      "snippet": {
        "publishedAt": "2023-12-10T14:24:25Z",
        "channelId": "UCNQ6FEtztATuaVhZKCY28Yw",
        "title": "App development ka kya scope h ?",
        "description": "Visit https://chaicode.com for all related materials, community help, source code etc.\nWelcome to chai aur code, a coding/programming dedicated channel in Hindi language. Now you can learn best of programming concepts with industry standard practical guide in Hindi language.\n\nAll source code is available at my Github account:\nhttps://github.com/hiteshchoudhary\n\nOur Open-Source Project is here: https://freeapi.app\n\nJoin me at whatsapp: https://hitesh.ai/whatsapp\n\nfor community discord: https://hitesh/ai/discord\n\nInstagram pe yaha paaye jaate h:\nhttps://www.instagram.com/hiteshchoudharyofficial/\n\nHTML video series:  https://www.youtube.com/watch?v=XmLOwJHFHf0&list=PLu71SKxNbfoDBNF5s-WH6aLbthSEIMhMI\n\nComplete javascript series: https://www.youtube.com/watch?v=Hr5iLG7sUa0&list=PLu71SKxNbfoBuX3f4EOACle2y-tRC5Q37\n\nComplete Reactjs series: https://www.youtube.com/watch?v=vz1RlUyrc3w&list=PLu71SKxNbfoDqgPchmvIsL4hTnJIrtige\n\nJavascript and react interview series: https://www.youtube.com/watch?v=1wqCyz7XrV4&list=PLu71SKxNbfoCy_MsA98SBfvUKF5eQit6L\n\nBackend development with Javascript: https://www.youtube.com/watch?v=EH3vGeqeIAo&list=PLu71SKxNbfoBGh_8p_NS-ZAh6v7HhYqHW",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/EWAQs7QeXNY/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/EWAQs7QeXNY/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/EWAQs7QeXNY/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/EWAQs7QeXNY/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/EWAQs7QeXNY/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chai aur Code",
        "tags": [
          "coding",
          "hindi",
          "javascript",
          "web developer",
          "react",
          "quality",
          "reactjs",
          "tech interviews",
          "coding interviews",
          "react native",
          "flutter",
          "mobile development",
          "Android developer",
          "iOS developer"
        ],
        "categoryId": "24",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "App development ka kya scope h ?",
          "description": "Visit https://chaicode.com for all related materials, community help, source code etc.\nWelcome to chai aur code, a coding/programming dedicated channel in Hindi language. Now you can learn best of programming concepts with industry standard practical guide in Hindi language.\n\nAll source code is available at my Github account:\nhttps://github.com/hiteshchoudhary\n\nOur Open-Source Project is here: https://freeapi.app\n\nJoin me at whatsapp: https://hitesh.ai/whatsapp\n\nfor community discord: https://hitesh/ai/discord\n\nInstagram pe yaha paaye jaate h:\nhttps://www.instagram.com/hiteshchoudharyofficial/\n\nHTML video series:  https://www.youtube.com/watch?v=XmLOwJHFHf0&list=PLu71SKxNbfoDBNF5s-WH6aLbthSEIMhMI\n\nComplete javascript series: https://www.youtube.com/watch?v=Hr5iLG7sUa0&list=PLu71SKxNbfoBuX3f4EOACle2y-tRC5Q37\n\nComplete Reactjs series: https://www.youtube.com/watch?v=vz1RlUyrc3w&list=PLu71SKxNbfoDqgPchmvIsL4hTnJIrtige\n\nJavascript and react interview series: https://www.youtube.com/watch?v=1wqCyz7XrV4&list=PLu71SKxNbfoCy_MsA98SBfvUKF5eQit6L\n\nBackend development with Javascript: https://www.youtube.com/watch?v=EH3vGeqeIAo&list=PLu71SKxNbfoBGh_8p_NS-ZAh6v7HhYqHW"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT11M29S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "81255",
        "likeCount": "6359",
        "favoriteCount": "0",
        "commentCount": "934"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "hjjkC_Gu1XMtA_Nwj9HySq63kvs",
      "id": "aYZpxT9eHHg",
      "snippet": {
        "publishedAt": "2023-01-08T14:30:08Z",
        "channelId": "UCvHX2bCZG2m9ddUhwxudKYA",
        "title": "React Native tutorial in Hindi #7 What is component",
        "description": "Instragram Id : code.steps\n\nHere we will learn what are components in React native Hindi for beginners. This React native course is made by anil Sidhu in the Hindi language.\npoints of video\n\nWhat are Components?\nExample of Component.\nInterview Question.\nComponents in React Native\nIndependent and reusable code such as function.\nTwo Types of Components\nFunctional \nclass-based\n \nReact js Latest Playlist in Hindi: https://www.youtube.com/playlist?list=PL8p2I9GklV47BCAjiCtuV_liN9IwAl8pM\ninst id:  @code.steps",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/aYZpxT9eHHg/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/aYZpxT9eHHg/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/aYZpxT9eHHg/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/aYZpxT9eHHg/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/aYZpxT9eHHg/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Code Step By Step",
        "tags": [
          "React native tutorial in Hindi",
          "What is component",
          "React native tutorial",
          "React native tutorial for beginners in hindi",
          "React Native full course in hindi",
          "React native full course",
          "react native component",
          "what is component in react native",
          "react native component in hindi"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "React Native tutorial in Hindi #7 What is component",
          "description": "Instragram Id : code.steps\n\nHere we will learn what are components in React native Hindi for beginners. This React native course is made by anil Sidhu in the Hindi language.\npoints of video\n\nWhat are Components?\nExample of Component.\nInterview Question.\nComponents in React Native\nIndependent and reusable code such as function.\nTwo Types of Components\nFunctional \nclass-based\n \nReact js Latest Playlist in Hindi: https://www.youtube.com/playlist?list=PL8p2I9GklV47BCAjiCtuV_liN9IwAl8pM\ninst id:  @code.steps"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT14M29S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "59941",
        "likeCount": "1155",
        "favoriteCount": "0",
        "commentCount": "66"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "apBIm6KjCej8fAxAzO7eA87b1VI",
      "id": "pY-UvlALKhw",
      "snippet": {
        "publishedAt": "2023-03-17T15:20:24Z",
        "channelId": "UCvHX2bCZG2m9ddUhwxudKYA",
        "title": "React Native tutorial in Hindi #64 async storage",
        "description": "Instragram Id : code.steps\nHere we will learn how to use async storage  in react native Hindi beginner series. This React native course is made by anil Sidhu in the Hindi language.\n\nPoints of video \n What is async-storage\nInstall async-storage\nuse async-storage\nSet data\nGet data\nRemove data\nInterview Question.\n\n\nReact js Latest Playlist in Hindi: https://www.youtube.com/playlist?list=PL8p2I9GklV47BCAjiCtuV_liN9IwAl8pM\ninst id:  @code.stepsreact native tutorial for beginners",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/pY-UvlALKhw/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/pY-UvlALKhw/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/pY-UvlALKhw/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/pY-UvlALKhw/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/pY-UvlALKhw/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Code Step By Step",
        "tags": [
          "React Native tutorial",
          "React Native tutorial in Hindi",
          "async storage in react native",
          "react native async storage",
          "async storage tutorial",
          "async storage"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "React Native tutorial in Hindi #64 async storage",
          "description": "Instragram Id : code.steps\nHere we will learn how to use async storage  in react native Hindi beginner series. This React native course is made by anil Sidhu in the Hindi language.\n\nPoints of video \n What is async-storage\nInstall async-storage\nuse async-storage\nSet data\nGet data\nRemove data\nInterview Question.\n\n\nReact js Latest Playlist in Hindi: https://www.youtube.com/playlist?list=PL8p2I9GklV47BCAjiCtuV_liN9IwAl8pM\ninst id:  @code.stepsreact native tutorial for beginners"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT13M56S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "28691",
        "likeCount": "571",
        "favoriteCount": "0",
        "commentCount": "30"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "XeQyyPyoyq9ehUQ642Nd5rko8wE",
      "id": "2HS5F0TN4KQ",
      "snippet": {
        "publishedAt": "2023-01-07T14:30:12Z",
        "channelId": "UCvHX2bCZG2m9ddUhwxudKYA",
        "title": "React native tutorial in Hindi #6 What is JSX",
        "description": "Instragram Id : code.steps\n\nHere we will learn about jsx in react native in Hindi for beginners. This React native course is made by anil Sidhu in the Hindi language.\npoints of video\n\nWhat is JSX.\nExample of JSX\nAn interesting fact about JSX\nInterview Question.\n \nReact js Latest Playlist in Hindi: https://www.youtube.com/playlist?list=PL8p2I9GklV47BCAjiCtuV_liN9IwAl8pM\ninst id:  @code.steps",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/2HS5F0TN4KQ/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/2HS5F0TN4KQ/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/2HS5F0TN4KQ/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/2HS5F0TN4KQ/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/2HS5F0TN4KQ/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Code Step By Step",
        "tags": [
          "React native tutorial in Hindi",
          "What is JSX",
          "react native jsx",
          "jsx in react native",
          "use of jsx",
          "react native tutorial for beginners in hindi",
          "react native in hindi",
          "react native full course in hindi",
          "anil sidhu",
          "hindi",
          "react native hindi"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "React native tutorial in Hindi #6 What is JSX",
          "description": "Instragram Id : code.steps\n\nHere we will learn about jsx in react native in Hindi for beginners. This React native course is made by anil Sidhu in the Hindi language.\npoints of video\n\nWhat is JSX.\nExample of JSX\nAn interesting fact about JSX\nInterview Question.\n \nReact js Latest Playlist in Hindi: https://www.youtube.com/playlist?list=PL8p2I9GklV47BCAjiCtuV_liN9IwAl8pM\ninst id:  @code.steps"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT11M55S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "55888",
        "likeCount": "1106",
        "favoriteCount": "0",
        "commentCount": "66"
      }
    }
  ],
  "pageInfo": {
    "totalResults": 15,
    "resultsPerPage": 15
  }
}
","status":200,"url":"https://www.googleapis.com/youtube/v3/videos?part=snippet%2CcontentDetails%2Cstatistics&id=oQ-CoADtl5U%2C5-V0-y1iP3Q%2CXGa4onZP66Q%2Cz1qG80Jkzi8%2CHbNfCM4ilBQ%2CrJORiMZe2hA%2C7nQsQ0rvYqQ%2CAjCJtT_qkKI%2Cu9dFHBDC2oE%2CvQcHPQJ4Ujs%2CY_r-51IzfGk%2CEWAQs7QeXNY%2CaYZpxT9eHHg%2CpY-UvlALKhw%2C2HS5F0TN4KQ&key=AIzaSyAeZAsOW2kBeNqsdozdSNpajJeUOXsJ2fs"},"revalidate":3600,"tags":[]}