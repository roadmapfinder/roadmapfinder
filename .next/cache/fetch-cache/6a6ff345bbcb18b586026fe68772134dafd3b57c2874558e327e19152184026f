{"kind":"FETCH","data":{"headers":{"content-encoding":"gzip","content-type":"application/json; charset=UTF-8","date":"Thu, 23 Oct 2025 11:02:47 GMT","server":"scaffolding on HTTPServer2","transfer-encoding":"chunked","vary":"Origin, X-Origin, Referer","x-content-type-options":"nosniff","x-frame-options":"SAMEORIGIN","x-xss-protection":"0"},"body":"{
  "kind": "youtube#videoListResponse",
  "etag": "Upg9XXGPFRRmJZsSI_IV-uGbhPs",
  "items": [
    {
      "kind": "youtube#video",
      "etag": "BWE5MzDq-gSD-oKZ_VBoEbhW6DI",
      "id": "YIqLzP0sVdc",
      "snippet": {
        "publishedAt": "2023-05-28T15:00:06Z",
        "channelId": "UCvHX2bCZG2m9ddUhwxudKYA",
        "title": "Next JS tutorial in Hindi #1 What is Next.js | Introduction",
        "description": "Instragram Id : code.steps\n\nIn this next js tutorial video we learn what is next js and why this is better than react js in Hindi. this course is made by Anil Sidhu in the Hindi language.\npoints of video\n\nThe React Framework for the Web Apps\nIt is based on react js library\n But many extra features were added in the\nNext js over React js\nLike Routing, middleware, etc\n\nMajor points \nNext js tutorial 2023,\nnext js in tutorial in hindi,\nnext js 13 tutorial in hindi,\nnext js 13.3 tutorial in hindi\n \nReact js Latest Playlist in Hindi: https://www.youtube.com/playlist?list=PL8p2I9GklV47BCAjiCtuV_liN9IwAl8pM\ninst id:  @code.steps",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/YIqLzP0sVdc/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/YIqLzP0sVdc/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/YIqLzP0sVdc/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/YIqLzP0sVdc/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/YIqLzP0sVdc/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Code Step By Step",
        "tags": [
          "Next JS tutorial in Hindi",
          "What is Next.js",
          "next js in hindi",
          "next js tutorial in Hindi for beginners",
          "next js tutorial",
          "next js tutorial for beginners",
          "next. js in hindi",
          "Next js tutorial 2023",
          "next js 13 tutorial in hindi",
          "next js 13.3 tutorial"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "Next JS tutorial in Hindi #1 What is Next.js | Introduction",
          "description": "Instragram Id : code.steps\n\nIn this next js tutorial video we learn what is next js and why this is better than react js in Hindi. this course is made by Anil Sidhu in the Hindi language.\npoints of video\n\nThe React Framework for the Web Apps\nIt is based on react js library\n But many extra features were added in the\nNext js over React js\nLike Routing, middleware, etc\n\nMajor points \nNext js tutorial 2023,\nnext js in tutorial in hindi,\nnext js 13 tutorial in hindi,\nnext js 13.3 tutorial in hindi\n \nReact js Latest Playlist in Hindi: https://www.youtube.com/playlist?list=PL8p2I9GklV47BCAjiCtuV_liN9IwAl8pM\ninst id:  @code.steps"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT6M42S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "194645",
        "likeCount": "2667",
        "favoriteCount": "0",
        "commentCount": "189"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "khYCRYGqkssU4LOqBZx2odahjCE",
      "id": "XmLOwJHFHf0",
      "snippet": {
        "publishedAt": "2022-11-15T14:45:08Z",
        "channelId": "UCNQ6FEtztATuaVhZKCY28Yw",
        "title": "HTML and VSCode - getting started | Hindi",
        "description": "Visit https://chaicode.com for all related materials, community help, source code etc.\naaiye shuru krte h HTML se. HTML se shuru krna zruri h because hum baad me jab javascript sikhenge to foundation strong hona zruri h. HTML aur CSS se foundation and confidence dono aata h.\nIs video me hum shuru krenge VSCode ke installation aur setup se.\nAaiye, chai pe code kre 😀",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/XmLOwJHFHf0/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/XmLOwJHFHf0/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/XmLOwJHFHf0/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/XmLOwJHFHf0/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/XmLOwJHFHf0/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chai aur Code",
        "tags": [
          "HTML",
          "vscode",
          "hindi",
          "learn to code in hindi"
        ],
        "categoryId": "28",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "HTML and VSCode - getting started | Hindi",
          "description": "Visit https://chaicode.com for all related materials, community help, source code etc.\naaiye shuru krte h HTML se. HTML se shuru krna zruri h because hum baad me jab javascript sikhenge to foundation strong hona zruri h. HTML aur CSS se foundation and confidence dono aata h.\nIs video me hum shuru krenge VSCode ke installation aur setup se.\nAaiye, chai pe code kre 😀"
        },
        "defaultAudioLanguage": "en-US"
      },
      "contentDetails": {
        "duration": "PT11M1S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "383604",
        "likeCount": "7185",
        "favoriteCount": "0",
        "commentCount": "259"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "rTH5W6A0YAoL7zs1jE00eA-hf3Q",
      "id": "XGa4onZP66Q",
      "snippet": {
        "publishedAt": "2021-05-25T16:44:53Z",
        "channelId": "UCBwmMxybNva6P_5VmxjzwqA",
        "title": "What is an API ? Simply Explained",
        "description": "Complete C++ Placement Course (Data Structures+Algorithm) :https://www.youtube.com/playlist?list=PLfqMhTWNBTe0b2nM6JHVCnAkhQRGiZMSJ\nTelegram: https://t.me/apnikakshaofficial\nInstagram: https://www.instagram.com/dhattarwalaman/",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/XGa4onZP66Q/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/XGa4onZP66Q/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/XGa4onZP66Q/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/XGa4onZP66Q/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/XGa4onZP66Q/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Apna College",
        "tags": [
          "C++",
          "C++ coding",
          "C++ full course",
          "C++ placement course",
          "how to code",
          "programming",
          "college placement course",
          "C++ language"
        ],
        "categoryId": "22",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "What is an API ? Simply Explained",
          "description": "Complete C++ Placement Course (Data Structures+Algorithm) :https://www.youtube.com/playlist?list=PLfqMhTWNBTe0b2nM6JHVCnAkhQRGiZMSJ\nTelegram: https://t.me/apnikakshaofficial\nInstagram: https://www.instagram.com/dhattarwalaman/"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT5M21S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "2766042",
        "likeCount": "89787",
        "favoriteCount": "0",
        "commentCount": "3594"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "v0n7gG2MXjCg03DpmhMg8GKNa9Y",
      "id": "tysDxjfgLMg",
      "snippet": {
        "publishedAt": "2025-06-20T15:49:26Z",
        "channelId": "UCNQ6FEtztATuaVhZKCY28Yw",
        "title": "What is n8n in Hindi. Fastest and easiest self deployment too",
        "description": "Is video me hum baat krenge, Langgraph, n8n and uske self deployment ki. Deployment se itna b mt daro, is video me sab clear kr denge.\nVideo dekhne ke baad, hostinger waale logo ne kaha, hame b chai psnd h n ye lo aapke students ke liye discount code:\nLink: http://hostinger.com/in/chaiaurcode\nCoupon code: CHAIAURCODE\n\nWelcome to chai aur code, a coding/programming dedicated channel in Hindi language. Now you can learn best of programming concepts with industry standard practical guide in Hindi language.\n\nAll source code is available at my Github account:\nhttps://github.com/hiteshchoudhary\n\nOur Open-Source Project is here: https://freeapi.app\n\nJoin me at whatsapp: https://hitesh.ai/whatsapp\n\nfor community discord: https://hitesh.ai/discord\n\nInstagram pe yaha paaye jaate h:\nhttps://www.instagram.com/hiteshchoudharyofficial/\n\nHTML video series:  https://www.youtube.com/watch?v=XmLOwJHFHf0&list=PLu71SKxNbfoDBNF5s-WH6aLbthSEIMhMI\n\nComplete javascript series: https://www.youtube.com/watch?v=Hr5iLG7sUa0&list=PLu71SKxNbfoBuX3f4EOACle2y-tRC5Q37\n\nComplete Reactjs series: https://www.youtube.com/watch?v=vz1RlUyrc3w&list=PLu71SKxNbfoDqgPchmvIsL4hTnJIrtige\n\nJavascript and react interview series: https://www.youtube.com/watch?v=1wqCyz7XrV4&list=PLu71SKxNbfoCy_MsA98SBfvUKF5eQit6L\n\nBackend development with Javascript: https://www.youtube.com/watch?v=EH3vGeqeIAo&list=PLu71SKxNbfoBGh_8p_NS-ZAh6v7HhYqHW\n\nPython Series: https://www.youtube.com/watch?v=Ca5DLSDfPec&list=PLu71SKxNbfoBsMugTFALhdLlZ5VOqCg2s",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/tysDxjfgLMg/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/tysDxjfgLMg/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/tysDxjfgLMg/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/tysDxjfgLMg/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/tysDxjfgLMg/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chai aur Code",
        "tags": [
          "coding",
          "hindi",
          "javascript",
          "web developer",
          "react",
          "quality",
          "reactjs",
          "tech interviews",
          "coding interviews",
          "python",
          "django",
          "machine learning",
          "python for beginners",
          "AI",
          "Data Science"
        ],
        "categoryId": "24",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "What is n8n in Hindi. Fastest and easiest self deployment too",
          "description": "Is video me hum baat krenge, Langgraph, n8n and uske self deployment ki. Deployment se itna b mt daro, is video me sab clear kr denge.\nVideo dekhne ke baad, hostinger waale logo ne kaha, hame b chai psnd h n ye lo aapke students ke liye discount code:\nLink: http://hostinger.com/in/chaiaurcode\nCoupon code: CHAIAURCODE\n\nWelcome to chai aur code, a coding/programming dedicated channel in Hindi language. Now you can learn best of programming concepts with industry standard practical guide in Hindi language.\n\nAll source code is available at my Github account:\nhttps://github.com/hiteshchoudhary\n\nOur Open-Source Project is here: https://freeapi.app\n\nJoin me at whatsapp: https://hitesh.ai/whatsapp\n\nfor community discord: https://hitesh.ai/discord\n\nInstagram pe yaha paaye jaate h:\nhttps://www.instagram.com/hiteshchoudharyofficial/\n\nHTML video series:  https://www.youtube.com/watch?v=XmLOwJHFHf0&list=PLu71SKxNbfoDBNF5s-WH6aLbthSEIMhMI\n\nComplete javascript series: https://www.youtube.com/watch?v=Hr5iLG7sUa0&list=PLu71SKxNbfoBuX3f4EOACle2y-tRC5Q37\n\nComplete Reactjs series: https://www.youtube.com/watch?v=vz1RlUyrc3w&list=PLu71SKxNbfoDqgPchmvIsL4hTnJIrtige\n\nJavascript and react interview series: https://www.youtube.com/watch?v=1wqCyz7XrV4&list=PLu71SKxNbfoCy_MsA98SBfvUKF5eQit6L\n\nBackend development with Javascript: https://www.youtube.com/watch?v=EH3vGeqeIAo&list=PLu71SKxNbfoBGh_8p_NS-ZAh6v7HhYqHW\n\nPython Series: https://www.youtube.com/watch?v=Ca5DLSDfPec&list=PLu71SKxNbfoBsMugTFALhdLlZ5VOqCg2s"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT19M25S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "280837",
        "likeCount": "7008",
        "favoriteCount": "0",
        "commentCount": "354"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "bHcR7IcaXGCQMdGGjIcQLSthzhI",
      "id": "NkwFxeHARqc",
      "snippet": {
        "publishedAt": "2024-11-28T15:09:58Z",
        "channelId": "UCNQ6FEtztATuaVhZKCY28Yw",
        "title": "Web Development Roadmap 2025 with GenAI",
        "description": "I also have a 1 stop, best Udemy course on web dev: https://hitesh.ai/udemy\n\nWelcome to chai aur code, a coding/programming dedicated channel in Hindi language. Now you can learn best of programming concepts with industry standard practical guide in Hindi language.\n\nAll source code is available at my Github account:\nhttps://github.com/hiteshchoudhary\n\nOur Open-Source Project is here: https://freeapi.app\n\nJoin me at whatsapp: https://hitesh.ai/whatsapp\n\nfor community discord: https://hitesh.ai/discord\n\nInstagram pe yaha paaye jaate h:\nhttps://www.instagram.com/hiteshchoudharyofficial/\n\nHTML video series:  https://www.youtube.com/watch?v=XmLOwJHFHf0&list=PLu71SKxNbfoDBNF5s-WH6aLbthSEIMhMI\n\nComplete javascript series: https://www.youtube.com/watch?v=Hr5iLG7sUa0&list=PLu71SKxNbfoBuX3f4EOACle2y-tRC5Q37\n\nComplete Reactjs series: https://www.youtube.com/watch?v=vz1RlUyrc3w&list=PLu71SKxNbfoDqgPchmvIsL4hTnJIrtige\n\nJavascript and react interview series: https://www.youtube.com/watch?v=1wqCyz7XrV4&list=PLu71SKxNbfoCy_MsA98SBfvUKF5eQit6L\n\nBackend development with Javascript: https://www.youtube.com/watch?v=EH3vGeqeIAo&list=PLu71SKxNbfoBGh_8p_NS-ZAh6v7HhYqHW\n\nPython Series: https://www.youtube.com/watch?v=Ca5DLSDfPec&list=PLu71SKxNbfoBsMugTFALhdLlZ5VOqCg2s",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/NkwFxeHARqc/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/NkwFxeHARqc/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/NkwFxeHARqc/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/NkwFxeHARqc/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/NkwFxeHARqc/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chai aur Code",
        "tags": [
          "coding",
          "hindi",
          "javascript",
          "web developer",
          "react",
          "quality",
          "reactjs",
          "tech interviews",
          "coding interviews",
          "python",
          "django",
          "machine learning",
          "python for beginners",
          "AI",
          "Data Science"
        ],
        "categoryId": "24",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "Web Development Roadmap 2025 with GenAI",
          "description": "I also have a 1 stop, best Udemy course on web dev: https://hitesh.ai/udemy\n\nWelcome to chai aur code, a coding/programming dedicated channel in Hindi language. Now you can learn best of programming concepts with industry standard practical guide in Hindi language.\n\nAll source code is available at my Github account:\nhttps://github.com/hiteshchoudhary\n\nOur Open-Source Project is here: https://freeapi.app\n\nJoin me at whatsapp: https://hitesh.ai/whatsapp\n\nfor community discord: https://hitesh.ai/discord\n\nInstagram pe yaha paaye jaate h:\nhttps://www.instagram.com/hiteshchoudharyofficial/\n\nHTML video series:  https://www.youtube.com/watch?v=XmLOwJHFHf0&list=PLu71SKxNbfoDBNF5s-WH6aLbthSEIMhMI\n\nComplete javascript series: https://www.youtube.com/watch?v=Hr5iLG7sUa0&list=PLu71SKxNbfoBuX3f4EOACle2y-tRC5Q37\n\nComplete Reactjs series: https://www.youtube.com/watch?v=vz1RlUyrc3w&list=PLu71SKxNbfoDqgPchmvIsL4hTnJIrtige\n\nJavascript and react interview series: https://www.youtube.com/watch?v=1wqCyz7XrV4&list=PLu71SKxNbfoCy_MsA98SBfvUKF5eQit6L\n\nBackend development with Javascript: https://www.youtube.com/watch?v=EH3vGeqeIAo&list=PLu71SKxNbfoBGh_8p_NS-ZAh6v7HhYqHW\n\nPython Series: https://www.youtube.com/watch?v=Ca5DLSDfPec&list=PLu71SKxNbfoBsMugTFALhdLlZ5VOqCg2s"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT19M21S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "462771",
        "likeCount": "20199",
        "favoriteCount": "0",
        "commentCount": "2421"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "d2s4VCfdhYs_RznhirArDjqjZR0",
      "id": "HbNfCM4ilBQ",
      "snippet": {
        "publishedAt": "2023-09-22T08:45:59Z",
        "channelId": "UCNQ6FEtztATuaVhZKCY28Yw",
        "title": "How to build logics in programming",
        "description": "Visit https://chaicode.com for all related materials, community help, source code etc.\nSteps to improve logics in programming\n\nSara code yaha milta h\nhttps://github.com/hiteshchoudhary/\n\nDiscord pe yaha paaye jaate h:\nhttps://hitesh.ai/discord\nInstagram pe yaha paaye jaate h:\nhttps://www.instagram.com/hiteshchoudharyofficial/",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/HbNfCM4ilBQ/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/HbNfCM4ilBQ/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/HbNfCM4ilBQ/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/HbNfCM4ilBQ/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/HbNfCM4ilBQ/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chai aur Code",
        "tags": [
          "coding",
          "hindi",
          "javascript",
          "web developer",
          "react",
          "quality"
        ],
        "categoryId": "24",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "How to build logics in programming",
          "description": "Visit https://chaicode.com for all related materials, community help, source code etc.\nSteps to improve logics in programming\n\nSara code yaha milta h\nhttps://github.com/hiteshchoudhary/\n\nDiscord pe yaha paaye jaate h:\nhttps://hitesh.ai/discord\nInstagram pe yaha paaye jaate h:\nhttps://www.instagram.com/hiteshchoudharyofficial/"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT10M4S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "671519",
        "likeCount": "30789",
        "favoriteCount": "0",
        "commentCount": "791"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "e48nTJKoLeHK7cFKSwHOx97U950",
      "id": "rJORiMZe2hA",
      "snippet": {
        "publishedAt": "2024-04-12T13:30:08Z",
        "channelId": "UCNQ6FEtztATuaVhZKCY28Yw",
        "title": "6 Step guide to master api handling",
        "description": "Text guide: https://chaicode.com/blog/6-step-guide-to-master-api-handling\n\nYou have been using APIs in their most basic format. You send a request to a server, and it sends back a response. But APIs can do so much more than that. They can be used to create new APIs, to modify existing APIs, and to integrate APIs with other APIs. Most of the time that you practice is just data picking from APIs or loop through the data. But APIs can do so much more than that. At a max level, you went through the basics of state management.\n\nWelcome to chai aur code, a coding/programming dedicated channel in Hindi language. Now you can learn best of programming concepts with industry standard practical guide in Hindi language.\n\nAll source code is available at my Github account:\nhttps://github.com/hiteshchoudhary\n\nOur Open-Source Project is here: https://freeapi.app\n\nJoin me at whatsapp: https://hitesh.ai/whatsapp\n\nfor community discord: https://hitesh.ai/discord\n\nInstagram pe yaha paaye jaate h:\nhttps://www.instagram.com/hiteshchoudharyofficial/\n\nHTML video series:  https://www.youtube.com/watch?v=XmLOwJHFHf0&list=PLu71SKxNbfoDBNF5s-WH6aLbthSEIMhMI\n\nComplete javascript series: https://www.youtube.com/watch?v=Hr5iLG7sUa0&list=PLu71SKxNbfoBuX3f4EOACle2y-tRC5Q37\n\nComplete Reactjs series: https://www.youtube.com/watch?v=vz1RlUyrc3w&list=PLu71SKxNbfoDqgPchmvIsL4hTnJIrtige\n\nJavascript and react interview series: https://www.youtube.com/watch?v=1wqCyz7XrV4&list=PLu71SKxNbfoCy_MsA98SBfvUKF5eQit6L\n\nBackend development with Javascript: https://www.youtube.com/watch?v=EH3vGeqeIAo&list=PLu71SKxNbfoBGh_8p_NS-ZAh6v7HhYqHW\n\nPython Series: https://www.youtube.com/watch?v=Ca5DLSDfPec&list=PLu71SKxNbfoBsMugTFALhdLlZ5VOqCg2s",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/rJORiMZe2hA/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/rJORiMZe2hA/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/rJORiMZe2hA/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/rJORiMZe2hA/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/rJORiMZe2hA/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chai aur Code",
        "tags": [
          "coding",
          "hindi",
          "javascript",
          "web developer",
          "react",
          "quality",
          "reactjs",
          "tech interviews",
          "coding interviews",
          "python",
          "django",
          "machine learning",
          "python for beginners",
          "AI",
          "Data Science",
          "API handling",
          "API",
          "axios",
          "fetch",
          "react query"
        ],
        "categoryId": "24",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "6 Step guide to master api handling",
          "description": "Text guide: https://chaicode.com/blog/6-step-guide-to-master-api-handling\n\nYou have been using APIs in their most basic format. You send a request to a server, and it sends back a response. But APIs can do so much more than that. They can be used to create new APIs, to modify existing APIs, and to integrate APIs with other APIs. Most of the time that you practice is just data picking from APIs or loop through the data. But APIs can do so much more than that. At a max level, you went through the basics of state management.\n\nWelcome to chai aur code, a coding/programming dedicated channel in Hindi language. Now you can learn best of programming concepts with industry standard practical guide in Hindi language.\n\nAll source code is available at my Github account:\nhttps://github.com/hiteshchoudhary\n\nOur Open-Source Project is here: https://freeapi.app\n\nJoin me at whatsapp: https://hitesh.ai/whatsapp\n\nfor community discord: https://hitesh.ai/discord\n\nInstagram pe yaha paaye jaate h:\nhttps://www.instagram.com/hiteshchoudharyofficial/\n\nHTML video series:  https://www.youtube.com/watch?v=XmLOwJHFHf0&list=PLu71SKxNbfoDBNF5s-WH6aLbthSEIMhMI\n\nComplete javascript series: https://www.youtube.com/watch?v=Hr5iLG7sUa0&list=PLu71SKxNbfoBuX3f4EOACle2y-tRC5Q37\n\nComplete Reactjs series: https://www.youtube.com/watch?v=vz1RlUyrc3w&list=PLu71SKxNbfoDqgPchmvIsL4hTnJIrtige\n\nJavascript and react interview series: https://www.youtube.com/watch?v=1wqCyz7XrV4&list=PLu71SKxNbfoCy_MsA98SBfvUKF5eQit6L\n\nBackend development with Javascript: https://www.youtube.com/watch?v=EH3vGeqeIAo&list=PLu71SKxNbfoBGh_8p_NS-ZAh6v7HhYqHW\n\nPython Series: https://www.youtube.com/watch?v=Ca5DLSDfPec&list=PLu71SKxNbfoBsMugTFALhdLlZ5VOqCg2s"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT14M42S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "142675",
        "likeCount": "8090",
        "favoriteCount": "0",
        "commentCount": "1469"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "cCT_3DIBLA8SeiwO13nwvdUfka8",
      "id": "Hr5iLG7sUa0",
      "snippet": {
        "publishedAt": "2022-12-21T13:30:09Z",
        "channelId": "UCNQ6FEtztATuaVhZKCY28Yw",
        "title": "Javascript for beginners | chai aur #javascript",
        "description": "Visit https://chaicode.com for all related materials, community help, source code etc.\nhttps://github.com/hiteshchoudhary",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/Hr5iLG7sUa0/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/Hr5iLG7sUa0/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/Hr5iLG7sUa0/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/Hr5iLG7sUa0/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/Hr5iLG7sUa0/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chai aur Code",
        "tags": [
          "coding",
          "hindi",
          "javascript",
          "web development",
          "reactjs",
          "nodejs"
        ],
        "categoryId": "28",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "Javascript for beginners | chai aur #javascript",
          "description": "Visit https://chaicode.com for all related materials, community help, source code etc.\nhttps://github.com/hiteshchoudhary"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT5M5S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "2108808",
        "likeCount": "24249",
        "favoriteCount": "0",
        "commentCount": "818"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "TIsFrZY-PlPptkfV0U0qd9eZboU",
      "id": "7IFJb-uLEaI",
      "snippet": {
        "publishedAt": "2024-04-21T16:58:57Z",
        "channelId": "UCBwmMxybNva6P_5VmxjzwqA",
        "title": "What are MicroServices? When & Why is it used? | Monolithic vs Microservices Architecture",
        "description": "Understanding MicroServices Architecture and its advantage over Monolithic Architecture\n\nJoin the Apni Community🔥 : https://telegram.me/+k4rdgTPwmm5kMGVl",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/7IFJb-uLEaI/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/7IFJb-uLEaI/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/7IFJb-uLEaI/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/7IFJb-uLEaI/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/7IFJb-uLEaI/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Apna College",
        "tags": [
          "C++",
          "C++ coding",
          "C++ full course",
          "C++ placement course",
          "how to code",
          "programming",
          "college placement course",
          "C++ language",
          "java",
          "java language",
          "java full course",
          "java placement",
          "java code",
          "java coding"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "What are MicroServices? When & Why is it used? | Monolithic vs Microservices Architecture",
          "description": "Understanding MicroServices Architecture and its advantage over Monolithic Architecture\n\nJoin the Apni Community🔥 : https://telegram.me/+k4rdgTPwmm5kMGVl"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT9M15S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "597213",
        "likeCount": "16227",
        "favoriteCount": "0",
        "commentCount": "514"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "6V9bSDV4x3e745we_3G5ypCAw7A",
      "id": "dqlO6_5rZSQ",
      "snippet": {
        "publishedAt": "2023-07-22T05:00:15Z",
        "channelId": "UCkcqmxjMXaBb0kDWqqSEU1g",
        "title": "I tried 50 Programming Courses. Here are Top 5.",
        "description": "► Try my free email crash course to crush technical interviews: https://instabyte.io/\n\n1. How to learn coding efficiently\n2. How to become better at Programming?\n3. How to become a Software Engineer?\n\nI will answer these questions in this video.\n\n► For more content like this, subscribe to our channel: https://www.youtube.com/PowerCouple26\n\n► Follow us on Linkedin:\nhttps://www.linkedin.com/in/gabag26\nhttps://www.linkedin.com/in/sarrabounouh\n\n► Course links: \n1. CS 50: https://www.youtube.com/watch?v=8mAITcNt710\n2. 100 Days of Code: https://tinyurl.com/100-days-code\n3. Algorithms 1 and 2: http://imp.i384100.net/algorithms-1 and http://imp.i384100.net/algorithms-2\n4. Meta Front-end Professional Certificate: http://imp.i384100.net/Meta-FE\n5. System Design: https://www.youtube.com/watch?v=-W9F__D3oY4\n\n► Let's be FRIENDS! https://www.instagram.com/sahilandsarra/\n\n► For business inquiries, reach us on: powercouplejourney@gmail.com\n\n#learncoding #programming #softwareengineer\n\nDISCLAIMER: All opinions shared on this channel are our own and don't express views or opinions of our employers. We only use our experiences and public knowledge to make our content. NO CONFIDENTIAL INFORMATION of our employers is used or shared on this channel. This is not a Professional Coaching channel, it only highlights the public resources that have worked for our careers.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/dqlO6_5rZSQ/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/dqlO6_5rZSQ/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/dqlO6_5rZSQ/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/dqlO6_5rZSQ/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/dqlO6_5rZSQ/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Sahil & Sarra",
        "tags": [
          "how to learn coding",
          "how to become a software engineer",
          "how to learn programming",
          "how to learn coding for beginners",
          "how to learn programming for beginners",
          "how to learn coding fast",
          "how to become a software developer",
          "how to get software engineer job",
          "how to get software developer job",
          "how to learn to code",
          "coding",
          "coding advice for beginners",
          "coding advice",
          "learn to code",
          "programming"
        ],
        "categoryId": "28",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "I tried 50 Programming Courses. Here are Top 5.",
          "description": "► Try my free email crash course to crush technical interviews: https://instabyte.io/\n\n1. How to learn coding efficiently\n2. How to become better at Programming?\n3. How to become a Software Engineer?\n\nI will answer these questions in this video.\n\n► For more content like this, subscribe to our channel: https://www.youtube.com/PowerCouple26\n\n► Follow us on Linkedin:\nhttps://www.linkedin.com/in/gabag26\nhttps://www.linkedin.com/in/sarrabounouh\n\n► Course links: \n1. CS 50: https://www.youtube.com/watch?v=8mAITcNt710\n2. 100 Days of Code: https://tinyurl.com/100-days-code\n3. Algorithms 1 and 2: http://imp.i384100.net/algorithms-1 and http://imp.i384100.net/algorithms-2\n4. Meta Front-end Professional Certificate: http://imp.i384100.net/Meta-FE\n5. System Design: https://www.youtube.com/watch?v=-W9F__D3oY4\n\n► Let's be FRIENDS! https://www.instagram.com/sahilandsarra/\n\n► For business inquiries, reach us on: powercouplejourney@gmail.com\n\n#learncoding #programming #softwareengineer\n\nDISCLAIMER: All opinions shared on this channel are our own and don't express views or opinions of our employers. We only use our experiences and public knowledge to make our content. NO CONFIDENTIAL INFORMATION of our employers is used or shared on this channel. This is not a Professional Coaching channel, it only highlights the public resources that have worked for our careers."
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT7M9S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "true",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "2713946",
        "likeCount": "107321",
        "favoriteCount": "0",
        "commentCount": "1313"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "vYM06zuuZu4JQHWWb643Yi3QtTU",
      "id": "UOJZTqA5Loc",
      "snippet": {
        "publishedAt": "2022-07-12T15:29:36Z",
        "channelId": "UCBwmMxybNva6P_5VmxjzwqA",
        "title": "What is SQL? Future Career Scope & Resources",
        "description": "DBMS + SQL Notes : https://www.youtube.com/watch?v=f1oV46r69YM\n\n🔥 Guaranteed Placement Sheet : https://bit.ly/DSASheet\n🔥 Java Placement Course(with DSA) : https://bit.ly/JavaPlaylistComplete\n🔥 Complete C Course : https://bit.ly/FullTutorialC\n🔥 C++ Placement Course (DSA) : https://bit.ly/CppPlaylistComplete\n🔥 Telegram: https://bit.ly/ApnaCollegeTelegram",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/UOJZTqA5Loc/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/UOJZTqA5Loc/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/UOJZTqA5Loc/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/UOJZTqA5Loc/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/UOJZTqA5Loc/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Apna College",
        "tags": [
          "C++",
          "C++ coding",
          "C++ full course",
          "C++ placement course",
          "how to code",
          "programming",
          "college placement course",
          "C++ language",
          "java",
          "java language",
          "java full course",
          "java placement",
          "java code",
          "java coding"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "What is SQL? Future Career Scope & Resources",
          "description": "DBMS + SQL Notes : https://www.youtube.com/watch?v=f1oV46r69YM\n\n🔥 Guaranteed Placement Sheet : https://bit.ly/DSASheet\n🔥 Java Placement Course(with DSA) : https://bit.ly/JavaPlaylistComplete\n🔥 Complete C Course : https://bit.ly/FullTutorialC\n🔥 C++ Placement Course (DSA) : https://bit.ly/CppPlaylistComplete\n🔥 Telegram: https://bit.ly/ApnaCollegeTelegram"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT6M12S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "2042074",
        "likeCount": "63457",
        "favoriteCount": "0",
        "commentCount": "1832"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "oD5lWOuDnD_9OLIqHFw0DTdnLJA",
      "id": "H8Lyj2D_cWo",
      "snippet": {
        "publishedAt": "2024-06-27T16:20:54Z",
        "channelId": "UCBwmMxybNva6P_5VmxjzwqA",
        "title": "What is Docker? Simply Explained by Shradha Ma'am",
        "description": "You can start your Tech Placement/Internship journey with :\nNew Sigma 4.0 : https://www.apnacollege.in/course/sigma-4\nEarly bird offer till. 24th July, 9PM\n\nLink for International Students : https://buy.stripe.com/14kaEQ9be3FsaB2bIW\n\n----------------------------------------------------\nPS : for those who asked, EMI option is available on payment page. \n\nEligibility for Sigm 4.0 \n- B.Tech students preparing for Tech Placement/Internships. \n- start as early as possible, first 2 years are most important. \n- M.Tech/MCA/BCA who are preparing for Tech Placements/Internships\n\nClass Schedule : \n- Mentioned in video & on website. \n- Lectures will come on alternate days.\n- Lecture Timings : 8PM \n- Lecture duration : 1 - 1.5 Hour\n\n----------------------------------------------------\nJoin the Apni Community🔥 : https://telegram.me/+k4rdgTPwmm5kMGVl",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/H8Lyj2D_cWo/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/H8Lyj2D_cWo/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/H8Lyj2D_cWo/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/H8Lyj2D_cWo/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/H8Lyj2D_cWo/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Apna College",
        "tags": [
          "C++",
          "C++ coding",
          "C++ full course",
          "C++ placement course",
          "how to code",
          "programming",
          "college placement course",
          "C++ language",
          "java",
          "java language",
          "java full course",
          "java placement",
          "java code",
          "java coding"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "What is Docker? Simply Explained by Shradha Ma'am",
          "description": "You can start your Tech Placement/Internship journey with :\nNew Sigma 4.0 : https://www.apnacollege.in/course/sigma-4\nEarly bird offer till. 24th July, 9PM\n\nLink for International Students : https://buy.stripe.com/14kaEQ9be3FsaB2bIW\n\n----------------------------------------------------\nPS : for those who asked, EMI option is available on payment page. \n\nEligibility for Sigm 4.0 \n- B.Tech students preparing for Tech Placement/Internships. \n- start as early as possible, first 2 years are most important. \n- M.Tech/MCA/BCA who are preparing for Tech Placements/Internships\n\nClass Schedule : \n- Mentioned in video & on website. \n- Lectures will come on alternate days.\n- Lecture Timings : 8PM \n- Lecture duration : 1 - 1.5 Hour\n\n----------------------------------------------------\nJoin the Apni Community🔥 : https://telegram.me/+k4rdgTPwmm5kMGVl"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT19M32S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "992092",
        "likeCount": "23948",
        "favoriteCount": "0",
        "commentCount": "1174"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "W07DcxAR-7acv0hndqGpK6P1hmY",
      "id": "ZrAjBtodMpA",
      "snippet": {
        "publishedAt": "2023-06-03T14:30:11Z",
        "channelId": "UCvHX2bCZG2m9ddUhwxudKYA",
        "title": "Next JS tutorial in Hindi #5 File and folder | Project structure",
        "description": "Instragram Id : code.steps\n\nIn this next js tutorial video, we learn about file and folder structure in next.js 13.4 in Hindi. This course is made by Anil Sidhu in the Hindi language.\npoints of video\n\nEvent in next.js\nImportant files for Beginners.\nOther file introduction.\nCode flow of next.js. \nInterview Questions.\n\nPoints \nWhat is package.json?\nDifference between dependency and devdependency\n\nReact js Latest Playlist in Hindi: https://www.youtube.com/playlist?list=PL8p2I9GklV47BCAjiCtuV_liN9IwAl8pM\ninst id:  @code.steps",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/ZrAjBtodMpA/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/ZrAjBtodMpA/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/ZrAjBtodMpA/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/ZrAjBtodMpA/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/ZrAjBtodMpA/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Code Step By Step",
        "tags": [
          "Next JS tutorial in Hindi",
          "File and folder structure",
          "next js tutorial",
          "next js tutorial for beginners in hindi",
          "next js tutorial for beginners",
          "next js in hindi",
          "next js project structure",
          "next js 13.4 tutorial",
          "next js 13.4"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "Next JS tutorial in Hindi #5 File and folder | Project structure",
          "description": "Instragram Id : code.steps\n\nIn this next js tutorial video, we learn about file and folder structure in next.js 13.4 in Hindi. This course is made by Anil Sidhu in the Hindi language.\npoints of video\n\nEvent in next.js\nImportant files for Beginners.\nOther file introduction.\nCode flow of next.js. \nInterview Questions.\n\nPoints \nWhat is package.json?\nDifference between dependency and devdependency\n\nReact js Latest Playlist in Hindi: https://www.youtube.com/playlist?list=PL8p2I9GklV47BCAjiCtuV_liN9IwAl8pM\ninst id:  @code.steps"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT13M10S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "52421",
        "likeCount": "1134",
        "favoriteCount": "0",
        "commentCount": "32"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "yxWMw1OQRyhADfVQlzA9Q-16gAE",
      "id": "0PaWV3wIfkM",
      "snippet": {
        "publishedAt": "2023-05-27T12:10:57Z",
        "channelId": "UCNQ6FEtztATuaVhZKCY28Yw",
        "title": "What is an API in Hindi",
        "description": "Visit https://chaicode.com for all related materials, community help, source code etc.\nAn API, or Application Programming Interface, is a set of rules and protocols for building and interacting with software applications. It's like a bridge that allows different software systems to communicate and share information. For instance, a YouTube API enables developers to integrate YouTube's functionalities, like uploading videos, retrieving comments, or managing playlists, into their own applications or websites. This helps in expanding YouTube's features and services beyond its platform. APIs use standardized requests and responses, making it easier for developers to access and use functionalities of a larger software system like YouTube in a consistent and efficient way.\n\n\nSara code yaha milta h\nhttps://github.com/hiteshchoudhary/\n\nDiscord pe yaha paaye jaate h:\nhttps://hitesh.ai/discord\nInstagram pe yaha paaye jaate h:\nhttps://www.instagram.com/hiteshchoudharyofficial/",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/0PaWV3wIfkM/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/0PaWV3wIfkM/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/0PaWV3wIfkM/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/0PaWV3wIfkM/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/0PaWV3wIfkM/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chai aur Code",
        "tags": [
          "coding",
          "hindi",
          "javascript",
          "web developer",
          "api",
          "what is api",
          "api in hindi",
          "YouTube API",
          "Video Integration",
          "Software Development",
          "Application Programming",
          "Data Sharing",
          "Digital Media",
          "Content Management",
          "Web Services",
          "Social Media Integration",
          "Platform Connectivity"
        ],
        "categoryId": "24",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "What is an API in Hindi",
          "description": "Visit https://chaicode.com for all related materials, community help, source code etc.\nAn API, or Application Programming Interface, is a set of rules and protocols for building and interacting with software applications. It's like a bridge that allows different software systems to communicate and share information. For instance, a YouTube API enables developers to integrate YouTube's functionalities, like uploading videos, retrieving comments, or managing playlists, into their own applications or websites. This helps in expanding YouTube's features and services beyond its platform. APIs use standardized requests and responses, making it easier for developers to access and use functionalities of a larger software system like YouTube in a consistent and efficient way.\n\n\nSara code yaha milta h\nhttps://github.com/hiteshchoudhary/\n\nDiscord pe yaha paaye jaate h:\nhttps://hitesh.ai/discord\nInstagram pe yaha paaye jaate h:\nhttps://www.instagram.com/hiteshchoudharyofficial/"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT8M38S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "426996",
        "likeCount": "21085",
        "favoriteCount": "0",
        "commentCount": "353"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "ZLzU_4jEFqwcI7cKh3wuco1n0y8",
      "id": "B67X9xtOyuI",
      "snippet": {
        "publishedAt": "2021-09-04T16:02:10Z",
        "channelId": "UCBwmMxybNva6P_5VmxjzwqA",
        "title": "5 Github Hacks that you should know | for Coders",
        "description": "Complete C++ Placement Course (Data Structures+Algorithm) :https://www.youtube.com/playlist?list=PLfqMhTWNBTe0b2nM6JHVCnAkhQRGiZMSJ\nTelegram: https://t.me/apnikakshaofficial\nInstagram: https://www.instagram.com/dhattarwalaman/\n\nMy YouTube Gear 😉: https://docs.google.com/document/d/1pyTJVmed-rHFXNqQodOTYr7z-EhH37s8pvtYpR0vMR4/edit?usp=sharing\nNotes of this Lecture:",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/B67X9xtOyuI/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/B67X9xtOyuI/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/B67X9xtOyuI/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/B67X9xtOyuI/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/B67X9xtOyuI/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Apna College",
        "tags": [
          "C++",
          "C++ coding",
          "C++ full course",
          "C++ placement course",
          "how to code",
          "programming",
          "college placement course",
          "C++ language"
        ],
        "categoryId": "22",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "5 Github Hacks that you should know | for Coders",
          "description": "Complete C++ Placement Course (Data Structures+Algorithm) :https://www.youtube.com/playlist?list=PLfqMhTWNBTe0b2nM6JHVCnAkhQRGiZMSJ\nTelegram: https://t.me/apnikakshaofficial\nInstagram: https://www.instagram.com/dhattarwalaman/\n\nMy YouTube Gear 😉: https://docs.google.com/document/d/1pyTJVmed-rHFXNqQodOTYr7z-EhH37s8pvtYpR0vMR4/edit?usp=sharing\nNotes of this Lecture:"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT8M16S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "633601",
        "likeCount": "20040",
        "favoriteCount": "0",
        "commentCount": "406"
      }
    }
  ],
  "pageInfo": {
    "totalResults": 15,
    "resultsPerPage": 15
  }
}
","status":200,"url":"https://www.googleapis.com/youtube/v3/videos?part=snippet%2CcontentDetails%2Cstatistics&id=YIqLzP0sVdc%2CXmLOwJHFHf0%2CXGa4onZP66Q%2CtysDxjfgLMg%2CNkwFxeHARqc%2CHbNfCM4ilBQ%2CrJORiMZe2hA%2CHr5iLG7sUa0%2C7IFJb-uLEaI%2CdqlO6_5rZSQ%2CUOJZTqA5Loc%2CH8Lyj2D_cWo%2CZrAjBtodMpA%2C0PaWV3wIfkM%2CB67X9xtOyuI&key=AIzaSyAeZAsOW2kBeNqsdozdSNpajJeUOXsJ2fs"},"revalidate":3600,"tags":[]}