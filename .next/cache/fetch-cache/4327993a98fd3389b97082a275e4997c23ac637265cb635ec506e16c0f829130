{"kind":"FETCH","data":{"headers":{"content-encoding":"gzip","content-type":"application/json; charset=UTF-8","date":"Thu, 23 Oct 2025 11:11:56 GMT","server":"scaffolding on HTTPServer2","transfer-encoding":"chunked","vary":"Origin, X-Origin, Referer","x-content-type-options":"nosniff","x-frame-options":"SAMEORIGIN","x-xss-protection":"0"},"body":"{
  "kind": "youtube#videoListResponse",
  "etag": "1ETOD1KkH-PJfVU8XJs10ZCBgb8",
  "items": [
    {
      "kind": "youtube#video",
      "etag": "17ytOeohSl8Ga3cWG4eDA1Rax7w",
      "id": "truRwcI7-kg",
      "snippet": {
        "publishedAt": "2025-05-06T13:17:00Z",
        "channelId": "UC8RaXfzsNk6e5ASy5nz9wOQ",
        "title": "UI/UX Design Full Course for Beginners 2025 | Lets Uncover",
        "description": "UI/UX Design Full Course for Beginners 2025 | Lets Uncover\n\nFollow Ali Hassan:\nInstagram: https://www.instagram.com/alihassanux\nYouTube: https://youtube.com/@alihassanux  \nLinkedin: http://linkedin.com/in/alihassanux\nFacebook: https://www.facebook.com/AliHassanUX \n\n⭐Buy Hosting and Domain: https://hostinger.com/letsuncover\n10% Discount Code: LETSUNCOVER\nWhatsApp Invoices: 03361176620\n\n⭐ Free Online Earning Courses: https://www.youtube.com/playlist?list=PLddXDOtiaRnGW9C-0CltXCPU4RFBzXcAZ\n\n👉Client Hunting Methodology Course: https://bit.ly/client-hunting \n👉Create RedotPay Account: https://url.hk/i/en/z6qny\n👉Paid Fiverr Course: https://bit.ly/3PwiDZe (1499/rs Only)\n👉Skillshare: https://bit.ly/3PkpVmw\n\n►  Business Email: ➜ Letsuncover@yahoo.com\n►  Website: ➜ https://letsuncover.pk/\n►  Linkedin: ➜ https://pk.linkedin.com/in/sobantariq\n►  Instagram:➜ https://www.instagram.com/theletsuncover/\n►  Twitter:➜ https://twitter.com/Lets_Uncover\n►  Facebook:➜ https://www.facebook.com/letsUncover\n►  Facebook Group:➜ https://www.facebook.com/groups/letsuncover\n\nDISCLAIMER: This video contains affiliate links, which means I receive a small commission on a purchase without additional cost. These commissions help me to create Free Educational Videos on YouTube.\n\n#uxuidesign #letsuncover",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/truRwcI7-kg/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/truRwcI7-kg/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/truRwcI7-kg/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/truRwcI7-kg/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/truRwcI7-kg/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Lets Uncover",
        "tags": [
          "ui ux design course",
          "ui ux design full course",
          "ux design course",
          "ux design",
          "ui ux course",
          "ui design",
          "ui ux design",
          "online ui ux course",
          "ux ui course",
          "best ui ux course",
          "ux design courses",
          "ui ux free course",
          "ux course",
          "ux design tutorial",
          "ux design tutorial for beginners",
          "ux design for beginners",
          "ui ux design tutorial for beginners",
          "free ux course",
          "ui course",
          "free ui course",
          "ux course for beginners",
          "ux designer",
          "ui design course",
          "lets uncover",
          "figma course"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "UI/UX Design Full Course for Beginners 2025 | Lets Uncover",
          "description": "UI/UX Design Full Course for Beginners 2025 | Lets Uncover\n\nFollow Ali Hassan:\nInstagram: https://www.instagram.com/alihassanux\nYouTube: https://youtube.com/@alihassanux  \nLinkedin: http://linkedin.com/in/alihassanux\nFacebook: https://www.facebook.com/AliHassanUX \n\n⭐Buy Hosting and Domain: https://hostinger.com/letsuncover\n10% Discount Code: LETSUNCOVER\nWhatsApp Invoices: 03361176620\n\n⭐ Free Online Earning Courses: https://www.youtube.com/playlist?list=PLddXDOtiaRnGW9C-0CltXCPU4RFBzXcAZ\n\n👉Client Hunting Methodology Course: https://bit.ly/client-hunting \n👉Create RedotPay Account: https://url.hk/i/en/z6qny\n👉Paid Fiverr Course: https://bit.ly/3PwiDZe (1499/rs Only)\n👉Skillshare: https://bit.ly/3PkpVmw\n\n►  Business Email: ➜ Letsuncover@yahoo.com\n►  Website: ➜ https://letsuncover.pk/\n►  Linkedin: ➜ https://pk.linkedin.com/in/sobantariq\n►  Instagram:➜ https://www.instagram.com/theletsuncover/\n►  Twitter:➜ https://twitter.com/Lets_Uncover\n►  Facebook:➜ https://www.facebook.com/letsUncover\n►  Facebook Group:➜ https://www.facebook.com/groups/letsuncover\n\nDISCLAIMER: This video contains affiliate links, which means I receive a small commission on a purchase without additional cost. These commissions help me to create Free Educational Videos on YouTube.\n\n#uxuidesign #letsuncover"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT3H8M15S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "185179",
        "likeCount": "5705",
        "favoriteCount": "0",
        "commentCount": "110"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "7UJXbr7wzjrF3Ne4Ty5PkiecIEI",
      "id": "onyB_X3zk6o",
      "snippet": {
        "publishedAt": "2024-01-30T11:29:24Z",
        "channelId": "UCB6ix-6Z_NKgYuBccT7N6uQ",
        "title": "How to Become a UI/UX designer in 2024 | Without Degree | Complete Guide in Hindi, English Captions",
        "description": "This roadmap is a proven one and nobody on the internet will teach you this for free, hope this video will help you understand the process, and you may become a successful UI UX designer in 2024.\n\nGet my UX Design book \"UX Decoded\" : https://saurabhux.com/\n\nFollow me on Instagram : https://www.instagram.com/saurabhux/\nConnect on LinkedIn : https://www.linkedin.com/in/saurabhsainiux/\nFollow on Twitter (X) : https://twitter.com/saurabh_ux\n\n-----------------------------------------------\nResources :\nDesign Basics - https://www.figma.com/resource-library/design-basics/\nWhat is UI design - https://www.figma.com/resource-library/ui-design/\nFigma Best Practices - https://www.figma.com/best-practices/\nBasic Laws of UX design - https://lawsofux.com/\nUX design Articles - https://medium.com/search?q=UX+design+guide  \n\n-----------------------------------------------\n\nRecommended Books -\nThe design of Everyday things - https://amzn.to/3U4WPcs\nChange by design - https://amzn.to/49pcVT1\n\n-----------------------------------------------\n\nTimestamps: \n00:00 Introduction\n01:13 Video overview \n03:08 Requirements \n04:18 Step 1\n06:34 Step 2\n08:00 Step 3\n08:56 Step 4\n14:45 Step 5\n18:32 Step 6\n20:23 Important points\n21:38 Conclusion\n\n----------------------------------------------------\nMy Desk products affiliate links :\n\nDark Wallpapers : https://amzn.to/3TVlMHh\nAcoustic Foams : https://amzn.to/3xg4ZpA\nSpeaker System : https://amzn.to/3TAP3pn\nKeyboard : https://amzn.to/43BPlB0\nGraphic Tablet : https://amzn.to/3PIVm9f\nMacBook Pro 16 inch : https://amzn.to/3VCW5wH\niPad Pro 11 inch : https://amzn.to/4az2rBu\nMonitor : https://amzn.to/4aznEew\nMicrophone : https://amzn.to/3VAQCq0\nBoom arm : https://amzn.to/3xcrdst\nStanding Lamp : https://amzn.to/3vA2NJ9\nRBG light : https://amzn.to/4aepAJF\nTripod : https://amzn.to/3TG3ZT4\nLight : https://amzn.to/3vvVZMy\n\nCamera : https://amzn.to/3xfwnnT\nBest Lens for it : https://amzn.to/3VIR9Xb\n\n--------------------------------------------------------\n\nAll the icons in this video are from - flaticon.com\n\nIgnore (For Seo)\n\nMusic from #Uppbeat (free for Creators!):\nhttps://uppbeat.io/t/simon-folwar/a-creative-mind\nLicense code: 6SZ0KWEEAGDTLFQ3\n\nMusic from #Uppbeat (free for Creators!):\nhttps://uppbeat.io/t/color-parade/luxurious\nLicense code: RGYRHWIOHZW8W4U6\n\nNo copyright infringement intended\n\n--------------------------------------------------------\n\n\nUI UX design\nUI Design\nHow to become a UI/UX designer \nUI UX Roadmap 2024\nComplete Guide to earn online\nHow to become a designer\nWhat is UI UX design\nUI UX in 2024\nUI UX Course in hindi\nUI design course\nHow to learn UI/UX design\nDesigner at Deloitte \nHow I learned Graphics design\nHow to learn Figma\nFigma design\nUI UX design tutorial\nSalary of a UI UX designer",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/onyB_X3zk6o/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/onyB_X3zk6o/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/onyB_X3zk6o/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/onyB_X3zk6o/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/onyB_X3zk6o/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Saurabh Saini",
        "tags": [
          "ui ux design with ai",
          "ui ux design workshop",
          "ui ux design salary",
          "ui ux design work from home",
          "ansh mehra",
          "saptarshi ui ux",
          "how to learn UI design",
          "ui design course",
          "ui ux course",
          "ui ux hindi",
          "ui design india",
          "ui ux",
          "ux design",
          "salary of a ui ux designer",
          "ui ux design 2024",
          "ui ux guide",
          "why learn ui ux design",
          "what is ui ux design",
          "is ui ux easy",
          "ui ux career",
          "ui ux laws",
          "ui design tutorial",
          "how to become a UI designer",
          "UI designer salary",
          "case studies",
          "saurabh saini"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en-IN",
        "localized": {
          "title": "How to Become a UI/UX designer in 2024 | Without Degree | Complete Guide in Hindi, English Captions",
          "description": "This roadmap is a proven one and nobody on the internet will teach you this for free, hope this video will help you understand the process, and you may become a successful UI UX designer in 2024.\n\nGet my UX Design book \"UX Decoded\" : https://saurabhux.com/\n\nFollow me on Instagram : https://www.instagram.com/saurabhux/\nConnect on LinkedIn : https://www.linkedin.com/in/saurabhsainiux/\nFollow on Twitter (X) : https://twitter.com/saurabh_ux\n\n-----------------------------------------------\nResources :\nDesign Basics - https://www.figma.com/resource-library/design-basics/\nWhat is UI design - https://www.figma.com/resource-library/ui-design/\nFigma Best Practices - https://www.figma.com/best-practices/\nBasic Laws of UX design - https://lawsofux.com/\nUX design Articles - https://medium.com/search?q=UX+design+guide  \n\n-----------------------------------------------\n\nRecommended Books -\nThe design of Everyday things - https://amzn.to/3U4WPcs\nChange by design - https://amzn.to/49pcVT1\n\n-----------------------------------------------\n\nTimestamps: \n00:00 Introduction\n01:13 Video overview \n03:08 Requirements \n04:18 Step 1\n06:34 Step 2\n08:00 Step 3\n08:56 Step 4\n14:45 Step 5\n18:32 Step 6\n20:23 Important points\n21:38 Conclusion\n\n----------------------------------------------------\nMy Desk products affiliate links :\n\nDark Wallpapers : https://amzn.to/3TVlMHh\nAcoustic Foams : https://amzn.to/3xg4ZpA\nSpeaker System : https://amzn.to/3TAP3pn\nKeyboard : https://amzn.to/43BPlB0\nGraphic Tablet : https://amzn.to/3PIVm9f\nMacBook Pro 16 inch : https://amzn.to/3VCW5wH\niPad Pro 11 inch : https://amzn.to/4az2rBu\nMonitor : https://amzn.to/4aznEew\nMicrophone : https://amzn.to/3VAQCq0\nBoom arm : https://amzn.to/3xcrdst\nStanding Lamp : https://amzn.to/3vA2NJ9\nRBG light : https://amzn.to/4aepAJF\nTripod : https://amzn.to/3TG3ZT4\nLight : https://amzn.to/3vvVZMy\n\nCamera : https://amzn.to/3xfwnnT\nBest Lens for it : https://amzn.to/3VIR9Xb\n\n--------------------------------------------------------\n\nAll the icons in this video are from - flaticon.com\n\nIgnore (For Seo)\n\nMusic from #Uppbeat (free for Creators!):\nhttps://uppbeat.io/t/simon-folwar/a-creative-mind\nLicense code: 6SZ0KWEEAGDTLFQ3\n\nMusic from #Uppbeat (free for Creators!):\nhttps://uppbeat.io/t/color-parade/luxurious\nLicense code: RGYRHWIOHZW8W4U6\n\nNo copyright infringement intended\n\n--------------------------------------------------------\n\n\nUI UX design\nUI Design\nHow to become a UI/UX designer \nUI UX Roadmap 2024\nComplete Guide to earn online\nHow to become a designer\nWhat is UI UX design\nUI UX in 2024\nUI UX Course in hindi\nUI design course\nHow to learn UI/UX design\nDesigner at Deloitte \nHow I learned Graphics design\nHow to learn Figma\nFigma design\nUI UX design tutorial\nSalary of a UI UX designer"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT22M32S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "true",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "560560",
        "likeCount": "34474",
        "favoriteCount": "0",
        "commentCount": "1513"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "W9rnUUz822MWzTh773Iz-2BuRSY",
      "id": "UjPpvf4TNLI",
      "snippet": {
        "publishedAt": "2021-12-05T12:00:28Z",
        "channelId": "UCnqG4MjEw269T9da8lVM5uw",
        "title": "Figma Tutorial For Beginners in Hindi | figma full course in hindi | ui ux design full course free",
        "description": "Wanna learn Figma live? Join our live workshop on 6/1/24 link - https://www.higrow.xyz/workshop/7dabb34e-fdb8-447b-b5f2-ebbb5e2809dc\n\nIn this video we will learn complete ui design from scratch using figma software which is completely\nfree of cost. We will learn from how to use figma, how to use figma tools, we will also create awesome web and mobile design projects.\nWe will learn everything in this course about UI design in very simple language but if still you are having dought then join our \nWhatsapp group :- https://chat.whatsapp.com/JTW0R1PNtmwK5xZK7JTl5h\n\nDiscord :- https://discord.gg/qJPBdkqJBU\n\nAnd also follow me on *INSTAGRAM* :- https://www.instagram.com/puneet.25_/\n\nI hope you love this video. Do not forget to like this video, subscribe to the channel and also please share this video too!!\n\nDo not forget to join my *DISCORD SERVER* and follow me on *INSTAGRAM*!\n\nTags *ignore it* :-\nComplete figma course,\nfigma course,\nui design,\nui design course,\ncomplete ui designing course,\ncomplete ui design course,\nfigma tutorial,\nui design tutorial,\nprototyping in figma,\ndesigning in figma,\nui designs using figma,\nweb designs using figma,\napp designs using figma,\npen tool figma,\nhow to use pen tool in figma,\nhand tool figma,\ntext tool figma,\nplugins in figma,\nbest plugins in figma,\nshapes tool figma,\nshape tool figma,\nfigma,\nui\n\nfigma tutorial, figma tutorial for beginners, figma tutorial web design, figma tutorial in hindi, figma tutorial for beginners in hindi, figma tutorial in tamil, figma tutorial for beginners in tamil, figma tutorial malayalam, figma tutorial thapa technical, figma tutorial for beginners malayalam, complete figma tutorial in hindi, complete figma tutorial, complete figma course, complete figma, complete figma mega course beginner to expert, figma complete course in hindi, figma complete website, the complete figma ui/ux app design course for beginners\n\n\nfigma full tutorial, figma full tutorial for beginners, figma full tutorial web design, figma full tutorial in hindi, figma tutorial for beginners in hindi, figma tutorial in tamil, figma tutorial for beginners in tamil, figma tutorial malayalam, figma tutorial thapa technical, figma tutorial for beginners malayalam, complete figma tutorial in hindi, complete figma tutorial, complete figma course, complete figma, complete figma mega course beginner to expert, figma complete course in hindi, figma complete website, the complete figma ui/ux app design course for beginners\n\n\n\n\nFigma Tutorial For Beginners in Hindi | figma full course in hindi | ui ux design course free\n\nfigma tutorial for beginners in hindi, figma full course in hindi, complete ui ux design course free \n\n#graphicdesign #figma #uidesign #design #webdesign #appdesign #logodesign #ui #figmatutorial #uidesigntutorial #designing #uidesigning #tutorial",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/UjPpvf4TNLI/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/UjPpvf4TNLI/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/UjPpvf4TNLI/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/UjPpvf4TNLI/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/UjPpvf4TNLI/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "LearnGrow",
        "tags": [
          "complete figma tutorial",
          "complete ui ux design course free",
          "figma",
          "figma basics",
          "figma crash course in hindi",
          "figma design",
          "figma for beginners",
          "figma full course",
          "figma full course in hindi",
          "figma tutorial",
          "figma tutorial app design",
          "figma tutorial for beginners",
          "figma tutorial for beginners in hindi",
          "figma tutorial in hindi",
          "figma ui design",
          "figma web design",
          "learngrow",
          "tutorial",
          "ui design tutorial",
          "ui ux"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "Figma Tutorial For Beginners in Hindi | figma full course in hindi | ui ux design full course free",
          "description": "Wanna learn Figma live? Join our live workshop on 6/1/24 link - https://www.higrow.xyz/workshop/7dabb34e-fdb8-447b-b5f2-ebbb5e2809dc\n\nIn this video we will learn complete ui design from scratch using figma software which is completely\nfree of cost. We will learn from how to use figma, how to use figma tools, we will also create awesome web and mobile design projects.\nWe will learn everything in this course about UI design in very simple language but if still you are having dought then join our \nWhatsapp group :- https://chat.whatsapp.com/JTW0R1PNtmwK5xZK7JTl5h\n\nDiscord :- https://discord.gg/qJPBdkqJBU\n\nAnd also follow me on *INSTAGRAM* :- https://www.instagram.com/puneet.25_/\n\nI hope you love this video. Do not forget to like this video, subscribe to the channel and also please share this video too!!\n\nDo not forget to join my *DISCORD SERVER* and follow me on *INSTAGRAM*!\n\nTags *ignore it* :-\nComplete figma course,\nfigma course,\nui design,\nui design course,\ncomplete ui designing course,\ncomplete ui design course,\nfigma tutorial,\nui design tutorial,\nprototyping in figma,\ndesigning in figma,\nui designs using figma,\nweb designs using figma,\napp designs using figma,\npen tool figma,\nhow to use pen tool in figma,\nhand tool figma,\ntext tool figma,\nplugins in figma,\nbest plugins in figma,\nshapes tool figma,\nshape tool figma,\nfigma,\nui\n\nfigma tutorial, figma tutorial for beginners, figma tutorial web design, figma tutorial in hindi, figma tutorial for beginners in hindi, figma tutorial in tamil, figma tutorial for beginners in tamil, figma tutorial malayalam, figma tutorial thapa technical, figma tutorial for beginners malayalam, complete figma tutorial in hindi, complete figma tutorial, complete figma course, complete figma, complete figma mega course beginner to expert, figma complete course in hindi, figma complete website, the complete figma ui/ux app design course for beginners\n\n\nfigma full tutorial, figma full tutorial for beginners, figma full tutorial web design, figma full tutorial in hindi, figma tutorial for beginners in hindi, figma tutorial in tamil, figma tutorial for beginners in tamil, figma tutorial malayalam, figma tutorial thapa technical, figma tutorial for beginners malayalam, complete figma tutorial in hindi, complete figma tutorial, complete figma course, complete figma, complete figma mega course beginner to expert, figma complete course in hindi, figma complete website, the complete figma ui/ux app design course for beginners\n\n\n\n\nFigma Tutorial For Beginners in Hindi | figma full course in hindi | ui ux design course free\n\nfigma tutorial for beginners in hindi, figma full course in hindi, complete ui ux design course free \n\n#graphicdesign #figma #uidesign #design #webdesign #appdesign #logodesign #ui #figmatutorial #uidesigntutorial #designing #uidesigning #tutorial"
        },
        "defaultAudioLanguage": "en-US"
      },
      "contentDetails": {
        "duration": "PT1H27M50S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "594553",
        "likeCount": "13814",
        "favoriteCount": "0",
        "commentCount": "311"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "ZJPtzwTjLD60IlEpzRe5y6cACGs",
      "id": "7DnypQA1SK8",
      "snippet": {
        "publishedAt": "2024-07-16T02:30:03Z",
        "channelId": "UCZbdK5v2VIj7qG6s7y3nDdw",
        "title": "UI UX Design Course for Beginners in Hindi | Figma Complete Tutorial | #uiuxcourse #figmatutorial",
        "description": "If you want to become UI / UX Expert or Website Designer and Start online earning, then this course is for you. For UI / UX Full Course Watch this full tutorial in Hindi by Marketing Fundas.\nFor Digital Marketing Services or Training or Online Income Click Below Given Link or Call \n\nFor Digital Marketing Services :- https://www.marketingfundas.com/contact-us.html\n\nWhatsApp or Call ( 9354447104 )\n\n #uiuxcourse #figmatutorial #marketingfundas",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/7DnypQA1SK8/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/7DnypQA1SK8/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/7DnypQA1SK8/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/7DnypQA1SK8/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/7DnypQA1SK8/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Marketing Fundas",
        "tags": [
          "marketing fundas",
          "UI UX Design Course for Beginners in Hindi",
          "Figma Complete Tutorial",
          "ui ux design full course in hindi",
          "ui/ux design full course figma",
          "figma tutorial for beginners in hindi",
          "ui ux figma full course in hindi",
          "ui ux design figma full course in hindi",
          "how to become ui ux designer after 12th",
          "online figma course",
          "online ui ux design course free",
          "ux ui design course",
          "best ui ux design course online",
          "free ui ux design course",
          "#uiuxcourse",
          "#figmatutorial",
          "#marketingfundas"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "UI UX Design Course for Beginners in Hindi | Figma Complete Tutorial | #uiuxcourse #figmatutorial",
          "description": "If you want to become UI / UX Expert or Website Designer and Start online earning, then this course is for you. For UI / UX Full Course Watch this full tutorial in Hindi by Marketing Fundas.\nFor Digital Marketing Services or Training or Online Income Click Below Given Link or Call \n\nFor Digital Marketing Services :- https://www.marketingfundas.com/contact-us.html\n\nWhatsApp or Call ( 9354447104 )\n\n #uiuxcourse #figmatutorial #marketingfundas"
        },
        "defaultAudioLanguage": "en-IN"
      },
      "contentDetails": {
        "duration": "PT4H55M48S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "58998",
        "likeCount": "1837",
        "favoriteCount": "0",
        "commentCount": "202"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "Nw26hjnYvnh4sDykCZ7tEftdtDA",
      "id": "fqGFeCezBD0",
      "snippet": {
        "publishedAt": "2024-12-07T15:58:29Z",
        "channelId": "UCkEDhEL-dop44JPkRTgjxxg",
        "title": "UX Design Full Course in Hindi One Short🔥|| UX Design Process || UI UX Design || UI/UX Design",
        "description": "💝Get Certified in UX design = https://www.udemy.com/course/ux-design-full-course\n\n💝Make the most of your time by listening to audiobooks =  https://kukufm.page.link/PZfcpvLAeJThE5p36\n---------------------------------------------------------------------------------------------------------------------------------\nTitle= 🔥UX Design Full Course in Hindi 🔥 UX Design Process || UI UX Design || Digital Product Design || UX\n\nDownload UX Notes = https://sites.google.com/view/tech-world-store/discount-hub?authuser=0\n\nInstagram Master Playlist = ⭐ https://www.youtube.com/playlist?list=PLwUX7M-7vvJBDPfX_ZYKLqTCY7ESDvur5 \n\n❤Hi guys i am Ajit Prasad The Creator Of Tech World ,This is my YouTube channel please subscribe us for more Helpful videos .❤\n\n00:00 - Intro To the Course \n01:03 - Start The Course\n05:07 - What is UI UX\n11:52  - What Is User Interface\n13:25  - UI Elements\n15:52 - UI vs UX  what's the difference\n23:31 - UI UX in Web & App\n29:13 - User Experience\n32:56 - UX design Terms\n39:48 -  UX design Process\n47:27 -User Research\n49:29 - User Persona\n53:04 - Information Architecture\n54:58 - Wireframing & Prototyping \n1:03:36 - Usability testing \n1:07:28 - Other UX terms\n1:13:08 - UX Design Tools\n\n\n\n***************************************************\n⭕CHECK OUT OUR  ✂️\" EDITING MASTER \" PLAYLIST🗂⭕ = https://www.youtube.com/playlist?list=PLwUX7M-7vvJB59cxeAsf8Y_pn9GjUxZys\n\n***************************************************\n♥️SUBSCRIBER US FOR MORE HELPFUL VIDEOS ♥️\n****************************************************\n\nOther Social Link 📦 :\n\n🌈Instagram🌈👉🏻= https://instagram.com/techworld665?igshid=1klnvddtfn5kz\n\n🌈Instagram User Name = @techworld665 \n\nMy YouTube Gear 😉 \n\nhttps://docs.google.com/document/d/1ujZ1EBOUVUxxbIGASxgqc5keJFEdC355LG5fE_KU1Vw/edit?usp=drivesdk\n\n🗃 Your Queries  :\nCore UX Design Tags\nUX Design\nUser Experience\nUX Process\nDesign Thinking\nUser-Centered Design\nUsability\nInformation Architecture\nWireframing\nPrototyping\nUser Research\nInteraction Design\nRelated to Mobile and Web\nUX for Mobile\nUX for Web\nMobile UX Design\nWeb UX Design\nResponsive Design\nCourse-Specific Topics\nUX Terminology\nUX Fundamentals\nUX Best Practices\nUX Concepts\nUser Testing\nAccessibility Design\nSkill Development Tags\nBeginner UX Design\nLearn UX\nUX for Beginners\nUX Career Skills\nUX Problem-Solving\nGeneral Design and Technology\nDigital Design\nProduct Design\nHuman-Computer Interaction\nDesign Process\nTrending and SEO-Friendly Tags\nLearn UX Design Online\nUX Design Basics\nUX Essentials\nUX Masterclass\nUX Design Course 2024\n**************************************************\n Hastags \n#TechWorldbyAjit \n#TechWorld\n\n🛑Disclaimer -\n\nvideo is for educational purpose only.Copyright Disclaimer Under Section 107 of the Copyright Act 1976, allowance is made for \"fair use\" for purposes such as criticism, comment, news reporting, teaching, scholarship, and research. Fair use is a use permitted by copyright statute that might otherwise be infringing. Non-profit, educational or personal use tips the balance in favor of fair use.\n\n**************************************************************\nComments if you have any questions regarding this video and tell me in which topic you want next video  \n\n💕💕💕💕💕💕💕💕💕\n❤✔️ Thanks for watching \n❤✔️ Please don't forget to like our video \n❤✔️ Please don't forget to ' SUBSCRIBE' \n❤✔️ Don't Forget to drop your important comments \n❤✔️ Keep supporting us 🙏\n-------------------------------------\n\n\n \n*****Thank you for watching***** \n\n----stay connected with us------\n-----S-U-B-S-C-R-I-B-E----\n\nTech world Ajit Prasad",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/fqGFeCezBD0/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/fqGFeCezBD0/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/fqGFeCezBD0/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/fqGFeCezBD0/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/fqGFeCezBD0/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Tech World - Ajit Prasad",
        "tags": [
          "ux design",
          "ux design course",
          "ui ux design",
          "ui ux design course",
          "ux designer",
          "learn ux design",
          "ui design",
          "ux course",
          "user experience design",
          "ui ux design full course",
          "ux design tutorial",
          "ux design tutorial for beginners",
          "ux design courses",
          "design course",
          "ux design process",
          "product design",
          "how to become a ux designer",
          "ui ux design tutorial for beginners",
          "ux design guide",
          "ux ui design",
          "google ux design",
          "ux design for beginners",
          "ui/ux design",
          "UX design in hindi",
          "learn ux",
          "ux"
        ],
        "categoryId": "28",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en-IN",
        "localized": {
          "title": "UX Design Full Course in Hindi One Short🔥|| UX Design Process || UI UX Design || UI/UX Design",
          "description": "💝Get Certified in UX design = https://www.udemy.com/course/ux-design-full-course\n\n💝Make the most of your time by listening to audiobooks =  https://kukufm.page.link/PZfcpvLAeJThE5p36\n---------------------------------------------------------------------------------------------------------------------------------\nTitle= 🔥UX Design Full Course in Hindi 🔥 UX Design Process || UI UX Design || Digital Product Design || UX\n\nDownload UX Notes = https://sites.google.com/view/tech-world-store/discount-hub?authuser=0\n\nInstagram Master Playlist = ⭐ https://www.youtube.com/playlist?list=PLwUX7M-7vvJBDPfX_ZYKLqTCY7ESDvur5 \n\n❤Hi guys i am Ajit Prasad The Creator Of Tech World ,This is my YouTube channel please subscribe us for more Helpful videos .❤\n\n00:00 - Intro To the Course \n01:03 - Start The Course\n05:07 - What is UI UX\n11:52  - What Is User Interface\n13:25  - UI Elements\n15:52 - UI vs UX  what's the difference\n23:31 - UI UX in Web & App\n29:13 - User Experience\n32:56 - UX design Terms\n39:48 -  UX design Process\n47:27 -User Research\n49:29 - User Persona\n53:04 - Information Architecture\n54:58 - Wireframing & Prototyping \n1:03:36 - Usability testing \n1:07:28 - Other UX terms\n1:13:08 - UX Design Tools\n\n\n\n***************************************************\n⭕CHECK OUT OUR  ✂️\" EDITING MASTER \" PLAYLIST🗂⭕ = https://www.youtube.com/playlist?list=PLwUX7M-7vvJB59cxeAsf8Y_pn9GjUxZys\n\n***************************************************\n♥️SUBSCRIBER US FOR MORE HELPFUL VIDEOS ♥️\n****************************************************\n\nOther Social Link 📦 :\n\n🌈Instagram🌈👉🏻= https://instagram.com/techworld665?igshid=1klnvddtfn5kz\n\n🌈Instagram User Name = @techworld665 \n\nMy YouTube Gear 😉 \n\nhttps://docs.google.com/document/d/1ujZ1EBOUVUxxbIGASxgqc5keJFEdC355LG5fE_KU1Vw/edit?usp=drivesdk\n\n🗃 Your Queries  :\nCore UX Design Tags\nUX Design\nUser Experience\nUX Process\nDesign Thinking\nUser-Centered Design\nUsability\nInformation Architecture\nWireframing\nPrototyping\nUser Research\nInteraction Design\nRelated to Mobile and Web\nUX for Mobile\nUX for Web\nMobile UX Design\nWeb UX Design\nResponsive Design\nCourse-Specific Topics\nUX Terminology\nUX Fundamentals\nUX Best Practices\nUX Concepts\nUser Testing\nAccessibility Design\nSkill Development Tags\nBeginner UX Design\nLearn UX\nUX for Beginners\nUX Career Skills\nUX Problem-Solving\nGeneral Design and Technology\nDigital Design\nProduct Design\nHuman-Computer Interaction\nDesign Process\nTrending and SEO-Friendly Tags\nLearn UX Design Online\nUX Design Basics\nUX Essentials\nUX Masterclass\nUX Design Course 2024\n**************************************************\n Hastags \n#TechWorldbyAjit \n#TechWorld\n\n🛑Disclaimer -\n\nvideo is for educational purpose only.Copyright Disclaimer Under Section 107 of the Copyright Act 1976, allowance is made for \"fair use\" for purposes such as criticism, comment, news reporting, teaching, scholarship, and research. Fair use is a use permitted by copyright statute that might otherwise be infringing. Non-profit, educational or personal use tips the balance in favor of fair use.\n\n**************************************************************\nComments if you have any questions regarding this video and tell me in which topic you want next video  \n\n💕💕💕💕💕💕💕💕💕\n❤✔️ Thanks for watching \n❤✔️ Please don't forget to like our video \n❤✔️ Please don't forget to ' SUBSCRIBE' \n❤✔️ Don't Forget to drop your important comments \n❤✔️ Keep supporting us 🙏\n-------------------------------------\n\n\n \n*****Thank you for watching***** \n\n----stay connected with us------\n-----S-U-B-S-C-R-I-B-E----\n\nTech world Ajit Prasad"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT1H16M48S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "4158",
        "likeCount": "188",
        "favoriteCount": "0",
        "commentCount": "34"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "17ytOeohSl8Ga3cWG4eDA1Rax7w",
      "id": "truRwcI7-kg",
      "snippet": {
        "publishedAt": "2025-05-06T13:17:00Z",
        "channelId": "UC8RaXfzsNk6e5ASy5nz9wOQ",
        "title": "UI/UX Design Full Course for Beginners 2025 | Lets Uncover",
        "description": "UI/UX Design Full Course for Beginners 2025 | Lets Uncover\n\nFollow Ali Hassan:\nInstagram: https://www.instagram.com/alihassanux\nYouTube: https://youtube.com/@alihassanux  \nLinkedin: http://linkedin.com/in/alihassanux\nFacebook: https://www.facebook.com/AliHassanUX \n\n⭐Buy Hosting and Domain: https://hostinger.com/letsuncover\n10% Discount Code: LETSUNCOVER\nWhatsApp Invoices: 03361176620\n\n⭐ Free Online Earning Courses: https://www.youtube.com/playlist?list=PLddXDOtiaRnGW9C-0CltXCPU4RFBzXcAZ\n\n👉Client Hunting Methodology Course: https://bit.ly/client-hunting \n👉Create RedotPay Account: https://url.hk/i/en/z6qny\n👉Paid Fiverr Course: https://bit.ly/3PwiDZe (1499/rs Only)\n👉Skillshare: https://bit.ly/3PkpVmw\n\n►  Business Email: ➜ Letsuncover@yahoo.com\n►  Website: ➜ https://letsuncover.pk/\n►  Linkedin: ➜ https://pk.linkedin.com/in/sobantariq\n►  Instagram:➜ https://www.instagram.com/theletsuncover/\n►  Twitter:➜ https://twitter.com/Lets_Uncover\n►  Facebook:➜ https://www.facebook.com/letsUncover\n►  Facebook Group:➜ https://www.facebook.com/groups/letsuncover\n\nDISCLAIMER: This video contains affiliate links, which means I receive a small commission on a purchase without additional cost. These commissions help me to create Free Educational Videos on YouTube.\n\n#uxuidesign #letsuncover",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/truRwcI7-kg/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/truRwcI7-kg/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/truRwcI7-kg/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/truRwcI7-kg/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/truRwcI7-kg/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Lets Uncover",
        "tags": [
          "ui ux design course",
          "ui ux design full course",
          "ux design course",
          "ux design",
          "ui ux course",
          "ui design",
          "ui ux design",
          "online ui ux course",
          "ux ui course",
          "best ui ux course",
          "ux design courses",
          "ui ux free course",
          "ux course",
          "ux design tutorial",
          "ux design tutorial for beginners",
          "ux design for beginners",
          "ui ux design tutorial for beginners",
          "free ux course",
          "ui course",
          "free ui course",
          "ux course for beginners",
          "ux designer",
          "ui design course",
          "lets uncover",
          "figma course"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "UI/UX Design Full Course for Beginners 2025 | Lets Uncover",
          "description": "UI/UX Design Full Course for Beginners 2025 | Lets Uncover\n\nFollow Ali Hassan:\nInstagram: https://www.instagram.com/alihassanux\nYouTube: https://youtube.com/@alihassanux  \nLinkedin: http://linkedin.com/in/alihassanux\nFacebook: https://www.facebook.com/AliHassanUX \n\n⭐Buy Hosting and Domain: https://hostinger.com/letsuncover\n10% Discount Code: LETSUNCOVER\nWhatsApp Invoices: 03361176620\n\n⭐ Free Online Earning Courses: https://www.youtube.com/playlist?list=PLddXDOtiaRnGW9C-0CltXCPU4RFBzXcAZ\n\n👉Client Hunting Methodology Course: https://bit.ly/client-hunting \n👉Create RedotPay Account: https://url.hk/i/en/z6qny\n👉Paid Fiverr Course: https://bit.ly/3PwiDZe (1499/rs Only)\n👉Skillshare: https://bit.ly/3PkpVmw\n\n►  Business Email: ➜ Letsuncover@yahoo.com\n►  Website: ➜ https://letsuncover.pk/\n►  Linkedin: ➜ https://pk.linkedin.com/in/sobantariq\n►  Instagram:➜ https://www.instagram.com/theletsuncover/\n►  Twitter:➜ https://twitter.com/Lets_Uncover\n►  Facebook:➜ https://www.facebook.com/letsUncover\n►  Facebook Group:➜ https://www.facebook.com/groups/letsuncover\n\nDISCLAIMER: This video contains affiliate links, which means I receive a small commission on a purchase without additional cost. These commissions help me to create Free Educational Videos on YouTube.\n\n#uxuidesign #letsuncover"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT3H8M15S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "185179",
        "likeCount": "5705",
        "favoriteCount": "0",
        "commentCount": "110"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "-15mCCjo9X80bUi2ar6t6hKHh84",
      "id": "MBblN98-5lg",
      "snippet": {
        "publishedAt": "2025-07-12T09:00:24Z",
        "channelId": "UCCktnahuRFYIBtNnKT5IYyg",
        "title": "UI UX Design Course FREE | UI UX Design Full Course For Beginners (2025) | Intellipaat",
        "description": "Want to become a UI/UX Designer in 2025 but don’t know where to start? This UI/UX Design Full Course for Absolute Beginners by Intellipaat is your all-in-one video to learn the fundamentals, tools, and real-world skills needed to kick-start your career in design! You'll begin with an easy-to-follow UI/UX career roadmap, and then dive into essential design principles like Atomic Design, UI Elements, and what makes good vs bad UI. You'll master color theory using the 60-30-10 rule, understand how to build style guides and design systems, and learn about inclusive design and accessibility including WCAG guidelines and how to create accessibility sheets.\n\nThis course also covers usability evaluation methods, quantitative vs qualitative testing, user load, and explores UX design patterns in detail. Dive deep into powerful UX laws like Fitts’, Hick’s, Jakob’s, and more, followed by a hands-on UX workshop, UI card design practice, and a real-world UX case study. To wrap it up, you'll get insider tips with UI/UX interview questions and answers to help you prepare for job opportunities.\n\nBelow are the topics covered in UI UX Design Full Course (2025)\n00:00:00 - Introduction to UI/UX Design for ABSOLUTE BEGINNERS\n00:02:45 - How to Become a UI/UX Designer  \n00:11:54 - Atomic Design Principles  \n00:26:46 - What are UI Elements?  \n00:39:22 - Groups and Containers  \n00:39:39 - UI Design Principles  \n01:14:15 - Good vs Bad UI Design  \n01:56:51 - Understanding Colours for UI Design  \n02:00:10 - What is the 60-30-10 Rule?  \n02:01:29 - Applying the 60-30-10 Rule in UI Design  \n02:12:39 - What is a Style Guide?  \n02:22:34 - What is a Design System?  \n02:57:45 - What is Inclusive Design?  \n03:07:48 - Inclusive Design Principles  \n03:22:30 - Accessibility Explained (with Example)  \n03:27:52 - Content and Structure in UI/UX  \n03:37:59 - Device Independent Design  \n04:06:04 - Animation, Layout, Media, Visual Design, Research & Testing  \n04:16:56 - WCAG Guidelines  \n04:41:39 - Creating an Accessibility Sheet    \n04:51:14 - What is Usability Evaluation?  \n04:54:49 - Methods of Usability Evaluation  \n05:31:13 - Quantitative vs Qualitative Testing  \n05:37:43 - When to Use Each Testing Method  \n05:47:29 - Understanding User Load  \n06:07:24 - UX Design Patterns (Website Explained)  \n06:20:22 - Why UX Design Patterns are Needed  \n06:47:24 - Examples of UX Design Patterns   \n06:39:24 - Laws of UX  \n06:50:05 - Fitts’ Law  \n06:53:01 - Hick’s Law  \n06:53:29 - Jakob’s Law  \n06:56:04 - Serial Position Effect  \n06:58:07 - Tesler’s Law  \n07:00:52 - Zeigarnik Effect  \n07:03:39 - UX Research Case Study  \n07:32:56 - Brainstorming and Ideation  \n07:35:04 - Brainstorming and Mapping  \n07:35:27 - Ideation and Problem Solving   \n08:14:23 - UX Workshop: Doctor Appointments  \n08:55:42 - UI Workshop: Card Design   \n10:07:07 - UI/UX Designer Interview Questions & Answers  \n\n#uiuxdesigncourse #uiuxcourse #uiuxfullcourse #intellipaat \n\n🔥Register for Intellipaat's State of the Art UI UX Design Course: https://intellipaat.com/ui-ux-course/\n\n➡️ About the Course\nThis UI/UX design course is designed and taught by the top Industry experts along with leading faculty from top IIT’s. The skills you will master in this course are UI/UX designing, identification of appropriate research methods, UI methodologies, Figma, and more. Learn from the best and be the best.\n\n📌 Do subscribe to Intellipaat channel & come across more relevant Tech content: https://goo.gl/hhsGWb\n\n▶️ Intellipaat Achievers Channel: https://www.youtube.com/@intellipaatachievers\n\n📚For more information, please write back to us at sales@intellipaat.com or call us at IND: +91-7022374614 / US : 1-800-216-8930",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/MBblN98-5lg/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/MBblN98-5lg/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/MBblN98-5lg/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/MBblN98-5lg/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/MBblN98-5lg/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Intellipaat",
        "tags": [
          "ui ux design course free",
          "ui ux design full course",
          "ui ux design full course 2025",
          "ui ux design course",
          "complete ui ux design course",
          "best ui ux design course on youtube",
          "ui ux design course for beginners",
          "learn ui ux design from scratch",
          "ui ux course",
          "ui ux design training",
          "ui ux design tutorial",
          "ui ux portfolio",
          "best ui ux design course online",
          "ui ux design",
          "ui ux design tools",
          "ux design course",
          "ui design course",
          "intellipaat"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "UI UX Design Course FREE | UI UX Design Full Course For Beginners (2025) | Intellipaat",
          "description": "Want to become a UI/UX Designer in 2025 but don’t know where to start? This UI/UX Design Full Course for Absolute Beginners by Intellipaat is your all-in-one video to learn the fundamentals, tools, and real-world skills needed to kick-start your career in design! You'll begin with an easy-to-follow UI/UX career roadmap, and then dive into essential design principles like Atomic Design, UI Elements, and what makes good vs bad UI. You'll master color theory using the 60-30-10 rule, understand how to build style guides and design systems, and learn about inclusive design and accessibility including WCAG guidelines and how to create accessibility sheets.\n\nThis course also covers usability evaluation methods, quantitative vs qualitative testing, user load, and explores UX design patterns in detail. Dive deep into powerful UX laws like Fitts’, Hick’s, Jakob’s, and more, followed by a hands-on UX workshop, UI card design practice, and a real-world UX case study. To wrap it up, you'll get insider tips with UI/UX interview questions and answers to help you prepare for job opportunities.\n\nBelow are the topics covered in UI UX Design Full Course (2025)\n00:00:00 - Introduction to UI/UX Design for ABSOLUTE BEGINNERS\n00:02:45 - How to Become a UI/UX Designer  \n00:11:54 - Atomic Design Principles  \n00:26:46 - What are UI Elements?  \n00:39:22 - Groups and Containers  \n00:39:39 - UI Design Principles  \n01:14:15 - Good vs Bad UI Design  \n01:56:51 - Understanding Colours for UI Design  \n02:00:10 - What is the 60-30-10 Rule?  \n02:01:29 - Applying the 60-30-10 Rule in UI Design  \n02:12:39 - What is a Style Guide?  \n02:22:34 - What is a Design System?  \n02:57:45 - What is Inclusive Design?  \n03:07:48 - Inclusive Design Principles  \n03:22:30 - Accessibility Explained (with Example)  \n03:27:52 - Content and Structure in UI/UX  \n03:37:59 - Device Independent Design  \n04:06:04 - Animation, Layout, Media, Visual Design, Research & Testing  \n04:16:56 - WCAG Guidelines  \n04:41:39 - Creating an Accessibility Sheet    \n04:51:14 - What is Usability Evaluation?  \n04:54:49 - Methods of Usability Evaluation  \n05:31:13 - Quantitative vs Qualitative Testing  \n05:37:43 - When to Use Each Testing Method  \n05:47:29 - Understanding User Load  \n06:07:24 - UX Design Patterns (Website Explained)  \n06:20:22 - Why UX Design Patterns are Needed  \n06:47:24 - Examples of UX Design Patterns   \n06:39:24 - Laws of UX  \n06:50:05 - Fitts’ Law  \n06:53:01 - Hick’s Law  \n06:53:29 - Jakob’s Law  \n06:56:04 - Serial Position Effect  \n06:58:07 - Tesler’s Law  \n07:00:52 - Zeigarnik Effect  \n07:03:39 - UX Research Case Study  \n07:32:56 - Brainstorming and Ideation  \n07:35:04 - Brainstorming and Mapping  \n07:35:27 - Ideation and Problem Solving   \n08:14:23 - UX Workshop: Doctor Appointments  \n08:55:42 - UI Workshop: Card Design   \n10:07:07 - UI/UX Designer Interview Questions & Answers  \n\n#uiuxdesigncourse #uiuxcourse #uiuxfullcourse #intellipaat \n\n🔥Register for Intellipaat's State of the Art UI UX Design Course: https://intellipaat.com/ui-ux-course/\n\n➡️ About the Course\nThis UI/UX design course is designed and taught by the top Industry experts along with leading faculty from top IIT’s. The skills you will master in this course are UI/UX designing, identification of appropriate research methods, UI methodologies, Figma, and more. Learn from the best and be the best.\n\n📌 Do subscribe to Intellipaat channel & come across more relevant Tech content: https://goo.gl/hhsGWb\n\n▶️ Intellipaat Achievers Channel: https://www.youtube.com/@intellipaatachievers\n\n📚For more information, please write back to us at sales@intellipaat.com or call us at IND: +91-7022374614 / US : 1-800-216-8930"
        },
        "defaultAudioLanguage": "en-IN"
      },
      "contentDetails": {
        "duration": "PT10H50M52S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": false,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "113202",
        "likeCount": "3287",
        "favoriteCount": "0",
        "commentCount": "77"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "v-xQ412m7aP4hfwjE9J8pc08cSI",
      "id": "WylVZzSsavg",
      "snippet": {
        "publishedAt": "2025-05-03T19:04:00Z",
        "channelId": "UCCktnahuRFYIBtNnKT5IYyg",
        "title": "🔥Complete 11 Hour Free UI/UX Design Course for Beginners | UI UX Design Full Course | Intellipaat",
        "description": "🔥Register for Intellipaat's State of the Art UI UX Design Course: https://intellipaat.com/ui-ux-course/\n\nIn this UI UX Design Course by Intellipaat, you’ll learn UI UX design completely in one shot to become job-ready. This UI UX Design Full Course is an exhaustive resource to help you master key UI UX principles, from understanding design laws to defining a problem statement, ideating solutions, and turning them into actual designs using wireframing. At the start of this course, you’ll explore the demand for UI UX designers, the difference between UI and UX, an introduction to UX, and some fundamental UX laws. Moving forward, you’ll dive into UI design, learning how to start wireframing using Figma, build prototypes, and scale your work into a complete UI UX design project.\n\nThis is the only course you need to master UI UX design, as it takes you from the basics to creating real designs and performing usability testing, with hands-on demonstrations throughout. Start learning now and get ahead in the UI UX design game!\n\n\n#UIUX #Intellipaat #UIUXDesign #FreeUIUXCourse #UIUXForBeginners #LearnUIUX #UXDesign #UIDesign #UIUXCourse #FreeDesignCourse #UIUXTutorial #UIUXDesignTips #LearnDesign #DesignCourse\n\n📖 Below are the topics covered in this '🔥Complete 11-Hour Free UI/UX Design Course for Beginners':\n00:00:00 - Introduction to UI UX Design Full Course For ABSOLUTE BEGINNERS\n00:02:48 - UI UX Design Scope in Future  \n00:12:03 - Difference Between UI And UX  \n00:21:11 - Atomic Design Principles\n00:36:46 - What are UI Elements?\n00:49:22 - Groups and Containers  \n00:49:39 - UI Design Principles\n01:24:15 - Deep Dive: Good vs Bad UI    \n02:06:51 - Understanding Colours for UI Design  \n02:10:10 - What is the 60-30-10 Rule?  \n02:11:29 - How to Apply the 60-30-10 Rule to UI Design\n02:22:39 - What is a Style Guide?  \n02:32:34 - What is a Design System?  \n03:07:45 - What is Inclusive Design?\n03:17:48 - Inclusive Design Principles\n03:32:30 - What is Accessibility? (with Example)  \n03:37:52 - Content and Structure  in UI UX Design\n03:47:59 - Device Independent Design  \n04:16:04 - Animation, Layout, Media, Visual Design, User Research & Testing  \n04:26:56 - WCAG Guidelines \n04:51:39 - Creating an Accessibility Sheet  \n05:01:14 - What is Usability Evaluation?  \n05:04:49 - Methods of Usability Evaluation\n05:41:13 - Quantitative vs Qualitative Usability Testing  \n05:47:43 - When to Conduct Quantitative vs Qualitative Testing?  \n05:57:29 - What is User Load?\n06:17:24 - UX Design Patterns (Website Explained)  \n06:30:22 - Need for UX Design Patterns  \n06:57:24 - Common Examples of UX Design Patterns  \n06:59:24 - Laws of UX  \n07:00:05 - Fitts' Law  \n07:03:01 - Hick's Law  \n07:03:29 - Jakob's Law  \n07:06:04 - Serial Position Effect  \n07:08:07 - Tesler's Law  \n07:10:52 - Zeigarnik Effect\n07:13:39 - User Research Design Case Study  \n07:42:56 - Brainstorming and Ideation  \n07:45:04 - Brainstorming and Mapping  \n07:45:27 - Ideation and Problem Solving  \n08:24:23 - UX Workshop Case Study: Doctor Appointments  \n09:05:42 - UI Workshop Case Study: Card Design  \n10:15:06 - UI UX Designer Interview Questions and Answers  \n\n📌 Do subscribe to Intellipaat channel & come across more relevant Tech content: https://goo.gl/hhsGWb\n\n▶️ Intellipaat Achievers Channel: https://www.youtube.com/@intellipaatachievers\n\n📚For more information, please write back to us at sales@intellipaat.com or call us at IND: +91-7022374614 / US : 1-800-216-8930",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/WylVZzSsavg/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/WylVZzSsavg/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/WylVZzSsavg/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/WylVZzSsavg/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/WylVZzSsavg/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Intellipaat",
        "tags": [
          "ui ux design course",
          "ui ux design full course for beginners",
          "ui ux design full course",
          "ui ux training",
          "ui ux design course free",
          "ui ux design tutorial for beginners",
          "ui ux course",
          "how to create ui design for website",
          "user experience design course",
          "user interface design in figma",
          "ui ux in one shot",
          "figma course",
          "usability testing",
          "ui ux deisng course for beginners",
          "ui ux design complete course",
          "intellipaat",
          "ux ui design",
          "🔥Complete 11 Hour Free UI/UX Design Course for Beginners"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "🔥Complete 11 Hour Free UI/UX Design Course for Beginners | UI UX Design Full Course | Intellipaat",
          "description": "🔥Register for Intellipaat's State of the Art UI UX Design Course: https://intellipaat.com/ui-ux-course/\n\nIn this UI UX Design Course by Intellipaat, you’ll learn UI UX design completely in one shot to become job-ready. This UI UX Design Full Course is an exhaustive resource to help you master key UI UX principles, from understanding design laws to defining a problem statement, ideating solutions, and turning them into actual designs using wireframing. At the start of this course, you’ll explore the demand for UI UX designers, the difference between UI and UX, an introduction to UX, and some fundamental UX laws. Moving forward, you’ll dive into UI design, learning how to start wireframing using Figma, build prototypes, and scale your work into a complete UI UX design project.\n\nThis is the only course you need to master UI UX design, as it takes you from the basics to creating real designs and performing usability testing, with hands-on demonstrations throughout. Start learning now and get ahead in the UI UX design game!\n\n\n#UIUX #Intellipaat #UIUXDesign #FreeUIUXCourse #UIUXForBeginners #LearnUIUX #UXDesign #UIDesign #UIUXCourse #FreeDesignCourse #UIUXTutorial #UIUXDesignTips #LearnDesign #DesignCourse\n\n📖 Below are the topics covered in this '🔥Complete 11-Hour Free UI/UX Design Course for Beginners':\n00:00:00 - Introduction to UI UX Design Full Course For ABSOLUTE BEGINNERS\n00:02:48 - UI UX Design Scope in Future  \n00:12:03 - Difference Between UI And UX  \n00:21:11 - Atomic Design Principles\n00:36:46 - What are UI Elements?\n00:49:22 - Groups and Containers  \n00:49:39 - UI Design Principles\n01:24:15 - Deep Dive: Good vs Bad UI    \n02:06:51 - Understanding Colours for UI Design  \n02:10:10 - What is the 60-30-10 Rule?  \n02:11:29 - How to Apply the 60-30-10 Rule to UI Design\n02:22:39 - What is a Style Guide?  \n02:32:34 - What is a Design System?  \n03:07:45 - What is Inclusive Design?\n03:17:48 - Inclusive Design Principles\n03:32:30 - What is Accessibility? (with Example)  \n03:37:52 - Content and Structure  in UI UX Design\n03:47:59 - Device Independent Design  \n04:16:04 - Animation, Layout, Media, Visual Design, User Research & Testing  \n04:26:56 - WCAG Guidelines \n04:51:39 - Creating an Accessibility Sheet  \n05:01:14 - What is Usability Evaluation?  \n05:04:49 - Methods of Usability Evaluation\n05:41:13 - Quantitative vs Qualitative Usability Testing  \n05:47:43 - When to Conduct Quantitative vs Qualitative Testing?  \n05:57:29 - What is User Load?\n06:17:24 - UX Design Patterns (Website Explained)  \n06:30:22 - Need for UX Design Patterns  \n06:57:24 - Common Examples of UX Design Patterns  \n06:59:24 - Laws of UX  \n07:00:05 - Fitts' Law  \n07:03:01 - Hick's Law  \n07:03:29 - Jakob's Law  \n07:06:04 - Serial Position Effect  \n07:08:07 - Tesler's Law  \n07:10:52 - Zeigarnik Effect\n07:13:39 - User Research Design Case Study  \n07:42:56 - Brainstorming and Ideation  \n07:45:04 - Brainstorming and Mapping  \n07:45:27 - Ideation and Problem Solving  \n08:24:23 - UX Workshop Case Study: Doctor Appointments  \n09:05:42 - UI Workshop Case Study: Card Design  \n10:15:06 - UI UX Designer Interview Questions and Answers  \n\n📌 Do subscribe to Intellipaat channel & come across more relevant Tech content: https://goo.gl/hhsGWb\n\n▶️ Intellipaat Achievers Channel: https://www.youtube.com/@intellipaatachievers\n\n📚For more information, please write back to us at sales@intellipaat.com or call us at IND: +91-7022374614 / US : 1-800-216-8930"
        },
        "defaultAudioLanguage": "en-IN"
      },
      "contentDetails": {
        "duration": "PT10H59M28S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": false,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "101677",
        "likeCount": "2460",
        "favoriteCount": "0",
        "commentCount": "64"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "7UJXbr7wzjrF3Ne4Ty5PkiecIEI",
      "id": "onyB_X3zk6o",
      "snippet": {
        "publishedAt": "2024-01-30T11:29:24Z",
        "channelId": "UCB6ix-6Z_NKgYuBccT7N6uQ",
        "title": "How to Become a UI/UX designer in 2024 | Without Degree | Complete Guide in Hindi, English Captions",
        "description": "This roadmap is a proven one and nobody on the internet will teach you this for free, hope this video will help you understand the process, and you may become a successful UI UX designer in 2024.\n\nGet my UX Design book \"UX Decoded\" : https://saurabhux.com/\n\nFollow me on Instagram : https://www.instagram.com/saurabhux/\nConnect on LinkedIn : https://www.linkedin.com/in/saurabhsainiux/\nFollow on Twitter (X) : https://twitter.com/saurabh_ux\n\n-----------------------------------------------\nResources :\nDesign Basics - https://www.figma.com/resource-library/design-basics/\nWhat is UI design - https://www.figma.com/resource-library/ui-design/\nFigma Best Practices - https://www.figma.com/best-practices/\nBasic Laws of UX design - https://lawsofux.com/\nUX design Articles - https://medium.com/search?q=UX+design+guide  \n\n-----------------------------------------------\n\nRecommended Books -\nThe design of Everyday things - https://amzn.to/3U4WPcs\nChange by design - https://amzn.to/49pcVT1\n\n-----------------------------------------------\n\nTimestamps: \n00:00 Introduction\n01:13 Video overview \n03:08 Requirements \n04:18 Step 1\n06:34 Step 2\n08:00 Step 3\n08:56 Step 4\n14:45 Step 5\n18:32 Step 6\n20:23 Important points\n21:38 Conclusion\n\n----------------------------------------------------\nMy Desk products affiliate links :\n\nDark Wallpapers : https://amzn.to/3TVlMHh\nAcoustic Foams : https://amzn.to/3xg4ZpA\nSpeaker System : https://amzn.to/3TAP3pn\nKeyboard : https://amzn.to/43BPlB0\nGraphic Tablet : https://amzn.to/3PIVm9f\nMacBook Pro 16 inch : https://amzn.to/3VCW5wH\niPad Pro 11 inch : https://amzn.to/4az2rBu\nMonitor : https://amzn.to/4aznEew\nMicrophone : https://amzn.to/3VAQCq0\nBoom arm : https://amzn.to/3xcrdst\nStanding Lamp : https://amzn.to/3vA2NJ9\nRBG light : https://amzn.to/4aepAJF\nTripod : https://amzn.to/3TG3ZT4\nLight : https://amzn.to/3vvVZMy\n\nCamera : https://amzn.to/3xfwnnT\nBest Lens for it : https://amzn.to/3VIR9Xb\n\n--------------------------------------------------------\n\nAll the icons in this video are from - flaticon.com\n\nIgnore (For Seo)\n\nMusic from #Uppbeat (free for Creators!):\nhttps://uppbeat.io/t/simon-folwar/a-creative-mind\nLicense code: 6SZ0KWEEAGDTLFQ3\n\nMusic from #Uppbeat (free for Creators!):\nhttps://uppbeat.io/t/color-parade/luxurious\nLicense code: RGYRHWIOHZW8W4U6\n\nNo copyright infringement intended\n\n--------------------------------------------------------\n\n\nUI UX design\nUI Design\nHow to become a UI/UX designer \nUI UX Roadmap 2024\nComplete Guide to earn online\nHow to become a designer\nWhat is UI UX design\nUI UX in 2024\nUI UX Course in hindi\nUI design course\nHow to learn UI/UX design\nDesigner at Deloitte \nHow I learned Graphics design\nHow to learn Figma\nFigma design\nUI UX design tutorial\nSalary of a UI UX designer",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/onyB_X3zk6o/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/onyB_X3zk6o/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/onyB_X3zk6o/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/onyB_X3zk6o/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/onyB_X3zk6o/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Saurabh Saini",
        "tags": [
          "ui ux design with ai",
          "ui ux design workshop",
          "ui ux design salary",
          "ui ux design work from home",
          "ansh mehra",
          "saptarshi ui ux",
          "how to learn UI design",
          "ui design course",
          "ui ux course",
          "ui ux hindi",
          "ui design india",
          "ui ux",
          "ux design",
          "salary of a ui ux designer",
          "ui ux design 2024",
          "ui ux guide",
          "why learn ui ux design",
          "what is ui ux design",
          "is ui ux easy",
          "ui ux career",
          "ui ux laws",
          "ui design tutorial",
          "how to become a UI designer",
          "UI designer salary",
          "case studies",
          "saurabh saini"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en-IN",
        "localized": {
          "title": "How to Become a UI/UX designer in 2024 | Without Degree | Complete Guide in Hindi, English Captions",
          "description": "This roadmap is a proven one and nobody on the internet will teach you this for free, hope this video will help you understand the process, and you may become a successful UI UX designer in 2024.\n\nGet my UX Design book \"UX Decoded\" : https://saurabhux.com/\n\nFollow me on Instagram : https://www.instagram.com/saurabhux/\nConnect on LinkedIn : https://www.linkedin.com/in/saurabhsainiux/\nFollow on Twitter (X) : https://twitter.com/saurabh_ux\n\n-----------------------------------------------\nResources :\nDesign Basics - https://www.figma.com/resource-library/design-basics/\nWhat is UI design - https://www.figma.com/resource-library/ui-design/\nFigma Best Practices - https://www.figma.com/best-practices/\nBasic Laws of UX design - https://lawsofux.com/\nUX design Articles - https://medium.com/search?q=UX+design+guide  \n\n-----------------------------------------------\n\nRecommended Books -\nThe design of Everyday things - https://amzn.to/3U4WPcs\nChange by design - https://amzn.to/49pcVT1\n\n-----------------------------------------------\n\nTimestamps: \n00:00 Introduction\n01:13 Video overview \n03:08 Requirements \n04:18 Step 1\n06:34 Step 2\n08:00 Step 3\n08:56 Step 4\n14:45 Step 5\n18:32 Step 6\n20:23 Important points\n21:38 Conclusion\n\n----------------------------------------------------\nMy Desk products affiliate links :\n\nDark Wallpapers : https://amzn.to/3TVlMHh\nAcoustic Foams : https://amzn.to/3xg4ZpA\nSpeaker System : https://amzn.to/3TAP3pn\nKeyboard : https://amzn.to/43BPlB0\nGraphic Tablet : https://amzn.to/3PIVm9f\nMacBook Pro 16 inch : https://amzn.to/3VCW5wH\niPad Pro 11 inch : https://amzn.to/4az2rBu\nMonitor : https://amzn.to/4aznEew\nMicrophone : https://amzn.to/3VAQCq0\nBoom arm : https://amzn.to/3xcrdst\nStanding Lamp : https://amzn.to/3vA2NJ9\nRBG light : https://amzn.to/4aepAJF\nTripod : https://amzn.to/3TG3ZT4\nLight : https://amzn.to/3vvVZMy\n\nCamera : https://amzn.to/3xfwnnT\nBest Lens for it : https://amzn.to/3VIR9Xb\n\n--------------------------------------------------------\n\nAll the icons in this video are from - flaticon.com\n\nIgnore (For Seo)\n\nMusic from #Uppbeat (free for Creators!):\nhttps://uppbeat.io/t/simon-folwar/a-creative-mind\nLicense code: 6SZ0KWEEAGDTLFQ3\n\nMusic from #Uppbeat (free for Creators!):\nhttps://uppbeat.io/t/color-parade/luxurious\nLicense code: RGYRHWIOHZW8W4U6\n\nNo copyright infringement intended\n\n--------------------------------------------------------\n\n\nUI UX design\nUI Design\nHow to become a UI/UX designer \nUI UX Roadmap 2024\nComplete Guide to earn online\nHow to become a designer\nWhat is UI UX design\nUI UX in 2024\nUI UX Course in hindi\nUI design course\nHow to learn UI/UX design\nDesigner at Deloitte \nHow I learned Graphics design\nHow to learn Figma\nFigma design\nUI UX design tutorial\nSalary of a UI UX designer"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT22M32S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "true",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "560560",
        "likeCount": "34474",
        "favoriteCount": "0",
        "commentCount": "1513"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "W9rnUUz822MWzTh773Iz-2BuRSY",
      "id": "UjPpvf4TNLI",
      "snippet": {
        "publishedAt": "2021-12-05T12:00:28Z",
        "channelId": "UCnqG4MjEw269T9da8lVM5uw",
        "title": "Figma Tutorial For Beginners in Hindi | figma full course in hindi | ui ux design full course free",
        "description": "Wanna learn Figma live? Join our live workshop on 6/1/24 link - https://www.higrow.xyz/workshop/7dabb34e-fdb8-447b-b5f2-ebbb5e2809dc\n\nIn this video we will learn complete ui design from scratch using figma software which is completely\nfree of cost. We will learn from how to use figma, how to use figma tools, we will also create awesome web and mobile design projects.\nWe will learn everything in this course about UI design in very simple language but if still you are having dought then join our \nWhatsapp group :- https://chat.whatsapp.com/JTW0R1PNtmwK5xZK7JTl5h\n\nDiscord :- https://discord.gg/qJPBdkqJBU\n\nAnd also follow me on *INSTAGRAM* :- https://www.instagram.com/puneet.25_/\n\nI hope you love this video. Do not forget to like this video, subscribe to the channel and also please share this video too!!\n\nDo not forget to join my *DISCORD SERVER* and follow me on *INSTAGRAM*!\n\nTags *ignore it* :-\nComplete figma course,\nfigma course,\nui design,\nui design course,\ncomplete ui designing course,\ncomplete ui design course,\nfigma tutorial,\nui design tutorial,\nprototyping in figma,\ndesigning in figma,\nui designs using figma,\nweb designs using figma,\napp designs using figma,\npen tool figma,\nhow to use pen tool in figma,\nhand tool figma,\ntext tool figma,\nplugins in figma,\nbest plugins in figma,\nshapes tool figma,\nshape tool figma,\nfigma,\nui\n\nfigma tutorial, figma tutorial for beginners, figma tutorial web design, figma tutorial in hindi, figma tutorial for beginners in hindi, figma tutorial in tamil, figma tutorial for beginners in tamil, figma tutorial malayalam, figma tutorial thapa technical, figma tutorial for beginners malayalam, complete figma tutorial in hindi, complete figma tutorial, complete figma course, complete figma, complete figma mega course beginner to expert, figma complete course in hindi, figma complete website, the complete figma ui/ux app design course for beginners\n\n\nfigma full tutorial, figma full tutorial for beginners, figma full tutorial web design, figma full tutorial in hindi, figma tutorial for beginners in hindi, figma tutorial in tamil, figma tutorial for beginners in tamil, figma tutorial malayalam, figma tutorial thapa technical, figma tutorial for beginners malayalam, complete figma tutorial in hindi, complete figma tutorial, complete figma course, complete figma, complete figma mega course beginner to expert, figma complete course in hindi, figma complete website, the complete figma ui/ux app design course for beginners\n\n\n\n\nFigma Tutorial For Beginners in Hindi | figma full course in hindi | ui ux design course free\n\nfigma tutorial for beginners in hindi, figma full course in hindi, complete ui ux design course free \n\n#graphicdesign #figma #uidesign #design #webdesign #appdesign #logodesign #ui #figmatutorial #uidesigntutorial #designing #uidesigning #tutorial",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/UjPpvf4TNLI/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/UjPpvf4TNLI/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/UjPpvf4TNLI/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/UjPpvf4TNLI/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/UjPpvf4TNLI/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "LearnGrow",
        "tags": [
          "complete figma tutorial",
          "complete ui ux design course free",
          "figma",
          "figma basics",
          "figma crash course in hindi",
          "figma design",
          "figma for beginners",
          "figma full course",
          "figma full course in hindi",
          "figma tutorial",
          "figma tutorial app design",
          "figma tutorial for beginners",
          "figma tutorial for beginners in hindi",
          "figma tutorial in hindi",
          "figma ui design",
          "figma web design",
          "learngrow",
          "tutorial",
          "ui design tutorial",
          "ui ux"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "Figma Tutorial For Beginners in Hindi | figma full course in hindi | ui ux design full course free",
          "description": "Wanna learn Figma live? Join our live workshop on 6/1/24 link - https://www.higrow.xyz/workshop/7dabb34e-fdb8-447b-b5f2-ebbb5e2809dc\n\nIn this video we will learn complete ui design from scratch using figma software which is completely\nfree of cost. We will learn from how to use figma, how to use figma tools, we will also create awesome web and mobile design projects.\nWe will learn everything in this course about UI design in very simple language but if still you are having dought then join our \nWhatsapp group :- https://chat.whatsapp.com/JTW0R1PNtmwK5xZK7JTl5h\n\nDiscord :- https://discord.gg/qJPBdkqJBU\n\nAnd also follow me on *INSTAGRAM* :- https://www.instagram.com/puneet.25_/\n\nI hope you love this video. Do not forget to like this video, subscribe to the channel and also please share this video too!!\n\nDo not forget to join my *DISCORD SERVER* and follow me on *INSTAGRAM*!\n\nTags *ignore it* :-\nComplete figma course,\nfigma course,\nui design,\nui design course,\ncomplete ui designing course,\ncomplete ui design course,\nfigma tutorial,\nui design tutorial,\nprototyping in figma,\ndesigning in figma,\nui designs using figma,\nweb designs using figma,\napp designs using figma,\npen tool figma,\nhow to use pen tool in figma,\nhand tool figma,\ntext tool figma,\nplugins in figma,\nbest plugins in figma,\nshapes tool figma,\nshape tool figma,\nfigma,\nui\n\nfigma tutorial, figma tutorial for beginners, figma tutorial web design, figma tutorial in hindi, figma tutorial for beginners in hindi, figma tutorial in tamil, figma tutorial for beginners in tamil, figma tutorial malayalam, figma tutorial thapa technical, figma tutorial for beginners malayalam, complete figma tutorial in hindi, complete figma tutorial, complete figma course, complete figma, complete figma mega course beginner to expert, figma complete course in hindi, figma complete website, the complete figma ui/ux app design course for beginners\n\n\nfigma full tutorial, figma full tutorial for beginners, figma full tutorial web design, figma full tutorial in hindi, figma tutorial for beginners in hindi, figma tutorial in tamil, figma tutorial for beginners in tamil, figma tutorial malayalam, figma tutorial thapa technical, figma tutorial for beginners malayalam, complete figma tutorial in hindi, complete figma tutorial, complete figma course, complete figma, complete figma mega course beginner to expert, figma complete course in hindi, figma complete website, the complete figma ui/ux app design course for beginners\n\n\n\n\nFigma Tutorial For Beginners in Hindi | figma full course in hindi | ui ux design course free\n\nfigma tutorial for beginners in hindi, figma full course in hindi, complete ui ux design course free \n\n#graphicdesign #figma #uidesign #design #webdesign #appdesign #logodesign #ui #figmatutorial #uidesigntutorial #designing #uidesigning #tutorial"
        },
        "defaultAudioLanguage": "en-US"
      },
      "contentDetails": {
        "duration": "PT1H27M50S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "594553",
        "likeCount": "13814",
        "favoriteCount": "0",
        "commentCount": "311"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "17ytOeohSl8Ga3cWG4eDA1Rax7w",
      "id": "truRwcI7-kg",
      "snippet": {
        "publishedAt": "2025-05-06T13:17:00Z",
        "channelId": "UC8RaXfzsNk6e5ASy5nz9wOQ",
        "title": "UI/UX Design Full Course for Beginners 2025 | Lets Uncover",
        "description": "UI/UX Design Full Course for Beginners 2025 | Lets Uncover\n\nFollow Ali Hassan:\nInstagram: https://www.instagram.com/alihassanux\nYouTube: https://youtube.com/@alihassanux  \nLinkedin: http://linkedin.com/in/alihassanux\nFacebook: https://www.facebook.com/AliHassanUX \n\n⭐Buy Hosting and Domain: https://hostinger.com/letsuncover\n10% Discount Code: LETSUNCOVER\nWhatsApp Invoices: 03361176620\n\n⭐ Free Online Earning Courses: https://www.youtube.com/playlist?list=PLddXDOtiaRnGW9C-0CltXCPU4RFBzXcAZ\n\n👉Client Hunting Methodology Course: https://bit.ly/client-hunting \n👉Create RedotPay Account: https://url.hk/i/en/z6qny\n👉Paid Fiverr Course: https://bit.ly/3PwiDZe (1499/rs Only)\n👉Skillshare: https://bit.ly/3PkpVmw\n\n►  Business Email: ➜ Letsuncover@yahoo.com\n►  Website: ➜ https://letsuncover.pk/\n►  Linkedin: ➜ https://pk.linkedin.com/in/sobantariq\n►  Instagram:➜ https://www.instagram.com/theletsuncover/\n►  Twitter:➜ https://twitter.com/Lets_Uncover\n►  Facebook:➜ https://www.facebook.com/letsUncover\n►  Facebook Group:➜ https://www.facebook.com/groups/letsuncover\n\nDISCLAIMER: This video contains affiliate links, which means I receive a small commission on a purchase without additional cost. These commissions help me to create Free Educational Videos on YouTube.\n\n#uxuidesign #letsuncover",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/truRwcI7-kg/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/truRwcI7-kg/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/truRwcI7-kg/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/truRwcI7-kg/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/truRwcI7-kg/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Lets Uncover",
        "tags": [
          "ui ux design course",
          "ui ux design full course",
          "ux design course",
          "ux design",
          "ui ux course",
          "ui design",
          "ui ux design",
          "online ui ux course",
          "ux ui course",
          "best ui ux course",
          "ux design courses",
          "ui ux free course",
          "ux course",
          "ux design tutorial",
          "ux design tutorial for beginners",
          "ux design for beginners",
          "ui ux design tutorial for beginners",
          "free ux course",
          "ui course",
          "free ui course",
          "ux course for beginners",
          "ux designer",
          "ui design course",
          "lets uncover",
          "figma course"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "UI/UX Design Full Course for Beginners 2025 | Lets Uncover",
          "description": "UI/UX Design Full Course for Beginners 2025 | Lets Uncover\n\nFollow Ali Hassan:\nInstagram: https://www.instagram.com/alihassanux\nYouTube: https://youtube.com/@alihassanux  \nLinkedin: http://linkedin.com/in/alihassanux\nFacebook: https://www.facebook.com/AliHassanUX \n\n⭐Buy Hosting and Domain: https://hostinger.com/letsuncover\n10% Discount Code: LETSUNCOVER\nWhatsApp Invoices: 03361176620\n\n⭐ Free Online Earning Courses: https://www.youtube.com/playlist?list=PLddXDOtiaRnGW9C-0CltXCPU4RFBzXcAZ\n\n👉Client Hunting Methodology Course: https://bit.ly/client-hunting \n👉Create RedotPay Account: https://url.hk/i/en/z6qny\n👉Paid Fiverr Course: https://bit.ly/3PwiDZe (1499/rs Only)\n👉Skillshare: https://bit.ly/3PkpVmw\n\n►  Business Email: ➜ Letsuncover@yahoo.com\n►  Website: ➜ https://letsuncover.pk/\n►  Linkedin: ➜ https://pk.linkedin.com/in/sobantariq\n►  Instagram:➜ https://www.instagram.com/theletsuncover/\n►  Twitter:➜ https://twitter.com/Lets_Uncover\n►  Facebook:➜ https://www.facebook.com/letsUncover\n►  Facebook Group:➜ https://www.facebook.com/groups/letsuncover\n\nDISCLAIMER: This video contains affiliate links, which means I receive a small commission on a purchase without additional cost. These commissions help me to create Free Educational Videos on YouTube.\n\n#uxuidesign #letsuncover"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT3H8M15S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "185179",
        "likeCount": "5705",
        "favoriteCount": "0",
        "commentCount": "110"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "7UJXbr7wzjrF3Ne4Ty5PkiecIEI",
      "id": "onyB_X3zk6o",
      "snippet": {
        "publishedAt": "2024-01-30T11:29:24Z",
        "channelId": "UCB6ix-6Z_NKgYuBccT7N6uQ",
        "title": "How to Become a UI/UX designer in 2024 | Without Degree | Complete Guide in Hindi, English Captions",
        "description": "This roadmap is a proven one and nobody on the internet will teach you this for free, hope this video will help you understand the process, and you may become a successful UI UX designer in 2024.\n\nGet my UX Design book \"UX Decoded\" : https://saurabhux.com/\n\nFollow me on Instagram : https://www.instagram.com/saurabhux/\nConnect on LinkedIn : https://www.linkedin.com/in/saurabhsainiux/\nFollow on Twitter (X) : https://twitter.com/saurabh_ux\n\n-----------------------------------------------\nResources :\nDesign Basics - https://www.figma.com/resource-library/design-basics/\nWhat is UI design - https://www.figma.com/resource-library/ui-design/\nFigma Best Practices - https://www.figma.com/best-practices/\nBasic Laws of UX design - https://lawsofux.com/\nUX design Articles - https://medium.com/search?q=UX+design+guide  \n\n-----------------------------------------------\n\nRecommended Books -\nThe design of Everyday things - https://amzn.to/3U4WPcs\nChange by design - https://amzn.to/49pcVT1\n\n-----------------------------------------------\n\nTimestamps: \n00:00 Introduction\n01:13 Video overview \n03:08 Requirements \n04:18 Step 1\n06:34 Step 2\n08:00 Step 3\n08:56 Step 4\n14:45 Step 5\n18:32 Step 6\n20:23 Important points\n21:38 Conclusion\n\n----------------------------------------------------\nMy Desk products affiliate links :\n\nDark Wallpapers : https://amzn.to/3TVlMHh\nAcoustic Foams : https://amzn.to/3xg4ZpA\nSpeaker System : https://amzn.to/3TAP3pn\nKeyboard : https://amzn.to/43BPlB0\nGraphic Tablet : https://amzn.to/3PIVm9f\nMacBook Pro 16 inch : https://amzn.to/3VCW5wH\niPad Pro 11 inch : https://amzn.to/4az2rBu\nMonitor : https://amzn.to/4aznEew\nMicrophone : https://amzn.to/3VAQCq0\nBoom arm : https://amzn.to/3xcrdst\nStanding Lamp : https://amzn.to/3vA2NJ9\nRBG light : https://amzn.to/4aepAJF\nTripod : https://amzn.to/3TG3ZT4\nLight : https://amzn.to/3vvVZMy\n\nCamera : https://amzn.to/3xfwnnT\nBest Lens for it : https://amzn.to/3VIR9Xb\n\n--------------------------------------------------------\n\nAll the icons in this video are from - flaticon.com\n\nIgnore (For Seo)\n\nMusic from #Uppbeat (free for Creators!):\nhttps://uppbeat.io/t/simon-folwar/a-creative-mind\nLicense code: 6SZ0KWEEAGDTLFQ3\n\nMusic from #Uppbeat (free for Creators!):\nhttps://uppbeat.io/t/color-parade/luxurious\nLicense code: RGYRHWIOHZW8W4U6\n\nNo copyright infringement intended\n\n--------------------------------------------------------\n\n\nUI UX design\nUI Design\nHow to become a UI/UX designer \nUI UX Roadmap 2024\nComplete Guide to earn online\nHow to become a designer\nWhat is UI UX design\nUI UX in 2024\nUI UX Course in hindi\nUI design course\nHow to learn UI/UX design\nDesigner at Deloitte \nHow I learned Graphics design\nHow to learn Figma\nFigma design\nUI UX design tutorial\nSalary of a UI UX designer",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/onyB_X3zk6o/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/onyB_X3zk6o/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/onyB_X3zk6o/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/onyB_X3zk6o/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/onyB_X3zk6o/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Saurabh Saini",
        "tags": [
          "ui ux design with ai",
          "ui ux design workshop",
          "ui ux design salary",
          "ui ux design work from home",
          "ansh mehra",
          "saptarshi ui ux",
          "how to learn UI design",
          "ui design course",
          "ui ux course",
          "ui ux hindi",
          "ui design india",
          "ui ux",
          "ux design",
          "salary of a ui ux designer",
          "ui ux design 2024",
          "ui ux guide",
          "why learn ui ux design",
          "what is ui ux design",
          "is ui ux easy",
          "ui ux career",
          "ui ux laws",
          "ui design tutorial",
          "how to become a UI designer",
          "UI designer salary",
          "case studies",
          "saurabh saini"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en-IN",
        "localized": {
          "title": "How to Become a UI/UX designer in 2024 | Without Degree | Complete Guide in Hindi, English Captions",
          "description": "This roadmap is a proven one and nobody on the internet will teach you this for free, hope this video will help you understand the process, and you may become a successful UI UX designer in 2024.\n\nGet my UX Design book \"UX Decoded\" : https://saurabhux.com/\n\nFollow me on Instagram : https://www.instagram.com/saurabhux/\nConnect on LinkedIn : https://www.linkedin.com/in/saurabhsainiux/\nFollow on Twitter (X) : https://twitter.com/saurabh_ux\n\n-----------------------------------------------\nResources :\nDesign Basics - https://www.figma.com/resource-library/design-basics/\nWhat is UI design - https://www.figma.com/resource-library/ui-design/\nFigma Best Practices - https://www.figma.com/best-practices/\nBasic Laws of UX design - https://lawsofux.com/\nUX design Articles - https://medium.com/search?q=UX+design+guide  \n\n-----------------------------------------------\n\nRecommended Books -\nThe design of Everyday things - https://amzn.to/3U4WPcs\nChange by design - https://amzn.to/49pcVT1\n\n-----------------------------------------------\n\nTimestamps: \n00:00 Introduction\n01:13 Video overview \n03:08 Requirements \n04:18 Step 1\n06:34 Step 2\n08:00 Step 3\n08:56 Step 4\n14:45 Step 5\n18:32 Step 6\n20:23 Important points\n21:38 Conclusion\n\n----------------------------------------------------\nMy Desk products affiliate links :\n\nDark Wallpapers : https://amzn.to/3TVlMHh\nAcoustic Foams : https://amzn.to/3xg4ZpA\nSpeaker System : https://amzn.to/3TAP3pn\nKeyboard : https://amzn.to/43BPlB0\nGraphic Tablet : https://amzn.to/3PIVm9f\nMacBook Pro 16 inch : https://amzn.to/3VCW5wH\niPad Pro 11 inch : https://amzn.to/4az2rBu\nMonitor : https://amzn.to/4aznEew\nMicrophone : https://amzn.to/3VAQCq0\nBoom arm : https://amzn.to/3xcrdst\nStanding Lamp : https://amzn.to/3vA2NJ9\nRBG light : https://amzn.to/4aepAJF\nTripod : https://amzn.to/3TG3ZT4\nLight : https://amzn.to/3vvVZMy\n\nCamera : https://amzn.to/3xfwnnT\nBest Lens for it : https://amzn.to/3VIR9Xb\n\n--------------------------------------------------------\n\nAll the icons in this video are from - flaticon.com\n\nIgnore (For Seo)\n\nMusic from #Uppbeat (free for Creators!):\nhttps://uppbeat.io/t/simon-folwar/a-creative-mind\nLicense code: 6SZ0KWEEAGDTLFQ3\n\nMusic from #Uppbeat (free for Creators!):\nhttps://uppbeat.io/t/color-parade/luxurious\nLicense code: RGYRHWIOHZW8W4U6\n\nNo copyright infringement intended\n\n--------------------------------------------------------\n\n\nUI UX design\nUI Design\nHow to become a UI/UX designer \nUI UX Roadmap 2024\nComplete Guide to earn online\nHow to become a designer\nWhat is UI UX design\nUI UX in 2024\nUI UX Course in hindi\nUI design course\nHow to learn UI/UX design\nDesigner at Deloitte \nHow I learned Graphics design\nHow to learn Figma\nFigma design\nUI UX design tutorial\nSalary of a UI UX designer"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT22M32S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "true",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "560560",
        "likeCount": "34474",
        "favoriteCount": "0",
        "commentCount": "1513"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "ZJPtzwTjLD60IlEpzRe5y6cACGs",
      "id": "7DnypQA1SK8",
      "snippet": {
        "publishedAt": "2024-07-16T02:30:03Z",
        "channelId": "UCZbdK5v2VIj7qG6s7y3nDdw",
        "title": "UI UX Design Course for Beginners in Hindi | Figma Complete Tutorial | #uiuxcourse #figmatutorial",
        "description": "If you want to become UI / UX Expert or Website Designer and Start online earning, then this course is for you. For UI / UX Full Course Watch this full tutorial in Hindi by Marketing Fundas.\nFor Digital Marketing Services or Training or Online Income Click Below Given Link or Call \n\nFor Digital Marketing Services :- https://www.marketingfundas.com/contact-us.html\n\nWhatsApp or Call ( 9354447104 )\n\n #uiuxcourse #figmatutorial #marketingfundas",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/7DnypQA1SK8/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/7DnypQA1SK8/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/7DnypQA1SK8/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/7DnypQA1SK8/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/7DnypQA1SK8/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Marketing Fundas",
        "tags": [
          "marketing fundas",
          "UI UX Design Course for Beginners in Hindi",
          "Figma Complete Tutorial",
          "ui ux design full course in hindi",
          "ui/ux design full course figma",
          "figma tutorial for beginners in hindi",
          "ui ux figma full course in hindi",
          "ui ux design figma full course in hindi",
          "how to become ui ux designer after 12th",
          "online figma course",
          "online ui ux design course free",
          "ux ui design course",
          "best ui ux design course online",
          "free ui ux design course",
          "#uiuxcourse",
          "#figmatutorial",
          "#marketingfundas"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "UI UX Design Course for Beginners in Hindi | Figma Complete Tutorial | #uiuxcourse #figmatutorial",
          "description": "If you want to become UI / UX Expert or Website Designer and Start online earning, then this course is for you. For UI / UX Full Course Watch this full tutorial in Hindi by Marketing Fundas.\nFor Digital Marketing Services or Training or Online Income Click Below Given Link or Call \n\nFor Digital Marketing Services :- https://www.marketingfundas.com/contact-us.html\n\nWhatsApp or Call ( 9354447104 )\n\n #uiuxcourse #figmatutorial #marketingfundas"
        },
        "defaultAudioLanguage": "en-IN"
      },
      "contentDetails": {
        "duration": "PT4H55M48S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "58998",
        "likeCount": "1837",
        "favoriteCount": "0",
        "commentCount": "202"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "nRMu5ywWW1eBUAe05kcpGia0QU0",
      "id": "2icljqpaddk",
      "snippet": {
        "publishedAt": "2025-09-24T20:32:37Z",
        "channelId": "UCCktnahuRFYIBtNnKT5IYyg",
        "title": "UI UX Design Full Course (2025) | Intellipaat",
        "description": "This UI/UX Design Course for Beginners by Intellipaat is a complete guide for aspiring designers who want to build a successful career in user interface and user experience design. The course starts with a roadmap for UI/UX designers, followed by a detailed understanding of atomic design principles, UI elements, and essential design principles that distinguish good interfaces from bad ones. You’ll learn hands-on techniques for creating wireframes, designing UI fidelities, and applying advanced design concepts using Figma components, variants, icons, plugins, and animations.\n\nThe course also dives into UX design patterns, highlighting their importance, common examples, and the key differences between UX and UI patterns. Through case studies, research, and ideation exercises, you’ll learn problem-solving techniques and usability evaluation methods, including moderated, unmoderated, remote, and in-person testing. Quantitative and qualitative testing, understanding user load, and real-world UI workshops help you gain practical insights. The course concludes with portfolio-building strategies and UI/UX designer interview questions to prepare you for job opportunities. By the end, you’ll have the knowledge, skills, and confidence to create engaging, user-friendly digital experiences in 2025.\n\nBelow are the topics covered in UI UX Design Full Course (2025)\n00:00:00 – Introduction to UI UX Design Course For Beginners\n00:01:34 – UI/UX Designer Roadmap  \n00:10:09 – Atomic Design Principles  \n00:27:42 – UI Elements  \n01:12:06 – UI Design Principles  \n01:14:16 – Good vs Bad UI  \n01:19:32 – Wireframes & UI Fidelities (Hands-On: Auto Layout)  \n01:45:00 – Advanced UI Design Concepts  \n02:35:15 – Components in Figma  \n03:13:49 – Hands-On: Variants, Doctor Appointment App, Icons, Plugins, Animation  \n05:05:27 – Introduction to UX Design Patterns  \n05:31:58 – Need for UX Design Patterns  \n05:41:39 – UX vs UI Patterns  \n05:42:12 – Common UX Pattern Examples  \n05:47:32 – Laws of UX  \n06:01:51 – UX Case Study: Behance Research & Survey  \n06:31:15 – Ideation & Problem Solving  \n07:15:32 – What is Usability Evaluation?  \n07:21:26 – Methods of Usability Evaluation  \n07:30:04 – Moderated vs Unmoderated Testing  \n07:34:14 – Remote vs In-Person Testing  \n07:38:37 – Explorative vs Assessment vs Comparative Testing  \n07:45:58 – User Testing Methods  \n07:58:21 – Quantitative vs Qualitative Testing  \n08:03:48 – When to Use Quantitative vs Qualitative  \n08:14:35 – Understanding User Load  \n08:33:32 – Case Study Discussion  \n09:28:20 – UI Workshop Case Study  \n10:37:47 – Portfolio Review & Tips  \n11:38:20 – UI/UX Designer Interview Questions & Answers\n\n#uiuxdesigncourse #uiuxdesignfullcourse #uiuxdesign #uiuxcourse #intellipaat\n\n🔥Register for Intellipaat's State of the Art UI UX Design Course: https://intellipaat.com/ui-ux-course/\n\n➡️ About the Course\nThis UI/UX design course is designed and taught by the top Industry experts along with leading faculty from top IIT’s. The skills you will master in this course are UI/UX designing, identification of appropriate research methods, UI methodologies, Figma, and more. Learn from the best and be the best.\n\n📌 Do subscribe to Intellipaat channel & come across more relevant Tech content: https://goo.gl/hhsGWb\n\n▶️ Intellipaat Achievers Channel: https://www.youtube.com/@intellipaatachievers\n\n📚For more information, please write back to us at sales@intellipaat.com or call us at IND: +91-7022374614 / US : 1-800-216-8930",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/2icljqpaddk/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/2icljqpaddk/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/2icljqpaddk/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/2icljqpaddk/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/2icljqpaddk/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Intellipaat",
        "tags": [
          "ui ux design full course",
          "ui ux design full course 2025",
          "ui ux design course",
          "ui ux design training",
          "ui ux design course for beginners",
          "ui ux design complete course",
          "ui ux design tutorial for beginners",
          "ui ux course",
          "ui ux course for beginners",
          "ux design tutorial",
          "ui ux design tutorial",
          "figma for ui ux design",
          "user interface and user experience design",
          "ui ux design",
          "best ui ux design course online",
          "intellipaat",
          "intellipaat ui ux course",
          "ui ux design course free",
          "figma for ui ux"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "UI UX Design Full Course (2025) | Intellipaat",
          "description": "This UI/UX Design Course for Beginners by Intellipaat is a complete guide for aspiring designers who want to build a successful career in user interface and user experience design. The course starts with a roadmap for UI/UX designers, followed by a detailed understanding of atomic design principles, UI elements, and essential design principles that distinguish good interfaces from bad ones. You’ll learn hands-on techniques for creating wireframes, designing UI fidelities, and applying advanced design concepts using Figma components, variants, icons, plugins, and animations.\n\nThe course also dives into UX design patterns, highlighting their importance, common examples, and the key differences between UX and UI patterns. Through case studies, research, and ideation exercises, you’ll learn problem-solving techniques and usability evaluation methods, including moderated, unmoderated, remote, and in-person testing. Quantitative and qualitative testing, understanding user load, and real-world UI workshops help you gain practical insights. The course concludes with portfolio-building strategies and UI/UX designer interview questions to prepare you for job opportunities. By the end, you’ll have the knowledge, skills, and confidence to create engaging, user-friendly digital experiences in 2025.\n\nBelow are the topics covered in UI UX Design Full Course (2025)\n00:00:00 – Introduction to UI UX Design Course For Beginners\n00:01:34 – UI/UX Designer Roadmap  \n00:10:09 – Atomic Design Principles  \n00:27:42 – UI Elements  \n01:12:06 – UI Design Principles  \n01:14:16 – Good vs Bad UI  \n01:19:32 – Wireframes & UI Fidelities (Hands-On: Auto Layout)  \n01:45:00 – Advanced UI Design Concepts  \n02:35:15 – Components in Figma  \n03:13:49 – Hands-On: Variants, Doctor Appointment App, Icons, Plugins, Animation  \n05:05:27 – Introduction to UX Design Patterns  \n05:31:58 – Need for UX Design Patterns  \n05:41:39 – UX vs UI Patterns  \n05:42:12 – Common UX Pattern Examples  \n05:47:32 – Laws of UX  \n06:01:51 – UX Case Study: Behance Research & Survey  \n06:31:15 – Ideation & Problem Solving  \n07:15:32 – What is Usability Evaluation?  \n07:21:26 – Methods of Usability Evaluation  \n07:30:04 – Moderated vs Unmoderated Testing  \n07:34:14 – Remote vs In-Person Testing  \n07:38:37 – Explorative vs Assessment vs Comparative Testing  \n07:45:58 – User Testing Methods  \n07:58:21 – Quantitative vs Qualitative Testing  \n08:03:48 – When to Use Quantitative vs Qualitative  \n08:14:35 – Understanding User Load  \n08:33:32 – Case Study Discussion  \n09:28:20 – UI Workshop Case Study  \n10:37:47 – Portfolio Review & Tips  \n11:38:20 – UI/UX Designer Interview Questions & Answers\n\n#uiuxdesigncourse #uiuxdesignfullcourse #uiuxdesign #uiuxcourse #intellipaat\n\n🔥Register for Intellipaat's State of the Art UI UX Design Course: https://intellipaat.com/ui-ux-course/\n\n➡️ About the Course\nThis UI/UX design course is designed and taught by the top Industry experts along with leading faculty from top IIT’s. The skills you will master in this course are UI/UX designing, identification of appropriate research methods, UI methodologies, Figma, and more. Learn from the best and be the best.\n\n📌 Do subscribe to Intellipaat channel & come across more relevant Tech content: https://goo.gl/hhsGWb\n\n▶️ Intellipaat Achievers Channel: https://www.youtube.com/@intellipaatachievers\n\n📚For more information, please write back to us at sales@intellipaat.com or call us at IND: +91-7022374614 / US : 1-800-216-8930"
        },
        "defaultAudioLanguage": "en-IN"
      },
      "contentDetails": {
        "duration": "PT11H54M56S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": false,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "11406",
        "likeCount": "262",
        "favoriteCount": "0",
        "commentCount": "6"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "-15mCCjo9X80bUi2ar6t6hKHh84",
      "id": "MBblN98-5lg",
      "snippet": {
        "publishedAt": "2025-07-12T09:00:24Z",
        "channelId": "UCCktnahuRFYIBtNnKT5IYyg",
        "title": "UI UX Design Course FREE | UI UX Design Full Course For Beginners (2025) | Intellipaat",
        "description": "Want to become a UI/UX Designer in 2025 but don’t know where to start? This UI/UX Design Full Course for Absolute Beginners by Intellipaat is your all-in-one video to learn the fundamentals, tools, and real-world skills needed to kick-start your career in design! You'll begin with an easy-to-follow UI/UX career roadmap, and then dive into essential design principles like Atomic Design, UI Elements, and what makes good vs bad UI. You'll master color theory using the 60-30-10 rule, understand how to build style guides and design systems, and learn about inclusive design and accessibility including WCAG guidelines and how to create accessibility sheets.\n\nThis course also covers usability evaluation methods, quantitative vs qualitative testing, user load, and explores UX design patterns in detail. Dive deep into powerful UX laws like Fitts’, Hick’s, Jakob’s, and more, followed by a hands-on UX workshop, UI card design practice, and a real-world UX case study. To wrap it up, you'll get insider tips with UI/UX interview questions and answers to help you prepare for job opportunities.\n\nBelow are the topics covered in UI UX Design Full Course (2025)\n00:00:00 - Introduction to UI/UX Design for ABSOLUTE BEGINNERS\n00:02:45 - How to Become a UI/UX Designer  \n00:11:54 - Atomic Design Principles  \n00:26:46 - What are UI Elements?  \n00:39:22 - Groups and Containers  \n00:39:39 - UI Design Principles  \n01:14:15 - Good vs Bad UI Design  \n01:56:51 - Understanding Colours for UI Design  \n02:00:10 - What is the 60-30-10 Rule?  \n02:01:29 - Applying the 60-30-10 Rule in UI Design  \n02:12:39 - What is a Style Guide?  \n02:22:34 - What is a Design System?  \n02:57:45 - What is Inclusive Design?  \n03:07:48 - Inclusive Design Principles  \n03:22:30 - Accessibility Explained (with Example)  \n03:27:52 - Content and Structure in UI/UX  \n03:37:59 - Device Independent Design  \n04:06:04 - Animation, Layout, Media, Visual Design, Research & Testing  \n04:16:56 - WCAG Guidelines  \n04:41:39 - Creating an Accessibility Sheet    \n04:51:14 - What is Usability Evaluation?  \n04:54:49 - Methods of Usability Evaluation  \n05:31:13 - Quantitative vs Qualitative Testing  \n05:37:43 - When to Use Each Testing Method  \n05:47:29 - Understanding User Load  \n06:07:24 - UX Design Patterns (Website Explained)  \n06:20:22 - Why UX Design Patterns are Needed  \n06:47:24 - Examples of UX Design Patterns   \n06:39:24 - Laws of UX  \n06:50:05 - Fitts’ Law  \n06:53:01 - Hick’s Law  \n06:53:29 - Jakob’s Law  \n06:56:04 - Serial Position Effect  \n06:58:07 - Tesler’s Law  \n07:00:52 - Zeigarnik Effect  \n07:03:39 - UX Research Case Study  \n07:32:56 - Brainstorming and Ideation  \n07:35:04 - Brainstorming and Mapping  \n07:35:27 - Ideation and Problem Solving   \n08:14:23 - UX Workshop: Doctor Appointments  \n08:55:42 - UI Workshop: Card Design   \n10:07:07 - UI/UX Designer Interview Questions & Answers  \n\n#uiuxdesigncourse #uiuxcourse #uiuxfullcourse #intellipaat \n\n🔥Register for Intellipaat's State of the Art UI UX Design Course: https://intellipaat.com/ui-ux-course/\n\n➡️ About the Course\nThis UI/UX design course is designed and taught by the top Industry experts along with leading faculty from top IIT’s. The skills you will master in this course are UI/UX designing, identification of appropriate research methods, UI methodologies, Figma, and more. Learn from the best and be the best.\n\n📌 Do subscribe to Intellipaat channel & come across more relevant Tech content: https://goo.gl/hhsGWb\n\n▶️ Intellipaat Achievers Channel: https://www.youtube.com/@intellipaatachievers\n\n📚For more information, please write back to us at sales@intellipaat.com or call us at IND: +91-7022374614 / US : 1-800-216-8930",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/MBblN98-5lg/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/MBblN98-5lg/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/MBblN98-5lg/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/MBblN98-5lg/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/MBblN98-5lg/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Intellipaat",
        "tags": [
          "ui ux design course free",
          "ui ux design full course",
          "ui ux design full course 2025",
          "ui ux design course",
          "complete ui ux design course",
          "best ui ux design course on youtube",
          "ui ux design course for beginners",
          "learn ui ux design from scratch",
          "ui ux course",
          "ui ux design training",
          "ui ux design tutorial",
          "ui ux portfolio",
          "best ui ux design course online",
          "ui ux design",
          "ui ux design tools",
          "ux design course",
          "ui design course",
          "intellipaat"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "UI UX Design Course FREE | UI UX Design Full Course For Beginners (2025) | Intellipaat",
          "description": "Want to become a UI/UX Designer in 2025 but don’t know where to start? This UI/UX Design Full Course for Absolute Beginners by Intellipaat is your all-in-one video to learn the fundamentals, tools, and real-world skills needed to kick-start your career in design! You'll begin with an easy-to-follow UI/UX career roadmap, and then dive into essential design principles like Atomic Design, UI Elements, and what makes good vs bad UI. You'll master color theory using the 60-30-10 rule, understand how to build style guides and design systems, and learn about inclusive design and accessibility including WCAG guidelines and how to create accessibility sheets.\n\nThis course also covers usability evaluation methods, quantitative vs qualitative testing, user load, and explores UX design patterns in detail. Dive deep into powerful UX laws like Fitts’, Hick’s, Jakob’s, and more, followed by a hands-on UX workshop, UI card design practice, and a real-world UX case study. To wrap it up, you'll get insider tips with UI/UX interview questions and answers to help you prepare for job opportunities.\n\nBelow are the topics covered in UI UX Design Full Course (2025)\n00:00:00 - Introduction to UI/UX Design for ABSOLUTE BEGINNERS\n00:02:45 - How to Become a UI/UX Designer  \n00:11:54 - Atomic Design Principles  \n00:26:46 - What are UI Elements?  \n00:39:22 - Groups and Containers  \n00:39:39 - UI Design Principles  \n01:14:15 - Good vs Bad UI Design  \n01:56:51 - Understanding Colours for UI Design  \n02:00:10 - What is the 60-30-10 Rule?  \n02:01:29 - Applying the 60-30-10 Rule in UI Design  \n02:12:39 - What is a Style Guide?  \n02:22:34 - What is a Design System?  \n02:57:45 - What is Inclusive Design?  \n03:07:48 - Inclusive Design Principles  \n03:22:30 - Accessibility Explained (with Example)  \n03:27:52 - Content and Structure in UI/UX  \n03:37:59 - Device Independent Design  \n04:06:04 - Animation, Layout, Media, Visual Design, Research & Testing  \n04:16:56 - WCAG Guidelines  \n04:41:39 - Creating an Accessibility Sheet    \n04:51:14 - What is Usability Evaluation?  \n04:54:49 - Methods of Usability Evaluation  \n05:31:13 - Quantitative vs Qualitative Testing  \n05:37:43 - When to Use Each Testing Method  \n05:47:29 - Understanding User Load  \n06:07:24 - UX Design Patterns (Website Explained)  \n06:20:22 - Why UX Design Patterns are Needed  \n06:47:24 - Examples of UX Design Patterns   \n06:39:24 - Laws of UX  \n06:50:05 - Fitts’ Law  \n06:53:01 - Hick’s Law  \n06:53:29 - Jakob’s Law  \n06:56:04 - Serial Position Effect  \n06:58:07 - Tesler’s Law  \n07:00:52 - Zeigarnik Effect  \n07:03:39 - UX Research Case Study  \n07:32:56 - Brainstorming and Ideation  \n07:35:04 - Brainstorming and Mapping  \n07:35:27 - Ideation and Problem Solving   \n08:14:23 - UX Workshop: Doctor Appointments  \n08:55:42 - UI Workshop: Card Design   \n10:07:07 - UI/UX Designer Interview Questions & Answers  \n\n#uiuxdesigncourse #uiuxcourse #uiuxfullcourse #intellipaat \n\n🔥Register for Intellipaat's State of the Art UI UX Design Course: https://intellipaat.com/ui-ux-course/\n\n➡️ About the Course\nThis UI/UX design course is designed and taught by the top Industry experts along with leading faculty from top IIT’s. The skills you will master in this course are UI/UX designing, identification of appropriate research methods, UI methodologies, Figma, and more. Learn from the best and be the best.\n\n📌 Do subscribe to Intellipaat channel & come across more relevant Tech content: https://goo.gl/hhsGWb\n\n▶️ Intellipaat Achievers Channel: https://www.youtube.com/@intellipaatachievers\n\n📚For more information, please write back to us at sales@intellipaat.com or call us at IND: +91-7022374614 / US : 1-800-216-8930"
        },
        "defaultAudioLanguage": "en-IN"
      },
      "contentDetails": {
        "duration": "PT10H50M52S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": false,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "113202",
        "likeCount": "3287",
        "favoriteCount": "0",
        "commentCount": "77"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "17ytOeohSl8Ga3cWG4eDA1Rax7w",
      "id": "truRwcI7-kg",
      "snippet": {
        "publishedAt": "2025-05-06T13:17:00Z",
        "channelId": "UC8RaXfzsNk6e5ASy5nz9wOQ",
        "title": "UI/UX Design Full Course for Beginners 2025 | Lets Uncover",
        "description": "UI/UX Design Full Course for Beginners 2025 | Lets Uncover\n\nFollow Ali Hassan:\nInstagram: https://www.instagram.com/alihassanux\nYouTube: https://youtube.com/@alihassanux  \nLinkedin: http://linkedin.com/in/alihassanux\nFacebook: https://www.facebook.com/AliHassanUX \n\n⭐Buy Hosting and Domain: https://hostinger.com/letsuncover\n10% Discount Code: LETSUNCOVER\nWhatsApp Invoices: 03361176620\n\n⭐ Free Online Earning Courses: https://www.youtube.com/playlist?list=PLddXDOtiaRnGW9C-0CltXCPU4RFBzXcAZ\n\n👉Client Hunting Methodology Course: https://bit.ly/client-hunting \n👉Create RedotPay Account: https://url.hk/i/en/z6qny\n👉Paid Fiverr Course: https://bit.ly/3PwiDZe (1499/rs Only)\n👉Skillshare: https://bit.ly/3PkpVmw\n\n►  Business Email: ➜ Letsuncover@yahoo.com\n►  Website: ➜ https://letsuncover.pk/\n►  Linkedin: ➜ https://pk.linkedin.com/in/sobantariq\n►  Instagram:➜ https://www.instagram.com/theletsuncover/\n►  Twitter:➜ https://twitter.com/Lets_Uncover\n►  Facebook:➜ https://www.facebook.com/letsUncover\n►  Facebook Group:➜ https://www.facebook.com/groups/letsuncover\n\nDISCLAIMER: This video contains affiliate links, which means I receive a small commission on a purchase without additional cost. These commissions help me to create Free Educational Videos on YouTube.\n\n#uxuidesign #letsuncover",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/truRwcI7-kg/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/truRwcI7-kg/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/truRwcI7-kg/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/truRwcI7-kg/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/truRwcI7-kg/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Lets Uncover",
        "tags": [
          "ui ux design course",
          "ui ux design full course",
          "ux design course",
          "ux design",
          "ui ux course",
          "ui design",
          "ui ux design",
          "online ui ux course",
          "ux ui course",
          "best ui ux course",
          "ux design courses",
          "ui ux free course",
          "ux course",
          "ux design tutorial",
          "ux design tutorial for beginners",
          "ux design for beginners",
          "ui ux design tutorial for beginners",
          "free ux course",
          "ui course",
          "free ui course",
          "ux course for beginners",
          "ux designer",
          "ui design course",
          "lets uncover",
          "figma course"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "UI/UX Design Full Course for Beginners 2025 | Lets Uncover",
          "description": "UI/UX Design Full Course for Beginners 2025 | Lets Uncover\n\nFollow Ali Hassan:\nInstagram: https://www.instagram.com/alihassanux\nYouTube: https://youtube.com/@alihassanux  \nLinkedin: http://linkedin.com/in/alihassanux\nFacebook: https://www.facebook.com/AliHassanUX \n\n⭐Buy Hosting and Domain: https://hostinger.com/letsuncover\n10% Discount Code: LETSUNCOVER\nWhatsApp Invoices: 03361176620\n\n⭐ Free Online Earning Courses: https://www.youtube.com/playlist?list=PLddXDOtiaRnGW9C-0CltXCPU4RFBzXcAZ\n\n👉Client Hunting Methodology Course: https://bit.ly/client-hunting \n👉Create RedotPay Account: https://url.hk/i/en/z6qny\n👉Paid Fiverr Course: https://bit.ly/3PwiDZe (1499/rs Only)\n👉Skillshare: https://bit.ly/3PkpVmw\n\n►  Business Email: ➜ Letsuncover@yahoo.com\n►  Website: ➜ https://letsuncover.pk/\n►  Linkedin: ➜ https://pk.linkedin.com/in/sobantariq\n►  Instagram:➜ https://www.instagram.com/theletsuncover/\n►  Twitter:➜ https://twitter.com/Lets_Uncover\n►  Facebook:➜ https://www.facebook.com/letsUncover\n►  Facebook Group:➜ https://www.facebook.com/groups/letsuncover\n\nDISCLAIMER: This video contains affiliate links, which means I receive a small commission on a purchase without additional cost. These commissions help me to create Free Educational Videos on YouTube.\n\n#uxuidesign #letsuncover"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT3H8M15S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "185179",
        "likeCount": "5705",
        "favoriteCount": "0",
        "commentCount": "110"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "-15mCCjo9X80bUi2ar6t6hKHh84",
      "id": "MBblN98-5lg",
      "snippet": {
        "publishedAt": "2025-07-12T09:00:24Z",
        "channelId": "UCCktnahuRFYIBtNnKT5IYyg",
        "title": "UI UX Design Course FREE | UI UX Design Full Course For Beginners (2025) | Intellipaat",
        "description": "Want to become a UI/UX Designer in 2025 but don’t know where to start? This UI/UX Design Full Course for Absolute Beginners by Intellipaat is your all-in-one video to learn the fundamentals, tools, and real-world skills needed to kick-start your career in design! You'll begin with an easy-to-follow UI/UX career roadmap, and then dive into essential design principles like Atomic Design, UI Elements, and what makes good vs bad UI. You'll master color theory using the 60-30-10 rule, understand how to build style guides and design systems, and learn about inclusive design and accessibility including WCAG guidelines and how to create accessibility sheets.\n\nThis course also covers usability evaluation methods, quantitative vs qualitative testing, user load, and explores UX design patterns in detail. Dive deep into powerful UX laws like Fitts’, Hick’s, Jakob’s, and more, followed by a hands-on UX workshop, UI card design practice, and a real-world UX case study. To wrap it up, you'll get insider tips with UI/UX interview questions and answers to help you prepare for job opportunities.\n\nBelow are the topics covered in UI UX Design Full Course (2025)\n00:00:00 - Introduction to UI/UX Design for ABSOLUTE BEGINNERS\n00:02:45 - How to Become a UI/UX Designer  \n00:11:54 - Atomic Design Principles  \n00:26:46 - What are UI Elements?  \n00:39:22 - Groups and Containers  \n00:39:39 - UI Design Principles  \n01:14:15 - Good vs Bad UI Design  \n01:56:51 - Understanding Colours for UI Design  \n02:00:10 - What is the 60-30-10 Rule?  \n02:01:29 - Applying the 60-30-10 Rule in UI Design  \n02:12:39 - What is a Style Guide?  \n02:22:34 - What is a Design System?  \n02:57:45 - What is Inclusive Design?  \n03:07:48 - Inclusive Design Principles  \n03:22:30 - Accessibility Explained (with Example)  \n03:27:52 - Content and Structure in UI/UX  \n03:37:59 - Device Independent Design  \n04:06:04 - Animation, Layout, Media, Visual Design, Research & Testing  \n04:16:56 - WCAG Guidelines  \n04:41:39 - Creating an Accessibility Sheet    \n04:51:14 - What is Usability Evaluation?  \n04:54:49 - Methods of Usability Evaluation  \n05:31:13 - Quantitative vs Qualitative Testing  \n05:37:43 - When to Use Each Testing Method  \n05:47:29 - Understanding User Load  \n06:07:24 - UX Design Patterns (Website Explained)  \n06:20:22 - Why UX Design Patterns are Needed  \n06:47:24 - Examples of UX Design Patterns   \n06:39:24 - Laws of UX  \n06:50:05 - Fitts’ Law  \n06:53:01 - Hick’s Law  \n06:53:29 - Jakob’s Law  \n06:56:04 - Serial Position Effect  \n06:58:07 - Tesler’s Law  \n07:00:52 - Zeigarnik Effect  \n07:03:39 - UX Research Case Study  \n07:32:56 - Brainstorming and Ideation  \n07:35:04 - Brainstorming and Mapping  \n07:35:27 - Ideation and Problem Solving   \n08:14:23 - UX Workshop: Doctor Appointments  \n08:55:42 - UI Workshop: Card Design   \n10:07:07 - UI/UX Designer Interview Questions & Answers  \n\n#uiuxdesigncourse #uiuxcourse #uiuxfullcourse #intellipaat \n\n🔥Register for Intellipaat's State of the Art UI UX Design Course: https://intellipaat.com/ui-ux-course/\n\n➡️ About the Course\nThis UI/UX design course is designed and taught by the top Industry experts along with leading faculty from top IIT’s. The skills you will master in this course are UI/UX designing, identification of appropriate research methods, UI methodologies, Figma, and more. Learn from the best and be the best.\n\n📌 Do subscribe to Intellipaat channel & come across more relevant Tech content: https://goo.gl/hhsGWb\n\n▶️ Intellipaat Achievers Channel: https://www.youtube.com/@intellipaatachievers\n\n📚For more information, please write back to us at sales@intellipaat.com or call us at IND: +91-7022374614 / US : 1-800-216-8930",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/MBblN98-5lg/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/MBblN98-5lg/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/MBblN98-5lg/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/MBblN98-5lg/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/MBblN98-5lg/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Intellipaat",
        "tags": [
          "ui ux design course free",
          "ui ux design full course",
          "ui ux design full course 2025",
          "ui ux design course",
          "complete ui ux design course",
          "best ui ux design course on youtube",
          "ui ux design course for beginners",
          "learn ui ux design from scratch",
          "ui ux course",
          "ui ux design training",
          "ui ux design tutorial",
          "ui ux portfolio",
          "best ui ux design course online",
          "ui ux design",
          "ui ux design tools",
          "ux design course",
          "ui design course",
          "intellipaat"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "UI UX Design Course FREE | UI UX Design Full Course For Beginners (2025) | Intellipaat",
          "description": "Want to become a UI/UX Designer in 2025 but don’t know where to start? This UI/UX Design Full Course for Absolute Beginners by Intellipaat is your all-in-one video to learn the fundamentals, tools, and real-world skills needed to kick-start your career in design! You'll begin with an easy-to-follow UI/UX career roadmap, and then dive into essential design principles like Atomic Design, UI Elements, and what makes good vs bad UI. You'll master color theory using the 60-30-10 rule, understand how to build style guides and design systems, and learn about inclusive design and accessibility including WCAG guidelines and how to create accessibility sheets.\n\nThis course also covers usability evaluation methods, quantitative vs qualitative testing, user load, and explores UX design patterns in detail. Dive deep into powerful UX laws like Fitts’, Hick’s, Jakob’s, and more, followed by a hands-on UX workshop, UI card design practice, and a real-world UX case study. To wrap it up, you'll get insider tips with UI/UX interview questions and answers to help you prepare for job opportunities.\n\nBelow are the topics covered in UI UX Design Full Course (2025)\n00:00:00 - Introduction to UI/UX Design for ABSOLUTE BEGINNERS\n00:02:45 - How to Become a UI/UX Designer  \n00:11:54 - Atomic Design Principles  \n00:26:46 - What are UI Elements?  \n00:39:22 - Groups and Containers  \n00:39:39 - UI Design Principles  \n01:14:15 - Good vs Bad UI Design  \n01:56:51 - Understanding Colours for UI Design  \n02:00:10 - What is the 60-30-10 Rule?  \n02:01:29 - Applying the 60-30-10 Rule in UI Design  \n02:12:39 - What is a Style Guide?  \n02:22:34 - What is a Design System?  \n02:57:45 - What is Inclusive Design?  \n03:07:48 - Inclusive Design Principles  \n03:22:30 - Accessibility Explained (with Example)  \n03:27:52 - Content and Structure in UI/UX  \n03:37:59 - Device Independent Design  \n04:06:04 - Animation, Layout, Media, Visual Design, Research & Testing  \n04:16:56 - WCAG Guidelines  \n04:41:39 - Creating an Accessibility Sheet    \n04:51:14 - What is Usability Evaluation?  \n04:54:49 - Methods of Usability Evaluation  \n05:31:13 - Quantitative vs Qualitative Testing  \n05:37:43 - When to Use Each Testing Method  \n05:47:29 - Understanding User Load  \n06:07:24 - UX Design Patterns (Website Explained)  \n06:20:22 - Why UX Design Patterns are Needed  \n06:47:24 - Examples of UX Design Patterns   \n06:39:24 - Laws of UX  \n06:50:05 - Fitts’ Law  \n06:53:01 - Hick’s Law  \n06:53:29 - Jakob’s Law  \n06:56:04 - Serial Position Effect  \n06:58:07 - Tesler’s Law  \n07:00:52 - Zeigarnik Effect  \n07:03:39 - UX Research Case Study  \n07:32:56 - Brainstorming and Ideation  \n07:35:04 - Brainstorming and Mapping  \n07:35:27 - Ideation and Problem Solving   \n08:14:23 - UX Workshop: Doctor Appointments  \n08:55:42 - UI Workshop: Card Design   \n10:07:07 - UI/UX Designer Interview Questions & Answers  \n\n#uiuxdesigncourse #uiuxcourse #uiuxfullcourse #intellipaat \n\n🔥Register for Intellipaat's State of the Art UI UX Design Course: https://intellipaat.com/ui-ux-course/\n\n➡️ About the Course\nThis UI/UX design course is designed and taught by the top Industry experts along with leading faculty from top IIT’s. The skills you will master in this course are UI/UX designing, identification of appropriate research methods, UI methodologies, Figma, and more. Learn from the best and be the best.\n\n📌 Do subscribe to Intellipaat channel & come across more relevant Tech content: https://goo.gl/hhsGWb\n\n▶️ Intellipaat Achievers Channel: https://www.youtube.com/@intellipaatachievers\n\n📚For more information, please write back to us at sales@intellipaat.com or call us at IND: +91-7022374614 / US : 1-800-216-8930"
        },
        "defaultAudioLanguage": "en-IN"
      },
      "contentDetails": {
        "duration": "PT10H50M52S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": false,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "113202",
        "likeCount": "3287",
        "favoriteCount": "0",
        "commentCount": "77"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "v-xQ412m7aP4hfwjE9J8pc08cSI",
      "id": "WylVZzSsavg",
      "snippet": {
        "publishedAt": "2025-05-03T19:04:00Z",
        "channelId": "UCCktnahuRFYIBtNnKT5IYyg",
        "title": "🔥Complete 11 Hour Free UI/UX Design Course for Beginners | UI UX Design Full Course | Intellipaat",
        "description": "🔥Register for Intellipaat's State of the Art UI UX Design Course: https://intellipaat.com/ui-ux-course/\n\nIn this UI UX Design Course by Intellipaat, you’ll learn UI UX design completely in one shot to become job-ready. This UI UX Design Full Course is an exhaustive resource to help you master key UI UX principles, from understanding design laws to defining a problem statement, ideating solutions, and turning them into actual designs using wireframing. At the start of this course, you’ll explore the demand for UI UX designers, the difference between UI and UX, an introduction to UX, and some fundamental UX laws. Moving forward, you’ll dive into UI design, learning how to start wireframing using Figma, build prototypes, and scale your work into a complete UI UX design project.\n\nThis is the only course you need to master UI UX design, as it takes you from the basics to creating real designs and performing usability testing, with hands-on demonstrations throughout. Start learning now and get ahead in the UI UX design game!\n\n\n#UIUX #Intellipaat #UIUXDesign #FreeUIUXCourse #UIUXForBeginners #LearnUIUX #UXDesign #UIDesign #UIUXCourse #FreeDesignCourse #UIUXTutorial #UIUXDesignTips #LearnDesign #DesignCourse\n\n📖 Below are the topics covered in this '🔥Complete 11-Hour Free UI/UX Design Course for Beginners':\n00:00:00 - Introduction to UI UX Design Full Course For ABSOLUTE BEGINNERS\n00:02:48 - UI UX Design Scope in Future  \n00:12:03 - Difference Between UI And UX  \n00:21:11 - Atomic Design Principles\n00:36:46 - What are UI Elements?\n00:49:22 - Groups and Containers  \n00:49:39 - UI Design Principles\n01:24:15 - Deep Dive: Good vs Bad UI    \n02:06:51 - Understanding Colours for UI Design  \n02:10:10 - What is the 60-30-10 Rule?  \n02:11:29 - How to Apply the 60-30-10 Rule to UI Design\n02:22:39 - What is a Style Guide?  \n02:32:34 - What is a Design System?  \n03:07:45 - What is Inclusive Design?\n03:17:48 - Inclusive Design Principles\n03:32:30 - What is Accessibility? (with Example)  \n03:37:52 - Content and Structure  in UI UX Design\n03:47:59 - Device Independent Design  \n04:16:04 - Animation, Layout, Media, Visual Design, User Research & Testing  \n04:26:56 - WCAG Guidelines \n04:51:39 - Creating an Accessibility Sheet  \n05:01:14 - What is Usability Evaluation?  \n05:04:49 - Methods of Usability Evaluation\n05:41:13 - Quantitative vs Qualitative Usability Testing  \n05:47:43 - When to Conduct Quantitative vs Qualitative Testing?  \n05:57:29 - What is User Load?\n06:17:24 - UX Design Patterns (Website Explained)  \n06:30:22 - Need for UX Design Patterns  \n06:57:24 - Common Examples of UX Design Patterns  \n06:59:24 - Laws of UX  \n07:00:05 - Fitts' Law  \n07:03:01 - Hick's Law  \n07:03:29 - Jakob's Law  \n07:06:04 - Serial Position Effect  \n07:08:07 - Tesler's Law  \n07:10:52 - Zeigarnik Effect\n07:13:39 - User Research Design Case Study  \n07:42:56 - Brainstorming and Ideation  \n07:45:04 - Brainstorming and Mapping  \n07:45:27 - Ideation and Problem Solving  \n08:24:23 - UX Workshop Case Study: Doctor Appointments  \n09:05:42 - UI Workshop Case Study: Card Design  \n10:15:06 - UI UX Designer Interview Questions and Answers  \n\n📌 Do subscribe to Intellipaat channel & come across more relevant Tech content: https://goo.gl/hhsGWb\n\n▶️ Intellipaat Achievers Channel: https://www.youtube.com/@intellipaatachievers\n\n📚For more information, please write back to us at sales@intellipaat.com or call us at IND: +91-7022374614 / US : 1-800-216-8930",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/WylVZzSsavg/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/WylVZzSsavg/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/WylVZzSsavg/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/WylVZzSsavg/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/WylVZzSsavg/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Intellipaat",
        "tags": [
          "ui ux design course",
          "ui ux design full course for beginners",
          "ui ux design full course",
          "ui ux training",
          "ui ux design course free",
          "ui ux design tutorial for beginners",
          "ui ux course",
          "how to create ui design for website",
          "user experience design course",
          "user interface design in figma",
          "ui ux in one shot",
          "figma course",
          "usability testing",
          "ui ux deisng course for beginners",
          "ui ux design complete course",
          "intellipaat",
          "ux ui design",
          "🔥Complete 11 Hour Free UI/UX Design Course for Beginners"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "🔥Complete 11 Hour Free UI/UX Design Course for Beginners | UI UX Design Full Course | Intellipaat",
          "description": "🔥Register for Intellipaat's State of the Art UI UX Design Course: https://intellipaat.com/ui-ux-course/\n\nIn this UI UX Design Course by Intellipaat, you’ll learn UI UX design completely in one shot to become job-ready. This UI UX Design Full Course is an exhaustive resource to help you master key UI UX principles, from understanding design laws to defining a problem statement, ideating solutions, and turning them into actual designs using wireframing. At the start of this course, you’ll explore the demand for UI UX designers, the difference between UI and UX, an introduction to UX, and some fundamental UX laws. Moving forward, you’ll dive into UI design, learning how to start wireframing using Figma, build prototypes, and scale your work into a complete UI UX design project.\n\nThis is the only course you need to master UI UX design, as it takes you from the basics to creating real designs and performing usability testing, with hands-on demonstrations throughout. Start learning now and get ahead in the UI UX design game!\n\n\n#UIUX #Intellipaat #UIUXDesign #FreeUIUXCourse #UIUXForBeginners #LearnUIUX #UXDesign #UIDesign #UIUXCourse #FreeDesignCourse #UIUXTutorial #UIUXDesignTips #LearnDesign #DesignCourse\n\n📖 Below are the topics covered in this '🔥Complete 11-Hour Free UI/UX Design Course for Beginners':\n00:00:00 - Introduction to UI UX Design Full Course For ABSOLUTE BEGINNERS\n00:02:48 - UI UX Design Scope in Future  \n00:12:03 - Difference Between UI And UX  \n00:21:11 - Atomic Design Principles\n00:36:46 - What are UI Elements?\n00:49:22 - Groups and Containers  \n00:49:39 - UI Design Principles\n01:24:15 - Deep Dive: Good vs Bad UI    \n02:06:51 - Understanding Colours for UI Design  \n02:10:10 - What is the 60-30-10 Rule?  \n02:11:29 - How to Apply the 60-30-10 Rule to UI Design\n02:22:39 - What is a Style Guide?  \n02:32:34 - What is a Design System?  \n03:07:45 - What is Inclusive Design?\n03:17:48 - Inclusive Design Principles\n03:32:30 - What is Accessibility? (with Example)  \n03:37:52 - Content and Structure  in UI UX Design\n03:47:59 - Device Independent Design  \n04:16:04 - Animation, Layout, Media, Visual Design, User Research & Testing  \n04:26:56 - WCAG Guidelines \n04:51:39 - Creating an Accessibility Sheet  \n05:01:14 - What is Usability Evaluation?  \n05:04:49 - Methods of Usability Evaluation\n05:41:13 - Quantitative vs Qualitative Usability Testing  \n05:47:43 - When to Conduct Quantitative vs Qualitative Testing?  \n05:57:29 - What is User Load?\n06:17:24 - UX Design Patterns (Website Explained)  \n06:30:22 - Need for UX Design Patterns  \n06:57:24 - Common Examples of UX Design Patterns  \n06:59:24 - Laws of UX  \n07:00:05 - Fitts' Law  \n07:03:01 - Hick's Law  \n07:03:29 - Jakob's Law  \n07:06:04 - Serial Position Effect  \n07:08:07 - Tesler's Law  \n07:10:52 - Zeigarnik Effect\n07:13:39 - User Research Design Case Study  \n07:42:56 - Brainstorming and Ideation  \n07:45:04 - Brainstorming and Mapping  \n07:45:27 - Ideation and Problem Solving  \n08:24:23 - UX Workshop Case Study: Doctor Appointments  \n09:05:42 - UI Workshop Case Study: Card Design  \n10:15:06 - UI UX Designer Interview Questions and Answers  \n\n📌 Do subscribe to Intellipaat channel & come across more relevant Tech content: https://goo.gl/hhsGWb\n\n▶️ Intellipaat Achievers Channel: https://www.youtube.com/@intellipaatachievers\n\n📚For more information, please write back to us at sales@intellipaat.com or call us at IND: +91-7022374614 / US : 1-800-216-8930"
        },
        "defaultAudioLanguage": "en-IN"
      },
      "contentDetails": {
        "duration": "PT10H59M28S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": false,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "101677",
        "likeCount": "2460",
        "favoriteCount": "0",
        "commentCount": "64"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "quA_eJwVhiWj70oPdT0NOvn_9IM",
      "id": "maEf9uU-giA",
      "snippet": {
        "publishedAt": "2025-06-18T13:01:33Z",
        "channelId": "UCOCSgvVXY7Q2PLOPDbxfcuA",
        "title": "Complete UI/UX Design Course with Projects | Master UI/UX Design",
        "description": "Are you ready to dive into the fascinating world of User Interface and User Experience design? ✨Whether you're a beginner looking to start a new career, or a seasoned designer aiming to refine your skills, this course is perfect for you. ✨\nIn this in-depth guide, I unveil the secrets of UI/UX design, providing you with expert tips, insider strategies, and a comprehensive roadmap to success. Join me on this journey as I explore the art and science behind creating exceptional user experiences.\n\n📸 Join My WhatsApp Group -  https://chat.whatsapp.com/JAs9ryMzQTh75nxyvcGt3A\n\n📸 Join My WhatsApp Channel -    https://whatsapp.com/channel/0029VaiZ2Qs3LdQUFagrNd3f\n\n📸 Facebook Group: https://www.facebook.com/groups/alihassanux\n\n_________________________________________________\n\nPlease leave a LIKE ❤️ and SUBSCRIBE for more AMAZING content!\n\n⏱ TIMESTAMPS\n\n0:00 – 0:52 - Intro\n0:52 – 2:36 - UI Designer\n2:36 – 4:32 - UX Designer\n4:32 – 5:20 - Salaries\n5:20 – 5:52 - Freelancing\n5:52 – 36:18 - Download Figma & Interface\n36:18 – 37:33 - What is UI Design\n37:33 – 39:08 - What is UX Design\n39:09 – 53:09 - UI Design Principles with Examples\n53:09 – 1:11:44 - UX Laws\n1:11:45 – 1:17:51 - Design Process\n1:17:52 – 1:18:46 - 1st Half RECAP\n1:18:46 – 1:20:39 - Grid System\n1:20:40 – 1:29:45 - Types of Grids with Examples\n1:29:45 – 1:36:18 - Colors Theory \n1:36:19 – 2:07:23 - Auto Layout with Example\n2:07:23 – 2:19:02 - Componenets & Varients\n2:19:03 – 2:28:50 - Variables\n2:28:51 – 3:00:47 - Complete Final Design\n3:00:47 – 3:03:46 - Animations \n3:03:47 – 3:05:04 - Final Prototype Preview\n3:05:05 – 3:06:06 - Outro\n\n✨ Let's Connect✨\n📸 Instagram -    https://www.instagram.com/alihassanux\n📸 Facebook -     https://www.facebook.com/alihassanux\n📝 LinkedIn-        https://www.linkedin.com/in/alihassanux/\n\n\n👀 Watch Next 👀\nRoadMap to become UIUX Designer: https://youtu.be/GvNPAglqPyY\nThe art of having enough: https://youtu.be/qeKoob7EI8Q\nStep-by-Step Freelancing: https://youtu.be/WXUKH2ZIgb0\n\nIgnore (For SEO)\n\n✨ Tags ✨\n\nalithedesigner, Complete UI/UX Design, UI/UX Design Course, UI/UX Design Projects, UI/UX Design 2024, UI/UX Mastery, User Interface Design, User Experience Design, Design Skills, Online Learning, Creative Skills, Career Development, UI/UX Techniques, UI/UX Best Practices, Design Course, User-Centered Design, UI/UX Projects, UI/UX Training, 2024 Design Course, UI/UX Career, UI/UX Innovation, UI/UX Trends, UI/UX Certification, UI/UX Curriculum, Design Education, UI/UX Learning, UI/UX Skills, Design Mastery, UI/UX Techniques, UI/UX Tools, UI/UX Community, Design Professional, Design Portfolio, UI/UX Development, UI/UX Online Course\n\n\n✨ Hashtags ✨\n#figma #uiux #websitedesign #uiuxdesign #ui #designer",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/maEf9uU-giA/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/maEf9uU-giA/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/maEf9uU-giA/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/maEf9uU-giA/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/maEf9uU-giA/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Ali Hassan",
        "tags": [
          "alihassanux",
          "uiux design",
          "uiux",
          "uidesign",
          "uxdesign",
          "ui kya hai",
          "ux kya hai",
          "uiux kya hai",
          "uiux design course",
          "uiux design course 2025",
          "uiux design full course",
          "uiux design beginners course",
          "uiux design beginners course 2025",
          "figma tutorial",
          "figma design",
          "Figma advance course",
          "uiux design advance course",
          "master in uiux design",
          "figma course 2025",
          "top uiux course",
          "master in figma",
          "ui ux design course 2025",
          "ui ux design tutorial"
        ],
        "categoryId": "28",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en-GB",
        "localized": {
          "title": "Complete UI/UX Design Course with Projects | Master UI/UX Design",
          "description": "Are you ready to dive into the fascinating world of User Interface and User Experience design? ✨Whether you're a beginner looking to start a new career, or a seasoned designer aiming to refine your skills, this course is perfect for you. ✨\nIn this in-depth guide, I unveil the secrets of UI/UX design, providing you with expert tips, insider strategies, and a comprehensive roadmap to success. Join me on this journey as I explore the art and science behind creating exceptional user experiences.\n\n📸 Join My WhatsApp Group -  https://chat.whatsapp.com/JAs9ryMzQTh75nxyvcGt3A\n\n📸 Join My WhatsApp Channel -    https://whatsapp.com/channel/0029VaiZ2Qs3LdQUFagrNd3f\n\n📸 Facebook Group: https://www.facebook.com/groups/alihassanux\n\n_________________________________________________\n\nPlease leave a LIKE ❤️ and SUBSCRIBE for more AMAZING content!\n\n⏱ TIMESTAMPS\n\n0:00 – 0:52 - Intro\n0:52 – 2:36 - UI Designer\n2:36 – 4:32 - UX Designer\n4:32 – 5:20 - Salaries\n5:20 – 5:52 - Freelancing\n5:52 – 36:18 - Download Figma & Interface\n36:18 – 37:33 - What is UI Design\n37:33 – 39:08 - What is UX Design\n39:09 – 53:09 - UI Design Principles with Examples\n53:09 – 1:11:44 - UX Laws\n1:11:45 – 1:17:51 - Design Process\n1:17:52 – 1:18:46 - 1st Half RECAP\n1:18:46 – 1:20:39 - Grid System\n1:20:40 – 1:29:45 - Types of Grids with Examples\n1:29:45 – 1:36:18 - Colors Theory \n1:36:19 – 2:07:23 - Auto Layout with Example\n2:07:23 – 2:19:02 - Componenets & Varients\n2:19:03 – 2:28:50 - Variables\n2:28:51 – 3:00:47 - Complete Final Design\n3:00:47 – 3:03:46 - Animations \n3:03:47 – 3:05:04 - Final Prototype Preview\n3:05:05 – 3:06:06 - Outro\n\n✨ Let's Connect✨\n📸 Instagram -    https://www.instagram.com/alihassanux\n📸 Facebook -     https://www.facebook.com/alihassanux\n📝 LinkedIn-        https://www.linkedin.com/in/alihassanux/\n\n\n👀 Watch Next 👀\nRoadMap to become UIUX Designer: https://youtu.be/GvNPAglqPyY\nThe art of having enough: https://youtu.be/qeKoob7EI8Q\nStep-by-Step Freelancing: https://youtu.be/WXUKH2ZIgb0\n\nIgnore (For SEO)\n\n✨ Tags ✨\n\nalithedesigner, Complete UI/UX Design, UI/UX Design Course, UI/UX Design Projects, UI/UX Design 2024, UI/UX Mastery, User Interface Design, User Experience Design, Design Skills, Online Learning, Creative Skills, Career Development, UI/UX Techniques, UI/UX Best Practices, Design Course, User-Centered Design, UI/UX Projects, UI/UX Training, 2024 Design Course, UI/UX Career, UI/UX Innovation, UI/UX Trends, UI/UX Certification, UI/UX Curriculum, Design Education, UI/UX Learning, UI/UX Skills, Design Mastery, UI/UX Techniques, UI/UX Tools, UI/UX Community, Design Professional, Design Portfolio, UI/UX Development, UI/UX Online Course\n\n\n✨ Hashtags ✨\n#figma #uiux #websitedesign #uiuxdesign #ui #designer"
        },
        "defaultAudioLanguage": "ur"
      },
      "contentDetails": {
        "duration": "PT3H6M7S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "15333",
        "likeCount": "480",
        "favoriteCount": "0",
        "commentCount": "79"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "XwIIHrQy2VvfIhDeq1BDfq-zxz8",
      "id": "jdmX8ZIMRUU",
      "snippet": {
        "publishedAt": "2025-07-28T13:30:20Z",
        "channelId": "UCCktnahuRFYIBtNnKT5IYyg",
        "title": "UI UX Design Full Course (2025) | Intellipaat",
        "description": "Looking to start your career in UI/UX Design? This UI/UX Design Full Course by Intellipaat is your complete guide to becoming a job-ready UI/UX designer no prior experience needed! In this hands-on and beginner-friendly course, you’ll start by understanding what UI and UX design really mean, explore their scope in the future, and learn key differences between them. Dive deep into essential design concepts like color theory, typography, design systems, and atomic design principles.\n\nYou’ll also get step-by-step training on Figma, UI elements, style guides, and how to apply popular UX patterns and principles like 60-30-10 rule, SCAMPER, and laws of UX. Practice ideation techniques like mind mapping, brainstorming, affinity mapping, and sketching to solve real design problems.\nTowards the end, sharpen your interview skills with UI/UX interview questions, and gain practical exposure through hands-on Figma projects and design system building.\n\nBelow are the topics covered in UI UX Design Full Course (2025)\n00:00:00 - Introduction to UI/UX Design Free Course\n00:01:41 - What is UI/UX Design\n00:05:38 - UI/UX Scope in Future\n00:15:48 - UI vs UX\n00:24:54 - Color Theory in UI Design\n00:35:57 - Introduction to Typography\n00:45:49 - Figma 101\n01:46:30 - Understanding Color for UI Design\n01:56:04 - What is the 60-30-10 Rule?\n02:21:13 - Components of Style Guides\n02:27:53 - What is a Design System\n03:05:37 - Ideation and Problem Solving\n03:09:28 - What is Brainstorming Analysis\n03:31:30 - Why Use Mind Mapping\n03:34:51 - Purpose of Sketching\n03:41:14 - What is Perspective\n03:54:30 - What is SCAMPER\n04:29:28 - Affinity Mapping\n04:54:03 - Atomic Design Principle\n05:33:37 - What are UI Elements\n05:33:55 - Types of UI Elements\n06:07:51 - What are UI Design Principles\n07:20:26 - Lack of Text Hierarchy\n08:16:51 - What is UX Design Patterns\n08:30:14 - Laws of UX\n09:53:05 - Hands-On\n10:27:02 - Interview Q/A of UI/UX\n\n#uiuxdesigncourse #uiuxdesignfullcourse #uiuxdesign #uiuxcourse #intellipaat\n\n🔥Register for Intellipaat's State of the Art UI UX Design Course: https://intellipaat.com/ui-ux-course/\n\n➡️ About the Course\nThis UI/UX design course is designed and taught by the top Industry experts along with leading faculty from top IIT’s. The skills you will master in this course are UI/UX designing, identification of appropriate research methods, UI methodologies, Figma, and more. Learn from the best and be the best.\n\n📌 Do subscribe to Intellipaat channel & come across more relevant Tech content: https://goo.gl/hhsGWb\n\n▶️ Intellipaat Achievers Channel: https://www.youtube.com/@intellipaatachievers\n\n📚For more information, please write back to us at sales@intellipaat.com or call us at IND: +91-7022374614 / US : 1-800-216-8930",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/jdmX8ZIMRUU/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/jdmX8ZIMRUU/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/jdmX8ZIMRUU/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/jdmX8ZIMRUU/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/jdmX8ZIMRUU/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Intellipaat",
        "tags": [
          "ui ux design full course",
          "ui ux design full course 2025",
          "ui ux design course",
          "ui ux design training",
          "ui ux design course for beginners",
          "ui ux design complete course",
          "ui ux design tutorial for beginners",
          "ui ux course",
          "ui ux course for beginners",
          "ux design tutorial",
          "ui ux design tutorial",
          "figma for ui ux design",
          "user interface and user experience design",
          "ui ux design",
          "best ui ux design course online",
          "intellipaat",
          "intellipaat ui ux course",
          "ui ux design course free",
          "figma for ui ux"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "UI UX Design Full Course (2025) | Intellipaat",
          "description": "Looking to start your career in UI/UX Design? This UI/UX Design Full Course by Intellipaat is your complete guide to becoming a job-ready UI/UX designer no prior experience needed! In this hands-on and beginner-friendly course, you’ll start by understanding what UI and UX design really mean, explore their scope in the future, and learn key differences between them. Dive deep into essential design concepts like color theory, typography, design systems, and atomic design principles.\n\nYou’ll also get step-by-step training on Figma, UI elements, style guides, and how to apply popular UX patterns and principles like 60-30-10 rule, SCAMPER, and laws of UX. Practice ideation techniques like mind mapping, brainstorming, affinity mapping, and sketching to solve real design problems.\nTowards the end, sharpen your interview skills with UI/UX interview questions, and gain practical exposure through hands-on Figma projects and design system building.\n\nBelow are the topics covered in UI UX Design Full Course (2025)\n00:00:00 - Introduction to UI/UX Design Free Course\n00:01:41 - What is UI/UX Design\n00:05:38 - UI/UX Scope in Future\n00:15:48 - UI vs UX\n00:24:54 - Color Theory in UI Design\n00:35:57 - Introduction to Typography\n00:45:49 - Figma 101\n01:46:30 - Understanding Color for UI Design\n01:56:04 - What is the 60-30-10 Rule?\n02:21:13 - Components of Style Guides\n02:27:53 - What is a Design System\n03:05:37 - Ideation and Problem Solving\n03:09:28 - What is Brainstorming Analysis\n03:31:30 - Why Use Mind Mapping\n03:34:51 - Purpose of Sketching\n03:41:14 - What is Perspective\n03:54:30 - What is SCAMPER\n04:29:28 - Affinity Mapping\n04:54:03 - Atomic Design Principle\n05:33:37 - What are UI Elements\n05:33:55 - Types of UI Elements\n06:07:51 - What are UI Design Principles\n07:20:26 - Lack of Text Hierarchy\n08:16:51 - What is UX Design Patterns\n08:30:14 - Laws of UX\n09:53:05 - Hands-On\n10:27:02 - Interview Q/A of UI/UX\n\n#uiuxdesigncourse #uiuxdesignfullcourse #uiuxdesign #uiuxcourse #intellipaat\n\n🔥Register for Intellipaat's State of the Art UI UX Design Course: https://intellipaat.com/ui-ux-course/\n\n➡️ About the Course\nThis UI/UX design course is designed and taught by the top Industry experts along with leading faculty from top IIT’s. The skills you will master in this course are UI/UX designing, identification of appropriate research methods, UI methodologies, Figma, and more. Learn from the best and be the best.\n\n📌 Do subscribe to Intellipaat channel & come across more relevant Tech content: https://goo.gl/hhsGWb\n\n▶️ Intellipaat Achievers Channel: https://www.youtube.com/@intellipaatachievers\n\n📚For more information, please write back to us at sales@intellipaat.com or call us at IND: +91-7022374614 / US : 1-800-216-8930"
        },
        "defaultAudioLanguage": "en-IN"
      },
      "contentDetails": {
        "duration": "PT10H38M45S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": false,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "39253",
        "likeCount": "1125",
        "favoriteCount": "0",
        "commentCount": "30"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "17ytOeohSl8Ga3cWG4eDA1Rax7w",
      "id": "truRwcI7-kg",
      "snippet": {
        "publishedAt": "2025-05-06T13:17:00Z",
        "channelId": "UC8RaXfzsNk6e5ASy5nz9wOQ",
        "title": "UI/UX Design Full Course for Beginners 2025 | Lets Uncover",
        "description": "UI/UX Design Full Course for Beginners 2025 | Lets Uncover\n\nFollow Ali Hassan:\nInstagram: https://www.instagram.com/alihassanux\nYouTube: https://youtube.com/@alihassanux  \nLinkedin: http://linkedin.com/in/alihassanux\nFacebook: https://www.facebook.com/AliHassanUX \n\n⭐Buy Hosting and Domain: https://hostinger.com/letsuncover\n10% Discount Code: LETSUNCOVER\nWhatsApp Invoices: 03361176620\n\n⭐ Free Online Earning Courses: https://www.youtube.com/playlist?list=PLddXDOtiaRnGW9C-0CltXCPU4RFBzXcAZ\n\n👉Client Hunting Methodology Course: https://bit.ly/client-hunting \n👉Create RedotPay Account: https://url.hk/i/en/z6qny\n👉Paid Fiverr Course: https://bit.ly/3PwiDZe (1499/rs Only)\n👉Skillshare: https://bit.ly/3PkpVmw\n\n►  Business Email: ➜ Letsuncover@yahoo.com\n►  Website: ➜ https://letsuncover.pk/\n►  Linkedin: ➜ https://pk.linkedin.com/in/sobantariq\n►  Instagram:➜ https://www.instagram.com/theletsuncover/\n►  Twitter:➜ https://twitter.com/Lets_Uncover\n►  Facebook:➜ https://www.facebook.com/letsUncover\n►  Facebook Group:➜ https://www.facebook.com/groups/letsuncover\n\nDISCLAIMER: This video contains affiliate links, which means I receive a small commission on a purchase without additional cost. These commissions help me to create Free Educational Videos on YouTube.\n\n#uxuidesign #letsuncover",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/truRwcI7-kg/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/truRwcI7-kg/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/truRwcI7-kg/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/truRwcI7-kg/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/truRwcI7-kg/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Lets Uncover",
        "tags": [
          "ui ux design course",
          "ui ux design full course",
          "ux design course",
          "ux design",
          "ui ux course",
          "ui design",
          "ui ux design",
          "online ui ux course",
          "ux ui course",
          "best ui ux course",
          "ux design courses",
          "ui ux free course",
          "ux course",
          "ux design tutorial",
          "ux design tutorial for beginners",
          "ux design for beginners",
          "ui ux design tutorial for beginners",
          "free ux course",
          "ui course",
          "free ui course",
          "ux course for beginners",
          "ux designer",
          "ui design course",
          "lets uncover",
          "figma course"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "UI/UX Design Full Course for Beginners 2025 | Lets Uncover",
          "description": "UI/UX Design Full Course for Beginners 2025 | Lets Uncover\n\nFollow Ali Hassan:\nInstagram: https://www.instagram.com/alihassanux\nYouTube: https://youtube.com/@alihassanux  \nLinkedin: http://linkedin.com/in/alihassanux\nFacebook: https://www.facebook.com/AliHassanUX \n\n⭐Buy Hosting and Domain: https://hostinger.com/letsuncover\n10% Discount Code: LETSUNCOVER\nWhatsApp Invoices: 03361176620\n\n⭐ Free Online Earning Courses: https://www.youtube.com/playlist?list=PLddXDOtiaRnGW9C-0CltXCPU4RFBzXcAZ\n\n👉Client Hunting Methodology Course: https://bit.ly/client-hunting \n👉Create RedotPay Account: https://url.hk/i/en/z6qny\n👉Paid Fiverr Course: https://bit.ly/3PwiDZe (1499/rs Only)\n👉Skillshare: https://bit.ly/3PkpVmw\n\n►  Business Email: ➜ Letsuncover@yahoo.com\n►  Website: ➜ https://letsuncover.pk/\n►  Linkedin: ➜ https://pk.linkedin.com/in/sobantariq\n►  Instagram:➜ https://www.instagram.com/theletsuncover/\n►  Twitter:➜ https://twitter.com/Lets_Uncover\n►  Facebook:➜ https://www.facebook.com/letsUncover\n►  Facebook Group:➜ https://www.facebook.com/groups/letsuncover\n\nDISCLAIMER: This video contains affiliate links, which means I receive a small commission on a purchase without additional cost. These commissions help me to create Free Educational Videos on YouTube.\n\n#uxuidesign #letsuncover"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT3H8M15S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "185179",
        "likeCount": "5705",
        "favoriteCount": "0",
        "commentCount": "110"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "-15mCCjo9X80bUi2ar6t6hKHh84",
      "id": "MBblN98-5lg",
      "snippet": {
        "publishedAt": "2025-07-12T09:00:24Z",
        "channelId": "UCCktnahuRFYIBtNnKT5IYyg",
        "title": "UI UX Design Course FREE | UI UX Design Full Course For Beginners (2025) | Intellipaat",
        "description": "Want to become a UI/UX Designer in 2025 but don’t know where to start? This UI/UX Design Full Course for Absolute Beginners by Intellipaat is your all-in-one video to learn the fundamentals, tools, and real-world skills needed to kick-start your career in design! You'll begin with an easy-to-follow UI/UX career roadmap, and then dive into essential design principles like Atomic Design, UI Elements, and what makes good vs bad UI. You'll master color theory using the 60-30-10 rule, understand how to build style guides and design systems, and learn about inclusive design and accessibility including WCAG guidelines and how to create accessibility sheets.\n\nThis course also covers usability evaluation methods, quantitative vs qualitative testing, user load, and explores UX design patterns in detail. Dive deep into powerful UX laws like Fitts’, Hick’s, Jakob’s, and more, followed by a hands-on UX workshop, UI card design practice, and a real-world UX case study. To wrap it up, you'll get insider tips with UI/UX interview questions and answers to help you prepare for job opportunities.\n\nBelow are the topics covered in UI UX Design Full Course (2025)\n00:00:00 - Introduction to UI/UX Design for ABSOLUTE BEGINNERS\n00:02:45 - How to Become a UI/UX Designer  \n00:11:54 - Atomic Design Principles  \n00:26:46 - What are UI Elements?  \n00:39:22 - Groups and Containers  \n00:39:39 - UI Design Principles  \n01:14:15 - Good vs Bad UI Design  \n01:56:51 - Understanding Colours for UI Design  \n02:00:10 - What is the 60-30-10 Rule?  \n02:01:29 - Applying the 60-30-10 Rule in UI Design  \n02:12:39 - What is a Style Guide?  \n02:22:34 - What is a Design System?  \n02:57:45 - What is Inclusive Design?  \n03:07:48 - Inclusive Design Principles  \n03:22:30 - Accessibility Explained (with Example)  \n03:27:52 - Content and Structure in UI/UX  \n03:37:59 - Device Independent Design  \n04:06:04 - Animation, Layout, Media, Visual Design, Research & Testing  \n04:16:56 - WCAG Guidelines  \n04:41:39 - Creating an Accessibility Sheet    \n04:51:14 - What is Usability Evaluation?  \n04:54:49 - Methods of Usability Evaluation  \n05:31:13 - Quantitative vs Qualitative Testing  \n05:37:43 - When to Use Each Testing Method  \n05:47:29 - Understanding User Load  \n06:07:24 - UX Design Patterns (Website Explained)  \n06:20:22 - Why UX Design Patterns are Needed  \n06:47:24 - Examples of UX Design Patterns   \n06:39:24 - Laws of UX  \n06:50:05 - Fitts’ Law  \n06:53:01 - Hick’s Law  \n06:53:29 - Jakob’s Law  \n06:56:04 - Serial Position Effect  \n06:58:07 - Tesler’s Law  \n07:00:52 - Zeigarnik Effect  \n07:03:39 - UX Research Case Study  \n07:32:56 - Brainstorming and Ideation  \n07:35:04 - Brainstorming and Mapping  \n07:35:27 - Ideation and Problem Solving   \n08:14:23 - UX Workshop: Doctor Appointments  \n08:55:42 - UI Workshop: Card Design   \n10:07:07 - UI/UX Designer Interview Questions & Answers  \n\n#uiuxdesigncourse #uiuxcourse #uiuxfullcourse #intellipaat \n\n🔥Register for Intellipaat's State of the Art UI UX Design Course: https://intellipaat.com/ui-ux-course/\n\n➡️ About the Course\nThis UI/UX design course is designed and taught by the top Industry experts along with leading faculty from top IIT’s. The skills you will master in this course are UI/UX designing, identification of appropriate research methods, UI methodologies, Figma, and more. Learn from the best and be the best.\n\n📌 Do subscribe to Intellipaat channel & come across more relevant Tech content: https://goo.gl/hhsGWb\n\n▶️ Intellipaat Achievers Channel: https://www.youtube.com/@intellipaatachievers\n\n📚For more information, please write back to us at sales@intellipaat.com or call us at IND: +91-7022374614 / US : 1-800-216-8930",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/MBblN98-5lg/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/MBblN98-5lg/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/MBblN98-5lg/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/MBblN98-5lg/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/MBblN98-5lg/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Intellipaat",
        "tags": [
          "ui ux design course free",
          "ui ux design full course",
          "ui ux design full course 2025",
          "ui ux design course",
          "complete ui ux design course",
          "best ui ux design course on youtube",
          "ui ux design course for beginners",
          "learn ui ux design from scratch",
          "ui ux course",
          "ui ux design training",
          "ui ux design tutorial",
          "ui ux portfolio",
          "best ui ux design course online",
          "ui ux design",
          "ui ux design tools",
          "ux design course",
          "ui design course",
          "intellipaat"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "UI UX Design Course FREE | UI UX Design Full Course For Beginners (2025) | Intellipaat",
          "description": "Want to become a UI/UX Designer in 2025 but don’t know where to start? This UI/UX Design Full Course for Absolute Beginners by Intellipaat is your all-in-one video to learn the fundamentals, tools, and real-world skills needed to kick-start your career in design! You'll begin with an easy-to-follow UI/UX career roadmap, and then dive into essential design principles like Atomic Design, UI Elements, and what makes good vs bad UI. You'll master color theory using the 60-30-10 rule, understand how to build style guides and design systems, and learn about inclusive design and accessibility including WCAG guidelines and how to create accessibility sheets.\n\nThis course also covers usability evaluation methods, quantitative vs qualitative testing, user load, and explores UX design patterns in detail. Dive deep into powerful UX laws like Fitts’, Hick’s, Jakob’s, and more, followed by a hands-on UX workshop, UI card design practice, and a real-world UX case study. To wrap it up, you'll get insider tips with UI/UX interview questions and answers to help you prepare for job opportunities.\n\nBelow are the topics covered in UI UX Design Full Course (2025)\n00:00:00 - Introduction to UI/UX Design for ABSOLUTE BEGINNERS\n00:02:45 - How to Become a UI/UX Designer  \n00:11:54 - Atomic Design Principles  \n00:26:46 - What are UI Elements?  \n00:39:22 - Groups and Containers  \n00:39:39 - UI Design Principles  \n01:14:15 - Good vs Bad UI Design  \n01:56:51 - Understanding Colours for UI Design  \n02:00:10 - What is the 60-30-10 Rule?  \n02:01:29 - Applying the 60-30-10 Rule in UI Design  \n02:12:39 - What is a Style Guide?  \n02:22:34 - What is a Design System?  \n02:57:45 - What is Inclusive Design?  \n03:07:48 - Inclusive Design Principles  \n03:22:30 - Accessibility Explained (with Example)  \n03:27:52 - Content and Structure in UI/UX  \n03:37:59 - Device Independent Design  \n04:06:04 - Animation, Layout, Media, Visual Design, Research & Testing  \n04:16:56 - WCAG Guidelines  \n04:41:39 - Creating an Accessibility Sheet    \n04:51:14 - What is Usability Evaluation?  \n04:54:49 - Methods of Usability Evaluation  \n05:31:13 - Quantitative vs Qualitative Testing  \n05:37:43 - When to Use Each Testing Method  \n05:47:29 - Understanding User Load  \n06:07:24 - UX Design Patterns (Website Explained)  \n06:20:22 - Why UX Design Patterns are Needed  \n06:47:24 - Examples of UX Design Patterns   \n06:39:24 - Laws of UX  \n06:50:05 - Fitts’ Law  \n06:53:01 - Hick’s Law  \n06:53:29 - Jakob’s Law  \n06:56:04 - Serial Position Effect  \n06:58:07 - Tesler’s Law  \n07:00:52 - Zeigarnik Effect  \n07:03:39 - UX Research Case Study  \n07:32:56 - Brainstorming and Ideation  \n07:35:04 - Brainstorming and Mapping  \n07:35:27 - Ideation and Problem Solving   \n08:14:23 - UX Workshop: Doctor Appointments  \n08:55:42 - UI Workshop: Card Design   \n10:07:07 - UI/UX Designer Interview Questions & Answers  \n\n#uiuxdesigncourse #uiuxcourse #uiuxfullcourse #intellipaat \n\n🔥Register for Intellipaat's State of the Art UI UX Design Course: https://intellipaat.com/ui-ux-course/\n\n➡️ About the Course\nThis UI/UX design course is designed and taught by the top Industry experts along with leading faculty from top IIT’s. The skills you will master in this course are UI/UX designing, identification of appropriate research methods, UI methodologies, Figma, and more. Learn from the best and be the best.\n\n📌 Do subscribe to Intellipaat channel & come across more relevant Tech content: https://goo.gl/hhsGWb\n\n▶️ Intellipaat Achievers Channel: https://www.youtube.com/@intellipaatachievers\n\n📚For more information, please write back to us at sales@intellipaat.com or call us at IND: +91-7022374614 / US : 1-800-216-8930"
        },
        "defaultAudioLanguage": "en-IN"
      },
      "contentDetails": {
        "duration": "PT10H50M52S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": false,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "113202",
        "likeCount": "3287",
        "favoriteCount": "0",
        "commentCount": "77"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "nRMu5ywWW1eBUAe05kcpGia0QU0",
      "id": "2icljqpaddk",
      "snippet": {
        "publishedAt": "2025-09-24T20:32:37Z",
        "channelId": "UCCktnahuRFYIBtNnKT5IYyg",
        "title": "UI UX Design Full Course (2025) | Intellipaat",
        "description": "This UI/UX Design Course for Beginners by Intellipaat is a complete guide for aspiring designers who want to build a successful career in user interface and user experience design. The course starts with a roadmap for UI/UX designers, followed by a detailed understanding of atomic design principles, UI elements, and essential design principles that distinguish good interfaces from bad ones. You’ll learn hands-on techniques for creating wireframes, designing UI fidelities, and applying advanced design concepts using Figma components, variants, icons, plugins, and animations.\n\nThe course also dives into UX design patterns, highlighting their importance, common examples, and the key differences between UX and UI patterns. Through case studies, research, and ideation exercises, you’ll learn problem-solving techniques and usability evaluation methods, including moderated, unmoderated, remote, and in-person testing. Quantitative and qualitative testing, understanding user load, and real-world UI workshops help you gain practical insights. The course concludes with portfolio-building strategies and UI/UX designer interview questions to prepare you for job opportunities. By the end, you’ll have the knowledge, skills, and confidence to create engaging, user-friendly digital experiences in 2025.\n\nBelow are the topics covered in UI UX Design Full Course (2025)\n00:00:00 – Introduction to UI UX Design Course For Beginners\n00:01:34 – UI/UX Designer Roadmap  \n00:10:09 – Atomic Design Principles  \n00:27:42 – UI Elements  \n01:12:06 – UI Design Principles  \n01:14:16 – Good vs Bad UI  \n01:19:32 – Wireframes & UI Fidelities (Hands-On: Auto Layout)  \n01:45:00 – Advanced UI Design Concepts  \n02:35:15 – Components in Figma  \n03:13:49 – Hands-On: Variants, Doctor Appointment App, Icons, Plugins, Animation  \n05:05:27 – Introduction to UX Design Patterns  \n05:31:58 – Need for UX Design Patterns  \n05:41:39 – UX vs UI Patterns  \n05:42:12 – Common UX Pattern Examples  \n05:47:32 – Laws of UX  \n06:01:51 – UX Case Study: Behance Research & Survey  \n06:31:15 – Ideation & Problem Solving  \n07:15:32 – What is Usability Evaluation?  \n07:21:26 – Methods of Usability Evaluation  \n07:30:04 – Moderated vs Unmoderated Testing  \n07:34:14 – Remote vs In-Person Testing  \n07:38:37 – Explorative vs Assessment vs Comparative Testing  \n07:45:58 – User Testing Methods  \n07:58:21 – Quantitative vs Qualitative Testing  \n08:03:48 – When to Use Quantitative vs Qualitative  \n08:14:35 – Understanding User Load  \n08:33:32 – Case Study Discussion  \n09:28:20 – UI Workshop Case Study  \n10:37:47 – Portfolio Review & Tips  \n11:38:20 – UI/UX Designer Interview Questions & Answers\n\n#uiuxdesigncourse #uiuxdesignfullcourse #uiuxdesign #uiuxcourse #intellipaat\n\n🔥Register for Intellipaat's State of the Art UI UX Design Course: https://intellipaat.com/ui-ux-course/\n\n➡️ About the Course\nThis UI/UX design course is designed and taught by the top Industry experts along with leading faculty from top IIT’s. The skills you will master in this course are UI/UX designing, identification of appropriate research methods, UI methodologies, Figma, and more. Learn from the best and be the best.\n\n📌 Do subscribe to Intellipaat channel & come across more relevant Tech content: https://goo.gl/hhsGWb\n\n▶️ Intellipaat Achievers Channel: https://www.youtube.com/@intellipaatachievers\n\n📚For more information, please write back to us at sales@intellipaat.com or call us at IND: +91-7022374614 / US : 1-800-216-8930",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/2icljqpaddk/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/2icljqpaddk/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/2icljqpaddk/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/2icljqpaddk/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/2icljqpaddk/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Intellipaat",
        "tags": [
          "ui ux design full course",
          "ui ux design full course 2025",
          "ui ux design course",
          "ui ux design training",
          "ui ux design course for beginners",
          "ui ux design complete course",
          "ui ux design tutorial for beginners",
          "ui ux course",
          "ui ux course for beginners",
          "ux design tutorial",
          "ui ux design tutorial",
          "figma for ui ux design",
          "user interface and user experience design",
          "ui ux design",
          "best ui ux design course online",
          "intellipaat",
          "intellipaat ui ux course",
          "ui ux design course free",
          "figma for ui ux"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "UI UX Design Full Course (2025) | Intellipaat",
          "description": "This UI/UX Design Course for Beginners by Intellipaat is a complete guide for aspiring designers who want to build a successful career in user interface and user experience design. The course starts with a roadmap for UI/UX designers, followed by a detailed understanding of atomic design principles, UI elements, and essential design principles that distinguish good interfaces from bad ones. You’ll learn hands-on techniques for creating wireframes, designing UI fidelities, and applying advanced design concepts using Figma components, variants, icons, plugins, and animations.\n\nThe course also dives into UX design patterns, highlighting their importance, common examples, and the key differences between UX and UI patterns. Through case studies, research, and ideation exercises, you’ll learn problem-solving techniques and usability evaluation methods, including moderated, unmoderated, remote, and in-person testing. Quantitative and qualitative testing, understanding user load, and real-world UI workshops help you gain practical insights. The course concludes with portfolio-building strategies and UI/UX designer interview questions to prepare you for job opportunities. By the end, you’ll have the knowledge, skills, and confidence to create engaging, user-friendly digital experiences in 2025.\n\nBelow are the topics covered in UI UX Design Full Course (2025)\n00:00:00 – Introduction to UI UX Design Course For Beginners\n00:01:34 – UI/UX Designer Roadmap  \n00:10:09 – Atomic Design Principles  \n00:27:42 – UI Elements  \n01:12:06 – UI Design Principles  \n01:14:16 – Good vs Bad UI  \n01:19:32 – Wireframes & UI Fidelities (Hands-On: Auto Layout)  \n01:45:00 – Advanced UI Design Concepts  \n02:35:15 – Components in Figma  \n03:13:49 – Hands-On: Variants, Doctor Appointment App, Icons, Plugins, Animation  \n05:05:27 – Introduction to UX Design Patterns  \n05:31:58 – Need for UX Design Patterns  \n05:41:39 – UX vs UI Patterns  \n05:42:12 – Common UX Pattern Examples  \n05:47:32 – Laws of UX  \n06:01:51 – UX Case Study: Behance Research & Survey  \n06:31:15 – Ideation & Problem Solving  \n07:15:32 – What is Usability Evaluation?  \n07:21:26 – Methods of Usability Evaluation  \n07:30:04 – Moderated vs Unmoderated Testing  \n07:34:14 – Remote vs In-Person Testing  \n07:38:37 – Explorative vs Assessment vs Comparative Testing  \n07:45:58 – User Testing Methods  \n07:58:21 – Quantitative vs Qualitative Testing  \n08:03:48 – When to Use Quantitative vs Qualitative  \n08:14:35 – Understanding User Load  \n08:33:32 – Case Study Discussion  \n09:28:20 – UI Workshop Case Study  \n10:37:47 – Portfolio Review & Tips  \n11:38:20 – UI/UX Designer Interview Questions & Answers\n\n#uiuxdesigncourse #uiuxdesignfullcourse #uiuxdesign #uiuxcourse #intellipaat\n\n🔥Register for Intellipaat's State of the Art UI UX Design Course: https://intellipaat.com/ui-ux-course/\n\n➡️ About the Course\nThis UI/UX design course is designed and taught by the top Industry experts along with leading faculty from top IIT’s. The skills you will master in this course are UI/UX designing, identification of appropriate research methods, UI methodologies, Figma, and more. Learn from the best and be the best.\n\n📌 Do subscribe to Intellipaat channel & come across more relevant Tech content: https://goo.gl/hhsGWb\n\n▶️ Intellipaat Achievers Channel: https://www.youtube.com/@intellipaatachievers\n\n📚For more information, please write back to us at sales@intellipaat.com or call us at IND: +91-7022374614 / US : 1-800-216-8930"
        },
        "defaultAudioLanguage": "en-IN"
      },
      "contentDetails": {
        "duration": "PT11H54M56S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": false,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "11406",
        "likeCount": "262",
        "favoriteCount": "0",
        "commentCount": "6"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "ZJPtzwTjLD60IlEpzRe5y6cACGs",
      "id": "7DnypQA1SK8",
      "snippet": {
        "publishedAt": "2024-07-16T02:30:03Z",
        "channelId": "UCZbdK5v2VIj7qG6s7y3nDdw",
        "title": "UI UX Design Course for Beginners in Hindi | Figma Complete Tutorial | #uiuxcourse #figmatutorial",
        "description": "If you want to become UI / UX Expert or Website Designer and Start online earning, then this course is for you. For UI / UX Full Course Watch this full tutorial in Hindi by Marketing Fundas.\nFor Digital Marketing Services or Training or Online Income Click Below Given Link or Call \n\nFor Digital Marketing Services :- https://www.marketingfundas.com/contact-us.html\n\nWhatsApp or Call ( 9354447104 )\n\n #uiuxcourse #figmatutorial #marketingfundas",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/7DnypQA1SK8/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/7DnypQA1SK8/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/7DnypQA1SK8/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/7DnypQA1SK8/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/7DnypQA1SK8/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Marketing Fundas",
        "tags": [
          "marketing fundas",
          "UI UX Design Course for Beginners in Hindi",
          "Figma Complete Tutorial",
          "ui ux design full course in hindi",
          "ui/ux design full course figma",
          "figma tutorial for beginners in hindi",
          "ui ux figma full course in hindi",
          "ui ux design figma full course in hindi",
          "how to become ui ux designer after 12th",
          "online figma course",
          "online ui ux design course free",
          "ux ui design course",
          "best ui ux design course online",
          "free ui ux design course",
          "#uiuxcourse",
          "#figmatutorial",
          "#marketingfundas"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "UI UX Design Course for Beginners in Hindi | Figma Complete Tutorial | #uiuxcourse #figmatutorial",
          "description": "If you want to become UI / UX Expert or Website Designer and Start online earning, then this course is for you. For UI / UX Full Course Watch this full tutorial in Hindi by Marketing Fundas.\nFor Digital Marketing Services or Training or Online Income Click Below Given Link or Call \n\nFor Digital Marketing Services :- https://www.marketingfundas.com/contact-us.html\n\nWhatsApp or Call ( 9354447104 )\n\n #uiuxcourse #figmatutorial #marketingfundas"
        },
        "defaultAudioLanguage": "en-IN"
      },
      "contentDetails": {
        "duration": "PT4H55M48S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "58998",
        "likeCount": "1837",
        "favoriteCount": "0",
        "commentCount": "202"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "7UJXbr7wzjrF3Ne4Ty5PkiecIEI",
      "id": "onyB_X3zk6o",
      "snippet": {
        "publishedAt": "2024-01-30T11:29:24Z",
        "channelId": "UCB6ix-6Z_NKgYuBccT7N6uQ",
        "title": "How to Become a UI/UX designer in 2024 | Without Degree | Complete Guide in Hindi, English Captions",
        "description": "This roadmap is a proven one and nobody on the internet will teach you this for free, hope this video will help you understand the process, and you may become a successful UI UX designer in 2024.\n\nGet my UX Design book \"UX Decoded\" : https://saurabhux.com/\n\nFollow me on Instagram : https://www.instagram.com/saurabhux/\nConnect on LinkedIn : https://www.linkedin.com/in/saurabhsainiux/\nFollow on Twitter (X) : https://twitter.com/saurabh_ux\n\n-----------------------------------------------\nResources :\nDesign Basics - https://www.figma.com/resource-library/design-basics/\nWhat is UI design - https://www.figma.com/resource-library/ui-design/\nFigma Best Practices - https://www.figma.com/best-practices/\nBasic Laws of UX design - https://lawsofux.com/\nUX design Articles - https://medium.com/search?q=UX+design+guide  \n\n-----------------------------------------------\n\nRecommended Books -\nThe design of Everyday things - https://amzn.to/3U4WPcs\nChange by design - https://amzn.to/49pcVT1\n\n-----------------------------------------------\n\nTimestamps: \n00:00 Introduction\n01:13 Video overview \n03:08 Requirements \n04:18 Step 1\n06:34 Step 2\n08:00 Step 3\n08:56 Step 4\n14:45 Step 5\n18:32 Step 6\n20:23 Important points\n21:38 Conclusion\n\n----------------------------------------------------\nMy Desk products affiliate links :\n\nDark Wallpapers : https://amzn.to/3TVlMHh\nAcoustic Foams : https://amzn.to/3xg4ZpA\nSpeaker System : https://amzn.to/3TAP3pn\nKeyboard : https://amzn.to/43BPlB0\nGraphic Tablet : https://amzn.to/3PIVm9f\nMacBook Pro 16 inch : https://amzn.to/3VCW5wH\niPad Pro 11 inch : https://amzn.to/4az2rBu\nMonitor : https://amzn.to/4aznEew\nMicrophone : https://amzn.to/3VAQCq0\nBoom arm : https://amzn.to/3xcrdst\nStanding Lamp : https://amzn.to/3vA2NJ9\nRBG light : https://amzn.to/4aepAJF\nTripod : https://amzn.to/3TG3ZT4\nLight : https://amzn.to/3vvVZMy\n\nCamera : https://amzn.to/3xfwnnT\nBest Lens for it : https://amzn.to/3VIR9Xb\n\n--------------------------------------------------------\n\nAll the icons in this video are from - flaticon.com\n\nIgnore (For Seo)\n\nMusic from #Uppbeat (free for Creators!):\nhttps://uppbeat.io/t/simon-folwar/a-creative-mind\nLicense code: 6SZ0KWEEAGDTLFQ3\n\nMusic from #Uppbeat (free for Creators!):\nhttps://uppbeat.io/t/color-parade/luxurious\nLicense code: RGYRHWIOHZW8W4U6\n\nNo copyright infringement intended\n\n--------------------------------------------------------\n\n\nUI UX design\nUI Design\nHow to become a UI/UX designer \nUI UX Roadmap 2024\nComplete Guide to earn online\nHow to become a designer\nWhat is UI UX design\nUI UX in 2024\nUI UX Course in hindi\nUI design course\nHow to learn UI/UX design\nDesigner at Deloitte \nHow I learned Graphics design\nHow to learn Figma\nFigma design\nUI UX design tutorial\nSalary of a UI UX designer",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/onyB_X3zk6o/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/onyB_X3zk6o/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/onyB_X3zk6o/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/onyB_X3zk6o/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/onyB_X3zk6o/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Saurabh Saini",
        "tags": [
          "ui ux design with ai",
          "ui ux design workshop",
          "ui ux design salary",
          "ui ux design work from home",
          "ansh mehra",
          "saptarshi ui ux",
          "how to learn UI design",
          "ui design course",
          "ui ux course",
          "ui ux hindi",
          "ui design india",
          "ui ux",
          "ux design",
          "salary of a ui ux designer",
          "ui ux design 2024",
          "ui ux guide",
          "why learn ui ux design",
          "what is ui ux design",
          "is ui ux easy",
          "ui ux career",
          "ui ux laws",
          "ui design tutorial",
          "how to become a UI designer",
          "UI designer salary",
          "case studies",
          "saurabh saini"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en-IN",
        "localized": {
          "title": "How to Become a UI/UX designer in 2024 | Without Degree | Complete Guide in Hindi, English Captions",
          "description": "This roadmap is a proven one and nobody on the internet will teach you this for free, hope this video will help you understand the process, and you may become a successful UI UX designer in 2024.\n\nGet my UX Design book \"UX Decoded\" : https://saurabhux.com/\n\nFollow me on Instagram : https://www.instagram.com/saurabhux/\nConnect on LinkedIn : https://www.linkedin.com/in/saurabhsainiux/\nFollow on Twitter (X) : https://twitter.com/saurabh_ux\n\n-----------------------------------------------\nResources :\nDesign Basics - https://www.figma.com/resource-library/design-basics/\nWhat is UI design - https://www.figma.com/resource-library/ui-design/\nFigma Best Practices - https://www.figma.com/best-practices/\nBasic Laws of UX design - https://lawsofux.com/\nUX design Articles - https://medium.com/search?q=UX+design+guide  \n\n-----------------------------------------------\n\nRecommended Books -\nThe design of Everyday things - https://amzn.to/3U4WPcs\nChange by design - https://amzn.to/49pcVT1\n\n-----------------------------------------------\n\nTimestamps: \n00:00 Introduction\n01:13 Video overview \n03:08 Requirements \n04:18 Step 1\n06:34 Step 2\n08:00 Step 3\n08:56 Step 4\n14:45 Step 5\n18:32 Step 6\n20:23 Important points\n21:38 Conclusion\n\n----------------------------------------------------\nMy Desk products affiliate links :\n\nDark Wallpapers : https://amzn.to/3TVlMHh\nAcoustic Foams : https://amzn.to/3xg4ZpA\nSpeaker System : https://amzn.to/3TAP3pn\nKeyboard : https://amzn.to/43BPlB0\nGraphic Tablet : https://amzn.to/3PIVm9f\nMacBook Pro 16 inch : https://amzn.to/3VCW5wH\niPad Pro 11 inch : https://amzn.to/4az2rBu\nMonitor : https://amzn.to/4aznEew\nMicrophone : https://amzn.to/3VAQCq0\nBoom arm : https://amzn.to/3xcrdst\nStanding Lamp : https://amzn.to/3vA2NJ9\nRBG light : https://amzn.to/4aepAJF\nTripod : https://amzn.to/3TG3ZT4\nLight : https://amzn.to/3vvVZMy\n\nCamera : https://amzn.to/3xfwnnT\nBest Lens for it : https://amzn.to/3VIR9Xb\n\n--------------------------------------------------------\n\nAll the icons in this video are from - flaticon.com\n\nIgnore (For Seo)\n\nMusic from #Uppbeat (free for Creators!):\nhttps://uppbeat.io/t/simon-folwar/a-creative-mind\nLicense code: 6SZ0KWEEAGDTLFQ3\n\nMusic from #Uppbeat (free for Creators!):\nhttps://uppbeat.io/t/color-parade/luxurious\nLicense code: RGYRHWIOHZW8W4U6\n\nNo copyright infringement intended\n\n--------------------------------------------------------\n\n\nUI UX design\nUI Design\nHow to become a UI/UX designer \nUI UX Roadmap 2024\nComplete Guide to earn online\nHow to become a designer\nWhat is UI UX design\nUI UX in 2024\nUI UX Course in hindi\nUI design course\nHow to learn UI/UX design\nDesigner at Deloitte \nHow I learned Graphics design\nHow to learn Figma\nFigma design\nUI UX design tutorial\nSalary of a UI UX designer"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT22M32S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "true",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "560560",
        "likeCount": "34474",
        "favoriteCount": "0",
        "commentCount": "1513"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "nVLPnwwMP1mjzSiNmpNsQjqhGNA",
      "id": "mpJb9GNxdYI",
      "snippet": {
        "publishedAt": "2023-11-17T02:30:26Z",
        "channelId": "UCeVMnSShP_Iviwkknt83cww",
        "title": "Figma Basics in One Video | Sigma Web Development Course - Tutorial #52",
        "description": "Latest Udemy Web dev Course With Certificate: https://goharry.in/webdev\nAccess the Sigma web development course playlist: https://www.youtube.com/playlist?list=PLu0W_9lII9agq5TrH9XLIKQvv0iaF2X3w\n➡️ Source Code: https://github.com/CodeWithHarry/Sigma-Web-Dev-Course\n➡️ Notes and CheatSheets: https://www.codewithharry.com/notes/\n➡️ English Subtitles are now up for all the videos!\n\nTimestamps 🕰️\n00:00 Introduction\n01:05 Sigma Web Developer Intro\n01:15 Figma Basics\n11:16 Using Community UI Toolkits\n14:45 Exporting\n15:26 Multiple Pages\n15:55 Going Deeper in Figma\n26:14 Conclusion\n26:57 Sigma Outro\n\n►Checkout my English channel here: https://www.youtube.com/channel/UC7btqG2Ww0_2LwuQxpvo2HQ\n►Instagram: www.instagram.com/codewithharry\n\nDownload UltraEdit Trial for Free: https://bit.ly/UltraEdit-CWH\n\npython, C, C++, Java, JavaScript and Other Cheatsheets [++]:\nPlaylist: https://www.youtube.com/playlist?list=PLu0W_9lII9agrsRZjFECeFuWY5ev2pQlk\n\n►Learn in One Video[++]:\nPython Course with 5 Projects: https://www.youtube.com/watch?v=fqF9M92jzUo\nPython[15 Hr]: https://www.youtube.com/watch?v=gfDE2a7MKjA&list=PLu0W_9lII9ahKZ42vg2w9ERPmShYbYAB7\nPython Advance[3.5 Hr]: https://www.youtube.com/watch?v=61a7UkDO50s&list=PLu0W_9lII9ahKZ42vg2w9ERPmShYbYAB7\nPython[1 Hr]: https://www.youtube.com/watch?v=qHJjMvHLJdg&list=PLu0W_9lII9ahKZ42vg2w9ERPmShYbYAB7\nPython[2 Hr]: https://www.youtube.com/watch?v=ihk_Xglr164&list=PLu0W_9lII9ahKZ42vg2w9ERPmShYbYAB7\nPython[15 Min]:https://www.youtube.com/watch?v=fr1f84rg4Nw&list=PLu0W_9lII9ahKZ42vg2w9ERPmShYbYAB7\nJavaScript[1 Hr]: https://www.youtube.com/watch?v=onbBV0uFVpo&list=PLu0W_9lII9ahKZ42vg2w9ERPmShYbYAB7\nC[1.3 Hr]-https://www.youtube.com/watch?v=YXcgD8hRHYY&list=PLu0W_9lII9ahKZ42vg2w9ERPmShYbYAB7\nphp[1 Hr]: https://www.youtube.com/watch?v=xW7ro3lwaCI&list=PLu0W_9lII9ahKZ42vg2w9ERPmShYbYAB7\nphp[2.3 Hr]:https://www.youtube.com/watch?v=1SnPKhCdlsU&list=PLu0W_9lII9ahKZ42vg2w9ERPmShYbYAB7\nphp[Project]- https://www.youtube.com/watch?v=-al2bECumKg&list=PLu0W_9lII9ahKZ42vg2w9ERPmShYbYAB7\nHTML[30 Min]:https://www.youtube.com/watch?v=E3ByCRqE7Lo&list=PLu0W_9lII9ahKZ42vg2w9ERPmShYbYAB7\nCSS[8.5 Hr]:https://www.youtube.com/watch?v=Edsxf_NBFrw&list=PLu0W_9lII9ahKZ42vg2w9ERPmShYbYAB7\nCSS[1.4 Hr]:https://www.youtube.com/watch?v=u5-K_ua9sOw&list=PLu0W_9lII9ahKZ42vg2w9ERPmShYbYAB7\nWordpress[3.2 Hr]:https://www.youtube.com/watch?v=GlLRYml8mCY&list=PLu0W_9lII9ahKZ42vg2w9ERPmShYbYAB7\nAngular[2 Hr]:https://www.youtube.com/watch?v=0LhBvp8qpro&list=PLu0W_9lII9ahKZ42vg2w9ERPmShYbYAB7\nJava[2.3 Hr]:https://www.youtube.com/watch?v=rV_3Lewxx6o&list=PLu0W_9lII9ahKZ42vg2w9ERPmShYbYAB7\nWeb Scraping[1 Hr]:https://www.youtube.com/watch?v=uufDGjTuq34&list=PLu0W_9lII9ahKZ42vg2w9ERPmShYbYAB7\nMongoDB[2 Hr]:https://www.youtube.com/watch?v=oSIv-E60NiU&list=PLu0W_9lII9ahKZ42vg2w9ERPmShYbYAB7\nNumpy[1 Hr]:https://www.youtube.com/watch?v=Rbh1rieb3zc&list=PLu0W_9lII9ahKZ42vg2w9ERPmShYbYAB7\nAndroid Dev[12 Hr]- https://www.youtube.com/watch?v=mXjZQX3UzOs\nLinux[1 Hr]:https://www.youtube.com/watch?v=_tCY-c-sPZc&list=PLu0W_9lII9ahKZ42vg2w9ERPmShYbYAB7\nJQuery[1.1 Hr]:https://www.youtube.com/watch?v=YFlx1C8XwR0&list=PLu0W_9lII9ahKZ42vg2w9ERPmShYbYAB7\nGit and GitHub[1.1 Hr]:https://www.youtube.com/watch?v=gwWKnnCMQ5c&list=PLu0W_9lII9ahKZ42vg2w9ERPmShYbYAB7\n\n►Complete course [playlist]:\nReact: https://www.youtube.com/playlist?list=PLu0W_9lII9agx66oZnT6IyhcMIbUMNMdt\nPython-https://www.youtube.com/playlist?list=PLu0W_9lII9agICnT8t4iYVSZ3eykIAOME\nOOP Python-https://www.youtube.com/playlist?list=PLu0W_9lII9ahfRrhFcoB-4lpp9YaBmdCP\nJava:https://www.youtube.com/playlist?list=PLu0W_9lII9agS67Uits0UnJyrYiXhDS6q\nJavaScript- https://www.youtube.com/playlist?list=PLu0W_9lII9ajyk081To1Cbt2eI5913SsL\nPHP-https://www.youtube.com/playlist?list=PLu0W_9lII9aikXkRE0WxDt1vozo3hnmtR\nC-https://www.youtube.com/playlist?list=PLu0W_9lII9aiXlHcLx-mDH1Qul38wD3aR\nC++-https://www.youtube.com/playlist?list=PLu0W_9lII9agpFUAlPFe_VNSlXW5uE0YL\nGit & GitHub-https://www.youtube.com/playlist?list=PLu0W_9lII9ahVQekD7ePHmnirTePXwIln\nAndroid Dev- https://www.youtube.com/playlist?list=PLu0W_9lII9aiL0kysYlfSOUgY5rNlOhUd\nPython GUI- https://www.youtube.com/playlist?list=PLu0W_9lII9ajLcqRcj4PoEihkukF_OTzA\nWeb Development- https://www.youtube.com/playlist?list=PLu0W_9lII9agiCUZYRsvtGTXdxkzPyItg\nPython Django:https://www.youtube.com/playlist?list=PLu0W_9lII9ah7DDtYtflgwMwpT3xmjXY9\nProjects Using HTML, CSS & Javascript- https://www.youtube.com/playlist?list=PLu0W_9lII9aiQiOwthuSvinxoflmhRxM3\nData Structure and Algo:https://www.youtube.com/playlist?list=PLu0W_9lII9ahIappRPN0MCAgtOu3lQjQi \n\nFollow Me On Social Media\n►Website (created using Django Rest & Angular): https://www.codewithharry.com\n►Facebook: https://www.facebook.com/CodeWithHarry\n►Instagram: https://www.instagram.com/codewithharry/ \nTwitter: https://twitter.com/CodeWithHarry\nComment \"#HarryBhai\" if you read this 😉😉",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/mpJb9GNxdYI/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/mpJb9GNxdYI/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/mpJb9GNxdYI/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/mpJb9GNxdYI/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/mpJb9GNxdYI/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "CodeWithHarry",
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "Figma Basics in One Video | Sigma Web Development Course - Tutorial #52",
          "description": "Latest Udemy Web dev Course With Certificate: https://goharry.in/webdev\nAccess the Sigma web development course playlist: https://www.youtube.com/playlist?list=PLu0W_9lII9agq5TrH9XLIKQvv0iaF2X3w\n➡️ Source Code: https://github.com/CodeWithHarry/Sigma-Web-Dev-Course\n➡️ Notes and CheatSheets: https://www.codewithharry.com/notes/\n➡️ English Subtitles are now up for all the videos!\n\nTimestamps 🕰️\n00:00 Introduction\n01:05 Sigma Web Developer Intro\n01:15 Figma Basics\n11:16 Using Community UI Toolkits\n14:45 Exporting\n15:26 Multiple Pages\n15:55 Going Deeper in Figma\n26:14 Conclusion\n26:57 Sigma Outro\n\n►Checkout my English channel here: https://www.youtube.com/channel/UC7btqG2Ww0_2LwuQxpvo2HQ\n►Instagram: www.instagram.com/codewithharry\n\nDownload UltraEdit Trial for Free: https://bit.ly/UltraEdit-CWH\n\npython, C, C++, Java, JavaScript and Other Cheatsheets [++]:\nPlaylist: https://www.youtube.com/playlist?list=PLu0W_9lII9agrsRZjFECeFuWY5ev2pQlk\n\n►Learn in One Video[++]:\nPython Course with 5 Projects: https://www.youtube.com/watch?v=fqF9M92jzUo\nPython[15 Hr]: https://www.youtube.com/watch?v=gfDE2a7MKjA&list=PLu0W_9lII9ahKZ42vg2w9ERPmShYbYAB7\nPython Advance[3.5 Hr]: https://www.youtube.com/watch?v=61a7UkDO50s&list=PLu0W_9lII9ahKZ42vg2w9ERPmShYbYAB7\nPython[1 Hr]: https://www.youtube.com/watch?v=qHJjMvHLJdg&list=PLu0W_9lII9ahKZ42vg2w9ERPmShYbYAB7\nPython[2 Hr]: https://www.youtube.com/watch?v=ihk_Xglr164&list=PLu0W_9lII9ahKZ42vg2w9ERPmShYbYAB7\nPython[15 Min]:https://www.youtube.com/watch?v=fr1f84rg4Nw&list=PLu0W_9lII9ahKZ42vg2w9ERPmShYbYAB7\nJavaScript[1 Hr]: https://www.youtube.com/watch?v=onbBV0uFVpo&list=PLu0W_9lII9ahKZ42vg2w9ERPmShYbYAB7\nC[1.3 Hr]-https://www.youtube.com/watch?v=YXcgD8hRHYY&list=PLu0W_9lII9ahKZ42vg2w9ERPmShYbYAB7\nphp[1 Hr]: https://www.youtube.com/watch?v=xW7ro3lwaCI&list=PLu0W_9lII9ahKZ42vg2w9ERPmShYbYAB7\nphp[2.3 Hr]:https://www.youtube.com/watch?v=1SnPKhCdlsU&list=PLu0W_9lII9ahKZ42vg2w9ERPmShYbYAB7\nphp[Project]- https://www.youtube.com/watch?v=-al2bECumKg&list=PLu0W_9lII9ahKZ42vg2w9ERPmShYbYAB7\nHTML[30 Min]:https://www.youtube.com/watch?v=E3ByCRqE7Lo&list=PLu0W_9lII9ahKZ42vg2w9ERPmShYbYAB7\nCSS[8.5 Hr]:https://www.youtube.com/watch?v=Edsxf_NBFrw&list=PLu0W_9lII9ahKZ42vg2w9ERPmShYbYAB7\nCSS[1.4 Hr]:https://www.youtube.com/watch?v=u5-K_ua9sOw&list=PLu0W_9lII9ahKZ42vg2w9ERPmShYbYAB7\nWordpress[3.2 Hr]:https://www.youtube.com/watch?v=GlLRYml8mCY&list=PLu0W_9lII9ahKZ42vg2w9ERPmShYbYAB7\nAngular[2 Hr]:https://www.youtube.com/watch?v=0LhBvp8qpro&list=PLu0W_9lII9ahKZ42vg2w9ERPmShYbYAB7\nJava[2.3 Hr]:https://www.youtube.com/watch?v=rV_3Lewxx6o&list=PLu0W_9lII9ahKZ42vg2w9ERPmShYbYAB7\nWeb Scraping[1 Hr]:https://www.youtube.com/watch?v=uufDGjTuq34&list=PLu0W_9lII9ahKZ42vg2w9ERPmShYbYAB7\nMongoDB[2 Hr]:https://www.youtube.com/watch?v=oSIv-E60NiU&list=PLu0W_9lII9ahKZ42vg2w9ERPmShYbYAB7\nNumpy[1 Hr]:https://www.youtube.com/watch?v=Rbh1rieb3zc&list=PLu0W_9lII9ahKZ42vg2w9ERPmShYbYAB7\nAndroid Dev[12 Hr]- https://www.youtube.com/watch?v=mXjZQX3UzOs\nLinux[1 Hr]:https://www.youtube.com/watch?v=_tCY-c-sPZc&list=PLu0W_9lII9ahKZ42vg2w9ERPmShYbYAB7\nJQuery[1.1 Hr]:https://www.youtube.com/watch?v=YFlx1C8XwR0&list=PLu0W_9lII9ahKZ42vg2w9ERPmShYbYAB7\nGit and GitHub[1.1 Hr]:https://www.youtube.com/watch?v=gwWKnnCMQ5c&list=PLu0W_9lII9ahKZ42vg2w9ERPmShYbYAB7\n\n►Complete course [playlist]:\nReact: https://www.youtube.com/playlist?list=PLu0W_9lII9agx66oZnT6IyhcMIbUMNMdt\nPython-https://www.youtube.com/playlist?list=PLu0W_9lII9agICnT8t4iYVSZ3eykIAOME\nOOP Python-https://www.youtube.com/playlist?list=PLu0W_9lII9ahfRrhFcoB-4lpp9YaBmdCP\nJava:https://www.youtube.com/playlist?list=PLu0W_9lII9agS67Uits0UnJyrYiXhDS6q\nJavaScript- https://www.youtube.com/playlist?list=PLu0W_9lII9ajyk081To1Cbt2eI5913SsL\nPHP-https://www.youtube.com/playlist?list=PLu0W_9lII9aikXkRE0WxDt1vozo3hnmtR\nC-https://www.youtube.com/playlist?list=PLu0W_9lII9aiXlHcLx-mDH1Qul38wD3aR\nC++-https://www.youtube.com/playlist?list=PLu0W_9lII9agpFUAlPFe_VNSlXW5uE0YL\nGit & GitHub-https://www.youtube.com/playlist?list=PLu0W_9lII9ahVQekD7ePHmnirTePXwIln\nAndroid Dev- https://www.youtube.com/playlist?list=PLu0W_9lII9aiL0kysYlfSOUgY5rNlOhUd\nPython GUI- https://www.youtube.com/playlist?list=PLu0W_9lII9ajLcqRcj4PoEihkukF_OTzA\nWeb Development- https://www.youtube.com/playlist?list=PLu0W_9lII9agiCUZYRsvtGTXdxkzPyItg\nPython Django:https://www.youtube.com/playlist?list=PLu0W_9lII9ah7DDtYtflgwMwpT3xmjXY9\nProjects Using HTML, CSS & Javascript- https://www.youtube.com/playlist?list=PLu0W_9lII9aiQiOwthuSvinxoflmhRxM3\nData Structure and Algo:https://www.youtube.com/playlist?list=PLu0W_9lII9ahIappRPN0MCAgtOu3lQjQi \n\nFollow Me On Social Media\n►Website (created using Django Rest & Angular): https://www.codewithharry.com\n►Facebook: https://www.facebook.com/CodeWithHarry\n►Instagram: https://www.instagram.com/codewithharry/ \nTwitter: https://twitter.com/CodeWithHarry\nComment \"#HarryBhai\" if you read this 😉😉"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT27M20S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "true",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "547814",
        "likeCount": "19916",
        "favoriteCount": "0",
        "commentCount": "1195"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "jhXI2n4LDx5wyEMY6BqFy_Spu_w",
      "id": "k2DSi1zGEc8",
      "snippet": {
        "publishedAt": "2024-09-28T12:56:12Z",
        "channelId": "UCeVMnSShP_Iviwkknt83cww",
        "title": "HTML Full Course (in Hindi)",
        "description": "Download VS Code: https://code.visualstudio.com/download\n🔥 XStore Theme: https://1.envato.market/2rXmmA\nDownload the Handbook: https://www.codewithharry.com/notes/ (Scroll down to the Handbooks section to download the handbook)\nSource Code: https://github.com/CodeWithHarry/The-Ultimate-HTML-Course\n5 HTML Projects Freelancing Bundle: https://cwh-full-next-space.fra1.cdn.digitaloceanspaces.com/YouTube/5%20Free%20HTML%20Projects%20Freelancing%20Bundle.zip\nHandwritten notes: https://www.codewithharry.com/notes/\nHTML Cheatsheet: https://cwh-full-next-space.fra1.cdn.digitaloceanspaces.com/YouTube/HTML%20Cheatsheet.md\n\nTimestamps ⌚\n00:00:00 Skit\n00:02:22 Introduction\n00:03:45 Chapter 0\n00:11:37 Chapter 1\n00:26:14 Chapter 1 PS\n00:32:26 Chapter 2\n00:46:55 Chapter 2 PS\n00:56:55 Chapter 3\n01:09:09 Chapter 3 PS\n01:17:16 Chapter 4\n01:41:53 Chapter 4 PS\n01:55:23 Project 1\n02:12:57 Project 2\n02:26:19 Chapter 5\n02:38:26 Conclusion\n\n►Checkout my English channel here: https://www.youtube.com/channel/UC7btqG2Ww0_2LwuQxpvo2HQ\n►Instagram: https://www.instagram.com/codewithharry\n \n\nFollow Me On Social Media\n►Website (created using Django Rest & Angular): https://www.codewithharry.com\n►Facebook: https://www.facebook.com/CodeWithHarry\n►Instagram: https://www.instagram.com/codewithharry/ \n►Twitter: https://twitter.com/CodeWithHarry\nComment \"#HarryBhai\" if you read this 😉😉",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/k2DSi1zGEc8/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/k2DSi1zGEc8/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/k2DSi1zGEc8/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/k2DSi1zGEc8/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/k2DSi1zGEc8/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "CodeWithHarry",
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "HTML Full Course (in Hindi)",
          "description": "Download VS Code: https://code.visualstudio.com/download\n🔥 XStore Theme: https://1.envato.market/2rXmmA\nDownload the Handbook: https://www.codewithharry.com/notes/ (Scroll down to the Handbooks section to download the handbook)\nSource Code: https://github.com/CodeWithHarry/The-Ultimate-HTML-Course\n5 HTML Projects Freelancing Bundle: https://cwh-full-next-space.fra1.cdn.digitaloceanspaces.com/YouTube/5%20Free%20HTML%20Projects%20Freelancing%20Bundle.zip\nHandwritten notes: https://www.codewithharry.com/notes/\nHTML Cheatsheet: https://cwh-full-next-space.fra1.cdn.digitaloceanspaces.com/YouTube/HTML%20Cheatsheet.md\n\nTimestamps ⌚\n00:00:00 Skit\n00:02:22 Introduction\n00:03:45 Chapter 0\n00:11:37 Chapter 1\n00:26:14 Chapter 1 PS\n00:32:26 Chapter 2\n00:46:55 Chapter 2 PS\n00:56:55 Chapter 3\n01:09:09 Chapter 3 PS\n01:17:16 Chapter 4\n01:41:53 Chapter 4 PS\n01:55:23 Project 1\n02:12:57 Project 2\n02:26:19 Chapter 5\n02:38:26 Conclusion\n\n►Checkout my English channel here: https://www.youtube.com/channel/UC7btqG2Ww0_2LwuQxpvo2HQ\n►Instagram: https://www.instagram.com/codewithharry\n \n\nFollow Me On Social Media\n►Website (created using Django Rest & Angular): https://www.codewithharry.com\n►Facebook: https://www.facebook.com/CodeWithHarry\n►Instagram: https://www.instagram.com/codewithharry/ \n►Twitter: https://twitter.com/CodeWithHarry\nComment \"#HarryBhai\" if you read this 😉😉"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT2H39M30S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "1810546",
        "likeCount": "40041",
        "favoriteCount": "0",
        "commentCount": "5786"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "17ytOeohSl8Ga3cWG4eDA1Rax7w",
      "id": "truRwcI7-kg",
      "snippet": {
        "publishedAt": "2025-05-06T13:17:00Z",
        "channelId": "UC8RaXfzsNk6e5ASy5nz9wOQ",
        "title": "UI/UX Design Full Course for Beginners 2025 | Lets Uncover",
        "description": "UI/UX Design Full Course for Beginners 2025 | Lets Uncover\n\nFollow Ali Hassan:\nInstagram: https://www.instagram.com/alihassanux\nYouTube: https://youtube.com/@alihassanux  \nLinkedin: http://linkedin.com/in/alihassanux\nFacebook: https://www.facebook.com/AliHassanUX \n\n⭐Buy Hosting and Domain: https://hostinger.com/letsuncover\n10% Discount Code: LETSUNCOVER\nWhatsApp Invoices: 03361176620\n\n⭐ Free Online Earning Courses: https://www.youtube.com/playlist?list=PLddXDOtiaRnGW9C-0CltXCPU4RFBzXcAZ\n\n👉Client Hunting Methodology Course: https://bit.ly/client-hunting \n👉Create RedotPay Account: https://url.hk/i/en/z6qny\n👉Paid Fiverr Course: https://bit.ly/3PwiDZe (1499/rs Only)\n👉Skillshare: https://bit.ly/3PkpVmw\n\n►  Business Email: ➜ Letsuncover@yahoo.com\n►  Website: ➜ https://letsuncover.pk/\n►  Linkedin: ➜ https://pk.linkedin.com/in/sobantariq\n►  Instagram:➜ https://www.instagram.com/theletsuncover/\n►  Twitter:➜ https://twitter.com/Lets_Uncover\n►  Facebook:➜ https://www.facebook.com/letsUncover\n►  Facebook Group:➜ https://www.facebook.com/groups/letsuncover\n\nDISCLAIMER: This video contains affiliate links, which means I receive a small commission on a purchase without additional cost. These commissions help me to create Free Educational Videos on YouTube.\n\n#uxuidesign #letsuncover",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/truRwcI7-kg/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/truRwcI7-kg/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/truRwcI7-kg/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/truRwcI7-kg/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/truRwcI7-kg/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Lets Uncover",
        "tags": [
          "ui ux design course",
          "ui ux design full course",
          "ux design course",
          "ux design",
          "ui ux course",
          "ui design",
          "ui ux design",
          "online ui ux course",
          "ux ui course",
          "best ui ux course",
          "ux design courses",
          "ui ux free course",
          "ux course",
          "ux design tutorial",
          "ux design tutorial for beginners",
          "ux design for beginners",
          "ui ux design tutorial for beginners",
          "free ux course",
          "ui course",
          "free ui course",
          "ux course for beginners",
          "ux designer",
          "ui design course",
          "lets uncover",
          "figma course"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "UI/UX Design Full Course for Beginners 2025 | Lets Uncover",
          "description": "UI/UX Design Full Course for Beginners 2025 | Lets Uncover\n\nFollow Ali Hassan:\nInstagram: https://www.instagram.com/alihassanux\nYouTube: https://youtube.com/@alihassanux  \nLinkedin: http://linkedin.com/in/alihassanux\nFacebook: https://www.facebook.com/AliHassanUX \n\n⭐Buy Hosting and Domain: https://hostinger.com/letsuncover\n10% Discount Code: LETSUNCOVER\nWhatsApp Invoices: 03361176620\n\n⭐ Free Online Earning Courses: https://www.youtube.com/playlist?list=PLddXDOtiaRnGW9C-0CltXCPU4RFBzXcAZ\n\n👉Client Hunting Methodology Course: https://bit.ly/client-hunting \n👉Create RedotPay Account: https://url.hk/i/en/z6qny\n👉Paid Fiverr Course: https://bit.ly/3PwiDZe (1499/rs Only)\n👉Skillshare: https://bit.ly/3PkpVmw\n\n►  Business Email: ➜ Letsuncover@yahoo.com\n►  Website: ➜ https://letsuncover.pk/\n►  Linkedin: ➜ https://pk.linkedin.com/in/sobantariq\n►  Instagram:➜ https://www.instagram.com/theletsuncover/\n►  Twitter:➜ https://twitter.com/Lets_Uncover\n►  Facebook:➜ https://www.facebook.com/letsUncover\n►  Facebook Group:➜ https://www.facebook.com/groups/letsuncover\n\nDISCLAIMER: This video contains affiliate links, which means I receive a small commission on a purchase without additional cost. These commissions help me to create Free Educational Videos on YouTube.\n\n#uxuidesign #letsuncover"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT3H8M15S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "185179",
        "likeCount": "5705",
        "favoriteCount": "0",
        "commentCount": "110"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "ZJPtzwTjLD60IlEpzRe5y6cACGs",
      "id": "7DnypQA1SK8",
      "snippet": {
        "publishedAt": "2024-07-16T02:30:03Z",
        "channelId": "UCZbdK5v2VIj7qG6s7y3nDdw",
        "title": "UI UX Design Course for Beginners in Hindi | Figma Complete Tutorial | #uiuxcourse #figmatutorial",
        "description": "If you want to become UI / UX Expert or Website Designer and Start online earning, then this course is for you. For UI / UX Full Course Watch this full tutorial in Hindi by Marketing Fundas.\nFor Digital Marketing Services or Training or Online Income Click Below Given Link or Call \n\nFor Digital Marketing Services :- https://www.marketingfundas.com/contact-us.html\n\nWhatsApp or Call ( 9354447104 )\n\n #uiuxcourse #figmatutorial #marketingfundas",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/7DnypQA1SK8/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/7DnypQA1SK8/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/7DnypQA1SK8/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/7DnypQA1SK8/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/7DnypQA1SK8/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Marketing Fundas",
        "tags": [
          "marketing fundas",
          "UI UX Design Course for Beginners in Hindi",
          "Figma Complete Tutorial",
          "ui ux design full course in hindi",
          "ui/ux design full course figma",
          "figma tutorial for beginners in hindi",
          "ui ux figma full course in hindi",
          "ui ux design figma full course in hindi",
          "how to become ui ux designer after 12th",
          "online figma course",
          "online ui ux design course free",
          "ux ui design course",
          "best ui ux design course online",
          "free ui ux design course",
          "#uiuxcourse",
          "#figmatutorial",
          "#marketingfundas"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "UI UX Design Course for Beginners in Hindi | Figma Complete Tutorial | #uiuxcourse #figmatutorial",
          "description": "If you want to become UI / UX Expert or Website Designer and Start online earning, then this course is for you. For UI / UX Full Course Watch this full tutorial in Hindi by Marketing Fundas.\nFor Digital Marketing Services or Training or Online Income Click Below Given Link or Call \n\nFor Digital Marketing Services :- https://www.marketingfundas.com/contact-us.html\n\nWhatsApp or Call ( 9354447104 )\n\n #uiuxcourse #figmatutorial #marketingfundas"
        },
        "defaultAudioLanguage": "en-IN"
      },
      "contentDetails": {
        "duration": "PT4H55M48S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "58998",
        "likeCount": "1837",
        "favoriteCount": "0",
        "commentCount": "202"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "nRMu5ywWW1eBUAe05kcpGia0QU0",
      "id": "2icljqpaddk",
      "snippet": {
        "publishedAt": "2025-09-24T20:32:37Z",
        "channelId": "UCCktnahuRFYIBtNnKT5IYyg",
        "title": "UI UX Design Full Course (2025) | Intellipaat",
        "description": "This UI/UX Design Course for Beginners by Intellipaat is a complete guide for aspiring designers who want to build a successful career in user interface and user experience design. The course starts with a roadmap for UI/UX designers, followed by a detailed understanding of atomic design principles, UI elements, and essential design principles that distinguish good interfaces from bad ones. You’ll learn hands-on techniques for creating wireframes, designing UI fidelities, and applying advanced design concepts using Figma components, variants, icons, plugins, and animations.\n\nThe course also dives into UX design patterns, highlighting their importance, common examples, and the key differences between UX and UI patterns. Through case studies, research, and ideation exercises, you’ll learn problem-solving techniques and usability evaluation methods, including moderated, unmoderated, remote, and in-person testing. Quantitative and qualitative testing, understanding user load, and real-world UI workshops help you gain practical insights. The course concludes with portfolio-building strategies and UI/UX designer interview questions to prepare you for job opportunities. By the end, you’ll have the knowledge, skills, and confidence to create engaging, user-friendly digital experiences in 2025.\n\nBelow are the topics covered in UI UX Design Full Course (2025)\n00:00:00 – Introduction to UI UX Design Course For Beginners\n00:01:34 – UI/UX Designer Roadmap  \n00:10:09 – Atomic Design Principles  \n00:27:42 – UI Elements  \n01:12:06 – UI Design Principles  \n01:14:16 – Good vs Bad UI  \n01:19:32 – Wireframes & UI Fidelities (Hands-On: Auto Layout)  \n01:45:00 – Advanced UI Design Concepts  \n02:35:15 – Components in Figma  \n03:13:49 – Hands-On: Variants, Doctor Appointment App, Icons, Plugins, Animation  \n05:05:27 – Introduction to UX Design Patterns  \n05:31:58 – Need for UX Design Patterns  \n05:41:39 – UX vs UI Patterns  \n05:42:12 – Common UX Pattern Examples  \n05:47:32 – Laws of UX  \n06:01:51 – UX Case Study: Behance Research & Survey  \n06:31:15 – Ideation & Problem Solving  \n07:15:32 – What is Usability Evaluation?  \n07:21:26 – Methods of Usability Evaluation  \n07:30:04 – Moderated vs Unmoderated Testing  \n07:34:14 – Remote vs In-Person Testing  \n07:38:37 – Explorative vs Assessment vs Comparative Testing  \n07:45:58 – User Testing Methods  \n07:58:21 – Quantitative vs Qualitative Testing  \n08:03:48 – When to Use Quantitative vs Qualitative  \n08:14:35 – Understanding User Load  \n08:33:32 – Case Study Discussion  \n09:28:20 – UI Workshop Case Study  \n10:37:47 – Portfolio Review & Tips  \n11:38:20 – UI/UX Designer Interview Questions & Answers\n\n#uiuxdesigncourse #uiuxdesignfullcourse #uiuxdesign #uiuxcourse #intellipaat\n\n🔥Register for Intellipaat's State of the Art UI UX Design Course: https://intellipaat.com/ui-ux-course/\n\n➡️ About the Course\nThis UI/UX design course is designed and taught by the top Industry experts along with leading faculty from top IIT’s. The skills you will master in this course are UI/UX designing, identification of appropriate research methods, UI methodologies, Figma, and more. Learn from the best and be the best.\n\n📌 Do subscribe to Intellipaat channel & come across more relevant Tech content: https://goo.gl/hhsGWb\n\n▶️ Intellipaat Achievers Channel: https://www.youtube.com/@intellipaatachievers\n\n📚For more information, please write back to us at sales@intellipaat.com or call us at IND: +91-7022374614 / US : 1-800-216-8930",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/2icljqpaddk/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/2icljqpaddk/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/2icljqpaddk/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/2icljqpaddk/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/2icljqpaddk/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Intellipaat",
        "tags": [
          "ui ux design full course",
          "ui ux design full course 2025",
          "ui ux design course",
          "ui ux design training",
          "ui ux design course for beginners",
          "ui ux design complete course",
          "ui ux design tutorial for beginners",
          "ui ux course",
          "ui ux course for beginners",
          "ux design tutorial",
          "ui ux design tutorial",
          "figma for ui ux design",
          "user interface and user experience design",
          "ui ux design",
          "best ui ux design course online",
          "intellipaat",
          "intellipaat ui ux course",
          "ui ux design course free",
          "figma for ui ux"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "UI UX Design Full Course (2025) | Intellipaat",
          "description": "This UI/UX Design Course for Beginners by Intellipaat is a complete guide for aspiring designers who want to build a successful career in user interface and user experience design. The course starts with a roadmap for UI/UX designers, followed by a detailed understanding of atomic design principles, UI elements, and essential design principles that distinguish good interfaces from bad ones. You’ll learn hands-on techniques for creating wireframes, designing UI fidelities, and applying advanced design concepts using Figma components, variants, icons, plugins, and animations.\n\nThe course also dives into UX design patterns, highlighting their importance, common examples, and the key differences between UX and UI patterns. Through case studies, research, and ideation exercises, you’ll learn problem-solving techniques and usability evaluation methods, including moderated, unmoderated, remote, and in-person testing. Quantitative and qualitative testing, understanding user load, and real-world UI workshops help you gain practical insights. The course concludes with portfolio-building strategies and UI/UX designer interview questions to prepare you for job opportunities. By the end, you’ll have the knowledge, skills, and confidence to create engaging, user-friendly digital experiences in 2025.\n\nBelow are the topics covered in UI UX Design Full Course (2025)\n00:00:00 – Introduction to UI UX Design Course For Beginners\n00:01:34 – UI/UX Designer Roadmap  \n00:10:09 – Atomic Design Principles  \n00:27:42 – UI Elements  \n01:12:06 – UI Design Principles  \n01:14:16 – Good vs Bad UI  \n01:19:32 – Wireframes & UI Fidelities (Hands-On: Auto Layout)  \n01:45:00 – Advanced UI Design Concepts  \n02:35:15 – Components in Figma  \n03:13:49 – Hands-On: Variants, Doctor Appointment App, Icons, Plugins, Animation  \n05:05:27 – Introduction to UX Design Patterns  \n05:31:58 – Need for UX Design Patterns  \n05:41:39 – UX vs UI Patterns  \n05:42:12 – Common UX Pattern Examples  \n05:47:32 – Laws of UX  \n06:01:51 – UX Case Study: Behance Research & Survey  \n06:31:15 – Ideation & Problem Solving  \n07:15:32 – What is Usability Evaluation?  \n07:21:26 – Methods of Usability Evaluation  \n07:30:04 – Moderated vs Unmoderated Testing  \n07:34:14 – Remote vs In-Person Testing  \n07:38:37 – Explorative vs Assessment vs Comparative Testing  \n07:45:58 – User Testing Methods  \n07:58:21 – Quantitative vs Qualitative Testing  \n08:03:48 – When to Use Quantitative vs Qualitative  \n08:14:35 – Understanding User Load  \n08:33:32 – Case Study Discussion  \n09:28:20 – UI Workshop Case Study  \n10:37:47 – Portfolio Review & Tips  \n11:38:20 – UI/UX Designer Interview Questions & Answers\n\n#uiuxdesigncourse #uiuxdesignfullcourse #uiuxdesign #uiuxcourse #intellipaat\n\n🔥Register for Intellipaat's State of the Art UI UX Design Course: https://intellipaat.com/ui-ux-course/\n\n➡️ About the Course\nThis UI/UX design course is designed and taught by the top Industry experts along with leading faculty from top IIT’s. The skills you will master in this course are UI/UX designing, identification of appropriate research methods, UI methodologies, Figma, and more. Learn from the best and be the best.\n\n📌 Do subscribe to Intellipaat channel & come across more relevant Tech content: https://goo.gl/hhsGWb\n\n▶️ Intellipaat Achievers Channel: https://www.youtube.com/@intellipaatachievers\n\n📚For more information, please write back to us at sales@intellipaat.com or call us at IND: +91-7022374614 / US : 1-800-216-8930"
        },
        "defaultAudioLanguage": "en-IN"
      },
      "contentDetails": {
        "duration": "PT11H54M56S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": false,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "11406",
        "likeCount": "262",
        "favoriteCount": "0",
        "commentCount": "6"
      }
    }
  ],
  "pageInfo": {
    "totalResults": 30,
    "resultsPerPage": 30
  }
}
","status":200,"url":"https://www.googleapis.com/youtube/v3/videos?part=snippet%2CcontentDetails%2Cstatistics&id=truRwcI7-kg%2ConyB_X3zk6o%2CUjPpvf4TNLI%2C7DnypQA1SK8%2CfqGFeCezBD0%2CtruRwcI7-kg%2CMBblN98-5lg%2CWylVZzSsavg%2ConyB_X3zk6o%2CUjPpvf4TNLI%2CtruRwcI7-kg%2ConyB_X3zk6o%2C7DnypQA1SK8%2C2icljqpaddk%2CMBblN98-5lg%2CtruRwcI7-kg%2CMBblN98-5lg%2CWylVZzSsavg%2CmaEf9uU-giA%2CjdmX8ZIMRUU%2CtruRwcI7-kg%2CMBblN98-5lg%2C2icljqpaddk%2C7DnypQA1SK8%2ConyB_X3zk6o%2CmpJb9GNxdYI%2Ck2DSi1zGEc8%2CtruRwcI7-kg%2C7DnypQA1SK8%2C2icljqpaddk&key=AIzaSyAeZAsOW2kBeNqsdozdSNpajJeUOXsJ2fs"},"revalidate":3600,"tags":[]}