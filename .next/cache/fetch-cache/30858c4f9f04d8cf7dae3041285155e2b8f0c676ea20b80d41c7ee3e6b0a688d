{"kind":"FETCH","data":{"headers":{"content-encoding":"gzip","content-type":"application/json; charset=UTF-8","date":"Thu, 23 Oct 2025 11:02:32 GMT","server":"scaffolding on HTTPServer2","transfer-encoding":"chunked","vary":"Origin, X-Origin, Referer","x-content-type-options":"nosniff","x-frame-options":"SAMEORIGIN","x-xss-protection":"0"},"body":"{
  "kind": "youtube#videoListResponse",
  "etag": "TqxBa65j98UqLjsX1dcjukBHd2o",
  "items": [
    {
      "kind": "youtube#video",
      "etag": "v0n7gG2MXjCg03DpmhMg8GKNa9Y",
      "id": "tysDxjfgLMg",
      "snippet": {
        "publishedAt": "2025-06-20T15:49:26Z",
        "channelId": "UCNQ6FEtztATuaVhZKCY28Yw",
        "title": "What is n8n in Hindi. Fastest and easiest self deployment too",
        "description": "Is video me hum baat krenge, Langgraph, n8n and uske self deployment ki. Deployment se itna b mt daro, is video me sab clear kr denge.\nVideo dekhne ke baad, hostinger waale logo ne kaha, hame b chai psnd h n ye lo aapke students ke liye discount code:\nLink: http://hostinger.com/in/chaiaurcode\nCoupon code: CHAIAURCODE\n\nWelcome to chai aur code, a coding/programming dedicated channel in Hindi language. Now you can learn best of programming concepts with industry standard practical guide in Hindi language.\n\nAll source code is available at my Github account:\nhttps://github.com/hiteshchoudhary\n\nOur Open-Source Project is here: https://freeapi.app\n\nJoin me at whatsapp: https://hitesh.ai/whatsapp\n\nfor community discord: https://hitesh.ai/discord\n\nInstagram pe yaha paaye jaate h:\nhttps://www.instagram.com/hiteshchoudharyofficial/\n\nHTML video series:  https://www.youtube.com/watch?v=XmLOwJHFHf0&list=PLu71SKxNbfoDBNF5s-WH6aLbthSEIMhMI\n\nComplete javascript series: https://www.youtube.com/watch?v=Hr5iLG7sUa0&list=PLu71SKxNbfoBuX3f4EOACle2y-tRC5Q37\n\nComplete Reactjs series: https://www.youtube.com/watch?v=vz1RlUyrc3w&list=PLu71SKxNbfoDqgPchmvIsL4hTnJIrtige\n\nJavascript and react interview series: https://www.youtube.com/watch?v=1wqCyz7XrV4&list=PLu71SKxNbfoCy_MsA98SBfvUKF5eQit6L\n\nBackend development with Javascript: https://www.youtube.com/watch?v=EH3vGeqeIAo&list=PLu71SKxNbfoBGh_8p_NS-ZAh6v7HhYqHW\n\nPython Series: https://www.youtube.com/watch?v=Ca5DLSDfPec&list=PLu71SKxNbfoBsMugTFALhdLlZ5VOqCg2s",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/tysDxjfgLMg/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/tysDxjfgLMg/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/tysDxjfgLMg/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/tysDxjfgLMg/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/tysDxjfgLMg/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chai aur Code",
        "tags": [
          "coding",
          "hindi",
          "javascript",
          "web developer",
          "react",
          "quality",
          "reactjs",
          "tech interviews",
          "coding interviews",
          "python",
          "django",
          "machine learning",
          "python for beginners",
          "AI",
          "Data Science"
        ],
        "categoryId": "24",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "What is n8n in Hindi. Fastest and easiest self deployment too",
          "description": "Is video me hum baat krenge, Langgraph, n8n and uske self deployment ki. Deployment se itna b mt daro, is video me sab clear kr denge.\nVideo dekhne ke baad, hostinger waale logo ne kaha, hame b chai psnd h n ye lo aapke students ke liye discount code:\nLink: http://hostinger.com/in/chaiaurcode\nCoupon code: CHAIAURCODE\n\nWelcome to chai aur code, a coding/programming dedicated channel in Hindi language. Now you can learn best of programming concepts with industry standard practical guide in Hindi language.\n\nAll source code is available at my Github account:\nhttps://github.com/hiteshchoudhary\n\nOur Open-Source Project is here: https://freeapi.app\n\nJoin me at whatsapp: https://hitesh.ai/whatsapp\n\nfor community discord: https://hitesh.ai/discord\n\nInstagram pe yaha paaye jaate h:\nhttps://www.instagram.com/hiteshchoudharyofficial/\n\nHTML video series:  https://www.youtube.com/watch?v=XmLOwJHFHf0&list=PLu71SKxNbfoDBNF5s-WH6aLbthSEIMhMI\n\nComplete javascript series: https://www.youtube.com/watch?v=Hr5iLG7sUa0&list=PLu71SKxNbfoBuX3f4EOACle2y-tRC5Q37\n\nComplete Reactjs series: https://www.youtube.com/watch?v=vz1RlUyrc3w&list=PLu71SKxNbfoDqgPchmvIsL4hTnJIrtige\n\nJavascript and react interview series: https://www.youtube.com/watch?v=1wqCyz7XrV4&list=PLu71SKxNbfoCy_MsA98SBfvUKF5eQit6L\n\nBackend development with Javascript: https://www.youtube.com/watch?v=EH3vGeqeIAo&list=PLu71SKxNbfoBGh_8p_NS-ZAh6v7HhYqHW\n\nPython Series: https://www.youtube.com/watch?v=Ca5DLSDfPec&list=PLu71SKxNbfoBsMugTFALhdLlZ5VOqCg2s"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT19M25S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "280837",
        "likeCount": "7008",
        "favoriteCount": "0",
        "commentCount": "354"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "e48nTJKoLeHK7cFKSwHOx97U950",
      "id": "rJORiMZe2hA",
      "snippet": {
        "publishedAt": "2024-04-12T13:30:08Z",
        "channelId": "UCNQ6FEtztATuaVhZKCY28Yw",
        "title": "6 Step guide to master api handling",
        "description": "Text guide: https://chaicode.com/blog/6-step-guide-to-master-api-handling\n\nYou have been using APIs in their most basic format. You send a request to a server, and it sends back a response. But APIs can do so much more than that. They can be used to create new APIs, to modify existing APIs, and to integrate APIs with other APIs. Most of the time that you practice is just data picking from APIs or loop through the data. But APIs can do so much more than that. At a max level, you went through the basics of state management.\n\nWelcome to chai aur code, a coding/programming dedicated channel in Hindi language. Now you can learn best of programming concepts with industry standard practical guide in Hindi language.\n\nAll source code is available at my Github account:\nhttps://github.com/hiteshchoudhary\n\nOur Open-Source Project is here: https://freeapi.app\n\nJoin me at whatsapp: https://hitesh.ai/whatsapp\n\nfor community discord: https://hitesh.ai/discord\n\nInstagram pe yaha paaye jaate h:\nhttps://www.instagram.com/hiteshchoudharyofficial/\n\nHTML video series:  https://www.youtube.com/watch?v=XmLOwJHFHf0&list=PLu71SKxNbfoDBNF5s-WH6aLbthSEIMhMI\n\nComplete javascript series: https://www.youtube.com/watch?v=Hr5iLG7sUa0&list=PLu71SKxNbfoBuX3f4EOACle2y-tRC5Q37\n\nComplete Reactjs series: https://www.youtube.com/watch?v=vz1RlUyrc3w&list=PLu71SKxNbfoDqgPchmvIsL4hTnJIrtige\n\nJavascript and react interview series: https://www.youtube.com/watch?v=1wqCyz7XrV4&list=PLu71SKxNbfoCy_MsA98SBfvUKF5eQit6L\n\nBackend development with Javascript: https://www.youtube.com/watch?v=EH3vGeqeIAo&list=PLu71SKxNbfoBGh_8p_NS-ZAh6v7HhYqHW\n\nPython Series: https://www.youtube.com/watch?v=Ca5DLSDfPec&list=PLu71SKxNbfoBsMugTFALhdLlZ5VOqCg2s",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/rJORiMZe2hA/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/rJORiMZe2hA/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/rJORiMZe2hA/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/rJORiMZe2hA/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/rJORiMZe2hA/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chai aur Code",
        "tags": [
          "coding",
          "hindi",
          "javascript",
          "web developer",
          "react",
          "quality",
          "reactjs",
          "tech interviews",
          "coding interviews",
          "python",
          "django",
          "machine learning",
          "python for beginners",
          "AI",
          "Data Science",
          "API handling",
          "API",
          "axios",
          "fetch",
          "react query"
        ],
        "categoryId": "24",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "6 Step guide to master api handling",
          "description": "Text guide: https://chaicode.com/blog/6-step-guide-to-master-api-handling\n\nYou have been using APIs in their most basic format. You send a request to a server, and it sends back a response. But APIs can do so much more than that. They can be used to create new APIs, to modify existing APIs, and to integrate APIs with other APIs. Most of the time that you practice is just data picking from APIs or loop through the data. But APIs can do so much more than that. At a max level, you went through the basics of state management.\n\nWelcome to chai aur code, a coding/programming dedicated channel in Hindi language. Now you can learn best of programming concepts with industry standard practical guide in Hindi language.\n\nAll source code is available at my Github account:\nhttps://github.com/hiteshchoudhary\n\nOur Open-Source Project is here: https://freeapi.app\n\nJoin me at whatsapp: https://hitesh.ai/whatsapp\n\nfor community discord: https://hitesh.ai/discord\n\nInstagram pe yaha paaye jaate h:\nhttps://www.instagram.com/hiteshchoudharyofficial/\n\nHTML video series:  https://www.youtube.com/watch?v=XmLOwJHFHf0&list=PLu71SKxNbfoDBNF5s-WH6aLbthSEIMhMI\n\nComplete javascript series: https://www.youtube.com/watch?v=Hr5iLG7sUa0&list=PLu71SKxNbfoBuX3f4EOACle2y-tRC5Q37\n\nComplete Reactjs series: https://www.youtube.com/watch?v=vz1RlUyrc3w&list=PLu71SKxNbfoDqgPchmvIsL4hTnJIrtige\n\nJavascript and react interview series: https://www.youtube.com/watch?v=1wqCyz7XrV4&list=PLu71SKxNbfoCy_MsA98SBfvUKF5eQit6L\n\nBackend development with Javascript: https://www.youtube.com/watch?v=EH3vGeqeIAo&list=PLu71SKxNbfoBGh_8p_NS-ZAh6v7HhYqHW\n\nPython Series: https://www.youtube.com/watch?v=Ca5DLSDfPec&list=PLu71SKxNbfoBsMugTFALhdLlZ5VOqCg2s"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT14M42S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "142675",
        "likeCount": "8090",
        "favoriteCount": "0",
        "commentCount": "1469"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "zXYQ3dghHdqr3kjOHg7qf22tz5M",
      "id": "AjCJtT_qkKI",
      "snippet": {
        "publishedAt": "2022-04-08T18:14:14Z",
        "channelId": "UCBwmMxybNva6P_5VmxjzwqA",
        "title": "How to make money from Coding? 5 ways to earn without a job or degree",
        "description": "🔴 Alpha Placement Batch - https://bit.ly/3oqidsd\n\n🟡 Complete C Course : https://bit.ly/FullTutorialC\n🟡 Java Placement Course(with DSA) : https://bit.ly/JavaPlaylistComplete\n🟡 C++ Placement Course (DSA) : https://bit.ly/CppPlaylistComplete\n🔥 Instagram: https://www.instagram.com/dhattarwalaman/\n🔥 Telegram: https://t.me/+k4rdgTPwmm5kMGVl",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/AjCJtT_qkKI/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/AjCJtT_qkKI/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/AjCJtT_qkKI/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/AjCJtT_qkKI/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/AjCJtT_qkKI/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Apna College",
        "tags": [
          "C++",
          "C++ coding",
          "C++ full course",
          "C++ placement course",
          "how to code",
          "programming",
          "college placement course",
          "C++ language",
          "java",
          "java language",
          "java full course",
          "java placement",
          "java code",
          "java coding"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "How to make money from Coding? 5 ways to earn without a job or degree",
          "description": "🔴 Alpha Placement Batch - https://bit.ly/3oqidsd\n\n🟡 Complete C Course : https://bit.ly/FullTutorialC\n🟡 Java Placement Course(with DSA) : https://bit.ly/JavaPlaylistComplete\n🟡 C++ Placement Course (DSA) : https://bit.ly/CppPlaylistComplete\n🔥 Instagram: https://www.instagram.com/dhattarwalaman/\n🔥 Telegram: https://t.me/+k4rdgTPwmm5kMGVl"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT7M13S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "2360055",
        "likeCount": "102562",
        "favoriteCount": "0",
        "commentCount": "1327"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "UV-cbB_LFOJ3KUrtZ8xvS2VRWSE",
      "id": "BQTaBibVbo4",
      "snippet": {
        "publishedAt": "2025-02-17T12:55:07Z",
        "channelId": "UCNQ6FEtztATuaVhZKCY28Yw",
        "title": "New Junior Developers Can’t Actually Code",
        "description": "Here is resource: https://nmn.gl/blog/ai-and-learning\n\nWelcome to chai aur code, a coding/programming dedicated channel in Hindi language. Now you can learn best of programming concepts with industry standard practical guide in Hindi language.\n\nAll source code is available at my Github account:\nhttps://github.com/hiteshchoudhary\n\nOur Open-Source Project is here: https://freeapi.app\n\nJoin me at whatsapp: https://hitesh.ai/whatsapp\n\nfor community discord: https://hitesh.ai/discord\n\nInstagram pe yaha paaye jaate h:\nhttps://www.instagram.com/hiteshchoudharyofficial/\n\nHTML video series:  https://www.youtube.com/watch?v=XmLOwJHFHf0&list=PLu71SKxNbfoDBNF5s-WH6aLbthSEIMhMI\n\nComplete javascript series: https://www.youtube.com/watch?v=Hr5iLG7sUa0&list=PLu71SKxNbfoBuX3f4EOACle2y-tRC5Q37\n\nComplete Reactjs series: https://www.youtube.com/watch?v=vz1RlUyrc3w&list=PLu71SKxNbfoDqgPchmvIsL4hTnJIrtige\n\nJavascript and react interview series: https://www.youtube.com/watch?v=1wqCyz7XrV4&list=PLu71SKxNbfoCy_MsA98SBfvUKF5eQit6L\n\nBackend development with Javascript: https://www.youtube.com/watch?v=EH3vGeqeIAo&list=PLu71SKxNbfoBGh_8p_NS-ZAh6v7HhYqHW\n\nPython Series: https://www.youtube.com/watch?v=Ca5DLSDfPec&list=PLu71SKxNbfoBsMugTFALhdLlZ5VOqCg2s",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/BQTaBibVbo4/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/BQTaBibVbo4/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/BQTaBibVbo4/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/BQTaBibVbo4/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/BQTaBibVbo4/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chai aur Code",
        "tags": [
          "coding",
          "hindi",
          "javascript",
          "web developer",
          "react",
          "quality",
          "reactjs",
          "tech interviews",
          "coding interviews",
          "python",
          "django",
          "machine learning",
          "python for beginners",
          "AI",
          "Data Science"
        ],
        "categoryId": "24",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "New Junior Developers Can’t Actually Code",
          "description": "Here is resource: https://nmn.gl/blog/ai-and-learning\n\nWelcome to chai aur code, a coding/programming dedicated channel in Hindi language. Now you can learn best of programming concepts with industry standard practical guide in Hindi language.\n\nAll source code is available at my Github account:\nhttps://github.com/hiteshchoudhary\n\nOur Open-Source Project is here: https://freeapi.app\n\nJoin me at whatsapp: https://hitesh.ai/whatsapp\n\nfor community discord: https://hitesh.ai/discord\n\nInstagram pe yaha paaye jaate h:\nhttps://www.instagram.com/hiteshchoudharyofficial/\n\nHTML video series:  https://www.youtube.com/watch?v=XmLOwJHFHf0&list=PLu71SKxNbfoDBNF5s-WH6aLbthSEIMhMI\n\nComplete javascript series: https://www.youtube.com/watch?v=Hr5iLG7sUa0&list=PLu71SKxNbfoBuX3f4EOACle2y-tRC5Q37\n\nComplete Reactjs series: https://www.youtube.com/watch?v=vz1RlUyrc3w&list=PLu71SKxNbfoDqgPchmvIsL4hTnJIrtige\n\nJavascript and react interview series: https://www.youtube.com/watch?v=1wqCyz7XrV4&list=PLu71SKxNbfoCy_MsA98SBfvUKF5eQit6L\n\nBackend development with Javascript: https://www.youtube.com/watch?v=EH3vGeqeIAo&list=PLu71SKxNbfoBGh_8p_NS-ZAh6v7HhYqHW\n\nPython Series: https://www.youtube.com/watch?v=Ca5DLSDfPec&list=PLu71SKxNbfoBsMugTFALhdLlZ5VOqCg2s"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT19M33S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "154392",
        "likeCount": "7387",
        "favoriteCount": "0",
        "commentCount": "874"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "1aHBtMCoQgnngnUwZnH8C1Qo7QI",
      "id": "m7VcIH_N9ZY",
      "snippet": {
        "publishedAt": "2025-05-10T16:16:42Z",
        "channelId": "UCBwmMxybNva6P_5VmxjzwqA",
        "title": "How to get Tech Placement in 6 Months? Study plan for Software Engineering Placements",
        "description": "Want to study for Tech Placements/Internships from us :\nOur Latest Placement Batches : https://linktr.ee/apnacollege.in\n\nShare your progress on Twitter : https://x.com/ShradhaKhapra_\nDSA Series full playlist : https://www.youtube.com/playlist?list=PLfqMhTWNBTe137I_EPQd34TsgV6IO55pt\n\nShradha Khapra Ma'am community \nInstagram : https://www.instagram.com/shradhakhapra\nLinkedIn : https://www.linkedin.com/in/shradha-khapra/",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/m7VcIH_N9ZY/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/m7VcIH_N9ZY/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/m7VcIH_N9ZY/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/m7VcIH_N9ZY/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/m7VcIH_N9ZY/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Apna College",
        "tags": [
          "C++",
          "C++ coding",
          "C++ full course",
          "C++ placement course",
          "how to code",
          "programming",
          "college placement course",
          "C++ language",
          "java",
          "java language",
          "java full course",
          "java placement",
          "java code",
          "java coding"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "How to get Tech Placement in 6 Months? Study plan for Software Engineering Placements",
          "description": "Want to study for Tech Placements/Internships from us :\nOur Latest Placement Batches : https://linktr.ee/apnacollege.in\n\nShare your progress on Twitter : https://x.com/ShradhaKhapra_\nDSA Series full playlist : https://www.youtube.com/playlist?list=PLfqMhTWNBTe137I_EPQd34TsgV6IO55pt\n\nShradha Khapra Ma'am community \nInstagram : https://www.instagram.com/shradhakhapra\nLinkedIn : https://www.linkedin.com/in/shradha-khapra/"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT17M1S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "696968",
        "likeCount": "26874",
        "favoriteCount": "0",
        "commentCount": "1044"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "tEVkXI8lnqZn5vaD1yv5aftHliA",
      "id": "asRKwu0S1gk",
      "snippet": {
        "publishedAt": "2023-10-22T14:30:01Z",
        "channelId": "UCaMtIk3mepD4NbBicP0-WJw",
        "title": "Which is Best Course ?? || Web Development || #coding #trending",
        "description": "Which is Best Course ?? || Web Development || #coding #trending \n#pranjalmishra  \n\nDot Batch :- https://www.thecodehelp.in/course/web-development-bootcamp\nDelta Batch :- https://www.apnacollege.in/course/delta-batch-2\nPW Full Stack :- https://pwskills.com/course/full-stack-web-development-ja\n\nHere, we are dedicated to guiding students towards the right path to achieve greatness in their careers. Our mission is to empower every student with the knowledge, tools, and inspiration they need to excel and make their dreams a reality. 🌟\n\nJoin us as we provide insightful content designed to help students enhance their skills and abilities. Our videos are tailored to support your personal and professional growth. Whether you're a high school student exploring your options or a college student striving for excellence, this channel is your go-to resource for valuable insights and guidance. 🧑\u200d💻\n\nDon't miss out on the opportunity to unlock your full potential. Subscribe now and embark on a journey towards a brighter future filled with success and accomplishments!  🏆🏅\n\nfor business enquiry :- pranjalmishrabusiness@gmail.com\n\nConnect with me here :-\nLINKED-IN :- https://www.linkedin.com/in/ipranjalmishra/\nTELEGRAM :- https://t.me/codeplaychannel\nVlogging :- https://www.youtube.com/@I-PranjalMishra\n\nLove You All 😊🙏❤️\n\n- Web development best course\n- Web development best resource\n- Web development learn fast\n- Web development best free resource\n- dot love babbar web development\n- shraddha didi web development apna college\n- pwskill web development\n\n#coding #coder #pranjalmishra #codeplay #codingcommunity #web development #freshers #placement #project",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/asRKwu0S1gk/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/asRKwu0S1gk/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/asRKwu0S1gk/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/asRKwu0S1gk/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/asRKwu0S1gk/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "CodePlay",
        "tags": [
          "CodePlay",
          "CP",
          "codeplay",
          "projects",
          "html",
          "css",
          "javascript",
          "python",
          "cpp",
          "c++",
          "dsa",
          "resume",
          "build",
          "develop",
          "project on",
          "web development",
          "Which is Best Course",
          "Web Developement",
          "which is best course",
          "love babbar web development",
          "apna college web development",
          "which is best web development course",
          "pranjal mishra",
          "pranjalmishra",
          "code play",
          "web",
          "frontend",
          "backend",
          "coding",
          "development",
          "coldplay"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "Which is Best Course ?? || Web Development || #coding #trending",
          "description": "Which is Best Course ?? || Web Development || #coding #trending \n#pranjalmishra  \n\nDot Batch :- https://www.thecodehelp.in/course/web-development-bootcamp\nDelta Batch :- https://www.apnacollege.in/course/delta-batch-2\nPW Full Stack :- https://pwskills.com/course/full-stack-web-development-ja\n\nHere, we are dedicated to guiding students towards the right path to achieve greatness in their careers. Our mission is to empower every student with the knowledge, tools, and inspiration they need to excel and make their dreams a reality. 🌟\n\nJoin us as we provide insightful content designed to help students enhance their skills and abilities. Our videos are tailored to support your personal and professional growth. Whether you're a high school student exploring your options or a college student striving for excellence, this channel is your go-to resource for valuable insights and guidance. 🧑\u200d💻\n\nDon't miss out on the opportunity to unlock your full potential. Subscribe now and embark on a journey towards a brighter future filled with success and accomplishments!  🏆🏅\n\nfor business enquiry :- pranjalmishrabusiness@gmail.com\n\nConnect with me here :-\nLINKED-IN :- https://www.linkedin.com/in/ipranjalmishra/\nTELEGRAM :- https://t.me/codeplaychannel\nVlogging :- https://www.youtube.com/@I-PranjalMishra\n\nLove You All 😊🙏❤️\n\n- Web development best course\n- Web development best resource\n- Web development learn fast\n- Web development best free resource\n- dot love babbar web development\n- shraddha didi web development apna college\n- pwskill web development\n\n#coding #coder #pranjalmishra #codeplay #codingcommunity #web development #freshers #placement #project"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT4M26S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": false,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "17863",
        "likeCount": "329",
        "favoriteCount": "0",
        "commentCount": "88"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "DkKXe9-9F-FlG01W1B8urilt-Ro",
      "id": "zlZ_dupXxE0",
      "snippet": {
        "publishedAt": "2022-02-19T16:57:49Z",
        "channelId": "UCBwmMxybNva6P_5VmxjzwqA",
        "title": "How to Hack Password?",
        "description": "Are you worried about placements/internships? Want to prepare for companies like Microsoft, Amazon & Google? Join ALPHA.\n🔴 Alpha Placement Batch - https://bit.ly/3ELJjn2\n\n\nJoin the Apni Community🔥 : https://telegram.me/+k4rdgTPwmm5kMGVl\n\n🔥Java Placement Course : https://www.youtube.com/watch?v=yRpLlJmRo2w&list=PLfqMhTWNBTe3LtFWcvwpqTkUSlB32kJop\n🔥Complete C++ Placement Course (Data Structures+Algorithm) :https://www.youtube.com/playlist?list=PLfqMhTWNBTe0b2nM6JHVCnAkhQRGiZMSJ\n🔥Instagram: https://www.instagram.com/dhattarwalaman/",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/zlZ_dupXxE0/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/zlZ_dupXxE0/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/zlZ_dupXxE0/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/zlZ_dupXxE0/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/zlZ_dupXxE0/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Apna College",
        "tags": [
          "how to code",
          "java language",
          "password",
          "password hacking",
          "hackers",
          "hacking",
          "rainbow attack",
          "dictionary attack",
          "brute force attack",
          "salting",
          "cyber security"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "How to Hack Password?",
          "description": "Are you worried about placements/internships? Want to prepare for companies like Microsoft, Amazon & Google? Join ALPHA.\n🔴 Alpha Placement Batch - https://bit.ly/3ELJjn2\n\n\nJoin the Apni Community🔥 : https://telegram.me/+k4rdgTPwmm5kMGVl\n\n🔥Java Placement Course : https://www.youtube.com/watch?v=yRpLlJmRo2w&list=PLfqMhTWNBTe3LtFWcvwpqTkUSlB32kJop\n🔥Complete C++ Placement Course (Data Structures+Algorithm) :https://www.youtube.com/playlist?list=PLfqMhTWNBTe0b2nM6JHVCnAkhQRGiZMSJ\n🔥Instagram: https://www.instagram.com/dhattarwalaman/"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT4M33S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "6526020",
        "likeCount": "224323",
        "favoriteCount": "0",
        "commentCount": "4266"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "FKDYawe60ZDkl-AWMj2RkhrgJjo",
      "id": "10hRlpUNeNA",
      "snippet": {
        "publishedAt": "2023-10-09T14:30:09Z",
        "channelId": "UCNQ6FEtztATuaVhZKCY28Yw",
        "title": "Taking backend to next level",
        "description": "Visit https://chaicode.com for all related materials, community help, source code etc.\nI thought let's raise the bar of quality in backend too. What can I do more to improve the teaching on this channel. One such thought is to improve the final project in the playlist. This will surely take a lot of time but it's surely worth it.\n\n\nSara code yaha milta h\nhttps://github.com/hiteshchoudhary/\nWhatsApp pe yaha paaye jaate h:\nhttps://hitesh.ai/whatsapp\nDiscord pe yaha paaye jaate h:\nhttps://hitesh.ai/discord\nInstagram pe yaha paaye jaate h:\nhttps://www.instagram.com/hiteshchoudharyofficial/",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/10hRlpUNeNA/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/10hRlpUNeNA/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/10hRlpUNeNA/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/10hRlpUNeNA/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/10hRlpUNeNA/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Chai aur Code",
        "tags": [
          "coding",
          "hindi",
          "javascript",
          "web developer",
          "quality",
          "reactjs",
          "tech interviews",
          "coding interviews",
          "backend",
          "express",
          "mongo",
          "databases"
        ],
        "categoryId": "24",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "Taking backend to next level",
          "description": "Visit https://chaicode.com for all related materials, community help, source code etc.\nI thought let's raise the bar of quality in backend too. What can I do more to improve the teaching on this channel. One such thought is to improve the final project in the playlist. This will surely take a lot of time but it's surely worth it.\n\n\nSara code yaha milta h\nhttps://github.com/hiteshchoudhary/\nWhatsApp pe yaha paaye jaate h:\nhttps://hitesh.ai/whatsapp\nDiscord pe yaha paaye jaate h:\nhttps://hitesh.ai/discord\nInstagram pe yaha paaye jaate h:\nhttps://www.instagram.com/hiteshchoudharyofficial/"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT9M51S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "168173",
        "likeCount": "8242",
        "favoriteCount": "0",
        "commentCount": "1212"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "IRbxMvRhDpVeS8-zEfD1KHLaefw",
      "id": "H8Lyj2D_cWo",
      "snippet": {
        "publishedAt": "2024-06-27T16:20:54Z",
        "channelId": "UCBwmMxybNva6P_5VmxjzwqA",
        "title": "What is Docker? Simply Explained by Shradha Ma'am",
        "description": "You can start your Tech Placement/Internship journey with :\nNew Sigma 4.0 : https://www.apnacollege.in/course/sigma-4\nEarly bird offer till. 24th July, 9PM\n\nLink for International Students : https://buy.stripe.com/14kaEQ9be3FsaB2bIW\n\n----------------------------------------------------\nPS : for those who asked, EMI option is available on payment page. \n\nEligibility for Sigm 4.0 \n- B.Tech students preparing for Tech Placement/Internships. \n- start as early as possible, first 2 years are most important. \n- M.Tech/MCA/BCA who are preparing for Tech Placements/Internships\n\nClass Schedule : \n- Mentioned in video & on website. \n- Lectures will come on alternate days.\n- Lecture Timings : 8PM \n- Lecture duration : 1 - 1.5 Hour\n\n----------------------------------------------------\nJoin the Apni Community🔥 : https://telegram.me/+k4rdgTPwmm5kMGVl",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/H8Lyj2D_cWo/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/H8Lyj2D_cWo/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/H8Lyj2D_cWo/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/H8Lyj2D_cWo/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/H8Lyj2D_cWo/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Apna College",
        "tags": [
          "C++",
          "C++ coding",
          "C++ full course",
          "C++ placement course",
          "how to code",
          "programming",
          "college placement course",
          "C++ language",
          "java",
          "java language",
          "java full course",
          "java placement",
          "java code",
          "java coding"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "What is Docker? Simply Explained by Shradha Ma'am",
          "description": "You can start your Tech Placement/Internship journey with :\nNew Sigma 4.0 : https://www.apnacollege.in/course/sigma-4\nEarly bird offer till. 24th July, 9PM\n\nLink for International Students : https://buy.stripe.com/14kaEQ9be3FsaB2bIW\n\n----------------------------------------------------\nPS : for those who asked, EMI option is available on payment page. \n\nEligibility for Sigm 4.0 \n- B.Tech students preparing for Tech Placement/Internships. \n- start as early as possible, first 2 years are most important. \n- M.Tech/MCA/BCA who are preparing for Tech Placements/Internships\n\nClass Schedule : \n- Mentioned in video & on website. \n- Lectures will come on alternate days.\n- Lecture Timings : 8PM \n- Lecture duration : 1 - 1.5 Hour\n\n----------------------------------------------------\nJoin the Apni Community🔥 : https://telegram.me/+k4rdgTPwmm5kMGVl"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT19M32S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "992078",
        "likeCount": "23948",
        "favoriteCount": "0",
        "commentCount": "1174"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "WJIf5qTCwKx-XJJbMbIcP8efhyo",
      "id": "SycSR-NuDF0",
      "snippet": {
        "publishedAt": "2024-12-31T16:29:20Z",
        "channelId": "UCBwmMxybNva6P_5VmxjzwqA",
        "title": "Complete Full Stack Web Development Preparation : MERN Stack + 6 Major Projects | New Delta 6.0",
        "description": "Save time & study only what's needed for Placements\nNew Delta 6.0 Batch : https://www.apnacollege.in/course/delta-6\n\n---------------------------------------------------------\nPS : for those who asked, EMI option is available on payment page. \n\n\nEligibility for Delta 6.0\n- B.Tech students preparing for Tech Placement/Internships. \n- start as early as possible, first 2 years are most important. \n- M.Tech/MCA/BCA who are preparing for Tech Placements/Internships\n\nClass Schedule : \n- Mentioned in video & on website. \n- Lectures will come on alternate days.\n- Lecture Timings : 8PM \n- Lecture duration : 1 - 1.5 Hour\n\n\nShradha Ma'am community \nInstagram : https://www.instagram.com/shradhakhapra\nLinkedIn : https://www.linkedin.com/in/shradha-khapra/",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/SycSR-NuDF0/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/SycSR-NuDF0/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/SycSR-NuDF0/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/SycSR-NuDF0/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/SycSR-NuDF0/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Apna College",
        "tags": [
          "C++",
          "C++ coding",
          "C++ full course",
          "C++ placement course",
          "how to code",
          "programming",
          "college placement course",
          "C++ language",
          "java",
          "java language",
          "java full course",
          "java placement",
          "java code",
          "java coding"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "Complete Full Stack Web Development Preparation : MERN Stack + 6 Major Projects | New Delta 6.0",
          "description": "Save time & study only what's needed for Placements\nNew Delta 6.0 Batch : https://www.apnacollege.in/course/delta-6\n\n---------------------------------------------------------\nPS : for those who asked, EMI option is available on payment page. \n\n\nEligibility for Delta 6.0\n- B.Tech students preparing for Tech Placement/Internships. \n- start as early as possible, first 2 years are most important. \n- M.Tech/MCA/BCA who are preparing for Tech Placements/Internships\n\nClass Schedule : \n- Mentioned in video & on website. \n- Lectures will come on alternate days.\n- Lecture Timings : 8PM \n- Lecture duration : 1 - 1.5 Hour\n\n\nShradha Ma'am community \nInstagram : https://www.instagram.com/shradhakhapra\nLinkedIn : https://www.linkedin.com/in/shradha-khapra/"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT11M7S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "265805",
        "likeCount": "9322",
        "favoriteCount": "0",
        "commentCount": "1274"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "WDHQfUywkHL6m0bhvUlVzATvTRU",
      "id": "a-6O6KI9c48",
      "snippet": {
        "publishedAt": "2019-05-21T17:49:10Z",
        "channelId": "UCvHX2bCZG2m9ddUhwxudKYA",
        "title": "Next js tutorial #8 fetch api data",
        "description": "In this next js video tutorial we learn how to call api  and get data with fetch api and this tutorial is make by anil sidhu\nwe use a sample api data and lean how we can get json data simple example\n\nhttps://chat.whatsapp.com/LDINpyCAwWXBnGML3t2VxG\nget find every video whatsapp via joining group\n\nnext js from scratch\n\nCheckout and subscribe our new channel for technical news\nhttps://www.youtube.com/channel/UCUu2FA5OO9KpFXL2ZYR0aNg",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/a-6O6KI9c48/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/a-6O6KI9c48/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/a-6O6KI9c48/hqdefault.jpg",
            "width": 480,
            "height": 360
          }
        },
        "channelTitle": "Code Step By Step",
        "tags": [
          "next js tutorial",
          "next js fetch api",
          "next js call api",
          "api in next js",
          "call api in next js",
          "next js",
          "anil sidhu"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "Next js tutorial #8 fetch api data",
          "description": "In this next js video tutorial we learn how to call api  and get data with fetch api and this tutorial is make by anil sidhu\nwe use a sample api data and lean how we can get json data simple example\n\nhttps://chat.whatsapp.com/LDINpyCAwWXBnGML3t2VxG\nget find every video whatsapp via joining group\n\nnext js from scratch\n\nCheckout and subscribe our new channel for technical news\nhttps://www.youtube.com/channel/UCUu2FA5OO9KpFXL2ZYR0aNg"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT7M15S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "17058",
        "likeCount": "91",
        "favoriteCount": "0",
        "commentCount": "6"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "Y3rqrBi13omai1LfmpcjvS6jgPI",
      "id": "rJ1iA-33fss",
      "snippet": {
        "publishedAt": "2021-12-20T16:09:21Z",
        "channelId": "UCBwmMxybNva6P_5VmxjzwqA",
        "title": "All about Game development | What to study, jobs, packages? Simply Explained",
        "description": "🔥Java Placement Course : https://www.youtube.com/watch?v=yRpLlJmRo2w&list=PLfqMhTWNBTe3LtFWcvwpqTkUSlB32kJop\n🔥Complete C++ Placement Course (Data Structures+Algorithm) :https://www.youtube.com/playlist?list=PLfqMhTWNBTe0b2nM6JHVCnAkhQRGiZMSJ\n🔥Telegram: https://t.me/apnikakshaofficial\n🔥Instagram: https://www.instagram.com/dhattarwalaman/\n\nMy YouTube Gear 😉: https://docs.google.com/document/d/1pyTJVmed-rHFXNqQodOTYr7z-EhH37s8pvtYpR0vMR4/edit?usp=sharing",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/rJ1iA-33fss/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/rJ1iA-33fss/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/rJ1iA-33fss/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/rJ1iA-33fss/sddefault.jpg",
            "width": 640,
            "height": 480
          }
        },
        "channelTitle": "Apna College",
        "tags": [
          "C++",
          "C++ coding",
          "C++ full course",
          "C++ placement course",
          "how to code",
          "programming",
          "college placement course",
          "C++ language",
          "java",
          "java language",
          "java full course",
          "java placement",
          "java code",
          "java coding"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "All about Game development | What to study, jobs, packages? Simply Explained",
          "description": "🔥Java Placement Course : https://www.youtube.com/watch?v=yRpLlJmRo2w&list=PLfqMhTWNBTe3LtFWcvwpqTkUSlB32kJop\n🔥Complete C++ Placement Course (Data Structures+Algorithm) :https://www.youtube.com/playlist?list=PLfqMhTWNBTe0b2nM6JHVCnAkhQRGiZMSJ\n🔥Telegram: https://t.me/apnikakshaofficial\n🔥Instagram: https://www.instagram.com/dhattarwalaman/\n\nMy YouTube Gear 😉: https://docs.google.com/document/d/1pyTJVmed-rHFXNqQodOTYr7z-EhH37s8pvtYpR0vMR4/edit?usp=sharing"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT10M38S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "1931704",
        "likeCount": "80266",
        "favoriteCount": "0",
        "commentCount": "1537"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "0g9BllgSpRO8dlryvHL7wrXhY4M",
      "id": "t9MJ1gxcJ4w",
      "snippet": {
        "publishedAt": "2025-09-24T15:43:16Z",
        "channelId": "UCBwmMxybNva6P_5VmxjzwqA",
        "title": "AI Engineer Complete RoadMap for 2025 | from basics to AI/ML Advanced",
        "description": "Want to study for Tech Placements/Internships from us :\nOur Latest Placement Batches : https://linktr.ee/apnacollege.in\n\nShare your progress on Twitter : https://x.com/ShradhaKhapra_\nDSA Series full playlist : https://www.youtube.com/playlist?list=PLfqMhTWNBTe137I_EPQd34TsgV6IO55pt\n\nTimeStamps : \n00:00 Role of AI in our Life\n01:36 What is an AI engineer?\n02:36 Important disclaimer \n03:40 Fundamental concepts \n03:55 Step 1\n04:24 Step 2\n05:17 Step 3\n05:45 Step 4\n05:58 Data\n06:39 Machine Learning \n08:16 Deep Learning \n08:46 LLMs\n10:36 Step 5\n16:25 Average salary \n16:52 Summary and tips\n\nShradha Khapra Ma'am community \nInstagram : https://www.instagram.com/shradhakhapra\nLinkedIn : https://www.linkedin.com/in/shradha-khapra/",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/t9MJ1gxcJ4w/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/t9MJ1gxcJ4w/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/t9MJ1gxcJ4w/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/t9MJ1gxcJ4w/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/t9MJ1gxcJ4w/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Apna College",
        "tags": [
          "C++",
          "C++ coding",
          "C++ full course",
          "C++ placement course",
          "how to code",
          "programming",
          "college placement course",
          "C++ language",
          "java",
          "java language",
          "java full course",
          "java placement",
          "java code",
          "java coding"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "AI Engineer Complete RoadMap for 2025 | from basics to AI/ML Advanced",
          "description": "Want to study for Tech Placements/Internships from us :\nOur Latest Placement Batches : https://linktr.ee/apnacollege.in\n\nShare your progress on Twitter : https://x.com/ShradhaKhapra_\nDSA Series full playlist : https://www.youtube.com/playlist?list=PLfqMhTWNBTe137I_EPQd34TsgV6IO55pt\n\nTimeStamps : \n00:00 Role of AI in our Life\n01:36 What is an AI engineer?\n02:36 Important disclaimer \n03:40 Fundamental concepts \n03:55 Step 1\n04:24 Step 2\n05:17 Step 3\n05:45 Step 4\n05:58 Data\n06:39 Machine Learning \n08:16 Deep Learning \n08:46 LLMs\n10:36 Step 5\n16:25 Average salary \n16:52 Summary and tips\n\nShradha Khapra Ma'am community \nInstagram : https://www.instagram.com/shradhakhapra\nLinkedIn : https://www.linkedin.com/in/shradha-khapra/"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT17M50S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "761462",
        "likeCount": "30339",
        "favoriteCount": "0",
        "commentCount": "1827"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "dXlQsVkQa3DbllTPxfGPCEu4pco",
      "id": "aXYp-clXm2s",
      "snippet": {
        "publishedAt": "2021-03-22T06:11:15Z",
        "channelId": "UCo9xTRmg1SqQ5JSsA2fAgJw",
        "title": "Use of JavaScript in Hindi | Beginner to Expert 🔥 | Complete Course #3",
        "description": "If you have courage to learn then checkout my complete MERN stack dream course 🔥🔥🚀\nhttps://mern.space\n\n🔥\n\n👉🏾 Use of JavaScript: JavaScript complete course in 2021 in Hindi 🔥🔥🔥 #3\n\n\nIn this video, We will be discussing the uses of JavaScript and will see how powerful this language is.\n\nIn this series, we will be learning the JavaScript programming language.\nThis course will be for absolute beginners as well as advanced users.\nThis is series has multiple parts which are depending on the previous video session.\n\n\n⭐ I've started using Kite and I love it! \nhttps://www.kite.com/get-kite/?utm_medium=referral&utm_source=youtube&utm_campaign=codersgyan&utm_content=description-only\nJavascript mini-projects: \nhttps://www.youtube.com/watch?v=KlLdNSvmoKI&list=PLXQpH_kZIxTVeSYQXLtpvMBCirxKCxqZz\nNodeJs crash course: https://youtu.be/wdBCoRMMxto\nExpress Js crash course: https://youtu.be/46Mjvdv_UUM\nRealtime pizza app using Node Js: https://www.youtube.com/playlist?list=PLXQpH_kZIxTVRmXQN9J0Az76te5mAreLV\nFlexbox: https://youtu.be/7WE_K7NDL0s\n\n\nYou may connect with me: \nFacebook -  ✅  https://www.facebook.com/codersgyan\nDiscord -  ✅ https://discord.gg/WPfWD3B\nTelegram -  ✅ https://t.me/joinchat/AAAAAFbBD_inny1ksCzOvA\nInstagram - ✅  https://www.instagram.com/codersgyan\nTwitter - ✅ https://twitter.com/CodersGyan\n\nYou may support this channel by becoming a patron :) \n✅  https://www.patreon.com/codersgyan\n\n\n#javascript #useOfJavaScript #codersgyan #happycoding #webdevelopment #learnCoding \n🔥\n\nLet's connect on LinkedIn: 🔥❤️\nhttps://www.linkedin.com/in/codersgyan/ 👇🏾 \n\n✅ My gears for everyday work: 🔥👇🏾📸\nhttps://docs.google.com/spreadsheets/d/1o58GFIKKYDFQ-aplKYMgH8TfNlrAomosZre2aDjYl7I/edit?usp=sharing",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/aXYp-clXm2s/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/aXYp-clXm2s/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/aXYp-clXm2s/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/aXYp-clXm2s/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/aXYp-clXm2s/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Coder's Gyan",
        "tags": [
          "javascript",
          "learn to code",
          "how to code",
          "learn web development",
          "create a website for free",
          "coders gyan",
          "javascript course",
          "javascript complete course",
          "javascript course for beginners",
          "javascript in hindi full course",
          "javascript in hindi tutorial",
          "javascript tutorial",
          "livescript",
          "ecmascript",
          "ecmascript 6",
          "ecmascript 6 tutorial",
          "use of javascript",
          "where javascript is used",
          "where javascript runs",
          "javascript where to start",
          "use of js in website"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "Use of JavaScript in Hindi | Beginner to Expert 🔥 | Complete Course #3",
          "description": "If you have courage to learn then checkout my complete MERN stack dream course 🔥🔥🚀\nhttps://mern.space\n\n🔥\n\n👉🏾 Use of JavaScript: JavaScript complete course in 2021 in Hindi 🔥🔥🔥 #3\n\n\nIn this video, We will be discussing the uses of JavaScript and will see how powerful this language is.\n\nIn this series, we will be learning the JavaScript programming language.\nThis course will be for absolute beginners as well as advanced users.\nThis is series has multiple parts which are depending on the previous video session.\n\n\n⭐ I've started using Kite and I love it! \nhttps://www.kite.com/get-kite/?utm_medium=referral&utm_source=youtube&utm_campaign=codersgyan&utm_content=description-only\nJavascript mini-projects: \nhttps://www.youtube.com/watch?v=KlLdNSvmoKI&list=PLXQpH_kZIxTVeSYQXLtpvMBCirxKCxqZz\nNodeJs crash course: https://youtu.be/wdBCoRMMxto\nExpress Js crash course: https://youtu.be/46Mjvdv_UUM\nRealtime pizza app using Node Js: https://www.youtube.com/playlist?list=PLXQpH_kZIxTVRmXQN9J0Az76te5mAreLV\nFlexbox: https://youtu.be/7WE_K7NDL0s\n\n\nYou may connect with me: \nFacebook -  ✅  https://www.facebook.com/codersgyan\nDiscord -  ✅ https://discord.gg/WPfWD3B\nTelegram -  ✅ https://t.me/joinchat/AAAAAFbBD_inny1ksCzOvA\nInstagram - ✅  https://www.instagram.com/codersgyan\nTwitter - ✅ https://twitter.com/CodersGyan\n\nYou may support this channel by becoming a patron :) \n✅  https://www.patreon.com/codersgyan\n\n\n#javascript #useOfJavaScript #codersgyan #happycoding #webdevelopment #learnCoding \n🔥\n\nLet's connect on LinkedIn: 🔥❤️\nhttps://www.linkedin.com/in/codersgyan/ 👇🏾 \n\n✅ My gears for everyday work: 🔥👇🏾📸\nhttps://docs.google.com/spreadsheets/d/1o58GFIKKYDFQ-aplKYMgH8TfNlrAomosZre2aDjYl7I/edit?usp=sharing"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT6M54S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "16889",
        "likeCount": "416",
        "favoriteCount": "0",
        "commentCount": "53"
      }
    },
    {
      "kind": "youtube#video",
      "etag": "mEwBMmaFM9LHdRSAG3aWqUkqEa0",
      "id": "ToZSFHUJdHM",
      "snippet": {
        "publishedAt": "2022-01-01T15:58:09Z",
        "channelId": "UCBwmMxybNva6P_5VmxjzwqA",
        "title": "What is Coding? How to Learn as Beginner? 2022",
        "description": "Are you worried about placements/internships? Want to prepare for companies like Microsoft, Amazon & Google? Join ALPHA.\n🔴 Alpha Placement Batch - https://bit.ly/3oqidsd\n🔴 ALPHA for International Students - https://buy.stripe.com/cN27sE5Z21xkeRicMN\n(Direct Payment Link)\n\nJoin the Apni Community🔥 : https://telegram.me/+k4rdgTPwmm5kMGVl\n\n🔥Java Placement Course : https://www.youtube.com/watch?v=yRpLlJmRo2w&list=PLfqMhTWNBTe3LtFWcvwpqTkUSlB32kJop\n🔥Complete C++ Placement Course (Data Structures+Algorithm) :https://www.youtube.com/playlist?list=PLfqMhTWNBTe0b2nM6JHVCnAkhQRGiZMSJ\n🔥Instagram: https://www.instagram.com/dhattarwalaman/\n\nMy YouTube Gear 😉: https://docs.google.com/document/d/1pyTJVmed-rHFXNqQodOTYr7z-EhH37s8pvtYpR0vMR4/edit?usp=sharing",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/ToZSFHUJdHM/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/ToZSFHUJdHM/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/ToZSFHUJdHM/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/ToZSFHUJdHM/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/ToZSFHUJdHM/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Apna College",
        "tags": [
          "C++",
          "C++ coding",
          "C++ full course",
          "C++ placement course",
          "how to code",
          "programming",
          "college placement course",
          "C++ language",
          "java",
          "java language",
          "java full course",
          "java placement",
          "java code",
          "java coding"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "What is Coding? How to Learn as Beginner? 2022",
          "description": "Are you worried about placements/internships? Want to prepare for companies like Microsoft, Amazon & Google? Join ALPHA.\n🔴 Alpha Placement Batch - https://bit.ly/3oqidsd\n🔴 ALPHA for International Students - https://buy.stripe.com/cN27sE5Z21xkeRicMN\n(Direct Payment Link)\n\nJoin the Apni Community🔥 : https://telegram.me/+k4rdgTPwmm5kMGVl\n\n🔥Java Placement Course : https://www.youtube.com/watch?v=yRpLlJmRo2w&list=PLfqMhTWNBTe3LtFWcvwpqTkUSlB32kJop\n🔥Complete C++ Placement Course (Data Structures+Algorithm) :https://www.youtube.com/playlist?list=PLfqMhTWNBTe0b2nM6JHVCnAkhQRGiZMSJ\n🔥Instagram: https://www.instagram.com/dhattarwalaman/\n\nMy YouTube Gear 😉: https://docs.google.com/document/d/1pyTJVmed-rHFXNqQodOTYr7z-EhH37s8pvtYpR0vMR4/edit?usp=sharing"
        },
        "defaultAudioLanguage": "hi"
      },
      "contentDetails": {
        "duration": "PT5M18S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      },
      "statistics": {
        "viewCount": "2401611",
        "likeCount": "101741",
        "favoriteCount": "0",
        "commentCount": "1773"
      }
    }
  ],
  "pageInfo": {
    "totalResults": 15,
    "resultsPerPage": 15
  }
}
","status":200,"url":"https://www.googleapis.com/youtube/v3/videos?part=snippet%2CcontentDetails%2Cstatistics&id=tysDxjfgLMg%2CrJORiMZe2hA%2CAjCJtT_qkKI%2CBQTaBibVbo4%2Cm7VcIH_N9ZY%2CasRKwu0S1gk%2CzlZ_dupXxE0%2C10hRlpUNeNA%2CH8Lyj2D_cWo%2CSycSR-NuDF0%2Ca-6O6KI9c48%2CrJ1iA-33fss%2Ct9MJ1gxcJ4w%2CaXYp-clXm2s%2CToZSFHUJdHM&key=AIzaSyAeZAsOW2kBeNqsdozdSNpajJeUOXsJ2fs"},"revalidate":3600,"tags":[]}