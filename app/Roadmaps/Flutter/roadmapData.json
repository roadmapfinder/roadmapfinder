[
  {
    "id": 1,
    "title": "Introduction to Flutter & Setup",
    "description": "Master Flutter fundamentals including setup, Dart basics, and your first Flutter application",
    "icon": "Rocket",
    "gradient": "from-blue-500 to-cyan-600",
    "content": {
      "whatToLearn": [
        "What is Flutter & Why it's used",
        "Understanding Dart Language Basics",
        "Setting up Flutter SDK and IDE",
        "Running your first Flutter App",
        "Hot Reload functionality",
        "Widget Tree understanding",
        "Flutter project structure",
        "Basic navigation in Flutter",
        "Understanding MaterialApp and Scaffold",
        "Debug mode and error handling"
      ],
      "toolsToUse": [
        "Flutter SDK",
        "Android Studio",
        "VS Code with Flutter Extension",
        "Dart DevTools",
        "Android Emulator",
        "iOS Simulator",
        "Flutter Doctor",
        "Flutter Inspector"
      ],
      "bestCourses": {
        "english": [
          "Flutter Crash Course – Academind",
          "Flutter Tutorial for Beginners – The Net Ninja",
          "Flutter Development Bootcamp – Angela Yu",
          "Flutter & Dart - The Complete Guide – Udemy",
          "Flutter Beginner Course – FreeCodeCamp"
        ],
        "hindi": [
          "Flutter Basics by WsCube Tech",
          "Flutter Tutorial Hindi – CodeWithHarry",
          "Flutter Complete Course – Thapa Technical",
          "Flutter Beginner – Learn More",
          "Flutter Hindi Tutorial – Technical Suneja"
        ]
      },
      "docsAndWebsites": [
        "Flutter Install Guide",
        "Dart Language Tour",
        "Flutter.dev Official Documentation",
        "Flutter Widget of the Week",
        "Flutter Codelabs"
      ],
      "projectIdeas": [
        "Hello World app",
        "Counter App with UI changes",
        "Basic portfolio app",
        "Simple calculator app",
        "Personal info display card",
        "Basic navigation app",
        "Flutter logo display app"
      ],
      "practicePlatforms": [
        "DartPad Online Editor",
        "Flutter Code Labs",
        "Flutter Samples GitHub",
        "Flutter Community Challenges",
        "Flutter Widget Catalog"
      ]
    }
  },
  {
    "id": 2,
    "title": "Dart Programming Mastery",
    "description": "Deep dive into Dart language features including OOP, async programming, and advanced concepts",
    "icon": "Code",
    "gradient": "from-green-500 to-teal-600",
    "content": {
      "whatToLearn": [
        "Variables and Data Types",
        "Functions and Parameters",
        "Control Flow (if, loops, switch)",
        "Classes, Objects, and Inheritance",
        "Abstract classes and interfaces",
        "Null Safety and Sound Null Safety",
        "Async/Await and Futures",
        "Streams and Stream Controllers",
        "Exception handling",
        "Generics and Collections"
      ],
      "toolsToUse": [
        "DartPad (online Dart editor)",
        "Dart CLI",
        "VS Code with Dart Extension",
        "Dart DevTools",
        "Dart Analyzer",
        "Dart Formatter",
        "Dart Package Manager (pub)",
        "Dart Observatory"
      ],
      "bestCourses": {
        "english": [
          "Dart Programming – CodeWithChris",
          "Dart Language Complete Course – Udemy",
          "Dart Fundamentals – Pluralsight",
          "Dart for Beginners – YouTube Flutter",
          "Advanced Dart Programming – Skillshare"
        ],
        "hindi": [
          "Dart Programming Full Course – WsCube Tech",
          "Dart Language Tutorial – CodeWithHarry",
          "Dart Complete Guide – Thapa Technical",
          "Dart Programming – Learn More",
          "Dart Basics to Advanced – Technical Suneja"
        ]
      },
      "docsAndWebsites": [
        "Dart Docs",
        "DartPad",
        "Dart Language Specification",
        "Dart Package Repository (pub.dev)",
        "Dart Style Guide"
      ],
      "projectIdeas": [
        "Calculator CLI App",
        "Weather fetcher using API",
        "Text manipulation tool",
        "File processing utility",
        "Simple banking system CLI",
        "Task manager CLI app",
        "Number guessing game"
      ],
      "practicePlatforms": [
        "DartPad Practice Exercises",
        "Dart Code Challenges",
        "HackerRank Dart Problems",
        "Codewars Dart Kata",
        "Dart Academy Exercises"
      ]
    }
  },
  {
    "id": 3,
    "title": "Flutter UI & Widgets",
    "description": "Master Flutter widgets, layouts, styling, and creating beautiful user interfaces",
    "icon": "Palette",
    "gradient": "from-purple-500 to-pink-600",
    "content": {
      "whatToLearn": [
        "Stateless vs Stateful Widgets",
        "Layout Widgets: Row, Column, Container, Stack",
        "Input Widgets: TextField, Button, Checkbox, Radio",
        "Display Widgets: Text, Image, Icon, Card",
        "Styling and Theming",
        "Material Design Components",
        "Cupertino (iOS) Widgets",
        "Navigation and Routing",
        "Custom Widgets creation",
        "Responsive design principles"
      ],
      "toolsToUse": [
        "Flutter Inspector",
        "Pub.dev for packages",
        "Flutter Preview (VS Code)",
        "Flutter Widget Catalog",
        "Material Design Guidelines",
        "Cupertino Design System",
        "Flutter Outline",
        "Widget Tree Visualization"
      ],
      "bestCourses": {
        "english": [
          "Build UIs in Flutter – Flutter YouTube",
          "Flutter UI Development – Udemy",
          "Flutter Widget Masterclass – Coursera",
          "Flutter Design Patterns – LinkedIn Learning",
          "Flutter Responsive Design – Skillshare"
        ],
        "hindi": [
          "Flutter UI Full Course – Codepur",
          "Flutter Widget Tutorial – WsCube Tech",
          "Flutter UI Design – CodeWithHarry",
          "Flutter Layouts – Thapa Technical",
          "Flutter UI Components – Technical Suneja"
        ]
      },
      "docsAndWebsites": [
        "Flutter Widget Catalog",
        "Navigation & Routing",
        "Material Design Components",
        "Cupertino Widgets",
        "Flutter Layout Cheat Sheet"
      ],
      "projectIdeas": [
        "Login/Signup UI",
        "Digital business card app",
        "Recipe card layout",
        "Profile page design",
        "E-commerce product list",
        "Weather app UI",
        "Social media feed UI"
      ],
      "practicePlatforms": [
        "Flutter Widget Examples",
        "Flutter UI Challenges",
        "DartPad Widget Practice",
        "Flutter Gallery App",
        "Flutter Community Samples"
      ]
    }
  },
  {
    "id": 4,
    "title": "State Management",
    "description": "Learn various state management approaches from basic setState to advanced patterns",
    "icon": "Settings",
    "gradient": "from-orange-500 to-red-500",
    "content": {
      "whatToLearn": [
        "setState() and Lifting State Up",
        "InheritedWidget and InheritedModel",
        "Provider pattern and implementation",
        "Riverpod for modern state management",
        "BLoC (Business Logic Component) pattern",
        "GetX for reactive state management",
        "Global State vs Local State",
        "State persistence and restoration",
        "Performance optimization with state",
        "Testing state management"
      ],
      "toolsToUse": [
        "Provider package",
        "Riverpod",
        "GetX",
        "BLoC library",
        "Flutter DevTools",
        "State management debugging tools",
        "Performance profiler",
        "Widget testing framework"
      ],
      "bestCourses": {
        "english": [
          "Flutter State Management – Reso Coder",
          "BLoC Pattern in Flutter – Udemy",
          "Provider State Management – YouTube",
          "Riverpod Complete Guide – Coursera",
          "GetX State Management – Skillshare"
        ],
        "hindi": [
          "State Management with Provider – WsCube Tech",
          "Flutter State Management – CodeWithHarry",
          "BLoC Pattern Hindi – Thapa Technical",
          "Flutter Provider Tutorial – Learn More",
          "GetX Hindi Tutorial – Technical Suneja"
        ]
      },
      "docsAndWebsites": [
        "Provider Package Docs",
        "Riverpod Docs",
        "BLoC Library Documentation",
        "GetX Documentation",
        "Flutter State Management Guide"
      ],
      "projectIdeas": [
        "Todo App with Provider",
        "Notes app with GetX",
        "E-commerce cart with Riverpod",
        "Weather app with BLoC",
        "Chat app with state management",
        "Shopping list with persistence",
        "Timer app with state restoration"
      ],
      "practicePlatforms": [
        "Flutter State Management Examples",
        "Provider Package Examples",
        "Riverpod Playground",
        "BLoC Pattern Samples",
        "GetX Example Projects"
      ]
    }
  },
  {
    "id": 5,
    "title": "APIs & Backend Integration",
    "description": "Connect Flutter apps to backend services, handle data, and implement authentication",
    "icon": "Database",
    "gradient": "from-cyan-500 to-blue-600",
    "content": {
      "whatToLearn": [
        "REST APIs using http package",
        "JSON Parsing and Serialization",
        "HTTP methods (GET, POST, PUT, DELETE)",
        "Firebase Authentication",
        "Firestore database operations",
        "Firebase Storage for files",
        "Error Handling and Timeout",
        "Retry mechanisms and offline support",
        "API security and authentication tokens",
        "Background tasks and sync"
      ],
      "toolsToUse": [
        "Firebase Console",
        "Postman for API Testing",
        "http package",
        "dio package",
        "cloud_firestore package",
        "firebase_auth package",
        "firebase_storage package",
        "json_annotation package"
      ],
      "bestCourses": {
        "english": [
          "Flutter Firebase App – Fireship",
          "Flutter REST API – Udemy",
          "Flutter Backend Integration – Coursera",
          "Firebase with Flutter – YouTube",
          "Flutter HTTP Requests – Skillshare"
        ],
        "hindi": [
          "Flutter + Firebase Full Course – WsCube Tech",
          "Flutter API Integration – CodeWithHarry",
          "Firebase Flutter Tutorial – Thapa Technical",
          "Flutter Backend – Learn More",
          "API Integration Flutter – Technical Suneja"
        ]
      },
      "docsAndWebsites": [
        "Flutter Fire Docs",
        "http package",
        "Firebase Flutter Documentation",
        "REST API Best Practices",
        "JSON and Serialization in Flutter"
      ],
      "projectIdeas": [
        "Auth system with Firebase",
        "Notes saving app with Firestore",
        "Product list fetcher from API",
        "User profile with image upload",
        "Real-time chat application",
        "News reader app with API",
        "Weather app with location services"
      ],
      "practicePlatforms": [
        "Firebase Codelabs",
        "Flutter Firebase Samples",
        "JSON Placeholder API",
        "Flutter HTTP Examples",
        "Firebase Cloud Functions"
      ]
    }
  },
  {
    "id": 6,
    "title": "Navigation, Forms, and Animations",
    "description": "Advanced Flutter features including complex navigation, form handling, and smooth animations",
    "icon": "Navigation",
    "gradient": "from-indigo-500 to-purple-600",
    "content": {
      "whatToLearn": [
        "Route Navigation and Named Routes",
        "Navigator 2.0 and Router API",
        "Form Validation (Manual & Package)",
        "Complex form handling",
        "Hero Animations",
        "Page Transitions and Custom Routes",
        "Implicit and Explicit Animations",
        "Custom Animations with Tween",
        "Animation Controllers and Curves",
        "Staggered animations and sequences"
      ],
      "toolsToUse": [
        "flutter_form_builder",
        "animations package",
        "Navigator 2.0",
        "AutoRoute package",
        "GoRouter",
        "Flare/Rive for complex animations",
        "Lottie animations",
        "Animation debugging tools"
      ],
      "bestCourses": {
        "english": [
          "Flutter Animations Tutorial – The Net Ninja",
          "Flutter Navigation 2.0 – Udemy",
          "Flutter Form Handling – Coursera",
          "Advanced Flutter Animations – YouTube",
          "Flutter Router Implementation – Skillshare"
        ],
        "hindi": [
          "Flutter Form & Routing – WsCube Tech",
          "Flutter Animation Tutorial – CodeWithHarry",
          "Flutter Navigation – Thapa Technical",
          "Flutter Forms Hindi – Learn More",
          "Flutter Animations – Technical Suneja"
        ]
      },
      "docsAndWebsites": [
        "Flutter Forms",
        "Flutter Animation Guide",
        "Navigator 2.0 Documentation",
        "Animation and Motion Guidelines",
        "Form Validation Best Practices"
      ],
      "projectIdeas": [
        "Animated onboarding screen",
        "Feedback form with validations",
        "Quiz app with animated transitions",
        "Multi-step form wizard",
        "Shopping app with smooth animations",
        "Portfolio app with hero animations",
        "Game with custom animations"
      ],
      "practicePlatforms": [
        "Flutter Animation Examples",
        "Flutter Navigation Samples",
        "Form Builder Examples",
        "Animation Challenges",
        "Flutter Motion Toolkit"
      ]
    }
  },
  {
    "id": 7,
    "title": "Deployment & Optimization",
    "description": "Build, optimize, and deploy Flutter apps to app stores with best practices",
    "icon": "Rocket",
    "gradient": "from-emerald-500 to-teal-600",
    "content": {
      "whatToLearn": [
        "Building APKs and App Bundles",
        "iOS app building and signing",
        "Code splitting and lazy loading",
        "App size optimization techniques",
        "Play Store deployment process",
        "App Store Connect deployment",
        "Handling runtime permissions",
        "Performance optimization",
        "Memory management",
        "Battery optimization"
      ],
      "toolsToUse": [
        "flutter build apk",
        "flutter build ios",
        "flutter doctor",
        "ProGuard and R8 for Android",
        "Xcode for iOS builds",
        "App Store Connect",
        "Google Play Console",
        "Firebase App Distribution"
      ],
      "bestCourses": {
        "english": [
          "Flutter Deployment – freeCodeCamp",
          "Flutter App Store Deployment – Udemy",
          "Flutter Performance Optimization – Coursera",
          "Flutter CI/CD Pipeline – YouTube",
          "Flutter App Distribution – Skillshare"
        ],
        "hindi": [
          "Flutter App Deployment Guide – WsCube Tech",
          "Flutter Play Store – CodeWithHarry",
          "Flutter App Publishing – Thapa Technical",
          "Flutter Deployment – Learn More",
          "Flutter Store Upload – Technical Suneja"
        ]
      },
      "docsAndWebsites": [
        "Build & Release – Flutter",
        "Android App Size Reduction",
        "iOS App Store Guidelines",
        "Flutter Performance Best Practices",
        "App Store Optimization Guide"
      ],
      "projectIdeas": [
        "Fully deployed To-do App",
        "Chat app published to Play Store",
        "Portfolio app downloadable as APK",
        "E-commerce app with store deployment",
        "Social media app with optimization",
        "Game app with performance tuning",
        "Utility app with minimal size"
      ],
      "practicePlatforms": [
        "Firebase App Distribution",
        "TestFlight for iOS testing",
        "Google Play Internal Testing",
        "Flutter Performance Profiling",
        "App Store Optimization Tools"
      ]
    }
  },
  {
    "id": 8,
    "title": "Advanced Flutter & Career Preparation",
    "description": "Master advanced Flutter concepts, testing, architecture patterns, and prepare for Flutter developer roles",
    "icon": "Award",
    "gradient": "from-yellow-500 to-orange-600",
    "content": {
      "whatToLearn": [
        "Flutter architecture patterns (Clean Architecture, MVVM)",
        "Unit testing and Widget testing",
        "Integration testing and E2E testing",
        "Flutter flavors and build configurations",
        "Platform-specific code (Method Channels)",
        "Custom plugins development",
        "Flutter for web and desktop",
        "Performance profiling and debugging",
        "Flutter interview preparation",
        "Open source contributions"
      ],
      "toolsToUse": [
        "Flutter test framework",
        "Integration test package",
        "Flutter driver",
        "Platform channels",
        "Flutter plugin template",
        "Flutter for web",
        "Flutter desktop",
        "Performance profiler",
        "Memory profiler"
      ],
      "bestCourses": {
        "english": [
          "Flutter Testing Complete Guide – Udemy",
          "Flutter Architecture Patterns – Coursera",
          "Flutter Advanced Concepts – YouTube",
          "Flutter Interview Preparation – Skillshare",
          "Flutter Plugin Development – LinkedIn Learning"
        ],
        "hindi": [
          "Flutter Advanced Course – WsCube Tech",
          "Flutter Testing Tutorial – CodeWithHarry",
          "Flutter Architecture – Thapa Technical",
          "Flutter Interview Prep – Learn More",
          "Flutter Advanced – Technical Suneja"
        ]
      },
      "docsAndWebsites": [
        "Flutter Testing Documentation",
        "Flutter Architecture Guide",
        "Flutter Platform Channels",
        "Flutter Plugin Development",
        "Flutter Interview Questions"
      ],
      "projectIdeas": [
        "Complete e-commerce app with tests",
        "Social media platform with clean architecture",
        "Cross-platform productivity app",
        "Custom plugin for device features",
        "Flutter web dashboard application",
        "Desktop app with native integrations",
        "Open source Flutter package",
        "Portfolio showcasing all skills"
      ],
      "practicePlatforms": [
        "Flutter GitHub Examples",
        "Flutter Community Challenges",
        "Open Source Flutter Projects",
        "Flutter Interview Practice",
        "Flutter Developer Community",
        "Flutter Job Boards",
        "Flutter Certification Programs"
      ]
    }
  }
]