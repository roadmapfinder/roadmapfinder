[
  {
    "id": 1,
    "title": "Prerequisites - JavaScript, TypeScript & Node.js Mastery",
    "description": "Master the fundamental technologies that NestJS is built upon",
    "icon": "BookOpen",
    "gradient": "from-blue-600 to-purple-600",
    "content": {
      "whatToLearn": [
        "JavaScript ES6+: Variables, Scoping (let, const)",
        "Arrow functions, Spread/Rest operators",
        "Promises, async/await patterns",
        "Destructuring, Template literals",
        "Classes & Inheritance",
        "TypeScript Types & Interfaces",
        "TypeScript Generics",
        "Enums & Union Types",
        "Modules & Namespaces",
        "Decorators (critical for NestJS)",
        "Utility Types (Partial, Pick, Omit, etc.)",
        "Node.js Event loop & Async programming",
        "File system (fs), Streams",
        "HTTP basics and raw API building"
      ],
      "toolsToUse": [
        "Node.js LTS",
        "TypeScript Compiler (tsc)",
        "VS Code with TypeScript extensions",
        "NPM, PNPM, Yarn",
        "TypeScript Playground",
        "Node.js REPL",
        "Postman for API testing"
      ],
      "bestCourses": {
        "english": [
          "TypeScript Complete Course – freeCodeCamp",
          "JavaScript Advanced Concepts – Traversy Media",
          "TypeScript Deep Dive – Programming with Mosh",
          "Node.js Fundamentals – Net Ninja",
          "Advanced TypeScript – Academind"
        ],
        "hindi": [
          "TypeScript Complete Hindi – WsCube Tech",
          "JavaScript + TypeScript – CodeWithHarry",
          "Node.js Hindi Tutorial – Thapa Technical",
          "TypeScript Explained – Love Babbar",
          "Complete JavaScript – Apna College"
        ]
      },
      "docsAndWebsites": [
        "TypeScript Official Documentation",
        "Node.js Official Documentation",
        "MDN JavaScript Guide",
        "TypeScript Handbook",
        "JavaScript.info"
      ],
      "projectIdeas": [
        "TypeScript CLI calculator",
        "File system utilities with TypeScript",
        "Basic HTTP server with TypeScript",
        "JSON data processor",
        "Simple REST API with raw Node.js and TypeScript",
        "TypeScript class-based todo manager",
        "Async file operations utility"
      ],
      "practicePlatforms": [
        "TypeScript Playground",
        "CodeSandbox TypeScript",
        "Repl.it TypeScript",
        "TypeScript Exercises",
        "Node.js practice challenges"
      ]
    }
  },
  {
    "id": 2,
    "title": "NestJS Fundamentals & Core Concepts",
    "description": "Learn the core building blocks and architecture of NestJS framework",
    "icon": "Server",
    "gradient": "from-red-500 to-pink-500",
    "content": {
      "whatToLearn": [
        "NestJS project setup with CLI",
        "Modules - feature grouping and organization",
        "Controllers - handling routes and requests",
        "Providers/Services - business logic implementation",
        "Dependency Injection (DI) system",
        "Pipes - validation & data transformation",
        "Guards - authentication and authorization",
        "Interceptors - logging, transformation, error handling",
        "Filters - exception handling",
        "Middleware - request lifecycle management",
        "Configuration Management (@nestjs/config)",
        "Request/Response lifecycle",
        "Decorators usage in NestJS context"
      ],
      "toolsToUse": [
        "@nestjs/cli",
        "@nestjs/core",
        "@nestjs/common",
        "@nestjs/config",
        "class-validator",
        "class-transformer",
        "Postman/Insomnia",
        "NestJS DevTools"
      ],
      "bestCourses": {
        "english": [
          "NestJS Zero to Hero – Ariel Weinberger",
          "NestJS Complete Course – Traversy Media",
          "NestJS Fundamentals – Net Ninja",
          "Building APIs with NestJS – freeCodeCamp",
          "NestJS Advanced Course – Academind"
        ],
        "hindi": [
          "NestJS Complete Hindi – WsCube Tech",
          "NestJS Tutorial Hindi – CodeWithHarry",
          "Backend with NestJS – Thapa Technical",
          "NestJS Explained – Love Babbar",
          "Complete NestJS – Apna College"
        ]
      },
      "docsAndWebsites": [
        "NestJS Official Documentation",
        "NestJS Recipes",
        "NestJS Best Practices",
        "TypeScript Decorators Guide",
        "Dependency Injection Patterns"
      ],
      "projectIdeas": [
        "Task Manager API with CRUD operations",
        "Basic blog API with validation",
        "User management system",
        "Product catalog API",
        "Notes application backend",
        "Simple inventory management API",
        "Contact manager with error handling"
      ],
      "practicePlatforms": [
        "NestJS Playground",
        "GitHub NestJS Examples",
        "NestJS CLI practice",
        "Local development environment",
        "API testing with Postman"
      ]
    }
  },
  {
    "id": 3,
    "title": "Database Integration & ORMs",
    "description": "Master database operations with TypeORM, Prisma, and Mongoose",
    "icon": "Database",
    "gradient": "from-green-500 to-teal-500",
    "content": {
      "whatToLearn": [
        "TypeORM integration with NestJS",
        "Prisma ORM (modern, type-safe, preferred in 2025)",
        "Mongoose for MongoDB integration",
        "Database connection configuration",
        "Entity creation and relationships",
        "Database migrations and seeding",
        "Relationships (One-to-Many, Many-to-Many)",
        "Query optimization techniques",
        "Transaction handling",
        "Repository pattern implementation",
        "Database validation and constraints",
        "Connection pooling and performance"
      ],
      "toolsToUse": [
        "@nestjs/typeorm",
        "@nestjs/mongoose",
        "Prisma Client",
        "PostgreSQL/MySQL",
        "MongoDB",
        "Prisma Studio",
        "TypeORM CLI",
        "Database GUI tools (PgAdmin, MongoDB Compass)"
      ],
      "bestCourses": {
        "english": [
          "NestJS with Prisma – Fireship",
          "TypeORM with NestJS – Programming with Mosh",
          "Database Design for NestJS – Academind",
          "NestJS + MongoDB – Traversy Media",
          "Advanced Database Integration – Net Ninja"
        ],
        "hindi": [
          "NestJS Database Integration – WsCube Tech",
          "Prisma with NestJS Hindi – CodeWithHarry",
          "Database Design Hindi – Thapa Technical",
          "NestJS + MongoDB Hindi – Love Babbar",
          "Complete Database Course – Apna College"
        ]
      },
      "docsAndWebsites": [
        "Prisma Documentation",
        "TypeORM Documentation",
        "Mongoose Documentation",
        "NestJS Database Guide",
        "Database Design Best Practices"
      ],
      "projectIdeas": [
        "Blog API with Prisma & PostgreSQL",
        "E-commerce backend with relationships",
        "Social media API with complex queries",
        "Library management system",
        "Multi-tenant application",
        "Real estate listing platform",
        "Learning management system backend"
      ],
      "practicePlatforms": [
        "Prisma Playground",
        "Database design challenges",
        "TypeORM examples",
        "MongoDB University",
        "SQL practice platforms"
      ]
    }
  },
  {
    "id": 4,
    "title": "Authentication & Authorization Systems",
    "description": "Implement secure authentication with Passport.js, JWT, and role-based access control",
    "icon": "Shield",
    "gradient": "from-yellow-500 to-orange-500",
    "content": {
      "whatToLearn": [
        "Passport.js integration (@nestjs/passport)",
        "JWT Authentication (@nestjs/jwt)",
        "Refresh Tokens strategy implementation",
        "Role-based access control (RBAC)",
        "OAuth2.0 integration (Google, GitHub, LinkedIn)",
        "Session-based authentication with Redis",
        "Password hashing and security",
        "Guards for route protection",
        "Custom authentication strategies",
        "Multi-factor authentication (MFA)",
        "API key authentication",
        "Social login implementations"
      ],
      "toolsToUse": [
        "@nestjs/passport",
        "@nestjs/jwt",
        "passport-local",
        "passport-jwt",
        "passport-google-oauth20",
        "bcrypt",
        "Redis for session store",
        "@nestjs/throttler for rate limiting"
      ],
      "bestCourses": {
        "english": [
          "NestJS Authentication – Marius Espejo",
          "JWT with NestJS – Programming with Mosh",
          "OAuth Implementation – Traversy Media",
          "Security in NestJS – Academind",
          "Advanced Auth Patterns – Net Ninja"
        ],
        "hindi": [
          "NestJS Authentication Hindi – WsCube Tech",
          "JWT Implementation Hindi – CodeWithHarry",
          "Security Tutorial Hindi – Thapa Technical",
          "Complete Auth System – Love Babbar",
          "Authentication Guide – Apna College"
        ]
      },
      "docsAndWebsites": [
        "NestJS Authentication Guide",
        "Passport.js Documentation",
        "JWT.io Documentation",
        "OAuth 2.0 Specification",
        "Security Best Practices"
      ],
      "projectIdeas": [
        "Auth system with JWT + Refresh Tokens",
        "Multi-role user management system",
        "Social login integration project",
        "API with role-based permissions",
        "Multi-tenant authentication system",
        "OAuth provider implementation",
        "Security audit dashboard"
      ],
      "practicePlatforms": [
        "Auth0 Learning Lab",
        "Passport.js examples",
        "JWT debugging tools",
        "OAuth playground",
        "Security testing platforms"
      ]
    }
  },
  {
    "id": 5,
    "title": "API Development & Documentation",
    "description": "Build REST APIs, GraphQL endpoints, and comprehensive API documentation",
    "icon": "Globe",
    "gradient": "from-purple-500 to-indigo-500",
    "content": {
      "whatToLearn": [
        "REST API design with proper versioning",
        "GraphQL API implementation (@nestjs/graphql, Apollo)",
        "gRPC microservices development",
        "tRPC integration (TypeScript-first APIs)",
        "API Validation (Zod, Joi, class-validator)",
        "OpenAPI/Swagger documentation (@nestjs/swagger)",
        "Error handling and status codes",
        "Response formatting and serialization",
        "API versioning strategies",
        "Content negotiation",
        "HATEOAS implementation",
        "API rate limiting and throttling"
      ],
      "toolsToUse": [
        "@nestjs/graphql",
        "@nestjs/swagger",
        "Apollo Server",
        "class-validator",
        "class-transformer",
        "@nestjs/throttler",
        "Zod validation",
        "gRPC tools"
      ],
      "bestCourses": {
        "english": [
          "GraphQL with NestJS – Ben Awad",
          "API Design Best Practices – Fireship",
          "NestJS GraphQL Course – Scott Moss",
          "REST API Design – Programming with Mosh",
          "Advanced API Development – Academind"
        ],
        "hindi": [
          "GraphQL + NestJS Hindi – WsCube Tech",
          "API Development Hindi – CodeWithHarry",
          "REST API Design Hindi – Thapa Technical",
          "Complete API Course – Love Babbar",
          "GraphQL Tutorial – Apna College"
        ]
      },
      "docsAndWebsites": [
        "NestJS GraphQL Documentation",
        "Swagger/OpenAPI Specification",
        "GraphQL Best Practices",
        "REST API Design Guide",
        "gRPC Documentation"
      ],
      "projectIdeas": [
        "E-commerce API with REST + GraphQL",
        "Social media platform API",
        "Content management system API",
        "Real-time collaboration API",
        "Multi-version API system",
        "Microservices communication hub",
        "API gateway implementation"
      ],
      "practicePlatforms": [
        "GraphQL Playground",
        "Swagger Editor",
        "Postman API testing",
        "Insomnia GraphQL client",
        "API design challenges"
      ]
    }
  },
  {
    "id": 6,
    "title": "Advanced NestJS & Microservices Architecture",
    "description": "Master event-driven architecture, microservices, and advanced NestJS patterns",
    "icon": "Cpu",
    "gradient": "from-cyan-500 to-blue-500",
    "content": {
      "whatToLearn": [
        "Event-driven architecture (EventEmitter, RabbitMQ, Kafka)",
        "Microservices with NestJS",
        "TCP microservices communication",
        "Redis Pub/Sub implementation",
        "Kafka integration for event streaming",
        "NATS messaging system",
        "gRPC microservices",
        "Monorepo architecture (@nrwl/nx)",
        "Caching strategies (In-memory, Redis)",
        "WebSockets (Socket.IO, @nestjs/websockets)",
        "File uploads (Multer + S3/Cloudinary)",
        "Rate limiting & Throttling (@nestjs/throttler)",
        "Task scheduling (@nestjs/schedule)",
        "Background job processing"
      ],
      "toolsToUse": [
        "@nestjs/microservices",
        "@nestjs/websockets",
        "@nestjs/schedule",
        "RabbitMQ",
        "Apache Kafka",
        "Redis",
        "Socket.IO",
        "Bull Queue",
        "@nrwl/nx",
        "Docker Compose"
      ],
      "bestCourses": {
        "english": [
          "NestJS Microservices – Kamil Myśliwiec",
          "Event-Driven Architecture – Traversy Media",
          "Microservices Patterns – Programming with Mosh",
          "Real-time Apps with NestJS – Academind",
          "Advanced NestJS – Net Ninja"
        ],
        "hindi": [
          "Microservices Hindi – WsCube Tech",
          "Real-time Features Hindi – CodeWithHarry",
          "Advanced NestJS Hindi – Thapa Technical",
          "Microservices Architecture – Love Babbar",
          "Complete Advanced Course – Apna College"
        ]
      },
      "docsAndWebsites": [
        "NestJS Microservices Documentation",
        "Apache Kafka Documentation",
        "RabbitMQ Documentation",
        "Socket.IO Documentation",
        "Nx Monorepo Documentation"
      ],
      "projectIdeas": [
        "Real-time Chat App with NestJS + WebSockets + Redis",
        "Event-driven e-commerce system",
        "Microservices-based social platform",
        "Real-time collaboration tool",
        "Distributed task processing system",
        "IoT data processing pipeline",
        "Multi-tenant SaaS backend"
      ],
      "practicePlatforms": [
        "Docker playground",
        "Kafka sandbox",
        "Redis lab exercises",
        "Microservices challenges",
        "Real-time project tutorials"
      ]
    }
  },
  {
    "id": 7,
    "title": "Testing & Quality Assurance",
    "description": "Implement comprehensive testing strategies and maintain code quality",
    "icon": "TestTube",
    "gradient": "from-emerald-500 to-green-500",
    "content": {
      "whatToLearn": [
        "Unit Testing with Jest (@nestjs/testing)",
        "Integration Testing strategies",
        "End-to-End Testing (E2E)",
        "Test coverage reporting",
        "Mocking dependencies and services",
        "Testing controllers, services, and guards",
        "Database testing with test databases",
        "API testing with Supertest",
        "Testing WebSockets and real-time features",
        "Performance testing",
        "Linting with ESLint + Prettier",
        "Pre-commit hooks (Husky + Lint-Staged)",
        "Code quality metrics",
        "Test-driven development (TDD)"
      ],
      "toolsToUse": [
        "@nestjs/testing",
        "Jest",
        "Supertest",
        "ESLint",
        "Prettier",
        "Husky",
        "lint-staged",
        "Istanbul for coverage",
        "Artillery for load testing"
      ],
      "bestCourses": {
        "english": [
          "Testing NestJS Applications – Kamil Myśliwiec",
          "Jest Testing Complete Guide – Traversy Media",
          "TDD with NestJS – Programming with Mosh",
          "Testing Best Practices – Academind",
          "E2E Testing Strategies – Net Ninja"
        ],
        "hindi": [
          "Testing in NestJS Hindi – WsCube Tech",
          "Jest Testing Hindi – CodeWithHarry",
          "Complete Testing Guide – Thapa Technical",
          "Testing Tutorial Hindi – Love Babbar",
          "Quality Assurance – Apna College"
        ]
      },
      "docsAndWebsites": [
        "NestJS Testing Documentation",
        "Jest Documentation",
        "Testing Best Practices Guide",
        "Supertest Documentation",
        "ESLint Configuration Guide"
      ],
      "projectIdeas": [
        "Fully tested Auth module with comprehensive coverage",
        "E2E tested e-commerce API",
        "Performance tested real-time application",
        "TDD-developed task management system",
        "Automated quality assurance pipeline",
        "Load tested microservices system",
        "Security tested authentication system"
      ],
      "practicePlatforms": [
        "Jest playground",
        "Testing challenges",
        "Code quality tools",
        "TDD practice exercises",
        "Performance testing labs"
      ]
    }
  },
  {
    "id": 8,
    "title": "DevOps, Deployment & Production Readiness",
    "description": "Master containerization, CI/CD, monitoring, and scalable deployment strategies",
    "icon": "Cloud",
    "gradient": "from-pink-500 to-rose-500",
    "content": {
      "whatToLearn": [
        "Docker containerization for NestJS apps",
        "Docker Compose for multi-service setup",
        "CI/CD pipelines (GitHub Actions, GitLab CI)",
        "Cloud deployments (AWS, GCP, Azure, DigitalOcean)",
        "Serverless deployment (AWS Lambda, Vercel)",
        "Kubernetes orchestration",
        "Logging & Monitoring (Winston, Pino)",
        "Error tracking (Sentry)",
        "Metrics collection (Prometheus + Grafana)",
        "API Gateway configuration (Kong, NGINX)",
        "Load balancing strategies",
        "Horizontal scaling techniques",
        "Environment management",
        "Security hardening"
      ],
      "toolsToUse": [
        "Docker & Docker Compose",
        "Kubernetes",
        "GitHub Actions",
        "AWS/GCP/Azure CLI",
        "Winston/Pino loggers",
        "Sentry",
        "Prometheus & Grafana",
        "Kong API Gateway",
        "NGINX",
        "PM2"
      ],
      "bestCourses": {
        "english": [
          "Docker for Node.js – Fireship",
          "Kubernetes Crash Course – Traversy Media",
          "CI/CD for NestJS – Programming with Mosh",
          "AWS Deployment – Academind",
          "Production Best Practices – Net Ninja"
        ],
        "hindi": [
          "Docker Hindi Tutorial – WsCube Tech",
          "DevOps for Backend – CodeWithHarry",
          "Cloud Deployment Hindi – Thapa Technical",
          "Complete DevOps Course – Love Babbar",
          "Production Deployment – Apna College"
        ]
      },
      "docsAndWebsites": [
        "Docker Documentation",
        "Kubernetes Documentation",
        "GitHub Actions Documentation",
        "AWS Documentation",
        "Production Deployment Guide"
      ],
      "projectIdeas": [
        "Dockerized NestJS API with Docker Compose",
        "CI/CD pipeline with automated testing",
        "Kubernetes-deployed microservices system",
        "AWS-hosted scalable application",
        "Monitored production application",
        "Load-balanced multi-instance deployment",
        "Serverless NestJS functions"
      ],
      "practicePlatforms": [
        "Docker Hub",
        "GitHub Actions",
        "AWS Free Tier",
        "Google Cloud Platform",
        "DigitalOcean",
        "Railway",
        "Render"
      ]
    }
  },
  {
    "id": 9,
    "title": "Enterprise Patterns & Architecture",
    "description": "Master enterprise-level patterns, clean architecture, and advanced design patterns",
    "icon": "Building",
    "gradient": "from-violet-500 to-purple-600",
    "content": {
      "whatToLearn": [
        "Clean Architecture implementation",
        "Hexagonal Architecture patterns",
        "Domain-Driven Design (DDD)",
        "CQRS (Command Query Responsibility Segregation)",
        "Event Sourcing implementation",
        "Multi-tenant architecture",
        "Feature flags & configuration management",
        "API versioning strategies (v1, v2)",
        "Monorepo management (Nx, Turborepo)",
        "Design patterns in NestJS context",
        "Scalability patterns",
        "Error handling strategies",
        "Performance optimization",
        "Code organization best practices"
      ],
      "toolsToUse": [
        "@nrwl/nx",
        "Turborepo",
        "Feature flag services",
        "Configuration management tools",
        "Architecture documentation tools",
        "UML design tools",
        "Performance profilers",
        "Code analysis tools"
      ],
      "bestCourses": {
        "english": [
          "Clean Architecture with NestJS – Khalil Stemmler",
          "DDD Implementation – Programming with Mosh",
          "Enterprise Patterns – Academind",
          "System Design for Backend – Traversy Media",
          "Advanced Architecture – Net Ninja"
        ],
        "hindi": [
          "Clean Architecture Hindi – WsCube Tech",
          "Design Patterns Hindi – CodeWithHarry",
          "Enterprise Development – Thapa Technical",
          "System Design Hindi – Love Babbar",
          "Advanced Patterns – Apna College"
        ]
      },
      "docsAndWebsites": [
        "Clean Architecture Guide",
        "Domain-Driven Design Documentation",
        "CQRS Pattern Documentation",
        "Enterprise Integration Patterns",
        "Software Architecture Resources"
      ],
      "projectIdeas": [
        "Clean architecture e-commerce platform",
        "Multi-tenant SaaS application",
        "Event-sourced banking system",
        "CQRS-based content management system",
        "Domain-driven design social platform",
        "Enterprise resource planning system",
        "Scalable multi-service architecture"
      ],
      "practicePlatforms": [
        "Architecture design challenges",
        "System design interviews",
        "Code review platforms",
        "Architecture documentation tools",
        "Enterprise pattern examples"
      ]
    }
  },
  {
    "id": 10,
    "title": "Industry Portfolio & Professional Projects",
    "description": "Build production-level NestJS applications to showcase professional expertise",
    "icon": "Briefcase",
    "gradient": "from-amber-500 to-orange-600",
    "content": {
      "whatToLearn": [
        "Production-level project architecture",
        "Industry best practices implementation",
        "Performance optimization techniques",
        "Security implementation at scale",
        "Documentation and API standards",
        "Team collaboration patterns",
        "Code review processes",
        "Open source contributions",
        "Technical writing and documentation",
        "Interview preparation strategies",
        "Portfolio presentation techniques",
        "Professional networking in tech",
        "Continuous learning strategies",
        "Industry trend awareness"
      ],
      "toolsToUse": [
        "Complete NestJS ecosystem",
        "Prisma ORM",
        "SWC/esbuild for faster builds",
        "Kong API Gateway",
        "Kafka/RabbitMQ",
        "PNPM package manager",
        "Nx monorepo tools",
        "GitHub for portfolio showcase"
      ],
      "bestCourses": {
        "english": [
          "Portfolio Development for Developers – Traversy Media",
          "Professional NestJS Development – Programming with Mosh",
          "Industry Best Practices – Academind",
          "Open Source Contribution – freeCodeCamp",
          "Interview Preparation – Net Ninja"
        ],
        "hindi": [
          "Professional Portfolio Hindi – WsCube Tech",
          "Industry Projects Hindi – CodeWithHarry",
          "Complete Professional Course – Thapa Technical",
          "Career Development – Love Babbar",
          "Professional Skills – Apna College"
        ]
      },
      "docsAndWebsites": [
        "Professional Development Resources",
        "Open Source Contribution Guide",
        "Technical Interview Preparation",
        "Portfolio Best Practices",
        "Industry Standards Documentation"
      ],
      "projectIdeas": [
        "E-commerce Platform API (REST + GraphQL, PostgreSQL/Prisma, JWT + OAuth2, Redis caching)",
        "Real-time Chat Application (WebSockets + Redis Pub/Sub, JWT authentication, Dockerized deployment)",
        "Microservices System (User, Order, Payment services, Kafka/RabbitMQ communication, API Gateway with Kong, Grafana monitoring)",
        "Job Portal API (Nx Monorepo, gRPC microservices, CI/CD pipeline with GitHub Actions, Kubernetes deployment)",
        "Learning Management System (Multi-tenant architecture, RBAC, File uploads with cloud storage, Real-time features)",
        "Social Media Platform Backend (Event-driven architecture, GraphQL API, Real-time notifications, Advanced caching)",
        "IoT Data Processing System (Event streaming with Kafka, Time-series database integration, Real-time analytics)",
        "Multi-tenant SaaS Backend (Clean architecture, CQRS pattern, Event sourcing, Advanced security)"
      ],
      "practicePlatforms": [
        "GitHub for portfolio showcase",
        "LinkedIn for professional networking",
        "Dev.to for technical writing",
        "Stack Overflow for community participation",
        "Open source projects contribution",
        "Hackathons and coding competitions",
        "Technical interview platforms",
        "Professional development communities"
      ]
    }
  }
]